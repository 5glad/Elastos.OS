
module
{
    namespace Elastos {
    namespace Core {
    namespace Reflect {

    [local]
    interface IInvocationHandler {
        /**
         * Handles the method which was originally invoked on the proxy instance. A
         * typical usage pattern follows below:
         *
         * <pre>
         * public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         *     //do some processing before the method invocation
         *
         *     //invoke the method
         *     Object result = method.invoke(proxy, args);
         *
         *     //do some processing after the method invocation
         *     return result;
         * }</pre>
         *
         * @param proxy
         *            the proxy instance on which the method was invoked
         * @param method
         *            the method invoked on the proxy instance
         * @param args
         *            an array of objects containing the parameters passed to the
         *            method, or {@code null} if no arguments are expected.
         *            Primitive types are boxed.
         *
         * @return the result of executing the method. Primitive types are boxed.
         *
         * @throws Throwable
         *             the exception to throw from the invoked method on the proxy.
         *             The exception must match one of the declared exception types
         *             of the invoked method or any unchecked exception type. If not
         *             then an {@code UndeclaredThrowableException} is thrown
         */
        // public Object invoke(Object proxy, Method method, Object[] args);
    }

    } // namespace Reflect
    } // namespace Core
    } // namespace Elastos
}
