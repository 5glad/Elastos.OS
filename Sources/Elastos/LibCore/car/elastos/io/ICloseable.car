module
{
    namespace Elastos {
    namespace IO {

    /**
     * An {AutoCloseable} whose close method may throw an IOException.
     *
     * @sa IOException
     */
    interface ICloseable {
        /**
         * Closes the object and release any system resources it holds. If the
         * object has already been closed, then invoking this method has no effect.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if any error occurs when closing the object.
         */
        Close();
    }

    /**
     * Defines an interface for classes that can (or need to) be closed once they
     * are not used any longer. Calling the {@code close} method releases resources
     * that the object holds.
     *
     * <p>A common pattern for using an {@code AutoCloseable} resource: <pre>   {@code
     *   Closable foo = new Foo();
     *   try {
     *      ...;
     *   } finally {
     *      foo.close();
     *   }
     * }</pre>
     *
     * @since 1.7
     */
    interface IAutoCloseable {
        /**
         * Closes the object and release any system resources it holds.
         */
        Close();
    }

    } // namespace IO
    } // namespace Elastos
}