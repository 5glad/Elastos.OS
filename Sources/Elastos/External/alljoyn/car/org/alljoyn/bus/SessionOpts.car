
module
{
    namespace Org {
    namespace Alljoyn {
    namespace Bus {

    interface ISessionOpts {
        /**
         * Use reliable message-based communication to move data between session endpoints.
         */
        const Byte TRAFFIC_MESSAGES = 0x01;

        /**
         * Use unreliable (e.g., UDP) socket-based communication to move data between
         * session endpoints.  RAW does not imply raw sockets (that bypass ALL
         * enapsulation possibly down to the MAC level), it implies raw in an AllJoyn
         * sense --MESSAGE encapsulation is not used, but for example UDP + IP + MAC
         * encapsulation is used.
         */
        const Byte TRAFFIC_RAW_UNRELIABLE = 0x02;

        /**
         * Use reliable (e.g., TCP) socket-based communication to move data between
         * session endpoints.  RAW does not imply raw sockets (that bypass ALL
         * enapsulation possibly down to the MAC level), it implies raw in an AllJoyn
         * sense --MESSAGE encapsulation is not used, but for example UDP + IP + MAC
         * encapsulation is used.
         */
        const Byte TRAFFIC_RAW_RELIABLE = 0x04;

        /**
         * Do not limit the spatial scope of sessions.  This means that sessions may
         * be joined by jointers located anywhere.
         */
        const Byte PROXIMITY_ANY = 0xff;

        /**
         * Limit the spatial scope of sessions to the local host.  Interpret as
         * "the same physical machine."  This means that sessions may be joined by
         * jointers located only on the same physical machine as the one hosting the
         * session.
         */
        const Byte PROXIMITY_PHYSICAL = 0x01;

        /**
         * Limit the spatial scope of sessions to anwhere on the local logical
         * network segment.  This means that sessions may be joined by jointers
         * located somewhere on the network.
         */
        const Byte PROXIMITY_NETWORK = 0x02;

        /**
         * Use no transport to communicate with a given session.
         */
        const Int16 TRANSPORT_NONE = 0x0000;

        /**
         * Use only the local transport to communicate with a given session.
         */
        const Int16 TRANSPORT_LOCAL = 0x0001;

        /**
         * Use the TCP Transport to communicate with a given session.
         */
        const Int16 TRANSPORT_TCP = 0x0004;

        /**
         * Use only the AllJoyn Reliable Datagram Protocol (flavor of reliable UDP)
         * to communicate with a given session.
         */
        const Int16 TRANSPORT_UDP = 0x0100;

        /**
         * A placeholder for an experimental transport that has not yet reached the
         * performance, stability or testing requirements of a commercialized
         * transport.
         *
         * It is expected that each experimental Transport will alias this bit if
         * included in an AllJoyn release and then allocate one of the reserved mask
         * bits upon attaining commercialized status.
         *
         * For example,
         *     public static final short TRANSPORT_CAN_AND_STRING = TRANSPORT_EXPERIMENTAL
         */
        const Int16 TRANSPORT_EXPERIMENTAL = 0x8000;

        /**
         * Use any available IP-based transport to communicate with a given session.
         *
         * Selecting the IP transport really implies letting the system decice which
         * transport is best.
         */
        const Int16 TRANSPORT_IP = TRANSPORT_TCP | TRANSPORT_UDP;

        /**
         * Use any available non-experimental transport to communicate with a given session.
         */
        const Int16 TRANSPORT_ANY = TRANSPORT_LOCAL | TRANSPORT_IP;

        /**
         * Use only a wireless local area network to communicate with a given session.
         * @deprecated
         */
        // @Deprecated
        const Int16 TRANSPORT_WLAN = 0x0004;

        /**
         * Use only a wireless wide area network to communicate with a given session.
         * @deprecated
         */
        // @Deprecated
        const Int16 TRANSPORT_WWAN = 0x0008;

        /**
         * Use only a wired local area network to communicate with a given session.
         * @deprecated
         */
        // @Deprecated
        const Int16 TRANSPORT_LAN = 0x0010;

        /**
         * Use only the Wi-Fi Direct transport to communicate with a given session.
         * @deprecated
         */
        // @Deprecated
        const Int16 TRANSPORT_WFD = 0x0080;

        GetTraffic(
            [out] Byte* traffic);

        SetTraffic(
            [in] Byte traffic);

        IsMultipoint(
            [out] Boolean* isMultipoint);

        SetMultipoint(
            [in] Boolean multipoint);

        GetProximity(
            [out] Byte* proximity);

        SetProximity(
            [in] Byte proximity);

        GetTransports(
            [out] Int16* transports);

        SetTransports(
            [in] Int16 transports);
    }

    } // namespace Bus
    } // namespace Alljoyn
    } // namespace Org
}
