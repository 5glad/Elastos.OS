//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Core.IInteger32;

    namespace Org {
    namespace Alljoyn {
    namespace Bus {

    interface ICredentials {
        GetPassword(
            [out, callee] ArrayOf<Byte>* password);

        GetUserName(
            [out] String* userName);

        GetCertificateChain(
            [out] String* certificateChain);

        GetPrivateKey(
            [out] String* privateKey);

        GetLogonEntry(
            [out, callee] ArrayOf<Byte>* logonEntry);

        GetExpiration(
            [out] IInteger32** expiration);
    }

    interface IAuthRequest {
    }

    /** Authentication request for a password, pincode, or passphrase. */
    /*
     * @Involve
     * interface IAuthRequest
     */
    [deprecated]
    interface IPasswordRequest {
        /**
         * Indicates request is for a newly created password.
         *
         * @return {@code true} if request is for a newly created password
         */
        IsNewPassword(
            [out] Boolean* res);

        /**
         * Indicates a request is for a one time use password.
         *
         * @return {@code true} if request is for a one time use password
         */
        IsOneTimePassword(
            [out] Boolean* res);

        /**
         * Sets a requested password, pincode, or passphrase.
         *
         * @param password the password to set
         */
        SetPassword(
            [in] ArrayOf<Char32>* password);
    }

    /** Authentication request for a user name. */
    /*
     * @Involve
     * interface IAuthRequest
     */
    interface IUserNameRequest {
        /**
         * Sets a requested user name.
         *
         * @param userName the user name to set
         */
        SetUserName(
            [in] String userName);
    }

    /** Authentication request for a chain of PEM-encoded X509 certificates. */
    /*
     * @Involve
     * interface IAuthRequest
     */
    interface ICertificateRequest {
        /**
         * Sets a requested public key certificate chain. The certificate must
         * be PEM encoded.
         *
         * @param certificateChain the certificate to chain to set
         */
        SetCertificateChain(
            [in] String certificateChain);
    }

    /** Authentication request for a PEM encoded private key. */
    /*
     * @Involve
     * interface IAuthRequest
     */
    interface IPrivateKeyRequest {
        /**
         * Sets a requested private key. The private key must be PEM encoded and
         * may be encrypted.
         *
         * @param privateKey the private key to set
         */
        SetPrivateKey(
            [in] String privateKey);
    }

    /** Authentication request for a logon entry. */
    /*
     * @Involve
     * interface IAuthRequest
     */
    [deprecated]
    interface ILogonEntryRequest {
        /**
         * Sets a logon entry. For example for the Secure Remote
         * Password protocol in RFC 5054, a logon entry encodes the
         * N,g, s and v parameters. An SRP logon entry has the form
         * N:g:s:v where N,g,s, and v are ASCII encoded hexadecimal
         * strings and are seperated by colons.
         *
         * @param logonEntry the logon entry to set
         */
        SetLogonEntry(
            [in] ArrayOf<Char32>* logonEntry);
    }

    /** Authentication request to set an expiration time for the credentials. */
    /*
     * @Involve
     * interface IAuthRequest
     */
    interface IExpirationRequest {
        /**
         * Sets an expiration time in seconds relative to the current time for
         * the credentials. This value is optional and can be set on any
         * response to a credentials request. After the specified expiration
         * time has elapsed any secret keys based on the provided credentials
         * are invalidated and a new authentication exchange will be
         * required. If an expiration is not set the default expiration time for
         * the requested authentication mechanism is used.
         *
         * @param expiration the expiration time in seconds
         */
        SetExpiration(
            [in] Int32 expiration);
    }

    /**
     * Authentication request for verification of a certificate chain from a
     * remote peer.
     */
    /*
     * @Involve
     * interface IAuthRequest
     */
    interface IVerifyRequest {
        /**
         * Gets the PEM encoded X509 certificate chain to verify.
         *
         * @return an X509 certificate chain
         */
        GetCertificateChain(
            [out] String* chain);
    }

    [deprecated]
    interface IAuthListener {
        /**
         * Called by an authentication mechanism making authentication requests.
         * A count allows the listener to decide whether to allow or reject mutiple
         * authentication attempts to the same peer.
         *
         * Any implementation of this function must be multithread safe.  See the
         * class documentation for details.
         *
         * @param mechanism the name of the authentication mechanism issuing the
         *                  request
         * @param peerName  the name of the remote peer being authenticated.  On the
         *                  initiating side this will be a well-known-name for the
         *                  remote peer. On the accepting side this will be the
         *                  unique bus name for the remote peer.
         * @param count the count (starting at 1) of the number of authentication
         *              request attempts made
         * @param userName the user name for the credentials being requested.  If
         *               this is not the empty string the request is specific to the
         *               named user.
         * @param requests the requests.  The application may handle none, some, or
         *                 all of the requests.
         *
         * @return {@code true} if the request is accepted or {@code false} if the request is
         *         rejected.  If the request is rejected the authentication is
         *         complete.
         */
        Requested(
            [in] String mechanism,
            [in] String peerName,
            [in] Int32 count,
            [in] String userName,
            [in] ArrayOf<IAuthRequest*>* requests,
            [out] Boolean* result);

        /**
         * Called by the authentication engine when all authentication attempts are
         * completed.
         *
         * Any implementation of this function must be multithread safe.  See the
         * class documentation for details.
         *
         * @param mechanism the name of the authentication mechanism that was used
         *                  or an empty string if the authentication failed
         * @param peerName  the name of the remote peer being authenticated.  On the
         *                  initiating side this will be a well-known-name for the
         *                  remote peer. On the accepting side this will be the
         *                  unique bus name for the remote peer.
         * @param authenticated {@code true} if the authentication succeeded
         */
        Completed(
            [in] String mechanism,
            [in] String peerName,
            [in] Boolean authenticated);
    }

    } // namespace Bus
    } // namespace Alljoyn
    } // namespace Org
}
