//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Org.Alljoyn.Bus.ISessionOpts;

    namespace Org {
    namespace Alljoyn {
    namespace Bus {

    interface ISessionPortListener {
        /**
         * Accept or reject an incoming JoinSession request. The session does not
         * exist until this after this function returns.
         *
         * Any implementation of this function must be multithread safe.  See the
         * class documentation for details.
         *
         * @param sessionPort    Session port that was joined.
         * @param joiner         Unique name of potential joiner.
         * @param opts           Session options requested by the joiner.
         *
         * @return Return true if JoinSession request is accepted. false if rejected.
         */
        AcceptSessionJoiner(
            [in] Int16 sessionPort,
            [in] String joiner,
            [in] ISessionOpts* opts,
            [out] Boolean* accepted);

        /**
         * Called by the bus when a session has been successfully joined. The
         * session is fully up when this method is called.
         *
         * Any implementation of this function must be multithread safe.  See the
         * class documentation for details.
         *
         * @param sessionPort    Session port that was joined.
         * @param id             Id of session.
         * @param joiner         Unique name of the joiner.
         */
        SessionJoined(
            [in] Int16 sessionPort,
            [in] Int32 id,
            [in] String joiner);
    }

    } // namespace Bus
    } // namespace Alljoyn
    } // namespace Org
}
