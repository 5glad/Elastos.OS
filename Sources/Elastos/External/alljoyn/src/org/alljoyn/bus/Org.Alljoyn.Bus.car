
module
{
    importlib("Elastos.Droid.Core.eco");

    merge("../../../../car/org/alljoyn/bus/Exception.car");
    merge("../../../../car/org/alljoyn/bus/AboutDataListener.car");
    merge("../../../../car/org/alljoyn/bus/AboutListener.car");
    merge("../../../../car/org/alljoyn/bus/AboutObj.car");
    merge("../../../../car/org/alljoyn/bus/AboutObjectDescription.car");
    merge("../../../../car/org/alljoyn/bus/AuthListener.car");
    merge("../../../../car/org/alljoyn/bus/BusAttachment.car");
    merge("../../../../car/org/alljoyn/bus/BusListener.car");
    merge("../../../../car/org/alljoyn/bus/BusObject.car");
    merge("../../../../car/org/alljoyn/bus/BusObjectListener.car");
    merge("../../../../car/org/alljoyn/bus/InterfaceDescription.car");
    merge("../../../../car/org/alljoyn/bus/IntrospectionListener.car");
    merge("../../../../car/org/alljoyn/bus/IntrospectionWithDescriptionListener.car");
    merge("../../../../car/org/alljoyn/bus/KeyStoreListener.car");
    merge("../../../../car/org/alljoyn/bus/MessageContext.car");
    merge("../../../../car/org/alljoyn/bus/Mutable.car");
    merge("../../../../car/org/alljoyn/bus/Observer.car");
    merge("../../../../car/org/alljoyn/bus/OnJoinSessionListener.car");
    merge("../../../../car/org/alljoyn/bus/OnPingListener.car");
    merge("../../../../car/org/alljoyn/bus/PropertyChangedEmitter.car");
    merge("../../../../car/org/alljoyn/bus/ProxyBusObject.car");
    merge("../../../../car/org/alljoyn/bus/SignalEmitter.car");
    merge("../../../../car/org/alljoyn/bus/SecurityViolationListener.car");
    merge("../../../../car/org/alljoyn/bus/SessionListener.car");
    merge("../../../../car/org/alljoyn/bus/SessionOpts.car");
    merge("../../../../car/org/alljoyn/bus/SessionPortListener.car");
    merge("../../../../car/org/alljoyn/bus/Translator.car");
    merge("../../../../car/org/alljoyn/bus/Version.car");
    merge("../../../../car/org/alljoyn/bus/Variant.car");
    merge("../../../../car/org/alljoyn/bus/VariantTypeReference.car");
    merge("../../../../car/org/alljoyn/bus/alljoyn/DaemonInit.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/About.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/AllSeenIntrospectable.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/DBusProxyObj.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Icon.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Introspectable.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Peer.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Properties.car");

    namespace Org {
    namespace Alljoyn {
    namespace Bus {
    namespace Alljoyn {

    singleton class CDaemonInit {
        interface IDaemonInit;
    }

    } // namespace Alljoyn

    class CBusAttachment {
        /**
         * Constructs a BusAttachment.
         *
         * @param applicationName the name of the application
         * @param policy if this attachment is allowed to receive messages from
         *               remote devices
         * @param concurrency The maximum number of concurrent method and signal
         *                    handlers locally executing.
         */
        constructor(
            [in] String applicationName,
            [in] RemoteMessage policy,
            [in] Int32 concurrency);

        /**
         * Constructs a BusAttachment.
         *
         * @param applicationName the name of the application
         * @param policy if this attachment is allowed to receive messages
         *               from remote devices
         */
        constructor(
            [in] String applicationName,
            [in] RemoteMessage policy);

        /**
         * Construct a BusAttachment that will only communicate on the local device.
         *
         * @param applicationName the name of the application
         */
        constructor(
            [in] String applicationName);

        interface IBusAttachment;
    }

    class CBusListener {
        constructor();

        interface IBusListener;
    }

    class CSessionOpts {
        constructor();

        constructor(
            [in] Byte traffic,
            [in] Boolean isMultipoint,
            [in] Byte proximity,
            [in] Int16 transports);

        interface ISessionOpts;
    }

    class CMutableInteger16Value {
        constructor();

        constructor(
            [in] Int16 v);

        interface IMutableInteger16Value;
    }

    class CMutableInteger32Value {
        constructor();

        constructor(
            [in] Int32 v);

        interface IMutableInteger32Value;
    }

    class CVariant {
        constructor();

        constructor(
            [in] IInterface* value);

        constructor(
            [in] IInterface* value,
            [in] String signature);

        interface IVariant;
    }

    class CSignalEmitter {
        constructor(
            [in] IBusObject* source,
            [in] String destination,
            [in] Int32 sessionId,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source,
            [in] Int32 sessionId,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source);

        interface ISignalEmitter;
    }

    } // namespace Bus
    } // namespace Alljoyn
    } // namespace Org
}
