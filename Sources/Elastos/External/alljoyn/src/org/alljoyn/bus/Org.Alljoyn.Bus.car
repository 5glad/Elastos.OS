//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.Droid.Core.eco");

    merge("../../../../car/org/alljoyn/bus/Exception.car");
    merge("../../../../car/org/alljoyn/bus/AboutData.car");
    merge("../../../../car/org/alljoyn/bus/AboutDataListener.car");
    merge("../../../../car/org/alljoyn/bus/AboutIcon.car");
    merge("../../../../car/org/alljoyn/bus/AboutIconObj.car");
    merge("../../../../car/org/alljoyn/bus/AboutIconProxy.car");
    merge("../../../../car/org/alljoyn/bus/AboutKeys.car");
    merge("../../../../car/org/alljoyn/bus/AboutListener.car");
    merge("../../../../car/org/alljoyn/bus/AboutObj.car");
    merge("../../../../car/org/alljoyn/bus/AboutObjectDescription.car");
    merge("../../../../car/org/alljoyn/bus/AboutProxy.car");
    merge("../../../../car/org/alljoyn/bus/AuthListener.car");
    merge("../../../../car/org/alljoyn/bus/BusAttachment.car");
    merge("../../../../car/org/alljoyn/bus/BusListener.car");
    merge("../../../../car/org/alljoyn/bus/BusObject.car");
    merge("../../../../car/org/alljoyn/bus/BusObjectListener.car");
    merge("../../../../car/org/alljoyn/bus/InterfaceDescription.car");
    merge("../../../../car/org/alljoyn/bus/IntrospectionListener.car");
    merge("../../../../car/org/alljoyn/bus/IntrospectionWithDescriptionListener.car");
    merge("../../../../car/org/alljoyn/bus/KeyStoreListener.car");
    merge("../../../../car/org/alljoyn/bus/MessageContext.car");
    merge("../../../../car/org/alljoyn/bus/Mutable.car");
    merge("../../../../car/org/alljoyn/bus/Observer.car");
    merge("../../../../car/org/alljoyn/bus/OnJoinSessionListener.car");
    merge("../../../../car/org/alljoyn/bus/OnPingListener.car");
    merge("../../../../car/org/alljoyn/bus/PropertiesChangedListener.car");
    merge("../../../../car/org/alljoyn/bus/PropertyChangedEmitter.car");
    merge("../../../../car/org/alljoyn/bus/ProxyBusObject.car");
    merge("../../../../car/org/alljoyn/bus/SignalEmitter.car");
    merge("../../../../car/org/alljoyn/bus/SecurityViolationListener.car");
    merge("../../../../car/org/alljoyn/bus/SessionListener.car");
    merge("../../../../car/org/alljoyn/bus/SessionOpts.car");
    merge("../../../../car/org/alljoyn/bus/SessionPortListener.car");
    merge("../../../../car/org/alljoyn/bus/Translator.car");
    merge("../../../../car/org/alljoyn/bus/Version.car");
    merge("../../../../car/org/alljoyn/bus/Variant.car");
    merge("../../../../car/org/alljoyn/bus/VariantTypeReference.car");
    merge("../../../../car/org/alljoyn/bus/alljoyn/DaemonInit.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/About.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/AllSeenIntrospectable.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/DBusProxyObj.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Icon.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Introspectable.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Peer.car");
    merge("../../../../car/org/alljoyn/bus/ifaces/Properties.car");

    interface Org.Alljoyn.Bus.Ifaces.IIcon;
    using interface Elastos.IO.ICloseable;

    namespace Org {
    namespace Alljoyn {
    namespace Bus {
    namespace Alljoyn {

    singleton class CDaemonInit {
        interface IDaemonInit;
    }

    } // namespace Alljoyn

    class CAboutData {
        /**
         * Create an AboutData class. The default language will will not be set.
         * Use the constructor that takes a default language tag; or set the
         * language using the SetDefaultLanguage member function, CreateFromMsgArg
         * member function or the CreateFromXml member function.
         *
         * The default language should be specified before any tag that requires
         * localization. These tags are.
         *  - DeviceName
         *  - AppName
         *  - Manufacturer
         *  - Description
         * @throws BusException
         */
        constructor();

        /**
         * constructor
         *
         * @param defaultLanguage a Locale containing a IETF language tag specified
         *                        by RFC 5646 specifying the default language for the
         *                        AboutData fields
         * @throws BusException
         */
        constructor(
            [in] String defaultLanguage);

        /**
         * constructor
         *
         * All Localized tags will be set to the default language.
         *
         * @param aboutData Map containing the AboutData dictionary
         *
         * @throws BusException
         */
        constructor(
            [in] IMap* aboutData);

        /**
         * constructor
         *
         * @param aboutData Map containing the AboutData dictionary
         * @param language a Locale containing a IETF language tag specified by RFC 5646
         *
         * @throws BusException
         */

        constructor(
            [in] IMap* aboutData,
            [in] String language);

        interface IAboutData;
        interface IAboutDataListener;
        interface IAboutKeys;
    }

    [deprecated]
    class CAboutIcon {
        /**
         * Set the content for an icon.  The content must fit into a MsgArg so the
         * largest size for the icon data is MAX_CONTENT_LENGTH bytes.
         *
         * Note as long as the MIME type matches it is possible to set both icon content
         * and icon URL
         *
         * If an error is returned the icon content will remain unchanged.
         *
         * @param mimeType a MIME type indicating the icon image type. Typical
         *                     value will be `image/jpeg` or `image/png`
         * @param content  an array of bytes that represent an icon
         *
         * @throws BusException if unable to create AboutIcon
         * <ul>
         *   <li>"MAX_CONTENT_LENGTH exceeded" if icon is too large</li>
         * </ul>
         */
        constructor(
            [in] String mimeType,
            [in] ArrayOf<Byte>* content);

        /**
         * Set a URL that contains the icon for the application.
         *
         * @param mimeType a MIME type indicating the icon image type. Typical
         *                     value will be `image/jpeg` or `image/png`
         * @param url      A URL that contains the location of the icon hosted in
         *                     the cloud.
         *
         * @throws BusException if unable to create AboutIcon
         */
        constructor(
            [in] String mimeType,
            [in] String url);

        /**
         * Set the URL and content for an icon.  The content must fit into a MsgArg so the
         * largest size for the icon data is MAX_CONTENT_LENGTH bytes.
         *
         * Note the MIME type for the content and the URL must match
         *
         * If an error is returned the icon content will remain unchanged.
         *
         * @param mimeType a MIME type indicating the icon image type. Typical
         *                     value will be `image/jpeg` or `image/png`
         * @param url      A URL that contains the location of the icon hosted in
         *                 the cloud.
         * @param content  an array of bytes that represent an icon
         *
         * @throws BusException if unable to create AboutIcon
         * <ul>
         *   <li>"MAX_CONTENT_LENGTH exceeded" if icon is too large</li>
         * </ul>
         */
        constructor(
            [in] String mimeType,
            [in] String url,
            [in] ArrayOf<Byte>* content);

        interface IAboutIcon;
    }

    [local]
    class CAboutIconObj {
        /**
         * Create an About Icon BusObject
         *
         * @param bus BusAttachment instance associated with this BusObject
         * @param icon instance of an AboutIcon which holds the icon image
         */
        constructor(
            [in] IBusAttachment* bus,
            [in] IAboutIcon* icon);

        interface IAboutIconObj;
        interface IIcon;
        interface IBusObject;
    }

    [local]
    class CAboutIconProxy {
        /**
         * AboutProxy constructor
         *
         * @param bus the BusAttachment that owns this ProxyBusObject
         * @param busName the unique or well-known name of the remote AllJoyn BusAttachment
         * @param sessionId the session ID this ProxyBusObject will use
         */
        constructor(
            [in] IBusAttachment* bus,
            [in] String busName,
            [in] Int32 sessionId);

        interface IAboutIconProxy;
        interface IIcon;
    }

    [local]
    class CAboutProxy {
        /**
         * AboutProxy constructor
         *
         * @param bus the BusAttachment that owns this ProxyBusObject
         * @param busName the unique or well-known name of the remote AllJoyn BusAttachment
         * @param sessionId the session ID this ProxyBusObject will use
         */
        constructor(
            [in] IBusAttachment* bus,
            [in] String busName,
            [in] Int32 sessionId);

        interface IAboutProxy;
    }

    class CBusAttachment {
        /**
         * Constructs a BusAttachment.
         *
         * @param applicationName the name of the application
         * @param policy if this attachment is allowed to receive messages from
         *               remote devices
         * @param concurrency The maximum number of concurrent method and signal
         *                    handlers locally executing.
         */
        constructor(
            [in] String applicationName,
            [in] RemoteMessage policy,
            [in] Int32 concurrency);

        /**
         * Constructs a BusAttachment.
         *
         * @param applicationName the name of the application
         * @param policy if this attachment is allowed to receive messages
         *               from remote devices
         */
        constructor(
            [in] String applicationName,
            [in] RemoteMessage policy);

        /**
         * Construct a BusAttachment that will only communicate on the local device.
         *
         * @param applicationName the name of the application
         */
        constructor(
            [in] String applicationName);

        interface IBusAttachment;
    }

    class CBusListener {
        constructor();

        interface IBusListener;
    }

    class CSessionOpts {
        constructor();

        constructor(
            [in] Byte traffic,
            [in] Boolean isMultipoint,
            [in] Byte proximity,
            [in] Int16 transports);

        interface ISessionOpts;
    }

    class CMutableInteger16Value {
        constructor();

        constructor(
            [in] Int16 v);

        interface IMutableInteger16Value;
    }

    class CMutableInteger32Value {
        constructor();

        constructor(
            [in] Int32 v);

        interface IMutableInteger32Value;
    }

    class CVariant {
        constructor();

        constructor(
            [in] IInterface* value);

        constructor(
            [in] IInterface* value,
            [in] String signature);

        interface IVariant;
    }

    class CSignalEmitter {
        constructor(
            [in] IBusObject* source,
            [in] String destination,
            [in] Int32 sessionId,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source,
            [in] Int32 sessionId,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source);

        interface ISignalEmitter;
    }

    class CPropertyChangedEmitter {
        constructor(
            [in] IBusObject* source,
            [in] Int32 sessionId,
            [in] GlobalBroadcast globalBroadcast);

        constructor(
            [in] IBusObject* source,
            [in] Int32 sessionId);

        constructor(
            [in] IBusObject* source);

        interface IPropertyChangedEmitter;
        interface ISignalEmitter;
    }

    [local, deprecated]
    class CObserver {
        constructor(
            [in] IBusAttachment* bus,
            [in] ArrayOf<IInterfaceInfo*>* mandatoryInterfaces,
            [in] ArrayOf<IInterfaceInfo*>* optionalInterfaces);

        constructor(
            [in] IBusAttachment* bus,
            [in] ArrayOf<IInterfaceInfo*>* mandatoryInterfaces);

        interface IObserver;
        interface ICloseable;
    }

    [local]
    class CAboutObj {
        constructor(
            [in] IBusAttachment* bus);

        constructor(
            [in] IBusAttachment* bus,
            [in] Boolean isAboutObjectAnnounced);

        interface IAboutObj;
    }

    } // namespace Bus
    } // namespace Alljoyn
    } // namespace Org
}
