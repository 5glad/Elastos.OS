//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IFile;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Providers {
    namespace Downloads {

    /**
     * Utility methods for managing storage space related to
     * {@link DownloadManager}.
     */
    [local]
    interface IStorageUtils
    {
        /**
         * Ensure that requested free space exists on the partition backing the
         * given {@link FileDescriptor}. If not enough space is available, it tries
         * freeing up space as follows:
         * <ul>
         * <li>If backed by the data partition (including emulated external
         * storage), then ask {@link PackageManager} to free space from cache
         * directories.
         * <li>If backed by the cache partition, then try deleting older downloads
         * to free space.
         * </ul>
         */
        EnsureAvailableSpace(
            [in] IContext* ctx,
            [in] IFileDescriptor* fd,
            [in] Int64 bytes);

        /**
         * Return list of all normal files under the given directory, traversing
         * directories recursively.
         *
         * @param exclude ignore dirs with this name, or {@code null} to ignore.
         * @param uid only return files owned by this UID, or {@code -1} to ignore.
         */
        ListFilesRecursive(
            [in] IFile* startDir,
            [in] String exclude,
            [in] Int32 uid,
            [out] IList** result);
    }

    } // namespace Downloads
    } // namespace Providers
    } // namespace Droid
    } // namespace Elastos
}
