//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.CoreLibrary.eco");
    importlib("Elastos.Droid.Core.eco");

    merge("car/elastos/droid/server/telecom/AccountSelection.car");
    merge("car/elastos/droid/server/telecom/AsyncResultCallback.car");
    merge("car/elastos/droid/server/telecom/BluetoothPhoneService.car");
    merge("car/elastos/droid/server/telecom/Call.car");
    merge("car/elastos/droid/server/telecom/CallActivity.car");
    merge("car/elastos/droid/server/telecom/CallIdMapper.car");
    merge("car/elastos/droid/server/telecom/CallReceiver.car");
    merge("car/elastos/droid/server/telecom/CallsManager.car");
    merge("car/elastos/droid/server/telecom/ContactsAsyncHelper.car");
    merge("car/elastos/droid/server/telecom/ConnectionServiceWrapper.car");
    merge("car/elastos/droid/server/telecom/CreateConnectionResponse.car");
    merge("car/elastos/droid/server/telecom/CreateConnectionProcessor.car");
    merge("car/elastos/droid/server/telecom/ErrorDialogActivity.car");
    merge("car/elastos/droid/server/telecom/NewOutgoingCallIntentBroadcaster.car");
    merge("car/elastos/droid/server/telecom/PhoneAccountBroadcastReceiver.car");
    merge("car/elastos/droid/server/telecom/RespondViaSmsSettings.car");
    merge("car/elastos/droid/server/telecom/ServiceBinder.car");
    merge("car/elastos/droid/server/telecom/TelecomBroadcastReceiver.car");
    merge("car/elastos/droid/server/telecom/TelecomServiceImpl.car");
    merge("car/elastos/droid/server/telecom/TtyManager.car");
    merge("car/elastos/droid/server/telecom/WiredHeadsetManager.car");

    using interface Elastos.Droid.App.IActivity;
    using interface Elastos.Droid.App.IApplication;
    using interface Elastos.Droid.App.IListActivity;
    using interface Elastos.Droid.App.IService;
    using interface Elastos.Droid.Bluetooth.IIBluetoothHeadsetPhone;
    using interface Elastos.Droid.Content.IBroadcastReceiver;
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Content.IContextWrapper;
    using interface Elastos.Droid.Content.IComponentCallbacks;
    using interface Elastos.Droid.Content.IComponentCallbacks2;
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Content.IContextWrapper;
    using interface Elastos.Droid.Os.IBinder;
    using interface Elastos.Droid.Preference.IPreferenceActivity;
    using interface Elastos.Droid.Preference.IPreferenceFragmentOnPreferenceStartFragmentCallback;
    using interface Elastos.Droid.Internal.Telecom.IIConnectionServiceAdapter;
    using interface Elastos.Droid.Internal.Telecom.IITelecomService;
    using interface Elastos.Droid.Internal.Telecom.IIInCallAdapter;
    using interface Elastos.Droid.View.IContextThemeWrapper;
    using interface Elastos.Droid.View.ILayoutInflaterFactory;
    using interface Elastos.Droid.View.ILayoutInflaterFactory2;
    using interface Elastos.Droid.View.IWindowCallback;
    using interface Elastos.Droid.View.IKeyEventCallback;
    using interface Elastos.Droid.View.IViewOnCreateContextMenuListener;
    using interface Elastos.Droid.View.IOnWindowDismissedCallback;

    interface Elastos.Droid.Server.Telecom.IConnectionServiceWrapper;

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Telecom {

    class CTelecomApp {
        constructor();

        interface IApplication;
    }

    class CAccountSelection {
        constructor();

        interface IContext;
        interface IContextWrapper;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
        interface IActivity;
        interface IAccountSelection;
    }

    class CBluetoothPhoneService {
        constructor();

        interface IContext;
        interface IContextWrapper;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IService;
        interface IBluetoothPhoneService;
    }

    class CBluetoothPhoneServiceSubIBluetoothHeadsetPhone {
        constructor(
            [in] IInterface* host);

        interface IBinder;
        interface IIBluetoothHeadsetPhone;
    }

    class CCallActivity {
        constructor();

        interface IContext;
        interface IContextWrapper;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
        interface IActivity;
        interface ICallActivity;
    }

    class CCallReceiver {
        constructor();

        interface IBroadcastReceiver;
        interface ICallReceiver;
    }

    class CConnectionServiceWrapperAdapter {
        constructor(
            [in] IInterface* host);

        interface IIConnectionServiceAdapter;
        interface IBinder;
    }

    class CErrorDialogActivity {
        constructor();

        interface IContext;
        interface IContextWrapper;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
        interface IActivity;
        interface IErrorDialogActivity;
    }

    class CNewOutgoingCallIntentBroadcasterNewOutgoingCallBroadcastIntentReceiver {
        constructor(
            [in] IInterface* host);

        interface IBroadcastReceiver;
        interface INewOutgoingCallIntentBroadcasterNewOutgoingCallBroadcastIntentReceiver;
    }

    class CPhoneAccountBroadcastReceiver {
        constructor();

        interface IBroadcastReceiver;
        interface IPhoneAccountBroadcastReceiver;
    }

    class CRespondViaSmsSettingsSettings {
        constructor();

        interface IContext;
        interface IContextWrapper;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
        interface IActivity;
        interface IListActivity;
        interface IPreferenceActivity;
        interface IPreferenceFragmentOnPreferenceStartFragmentCallback;
        interface IRespondViaSmsSettingsSettings;
    }

    class CTelecomBroadcastReceiver {
        constructor();

        interface IBroadcastReceiver;
        interface ITelecomBroadcastReceiver;
    }

    class CTtyManagerTtyBroadcastReceiver {
        constructor(
            [in] IInterface* host);

        interface IBroadcastReceiver;
        interface ITtyManagerTtyBroadcastReceiver;
    }

    class CWiredHeadsetManagerWiredHeadsetBroadcastReceiver {
        constructor(
            [in] IInterface* host);

        interface IBroadcastReceiver;
        interface IWiredHeadsetManagerWiredHeadsetBroadcastReceiver;
    }

    class CInCallAdapter {
        constructor(
            [in] IInterface* callsManager,
            [in] ICallIdMapper* callIdMapper);

        interface IIInCallAdapter;
        interface IBinder;
    }

    [local]
    class CTelecomServiceImpl {
        constructor(
            [in] IInterface* missedCallNotifier,
            [in] IInterface* phoneAccountRegistrar,
            [in] IInterface* callsManager,
            [in] IContext* context);

        interface IITelecomService;
        interface IBinder;
    }

    } // namespace Telecom
    } // namespace Server
    } // namespace Droid
    } // namespace Elastos
}
