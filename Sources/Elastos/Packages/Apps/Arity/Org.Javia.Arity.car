//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.Droid.Core.eco");

    merge("car/org/javia/arity/Function.car");
    merge("car/org/javia/arity/ContextFunction.car");
    merge("car/org/javia/arity/CompiledFunction.car");
    merge("car/org/javia/arity/Complex.car");
    merge("car/org/javia/arity/Symbols.car");
    merge("car/org/javia/arity/Symbol.car");
    merge("car/org/javia/arity/FunctionAndName.car");
    merge("car/org/javia/arity/Constant.car");
    merge("car/org/javia/arity/EvalContext.car");
    merge("car/org/javia/arity/Derivative.car");
    merge("car/org/javia/arity/Exceptions.car");

    interface Org.Javia.Arity.IFunction;
    interface Org.Javia.Arity.IContextFunction;
    interface Org.Javia.Arity.ICompiledFunction;
    interface Org.Javia.Arity.IComplex;
    interface Org.Javia.Arity.ISymbols;
    interface Org.Javia.Arity.ISymbol;
    interface Org.Javia.Arity.IFunctionAndName;
    interface Org.Javia.Arity.IConstant;
    interface Org.Javia.Arity.IEvalContext;
    interface Org.Javia.Arity.IDerivative;

    namespace Org {
    namespace Javia {
    namespace Arity {

    [deprecated]
    class CCompiledFunction {
        constructor(
            [in] Int32 arity,
            [in] ArrayOf<Byte>* code,
            [in] ArrayOf<Double>* constsRe,
            [in] ArrayOf<Double>* constsIm,
            [in] ArrayOf<IFunction*>* funcs);

        interface ICompiledFunction;
        interface IContextFunction;
        interface IFunction;
    }

    class CComplex {
        /** Empty constructor, complex value 0. */
        constructor();

        /** Constructor taking the real and imaginary components. */
        constructor(
            [in] Double re,
            [in] Double im);

        /** Copy constructor. */
        constructor(
            [in] IComplex* o);

        interface IComplex;
    }

    class CSymbols {
        /**
           Constructs a Symbols containing the built-in symbols (such as sin, log).
        */
        constructor();

        interface ISymbols;
    }

    class CFunctionAndName {
        constructor(
            [in] IFunction* fun,
            [in] String name);

        interface IFunctionAndName;
    }

    class CConstant {
        constructor(
            [in] IComplex* o);

        interface IConstant;
        interface IFunction;
    }

    class CEvalContext {
        constructor();

        interface IEvalContext;
    }

    class CDerivative {
        constructor(
            [in] IFunction* f);

        interface IDerivative;
        interface IFunction;
    }

    } // namespace Arity
    } // namespace Javia
    } // namespace Org

}