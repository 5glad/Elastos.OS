module
{

    namespace Elastos{
    namespace Apps {
    namespace Contacts {
    namespace Common {
    namespace Util {

    interface IContactDisplayUtils {
        const Int32 INTERACTION_CALL = 1;
        const Int32 INTERACTION_SMS = 2;

        /**
         * Checks if the given data type is a custom type.
         *
         * @param type Phone data type.
         * @return {@literal true} if the type is custom.  {@literal false} if not.
         */
        IsCustomPhoneType(
            [in] IInteger32* type,
            [out] Boolean* result);

        /**
         * Gets a display label for a given phone type.
         *
         * @param type The type of number.
         * @param customLabel A custom label to use if the phone is determined to be of custom type
         * determined by {@link #isCustomPhoneType(Integer))}
         * @param interactionType whether this is a call or sms.  Either {@link #INTERACTION_CALL} or
         * {@link #INTERACTION_SMS}.
         * @param context The application context.
         * @return An appropriate string label
         */
        GetLabelForCallOrSms(
            [in] IInteger32* type,
            [in] ICharSequence* customLabel,
            [in] Int32 interactionType,
            [in] IContext* context,
            [out] ICharSequence** result);

        /**
         * Find a label for calling.
         *
         * @param type The type of number.
         * @return An appropriate string label.
         */
        GetPhoneLabelResourceId(
            [in] IInteger32* type,
            [out] Int32* id);

        /**
         * Find a label for sending an sms.
         *
         * @param type The type of number.
         * @return An appropriate string label.
         */
        GetSmsLabelResourceId(
            [in] IInteger32* type,
            [out] Int32* id);
    }

    } // Util
    } // Common
    } // Contacts
    } // Apps
    } // Elastos

}
