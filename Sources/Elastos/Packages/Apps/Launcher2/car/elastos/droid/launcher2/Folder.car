module
{
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Graphics.IPointF;
    using interface Elastos.Droid.Graphics.Drawable.IDrawable;
    using interface Elastos.Droid.View.IView;
    using interface Elastos.Droid.View.IKeyEvent;
    using interface Elastos.Droid.Widget.ITextView;
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IArrayList;

    interface Elastos.Droid.Launcher2.IDragController;
    interface Elastos.Droid.Launcher2.IFolderIcon;
    interface Elastos.Droid.Launcher2.IFolderInfo;
    interface Elastos.Droid.Launcher2.IDropTargetDragObject;
    interface Elastos.Droid.Launcher2.IDropTarget;
    interface Elastos.Droid.Launcher2.IShortcutInfo;

    namespace Elastos {
    namespace Droid {
    namespace Launcher2 {

    /**
     * Represents a set of icons chosen by the user or generated by the system.
     *
     * @Involve
     * extends Elastos.Droid.View.IView
     * extends Elastos.Droid.View.IViewGroup
     *
     * interface Elastos.Droid.View.IViewParent
     * interface Elastos.Droid.View.IViewManager
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     * interface ILinearLayout
     *
     * interface IDragSource
     * interface IDropTarget
     */
    [deprecated, local]
    interface IFolder {
        const Int32 STATE_NONE = -1;
        const Int32 STATE_SMALL = 0;
        const Int32 STATE_ANIMATING = 1;
        const Int32 STATE_OPEN = 2;

        OnClick(
            [in] IView* v);

        OnLongClick(
            [in] IView* v,
            [out] Boolean* result);

        IsEditingName(
            [out] Boolean* result);

        StartEditingFolderName();

        DismissEditingName();

        DoneEditingFolderName(
            [in] Boolean commit);

        OnEditorAction(
            [in] ITextView* v,
            [in] Int32 actionId,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        GetEditTextRegion(
            [out] IView** view);

        GetDragDrawable(
            [out] IDrawable** drawable);

        SetDragController(
            [in] IDragController* dragController);

        SetFolderIcon(
            [in] IFolderIcon* icon);

        /**
         * @return the FolderInfo object associated with this folder
         */
        GetInfo(
            [out] IFolderInfo** info);

        Bind(
            [in] IFolderInfo* info);

        AnimateOpen();

        AnimateClosed();

        NotifyDataSetChanged();

        AcceptDrop(
            [in] IDropTargetDragObject* d,
            [out] Boolean* result);

        OnDragEnter(
            [in] IDropTargetDragObject* d);

        ReadingOrderGreaterThan(
            [in] ArrayOf<Int32>* v1,
            [in] ArrayOf<Int32>* v2,
            [out] Boolean* result);

        IsLayoutRtl(
            [out] Boolean* result);

        OnDragOver(
            [in] IDropTargetDragObject* d);

        CompleteDragExit();

        OnDragExit(
            [in] IDropTargetDragObject* d);

        OnDropCompleted(
            [in] IView* target,
            [in] IDropTargetDragObject* d,
            [in] Boolean isFlingToDelete,
            [in] Boolean success);

        OnFlingToDelete(
            [in] IDropTargetDragObject* d,
            [in] Int32 x,
            [in] Int32 y,
            [in] IPointF* vec);

        NotifyDrop();

        IsDropEnabled(
            [out] Boolean* result);

        GetDropTargetDelegate(
            [in] IDropTargetDragObject* d,
            [out] IDropTarget** target);

        IsFull(
            [out] Boolean* result);

        GetPivotXForIconAnimation(
            [out] Float* res);

        GetPivotYForIconAnimation(
            [out] Float* res);

        GetItemCount(
            [out] Int32* count);

        GetItemAt(
            [in] Int32 index,
            [out] IView** view);

        IsDestroyed(
            [out] Boolean* result);

        OnDrop(
            [in] IDropTargetDragObject* d);

        // This is used so the item doesn't immediately appear in the folder when added. In one case
        // we need to create the illusion that the item isn't added back to the folder yet, to
        // to correspond to the animation of the icon back into the folder. This is
        HideItem(
            [in] IShortcutInfo* info);

        ShowItem(
            [in] IShortcutInfo* info);

        OnAdd(
            [in] IShortcutInfo* item);

        OnRemove(
            [in] IShortcutInfo* item);

        OnItemsChanged();

        OnTitleChanged(
            [in] ICharSequence* title);

        GetItemsInReadingOrder(
            [out] IArrayList** list);

        GetLocationInDragLayer(
            [in] ArrayOf<Int32>* loc);

        OnFocusChange(
            [in] IView* v,
            [in] Boolean hasFocus);

        FindAndSetEmptyCells(
            [in] IShortcutInfo* item,
            [out] Boolean* result);

        CreateAndAddShortcut(
            [in] IShortcutInfo* item,
            [out] Boolean* result);
    }

    [local]
    interface IFolderHelper {
        /**
         * Creates a new UserFolder, inflated from R.layout.user_folder.
         *
         * @param context The application's context.
         *
         * @return A new UserFolder.
         */
        FromXml(
            [in] IContext* ctx,
            [out] IFolder** folder);
    }

    } // namespace Launcher2
    } // namespace Droid
    } // namespace Elastos
}
