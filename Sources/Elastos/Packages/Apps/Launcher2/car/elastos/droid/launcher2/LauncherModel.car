//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Droid.AppWidget.IAppWidgetProviderInfo;
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Content.IIntent;
    using interface Elastos.Droid.Content.IContentValues;
    using interface Elastos.Droid.Content.IComponentName;
    using interface Elastos.Droid.Content.Pm.ILauncherAppsCallback;
    using interface Elastos.Droid.Content.Pm.IPackageManager;
    using interface Elastos.Droid.Database.ICursor;
    using interface Elastos.Droid.Graphics.IBitmap;
    using interface Elastos.Droid.Os.IUserHandle;
    using interface Elastos.Core.IComparator;

    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IArrayList;
    using interface Elastos.Utility.IHashMap;

    interface Elastos.Droid.Launcher2.IFolderInfo;
    interface Elastos.Droid.Launcher2.IShortcutInfo;
    interface Elastos.Droid.Launcher2.ILauncherAppWidgetInfo;

    namespace Elastos {
    namespace Droid {
    namespace Launcher2 {

    interface ILauncherModelCallbacks {
        SetLoadOnResume(
            [out] Boolean* result);

        GetCurrentWorkspaceScreen(
            [out] Int32* screen);

        StartBinding();

        BindItems(
            [in] IArrayList* shortcuts,
            [in] Int32 start,
            [in] Int32 end);

        BindFolders(
            [in] IHashMap* folders);

        FinishBindingItems();

        BindAppWidget(
            [in] ILauncherAppWidgetInfo* info);

        BindAllApplications(
            [in] IArrayList* apps);

        BindAppsAdded(
            [in] IArrayList* apps);

        BindAppsUpdated(
            [in] IArrayList* apps);

        BindComponentsRemoved(
            [in] IArrayList* packageNames,
            [in] IArrayList* appInfos,
            [in] Boolean matchPackageNamesOnly,
            [in] IUserHandle* user);

        BindPackagesUpdated(
            [in] IArrayList* widgetsAndShortcuts);

        IsAllAppsVisible(
            [out] Boolean* result);

        IsAllAppsButtonRank(
            [in] Int32 rank,
            [out] Boolean* result);

        BindSearchablesChanged();

        OnPageBoundSynchronously(
            [in] Int32 page);
    }

    interface ILauncherModelPackageUpdatedTask {
    }

    /**
     * Maintains in-memory state of the Launcher. It is expected that there should be only one
     * LauncherModel object held in a static. Also provide APIs for updating the database state
     * for the Launcher.
     *
     * interface IBroadcastReceiver
     */
    [deprecated, local]
    interface ILauncherModel {
        GetFallbackIcon(
            [out] IBitmap** bitmap);

        UnbindItemInfosAndClearQueuedBindRunnables();

        /** Unbinds all the sBgWorkspaceItems and sBgAppWidgets on the main thread */
        UnbindWorkspaceItemsOnMainThread();

        FlushWorkerThread();

        /**
         * Find a folder in the db, creating the FolderInfo if necessary, and adding it to folderList.
         */
        GetFolderById(
            [in] IContext* ctx,
            [in] IHashMap* folderList,
            [in] Int64 id,
            [out] IFolderInfo** info);

        Initialize(
            [in] ILauncherModelCallbacks* _callbacks);

        GetLauncherAppsCallback(
            [out] ILauncherAppsCallback** _callback);

        ForceReload();

        ResetLoadedState(
            [in] Boolean resetAllAppsLoaded,
            [in] Boolean resetWorkspaceLoaded);

        /**
         * When the launcher is in the background, it's possible for it to miss paired
         * configuration changes.  So whenever we trigger the loader from the background
         * tell the launcher that it needs to re-run the loader when it comes back instead
         * of doing it now.
         */
        StartLoaderFromBackground();

        StartLoader(
            [in] Boolean isLaunching,
            [in] Int32 synchronousBindPage);

        BindRemainingSynchronousPages();

        StopLoader();

        IsAllAppsLoaded(
            [out] Boolean* result);

        IsLoadingWorkspace(
            [out] Boolean* result);

        EnqueuePackageUpdated(
            [in] ILauncherModelPackageUpdatedTask* task);

        /**
         * This is called from the code that adds shortcuts from the intent receiver.  This
         * doesn't have a Cursor, but
         */
        GetShortcutInfo(
            [in] IPackageManager* manager,
            [in] IIntent* intent,
            [in] IUserHandle* user,
            [in] IContext* ctx,
            [out] IShortcutInfo** sinfo);

        /**
         * Make an ShortcutInfo object for a shortcut that is an application.
         *
         * If c is not null, then it will be used to fill in missing data like the title and icon.
         */
        GetShortcutInfo(
            [in] IPackageManager* manager,
            [in] IIntent* intent,
            [in] IUserHandle* user,
            [in] IContext* ctx,
            [in] ICursor* c,
            [in] Int32 iconIndex,
            [in] Int32 titleIndex,
            [in] IHashMap* labelCache,
            [out] IShortcutInfo** sinfo);

        GetIconFromCursor(
            [in] ICursor* c,
            [in] Int32 iconIndex,
            [in] IContext* ctx,
            [out] IBitmap** map);

        AddShortcut(
            [in] IContext* ctx,
            [in] IIntent* data,
            [in] Int64 container,
            [in] Int32 screen,
            [in] Int32 cellX,
            [in] Int32 cellY,
            [in] Boolean notify,
            [out] IShortcutInfo** sinfo);

        /**
         * Attempts to find an AppWidgetProviderInfo that matches the given component.
         */
        FindAppWidgetProviderInfoWithComponent(
            [in] IContext* ctx,
            [in] IComponentName* component,
            [out] IAppWidgetProviderInfo** pinfo);

        /**
         * Returns a list of all the widgets that can handle configuration with a particular mimeType.
         */
        ResolveWidgetsForMimeType(
            [in] IContext* ctx,
            [in] String mimeType,
            [out] IList** list);

        InfoFromShortcutIntent(
            [in] IContext* ctx,
            [in] IIntent* data,
            [in] IBitmap* fallbackIcon,
            [out] IShortcutInfo** sinfo);

        QueueIconToBeChecked(
            [in] IHashMap* cache,
            [in] IShortcutInfo* info,
            [in] ICursor* c,
            [in] Int32 iconIndex,
            [out] Boolean* result);

        UpdateSavedIcon(
            [in] IContext* ctx,
            [in] IShortcutInfo* info,
            [in] ArrayOf<Byte>* data);

        DumpState();
    }

    } // namespace Launcher2
    } // namespace Droid
    } // namespace Elastos
}
