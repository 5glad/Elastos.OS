//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Droid.View.IView;

    interface Elastos.Droid.Launcher2.IPagedViewCellLayoutChildren;

    namespace Elastos {
    namespace Droid {
    namespace Launcher2 {

    interface IPagedViewCellLayoutLayoutParams {
    }

    /**
     * An abstraction of the original CellLayout which supports laying out items
     * which span multiple cells into a grid-like layout.  Also supports dimming
     * to give a preview of its contents.
     */
    [local]
    interface IPagedViewCellLayout {
        GetCellWidth(
            [out] Int32* width);

        GetCellHeight(
            [out] Int32* height);

        AddViewToCellLayout(
            [in] IView* child,
            [in] Int32 index,
            [in] Int32 childId,
            [in] IPagedViewCellLayoutLayoutParams* params,
            [out] Boolean* result);

        /**
         * Clears all the key listeners for the individual icons.
         */
        ResetChildrenOnKeyListeners();

        GetChildrenLayout(
            [out] IPagedViewCellLayoutChildren** children);

        GetCellCountX(
            [out] Int32* count);

        GetCellCountY(
            [out] Int32* count);

        GetContentWidth(
            [out] Int32* width);

        GetContentHeight(
            [out] Int32* height);

        GetWidthBeforeFirstLayout(
            [out] Int32* width);

        EnableCenteredContent(
            [in] Boolean enabled);

        SetCellCount(
            [in] Int32 xCount,
            [in] Int32 yCount);

        SetGap(
            [in] Int32 widthGap,
            [in] Int32 heightGap);

        GetCellCountForDimensions(
            [in] Int32 width,
            [in] Int32 height,
            [out, callee] ArrayOf<Int32>* dimensions);

        /**
         * Start dragging the specified child
         *
         * @param child The child that is being dragged
         */
        OnDragChild(
            [in] IView* child);

        /**
         * Estimates the number of cells that the specified width would take up.
         */
        EstimateCellHSpan(
            [in] Int32 width,
            [out] Int32* span);

        /**
         * Estimates the number of cells that the specified height would take up.
         */
        EstimateCellVSpan(
            [in] Int32 height,
            [out] Int32* span);

        /** Returns an estimated center position of the cell at the specified index */
        EstimateCellPosition(
            [in] Int32 x,
            [in] Int32 y,
            [out, callee] ArrayOf<Int32>* position);

        CalculateCellCount(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 maxCellCountX,
            [in] Int32 maxCellCountY);

        /**
         * Estimates the width that the number of hSpan cells will take up.
         */
        EstimateCellWidth(
            [in] Int32 hSpan,
            [out] Int32* width);

        /**
         * Estimates the height that the number of vSpan cells will take up.
         */
        EstimateCellHeight(
            [in] Int32 vSpan,
            [out] Int32* height);
    }

    [local]
    interface IPage {
        GetPageChildCount(
            [out] Int32* count);

        GetChildOnPageAt(
            [in] Int32 i,
            [out] IView** view);

        RemoveAllViewsOnPage();

        RemoveViewOnPageAt(
            [in] Int32 i);

        IndexOfChildOnPage(
            [in] IView* v,
            [out] Int32* page);
    }

    } // namespace Launcher2
    } // namespace Droid
    } // namespace Elastos
}
