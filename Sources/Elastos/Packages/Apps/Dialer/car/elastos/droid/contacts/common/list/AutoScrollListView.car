//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    namespace Elastos{
    namespace Droid {
    namespace Contacts {
    namespace Common {
    namespace List {

    /**
     * @Involve
     * extends Elastos.Droid.View.IView
     * extends Elastos.Droid.View.IViewGroup
     * extends Elastos.Droid.Widget.IAdapterView
     * extends Elastos.Droid.Widget.IAbsListView
     * extends Elastos.Droid.Widget.IListView
     *
     * interface Elastos.Droid.View.IViewParent
     * interface Elastos.Droid.View.IViewManager
     * interface Elastos.Droid.View.IOnGlobalLayoutListener
     * interface Elastos.Droid.View.IOnTouchModeChangeListener
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.View.IAdapterViewOnItemClickListener
     * interface Elastos.Droid.Text.ITextWatcher
     * interface Elastos.Droid.Text.INoCopySpan
     * interface Elastos.Droid.Widget.IFilterListener
     * interface Elastos.Droid.Widget.IOnDateChangedListener
     * interface Elastos.Droid.Widget.IRemoteAdapterConnectionCallback
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     */
    interface IAutoScrollListView {
        /**
         * Brings the specified position to view by optionally performing a jump-scroll maneuver:
         * first it jumps to some position near the one requested and then does a smooth
         * scroll to the requested position.  This creates an impression of full smooth
         * scrolling without actually traversing the entire list.  If smooth scrolling is
         * not requested, instantly positions the requested item at a preferred offset.
         */
        RequestPositionToScreen(
            [in] Int32 position,
            [in] Boolean smoothScroll);
    }

    } // List
    } // Common
    } // Contacts
    } // Droid
    } // Elastos

}
