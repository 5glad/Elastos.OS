//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Droid.View.IMotionEvent;
    using interface Elastos.Droid.View.IView;
    using interface Elastos.Droid.View.IViewGroup;

    namespace Elastos {
    namespace Droid {
    namespace Dialer {
    namespace Widget {

    [local]
    interface IViewDragHelperCallback {
        /**
         * Called when the drag state changes. See the <code>STATE_*</code> constants
         * for more information.
         *
         * @param state The new drag state
         *
         * @see #STATE_IDLE
         * @see #STATE_DRAGGING
         * @see #STATE_SETTLING
         */
        OnViewDragStateChanged(
            [in] Int32 state);

        /**
         * Called when the captured view's position changes as the result of a drag or settle.
         *
         * @param changedView View whose position changed
         * @param left New X coordinate of the left edge of the view
         * @param top New Y coordinate of the top edge of the view
         * @param dx Change in X position from the last call
         * @param dy Change in Y position from the last call
         */
        OnViewPositionChanged(
            [in] IView* changedView,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 dx,
            [in] Int32 dy);

        /**
         * Called when a child view is captured for dragging or settling. The ID of the pointer
         * currently dragging the captured view is supplied. If activePointerId is
         * identified as {@link #INVALID_POINTER} the capture is programmatic instead of
         * pointer-initiated.
         *
         * @param capturedChild Child view that was captured
         * @param activePointerId Pointer id tracking the child capture
         */
        OnViewCaptured(
            [in] IView* capturedChild,
            [in] Int32 activePointerId);

        /**
         * Called when the child view is no longer being actively dragged.
         * The fling velocity is also supplied, if relevant. The velocity values may
         * be clamped to system minimums or maximums.
         *
         * <p>Calling code may decide to fling or otherwise release the view to let it
         * settle into place. It should do so using {@link #settleCapturedViewAt(int, int)}
         * or {@link #flingCapturedView(int, int, int, int)}. If the Callback invokes
         * one of these methods, the ViewDragHelper will enter {@link #STATE_SETTLING}
         * and the view capture will not fully end until it comes to a complete stop.
         * If neither of these methods is invoked before <code>onViewReleased</code> returns,
         * the view will stop in place and the ViewDragHelper will return to
         * {@link #STATE_IDLE}.</p>
         *
         * @param releasedChild The captured child view now being released
         * @param xvel X velocity of the pointer as it left the screen in pixels per second.
         * @param yvel Y velocity of the pointer as it left the screen in pixels per second.
         */
        OnViewReleased(
            [in] IView* releasedChild,
            [in] Float xvel,
            [in] Float yvel);

        /**
         * Called when the child view has been released with a fling.
         *
         * <p>Calling code may decide to fling or otherwise release the view to let it
         * settle into place.</p>
         *
         * @param releasedChild The captured child view now being released
         * @param xvel X velocity of the fling.
         * @param yvel Y velocity of the fling.
         */
        OnViewFling(
            [in] IView* releasedChild,
            [in] Float xvel,
            [in] Float yvel);

        /**
         * Called when one of the subscribed edges in the parent view has been touched
         * by the user while no child view is currently captured.
         *
         * @param edgeFlags A combination of edge flags describing the edge(s) currently touched
         * @param pointerId ID of the pointer touching the described edge(s)
         * @see #EDGE_LEFT
         * @see #EDGE_TOP
         * @see #EDGE_RIGHT
         * @see #EDGE_BOTTOM
         */
        OnEdgeTouched(
            [in] Int32 edgeFlags,
            [in] Int32 pointerId);

        /**
         * Called when the given edge may become locked. This can happen if an edge drag
         * was preliminarily rejected before beginning, but after {@link #onEdgeTouched(int, int)}
         * was called. This method should return true to lock this edge or false to leave it
         * unlocked. The default behavior is to leave edges unlocked.
         *
         * @param edgeFlags A combination of edge flags describing the edge(s) locked
         * @return true to lock the edge, false to leave it unlocked
         */
        OnEdgeLock(
            [in] Int32 edgeFlags,
            [out] Boolean* result);

        /**
         * Called when the user has started a deliberate drag away from one
         * of the subscribed edges in the parent view while no child view is currently captured.
         *
         * @param edgeFlags A combination of edge flags describing the edge(s) dragged
         * @param pointerId ID of the pointer touching the described edge(s)
         * @see #EDGE_LEFT
         * @see #EDGE_TOP
         * @see #EDGE_RIGHT
         * @see #EDGE_BOTTOM
         */
        OnEdgeDragStarted(
            [in] Int32 edgeFlags,
            [in] Int32 pointerId);

        /**
         * Called to determine the Z-order of child views.
         *
         * @param index the ordered position to query for
         * @return index of the view that should be ordered at position <code>index</code>
         */
        GetOrderedChildIndex(
            [in] Int32 index,
            [out] Int32* childIndex);

        /**
         * Return the magnitude of a draggable child view's horizontal range of motion in pixels.
         * This method should return 0 for views that cannot move horizontally.
         *
         * @param child Child view to check
         * @return range of horizontal motion in pixels
         */
        GetViewHorizontalDragRange(
            [in] IView* child,
            [out] Int32* result);

        /**
         * Return the magnitude of a draggable child view's vertical range of motion in pixels.
         * This method should return 0 for views that cannot move vertically.
         *
         * @param child Child view to check
         * @return range of vertical motion in pixels
         */
        GetViewVerticalDragRange(
            [in] IView* child,
            [out] Int32* result);

        /**
         * Called when the user's input indicates that they want to capture the given child view
         * with the pointer indicated by pointerId. The callback should return true if the user
         * is permitted to drag the given view with the indicated pointer.
         *
         * <p>ViewDragHelper may call this method multiple times for the same view even if
         * the view is already captured; this indicates that a new pointer is trying to take
         * control of the view.</p>
         *
         * <p>If this method returns true, a call to {@link #onViewCaptured(android.view.View, int)}
         * will follow if the capture is successful.</p>
         *
         * @param child Child the user is attempting to capture
         * @param pointerId ID of the pointer attempting the capture
         * @return true if capture should be allowed, false otherwise
         */
        TryCaptureView(
            [in] IView* child,
            [in] Int32 pointerId,
            [out] Boolean* result);

        /**
         * Restrict the motion of the dragged child view along the horizontal axis.
         * The default implementation does not allow horizontal motion; the extending
         * class must override this method and provide the desired clamping.
         *
         *
         * @param child Child view being dragged
         * @param left Attempted motion along the X axis
         * @param dx Proposed change in position for left
         * @return The new clamped position for left
         */
        ClampViewPositionHorizontal(
            [in] IView* child,
            [in] Int32 left,
            [in] Int32 dx,
            [out] Int32* position);

        /**
         * Restrict the motion of the dragged child view along the vertical axis.
         * The default implementation does not allow vertical motion; the extending
         * class must override this method and provide the desired clamping.
         *
         *
         * @param child Child view being dragged
         * @param top Attempted motion along the Y axis
         * @param dy Proposed change in position for top
         * @return The new clamped position for top
         */
        ClampViewPositionVertical(
            [in] IView* child,
            [in] Int32 top,
            [in] Int32 dy,
            [out] Int32* position);
    }

//    [deprecated, local]
//    interface IViewDragHelper {
//        /**
//         * A null/invalid pointer ID.
//         */
//        const Int32 INVALID_POINTER = -1;
//
//        /**
//         * A view is not currently being dragged or animating as a result of a fling/snap.
//         */
//        const Int32 STATE_IDLE = 0;
//
//        /**
//         * A view is currently being dragged. The position is currently changing as a result
//         * of user input or simulated user input.
//         */
//        const Int32 STATE_DRAGGING = 1;
//
//        /**
//         * A view is currently settling into place as a result of a fling or
//         * predefined non-interactive motion.
//         */
//        const Int32 STATE_SETTLING = 2;
//
//        /**
//         * Edge flag indicating that the left edge should be affected.
//         */
//        const Int32 EDGE_LEFT = 1 << 0;
//
//        /**
//         * Edge flag indicating that the right edge should be affected.
//         */
//        const Int32 EDGE_RIGHT = 1 << 1;
//
//        /**
//         * Edge flag indicating that the top edge should be affected.
//         */
//        const Int32 EDGE_TOP = 1 << 2;
//
//        /**
//         * Edge flag indicating that the bottom edge should be affected.
//         */
//        const Int32 EDGE_BOTTOM = 1 << 3;
//
//        /**
//         * Edge flag set indicating all edges should be affected.
//         */
//        const Int32 EDGE_ALL = EDGE_LEFT | EDGE_TOP | EDGE_RIGHT | EDGE_BOTTOM;
//
//        /**
//         * Indicates that a check should occur along the horizontal axis
//         */
//        const Int32 DIRECTION_HORIZONTAL = 1 << 0;
//
//        /**
//         * Indicates that a check should occur along the vertical axis
//         */
//        const Int32 DIRECTION_VERTICAL = 1 << 1;
//
//        /**
//         * Indicates that a check should occur along all axes
//         */
//        const Int32 DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
//
//        /**
//         * Set the minimum velocity that will be detected as having a magnitude greater than zero
//         * in pixels per second. Callback methods accepting a velocity will be clamped appropriately.
//         *
//         * @param minVel Minimum velocity to detect
//         */
//        SetMinVelocity(
//            [in] Float minVel);
//
//        /**
//         * Return the currently configured minimum velocity. Any flings with a magnitude less
//         * than this value in pixels per second. Callback methods accepting a velocity will receive
//         * zero as a velocity value if the real detected velocity was below this threshold.
//         *
//         * @return the minimum velocity that will be detected
//         */
//        GetMinVelocity(
//            [out] Float* minVel);
//
//        /**
//         * Retrieve the current drag state of this helper. This will return one of
//         * {@link #STATE_IDLE}, {@link #STATE_DRAGGING} or {@link #STATE_SETTLING}.
//         * @return The current drag state
//         */
//        GetViewDragState(
//            [out] Int32* state);
//
//        /**
//         * Enable edge tracking for the selected edges of the parent view.
//         * The callback's {@link Callback#onEdgeTouched(int, int)} and
//         * {@link Callback#onEdgeDragStarted(int, int)} methods will only be invoked
//         * for edges for which edge tracking has been enabled.
//         *
//         * @param edgeFlags Combination of edge flags describing the edges to watch
//         * @see #EDGE_LEFT
//         * @see #EDGE_TOP
//         * @see #EDGE_RIGHT
//         * @see #EDGE_BOTTOM
//         */
//        SetEdgeTrackingEnabled(
//            [in] Int32 edgeFlags);
//
//        /**
//         * Return the size of an edge. This is the range in pixels along the edges of this view
//         * that will actively detect edge touches or drags if edge tracking is enabled.
//         *
//         * @return The size of an edge in pixels
//         * @see #setEdgeTrackingEnabled(int)
//         */
//        GetEdgeSize(
//            [out] Int32* edgeSize);
//
//        /**
//         * Capture a specific child view for dragging within the parent. The callback will be notified
//         * but {@link Callback#tryCaptureView(android.view.View, int)} will not be asked permission to
//         * capture this view.
//         *
//         * @param childView Child view to capture
//         * @param activePointerId ID of the pointer that is dragging the captured child view
//         */
//        CaptureChildView(
//            [in] IView* childView,
//            [in] Int32 activePointerId);
//
//        /**
//         * @return The currently captured view, or null if no view has been captured.
//         */
//        GetCapturedView(
//            [out] IView** view);
//
//        /**
//         * @return The ID of the pointer currently dragging the captured view,
//         *         or {@link #INVALID_POINTER}.
//         */
//        GetActivePointerId(
//            [out] Int32* id);
//
//        /**
//         * @return The minimum distance in pixels that the user must travel to initiate a drag
//         */
//        GetTouchSlop(
//            [out] Int32* touchSlop);
//
//        /**
//         * The result of a call to this method is equivalent to
//         * {@link #processTouchEvent(android.view.MotionEvent)} receiving an ACTION_CANCEL event.
//         */
//        Cancel();
//
//        /**
//         * {@link #cancel()}, but also abort all motion in progress and snap to the end of any
//         * animation.
//         */
//        Abort();
//
//        /**
//         * Animate the view <code>child</code> to the given (left, top) position.
//         * If this method returns true, the caller should invoke {@link #continueSettling(boolean)}
//         * on each subsequent frame to continue the motion until it returns false. If this method
//         * returns false there is no further work to do to complete the movement.
//         *
//         * <p>This operation does not count as a capture event, though {@link #getCapturedView()}
//         * will still report the sliding view while the slide is in progress.</p>
//         *
//         * @param child Child view to capture and animate
//         * @param finalLeft Final left position of child
//         * @param finalTop Final top position of child
//         * @return true if animation should continue through {@link #continueSettling(boolean)} calls
//         */
//        SmoothSlideViewTo(
//            [in] IView* child,
//            [in] Int32 finalLeft,
//            [in] Int32 finalTop,
//            [out] Boolean* result);
//
//        /**
//         * Settle the captured view at the given (left, top) position.
//         * The appropriate velocity from prior motion will be taken into account.
//         * If this method returns true, the caller should invoke {@link #continueSettling(boolean)}
//         * on each subsequent frame to continue the motion until it returns false. If this method
//         * returns false there is no further work to do to complete the movement.
//         *
//         * @param finalLeft Settled left edge position for the captured view
//         * @param finalTop Settled top edge position for the captured view
//         * @return true if animation should continue through {@link #continueSettling(boolean)} calls
//         */
//        SettleCapturedViewAt(
//            [in] Int32 finalLeft,
//            [in] Int32 finalTop,
//            [out] Boolean* result);
//
//        /**
//         * Settle the captured view based on standard free-moving fling behavior.
//         * The caller should invoke {@link #continueSettling(boolean)} on each subsequent frame
//         * to continue the motion until it returns false.
//         *
//         * @param minLeft Minimum X position for the view's left edge
//         * @param minTop Minimum Y position for the view's top edge
//         * @param maxLeft Maximum X position for the view's left edge
//         * @param maxTop Maximum Y position for the view's top edge
//         */
//        FlingCapturedView(
//            [in] Int32 minLeft,
//            [in] Int32 minTop,
//            [in] Int32 maxLeft,
//            [in] Int32 maxTop);
//
//        /**
//         * Settle the captured view based on standard free-moving fling behavior.
//         * The caller should invoke {@link #continueSettling(boolean)} on each subsequent frame
//         * to continue the motion until it returns false.
//         *
//         * @param minLeft Minimum X position for the view's left edge
//         * @param minTop Minimum Y position for the view's top edge
//         * @param maxLeft Maximum X position for the view's left edge
//         * @param maxTop Maximum Y position for the view's top edge
//         * @param yvel the Y velocity to fling with
//         */
//        FlingCapturedView(
//            [in] Int32 minLeft,
//            [in] Int32 minTop,
//            [in] Int32 maxLeft,
//            [in] Int32 maxTop,
//            [in] Int32 yvel);
//
//        /**
//         * Predict how far a fling with {@param yvel} will cause the view to travel from stand still.
//         * @return predicted y offset
//         */
//        PredictFlingYOffset(
//            [in] Int32 yvel,
//            [out] Int32* yOffset);
//
//        /**
//         * Move the captured settling view by the appropriate amount for the current time.
//         * If <code>continueSettling</code> returns true, the caller should call it again
//         * on the next frame to continue.
//         *
//         * @param deferCallbacks true if state callbacks should be deferred via posted message.
//         *                       Set this to true if you are calling this method from
//         *                       {@link android.view.View#computeScroll()} or similar methods
//         *                       invoked as part of layout or drawing.
//         * @return true if settle is still in progress
//         */
//        ContinueSettling(
//            [in] Boolean deferCallbacks,
//            [out] Boolean* result);
//
//        ProcessNestedFling(
//            [in] IView* target,
//            [in] Int32 yvel);
//
//        GetVelocityMagnitude(
//            [out] Int32* magnitude);
//
//        /**
//         * Check if the given pointer ID represents a pointer that is currently down (to the best
//         * of the ViewDragHelper's knowledge).
//         *
//         * <p>The state used to report this information is populated by the methods
//         * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or
//         * {@link #processTouchEvent(android.view.MotionEvent)}. If one of these methods has not
//         * been called for all relevant MotionEvents to track, the information reported
//         * by this method may be stale or incorrect.</p>
//         *
//         * @param pointerId pointer ID to check; corresponds to IDs provided by MotionEvent
//         * @return true if the pointer with the given ID is still down
//         */
//        IsPointerDown(
//            [in] Int32 pointerId,
//            [out] Boolean* result);
//
//        /**
//         * Check if this event as provided to the parent view's onInterceptTouchEvent should
//         * cause the parent to intercept the touch event stream.
//         *
//         * @param ev MotionEvent provided to onInterceptTouchEvent
//         * @return true if the parent view should return true from onInterceptTouchEvent
//         */
//        ShouldInterceptTouchEvent(
//            [in] IMotionEvent* ev,
//            [out] Boolean* result);
//
//        /**
//         * Process a touch event received by the parent view. This method will dispatch callback events
//         * as needed before returning. The parent view's onTouchEvent implementation should call this.
//         *
//         * @param ev The touch event received by the parent view
//         */
//        ProcessTouchEvent(
//            [in] IMotionEvent* ev);
//
//        /**
//         * Check if any pointer tracked in the current gesture has crossed
//         * the required slop threshold.
//         *
//         * <p>This depends on internal state populated by
//         * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or
//         * {@link #processTouchEvent(android.view.MotionEvent)}. You should only rely on
//         * the results of this method after all currently available touch data
//         * has been provided to one of these two methods.</p>
//         *
//         * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},
//         *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}
//         * @return true if the slop threshold has been crossed, false otherwise
//         */
//        CheckTouchSlop(
//            [in] Int32 directions,
//            [out] Boolean* result);
//
//        /**
//         * Check if the specified pointer tracked in the current gesture has crossed
//         * the required slop threshold.
//         *
//         * <p>This depends on internal state populated by
//         * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or
//         * {@link #processTouchEvent(android.view.MotionEvent)}. You should only rely on
//         * the results of this method after all currently available touch data
//         * has been provided to one of these two methods.</p>
//         *
//         * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},
//         *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}
//         * @param pointerId ID of the pointer to slop check as specified by MotionEvent
//         * @return true if the slop threshold has been crossed, false otherwise
//         */
//        CheckTouchSlop(
//            [in] Int32 directions,
//            [in] Int32 pointerId,
//            [out] Boolean* result);
//
//        /**
//         * Check if any of the edges specified were initially touched in the currently active gesture.
//         * If there is no currently active gesture this method will return false.
//         *
//         * @param edges Edges to check for an initial edge touch. See {@link #EDGE_LEFT},
//         *              {@link #EDGE_TOP}, {@link #EDGE_RIGHT}, {@link #EDGE_BOTTOM} and
//         *              {@link #EDGE_ALL}
//         * @return true if any of the edges specified were initially touched in the current gesture
//         */
//        IsEdgeTouched(
//            [in] Int32 edges,
//            [out] Boolean* result);
//
//        /**
//         * Check if any of the edges specified were initially touched by the pointer with
//         * the specified ID. If there is no currently active gesture or if there is no pointer with
//         * the given ID currently down this method will return false.
//         *
//         * @param edges Edges to check for an initial edge touch. See {@link #EDGE_LEFT},
//         *              {@link #EDGE_TOP}, {@link #EDGE_RIGHT}, {@link #EDGE_BOTTOM} and
//         *              {@link #EDGE_ALL}
//         * @return true if any of the edges specified were initially touched in the current gesture
//         */
//        IsEdgeTouched(
//            [in] Int32 edges,
//            [in] Int32 pointerId,
//            [out] Boolean* result);
//
//        /**
//         * Determine if the currently captured view is under the given point in the
//         * parent view's coordinate system. If there is no captured view this method
//         * will return false.
//         *
//         * @param x X position to test in the parent's coordinate system
//         * @param y Y position to test in the parent's coordinate system
//         * @return true if the captured view is under the given point, false otherwise
//         */
//        IsCapturedViewUnder(
//            [in] Int32 x,
//            [in] Int32 y,
//            [out] Boolean* result);
//
//        /**
//         * Determine if the supplied view is under the given point in the
//         * parent view's coordinate system.
//         *
//         * @param view Child view of the parent to hit test
//         * @param x X position to test in the parent's coordinate system
//         * @param y Y position to test in the parent's coordinate system
//         * @return true if the supplied view is under the given point, false otherwise
//         */
//        IsViewUnder(
//            [in] IView* view,
//            [in] Int32 x,
//            [in] Int32 y,
//            [out] Boolean* result);
//
//        /**
//         * Find the topmost child under the given point within the parent view's coordinate system.
//         * The child order is determined using {@link Callback#getOrderedChildIndex(int)}.
//         *
//         * @param x X position to test in the parent's coordinate system
//         * @param y Y position to test in the parent's coordinate system
//         * @return The topmost child view under (x, y) or null if none found.
//         */
//        FindTopChildUnder(
//            [in] Int32 x,
//            [in] Int32 y,
//            [out] IView** view);
//
//        /**
//         * Prepares the {@link ViewDragHelper} for the beginning of a nested scroll.
//         *
//         * @param target The child view that is dispatching the nested scroll.
//         */
//        StartNestedScroll(
//            [in] IView* target);
//
//        /**
//         * Informs the {@link ViewDragHelper} that a nested scroll has ended.
//         *
//         * @param target The child view that is dispatching the nested scroll.
//         */
//        StopNestedScroll(
//            [in] IView* target);
//
//        /**
//         * Update the {@link ViewDragHelper} with a new nested scrolling event.
//         *
//         * @param target The child view that is dispatching the nested scroll.
//         * @param dx The x distance scrolled on the child, in pixels.
//         * @param dy The y distance scroll on the child, in pixels.
//         * @param consumed An int array for the {@link ViewDragHelper} to report back the scroll
//         *         deltas that it consumed.
//         */
//        ProcessNestedScroll(
//            [in] IView* target,
//            [in] Int32 dx,
//            [in] Int32 dy,
//            [in] ArrayOf<Int32>* consumed);
//    }

//    [local]
//    interface IViewDragHelperHelper {
//        /**
//         * Factory method to create a new ViewDragHelper.
//         *
//         * @param forParent Parent view to monitor
//         * @param cb Callback to provide information and receive events
//         * @return a new ViewDragHelper instance
//         */
//        Create(
//            [in] IViewGroup* forParent,
//            [in] IViewDragHelperCallback* cb,
//            [out] IViewDragHelper** result);
//
//        /**
//         * Factory method to create a new ViewDragHelper.
//         *
//         * @param forParent Parent view to monitor
//         * @param sensitivity Multiplier for how sensitive the helper should be about detecting
//         *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.
//         * @param cb Callback to provide information and receive events
//         * @return a new ViewDragHelper instance
//         */
//        Create(
//            [in] IViewGroup* forParent,
//            [in] Float sensitivity,
//            [in] IViewDragHelperCallback* cb,
//            [out] IViewDragHelper** result);
//    }

    } // Widget
    } // Dialer
    } // Droid
    } // Elastos
}
