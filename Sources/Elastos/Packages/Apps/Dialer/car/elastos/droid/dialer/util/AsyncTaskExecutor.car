module
{
    namespace Elastos {
    namespace Droid {
    namespace Dialer {
    namespace Util {

    /**
     * Interface used to submit {@link AsyncTask} objects to run in the background.
     * <p>
     * This interface has a direct parallel with the {@link Executor} interface. It exists to decouple
     * the mechanics of AsyncTask submission from the description of how that AsyncTask will execute.
     * <p>
     * One immediate benefit of this approach is that testing becomes much easier, since it is easy to
     * introduce a mock or fake AsyncTaskExecutor in unit/integration tests, and thus inspect which
     * tasks have been submitted and control their execution in an orderly manner.
     * <p>
     * Another benefit in due course will be the management of the submitted tasks. An extension to this
     * interface is planned to allow Activities to easily cancel all the submitted tasks that are still
     * pending in the onDestroy() method of the Activity.
     */
    [deprecated]
    interface IAsyncTaskExecutor {
        /**
         * Executes the given AsyncTask with the default Executor.
         * <p>
         * This method <b>must only be called from the ui thread</b>.
         * <p>
         * The identifier supplied is any Object that can be used to identify the task later. Most
         * commonly this will be an enum which the tests can also refer to. {@code null} is also
         * accepted, though of course this won't help in identifying the task later.
         */
        Submit(
            [in] IInterface* identifier,
            [in] IObject* task,
            [in] ArrayOf<IInterface*>* params,
            [out] IObject** resultTask);
    }

    } // Util
    } // Dialer
    } // Droid
    } // Elastos
}
