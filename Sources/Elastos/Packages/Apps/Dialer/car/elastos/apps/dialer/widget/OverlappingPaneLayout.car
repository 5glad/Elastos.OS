module
{
    using interface Elastos.Droid.View.IView;
    interface Elastos.Apps.Dailer.Widget.IOverlappingPaneLayoutPanelSlideCallbacks;

    namespace Elastos{
    namespace Apps {
    namespace Dailer {
    namespace Widget {

    /**
     * Callbacks for interacting with sliding panes.
     */
    [local]
    interface IOverlappingPaneLayoutPanelSlideCallbacks{
        /**
         * Called when a sliding pane's position changes.
         * @param panel The child view that was moved
         * @param slideOffset The new offset of this sliding pane within its range, from 0-1
         */
        OnPanelSlide(
            [in] IView* panel,
            [in] Float slideOffset);

        /**
         * Called when a sliding pane becomes slid completely open. The pane may or may not
         * be interactive at this point depending on how much of the pane is visible.
         * @param panel The child view that was slid to an open position, revealing other panes
         */
        OnPanelOpened(
            [in] IView* panel);

        /**
         * Called when a sliding pane becomes slid completely closed. The pane is now guaranteed
         * to be interactive. It may now obscure other views in the layout.
         * @param panel The child view that was slid to a closed position
         */
        OnPanelClosed(
            [in] IView* panel);

        /**
         * Called when a sliding pane is flung as far open/closed as it can be.
         * @param velocityY Velocity of the panel once its fling goes as far as it can.
         */
        OnPanelFlingReachesEdge(
            [in] Int32 velocityY);

        /**
         * Returns true if the second panel's contents haven't been scrolled at all. This value is
         * used to determine whether or not we can fully expand the header on downwards scrolls.
         *
         * Instead of using this callback, it would be preferable to instead fully expand the header
         * on a View#onNestedFlingOver() callback. The behavior would be nicer. Unfortunately,
         * no such callback exists yet (b/17547693).
         */
        IsScrollableChildUnscrolled(
            [out] Boolean* result);
    }

    /**
     * @Involve
     * interface IView;
     * interface IDrawableCallback;
     * interface IKeyEventCallback;
     * interface IAccessibilityEventSource;
     * interface IViewParent;
     * interface IViewManager;
     * interface IViewGroup;
     */
    [local]
    interface IOverlappingPaneLayout {
        /**
         * Set an offset, somewhere in between the panel's fully closed state and fully opened state,
         * where the panel can be temporarily pinned or opened up to.
         *
         * @param offset Offset in pixels
         */
        SetIntermediatePinnedOffset(
            [in] Int32 offset);

        /**
         * Set the view that can be used to start dragging the sliding pane.
         */
        SetCapturableView(
            [in] IView* capturableView);

        SetPanelSlideCallbacks(
            [in] IOverlappingPaneLayoutPanelSlideCallbacks* listener);

        /**
         * Open the sliding pane if it is currently slideable. If first layout
         * has already completed this will animate.
         *
         * @return true if the pane was slideable and is now open/in the process of opening
         */
        OpenPane(
            [out] Boolean* result);

        /**
         * Close the sliding pane if it is currently slideable. If first layout
         * has already completed this will animate.
         *
         * @return true if the pane was slideable and is now closed/in the process of closing
         */
        ClosePane(
            [out] Boolean* result);

        /**
         * Check if the layout is open. It can be open either because the slider
         * itself is open revealing the left pane, or if all content fits without sliding.
         *
         * @return true if sliding panels are open
         */
        IsOpen(
            [out] Boolean* result);

        /**
         * Check if the content in this layout cannot fully fit side by side and therefore
         * the content pane can be slid back and forth.
         *
         * @return true if content in this layout can be slid open and closed
         */
        IsSlideable(
            [out] Boolean* result);
    }

    /**
     * @Involve
     * interface IViewGroupLayoutParams
     * interface IViewGroupMarginLayoutParams
     */
    interface IOverlappingPaneLayoutLayoutParams {
    }

    } // Widget
    } // Dailer
    } // Apps
    } // Elastos
}
