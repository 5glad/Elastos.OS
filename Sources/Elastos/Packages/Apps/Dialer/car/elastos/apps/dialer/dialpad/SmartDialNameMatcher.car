
module
{
    using interface Elastos.Utility.IArrayList;
    interface Elastos.Apps.Dailer.Dialpad.ISmartDialMap;
    interface Elastos.Apps.Dailer.Dialpad.ISmartDialMatchPosition;

    namespace Elastos{
    namespace Apps {
    namespace Dailer {
    namespace Dialpad {

    interface ISmartDialNameMatcher {
        /**
         * Matches a phone number against a query. Let the test application overwrite the NANP setting.
         *
         * @param phoneNumber - Raw phone number
         * @param query - Normalized query (only contains numbers from 0-9)
         * @param useNanp - Overwriting nanp setting boolean, used for testing.
         * @return {@literal null} if the number and the query don't match, a valid
         *         SmartDialMatchPosition with the matching positions otherwise
         */
        // @VisibleForTesting
        MatchesNumber(
            [in] String phoneNumber,
            [in] String query,
            [in] Boolean useNanp,
            [out] ISmartDialMatchPosition** position);

        /**
         * Matches a phone number against the saved query, taking care of formatting characters and also
         * taking into account country code prefixes and special NANP number treatment.
         *
         * @param phoneNumber - Raw phone number
         * @return {@literal null} if the number and the query don't match, a valid
         *         SmartDialMatchPosition with the matching positions otherwise
         */
        MatchesNumber(
            [in] String phoneNumber,
            [out] ISmartDialMatchPosition** position);

        /**
         * Matches a phone number against a query, taking care of formatting characters and also
         * taking into account country code prefixes and special NANP number treatment.
         *
         * @param phoneNumber - Raw phone number
         * @param query - Normalized query (only contains numbers from 0-9)
         * @return {@literal null} if the number and the query don't match, a valid
         *         SmartDialMatchPosition with the matching positions otherwise
         */
        MatchesNumber(
            [in] String phoneNumber,
            [in] String query,
            [out] ISmartDialMatchPosition** position);

        Matches(
            [in] String displayName,
            [out] Boolean* result);

        GetMatchPositions(
            [out] IArrayList** positions);

        SetQuery(
            [in] String query);

        GetNameMatchPositionsInString(
            [out] String* result);

        GetNumberMatchPositionsInString(
            [out] String* result);

        GetQuery(
            [out] String* result);
    }

    interface ISmartDialNameMatcherHelper {
        /**
         * Strips a phone number of unnecessary characters (spaces, dashes, etc.)
         *
         * @param number Phone number we want to normalize
         * @return Phone number consisting of digits from 0-9
         */
        NormalizeNumber(
            [in] String number,
            [in] ISmartDialMap* map,
            [out] String* result);

        /**
         * Strips a phone number of unnecessary characters (spaces, dashes, etc.)
         *
         * @param number Phone number we want to normalize
         * @param offset Offset to start from
         * @return Phone number consisting of digits from 0-9
         */
        NormalizeNumber(
            [in] String number,
            [in] Int32 offset,
            [in] ISmartDialMap* map,
            [out] String* result);

        GetLATIN_SMART_DIAL_MAP(
            [out] ISmartDialMap** map);
    }

    } //Dialpad
    } //Dailer
    } //Apps
    } //Elastos
}
