
module
{

    namespace Elastos {
    namespace Apps {
    namespace Dialer {
    namespace Dialpad {

    /**
     * Note: These methods currently take characters as arguments. For future planned language support,
     * they will need to be changed to use codepoints instead of characters.
     *
     * http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#codePointAt(int)
     *
     * If/when this change is made, LatinSmartDialMap(which operates on chars) will continue to work
     * by simply casting from a codepoint to a character.
     */
    interface ISmartDialMap {
        /*
         * Returns true if the provided character can be mapped to a key on the dialpad
         */
        IsValidDialpadCharacter(
            [in] Char32 ch,
            [out] Boolean* result);

        /*
         * Returns true if the provided character is a letter, and can be mapped to a key on the dialpad
         */
        IsValidDialpadAlphabeticChar(
            [in] Char32 ch,
            [out] Boolean* result);

        /*
         * Returns true if the provided character is a digit, and can be mapped to a key on the dialpad
         */
        IsValidDialpadNumericChar(
            [in] Char32 ch,
            [out] Boolean* result);

        /*
         * Get the index of the key on the dialpad which the character corresponds to
         */
        GetDialpadIndex(
            [in] Char32 ch,
            [out] Byte* result);

        /*
         * Get the actual numeric character on the dialpad which the character corresponds to
         */
        GetDialpadNumericCharacter(
            [in] Char32 ch,
            [out] Char32* result);

        /*
         * Converts uppercase characters to lower case ones, and on a best effort basis, strips accents
         * from accented characters.
         */
        NormalizeCharacter(
            [in] Char32 ch,
            [out] Char32* result);
    }

    } //Dialpad
    } //Dialer
    } //Apps
    } //Elastos
}
