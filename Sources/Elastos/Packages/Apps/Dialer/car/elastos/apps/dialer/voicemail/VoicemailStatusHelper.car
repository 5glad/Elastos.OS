module
{
    namespace Elastos{
    namespace Apps {
    namespace Dailer {
    namespace Voicemail {

    interface IVoicemailStatusHelperStatusMessage {
        /** Whether this message should be shown in the call log page. */
        ShowInCallLog(
            [out] Boolean* result);

        /** Whether this message should be shown in the call details page. */
        ShowInCallDetails(
            [out] Boolean* result);
    }

    /**
     * Interface used by the call log UI to determine what user message, if any, related to voicemail
     * source status needs to be shown. The messages are returned in the order of importance.
     * <p>
     * The implementation of this interface interacts with the voicemail content provider to fetch
     * statuses of all the registered voicemail sources and determines if any status message needs to
     * be shown. The user of this interface must observe/listen to provider changes and invoke
     * this class to check if any message needs to be shown.
     */
    interface IVoicemailStatusHelper {
        /**
         * Returns a list of messages, in the order or priority that should be shown to the user. An
         * empty list is returned if no message needs to be shown.
         * @param cursor The cursor pointing to the query on {@link Status#CONTENT_URI}. The projection
         *      to be used is defined by the implementation class of this interface.
         */
        GetStatusMessages(
            [in] ICursor* cursor,
            [out] IList** messages);

        /**
         * Returns the number of active voicemail sources installed.
         * <p>
         * The number of sources is counted by querying the voicemail status table.
         */
        GetNumberActivityVoicemailSources(
            [in] ICursor* cursor,
            [out] Int32* number);
    }

    } // Voicemail
    } // Dailer
    } // Apps
    } // Elastos
}
