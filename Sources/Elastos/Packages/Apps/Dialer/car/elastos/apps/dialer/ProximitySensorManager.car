module
{
    namespace Elastos{
    namespace Apps {
    namespace Dailer {

    /**
     * Manages the proximity sensor and notifies a listener when enabled.
     */
    interface IProximitySensorManager {
        enum State {
            NEAR,
            FAR
        }

        /**
         * Enables the proximity manager.
         * <p>
         * The listener will start getting notifications of events.
         * <p>
         * This method is idempotent.
         */
        Enable();

        /**
         * Disables the proximity manager.
         * <p>
         * The listener will stop receiving notifications of events, possibly after receiving a last
         * {@link Listener#onFar()} callback.
         * <p>
         * If {@code waitForFarState} is true, if the sensor is not currently in the {@link State#FAR}
         * state, the listener will receive a {@link Listener#onFar()} callback the next time the sensor
         * actually reaches the {@link State#FAR} state.
         * <p>
         * If {@code waitForFarState} is false, the listener will receive a {@link Listener#onFar()}
         * callback immediately if the sensor is currently not in the {@link State#FAR} state.
         * <p>
         * This method is idempotent.
         */
        Disable(
            [in] Boolean waitForFarState);
    }

    /**
    * Listener of the state of the proximity sensor.
    * <p>
    * This interface abstracts two possible states for the proximity sensor, near and far.
    * <p>
    * The actual meaning of these states depends on the actual sensor.
    */
    interface IProximitySensorManagerListener {
        /** Called when the proximity sensor transitions from the far to the near state. */
        OnNear();

        /** Called when the proximity sensor transitions from the near to the far state. */
        OnFar();
    }

    } //Dailer
    } //Apps
    } //Elastos
    }
}
