module
{
    namespace Elastos{
    namespace Apps {
    namespace Dailer {
    namespace Voicemail {

    /** Contract describing the behaviour we need from the ui we are controlling. */
    interface IVoicemailPlaybackPresenterPlaybackView {
        GetDataSourceContext(
            [out] IContext** context);

        RunOnUiThread(
            [in] IRunnable* runnable);

        SetStartStopListener(
            [in] IViewOnClickListener* listener);

        SetPositionSeekListener(
            [in] ISeekBarOnSeekBarChangeListener* listener);

        SetSpeakerphoneListener(
            [in] IViewOnClickListener* listener);

        SetIsBuffering();

        SetClipPosition(
            [in] Int32 clipPositionInMillis,
            [in] Int32 clipLengthInMillis);

        GetDesiredClipPosition(
            [out] Int32* position);

        PlaybackStarted();

        PlaybackStopped();

        PlaybackError(
            [in] ECode ec);

        IsSpeakerPhoneOn(
            [out] Boolean* result);

        SetSpeakerPhoneOn(
            [in] Boolean on);

        Finish();

        SetRateDisplay(
            [in] Float rate,
            [in] Int32 stringResourceId);

        SetRateIncreaseButtonListener(
            [in] IViewOnClickListener* listener);

        SetRateDecreaseButtonListener(
            [in] IViewOnClickListener* listener);

        SetIsFetchingContent();

        DisableUiElements();

        EnableUiElements();

        SendFetchVoicemailRequest(
            [in] IUri* voicemailUri);

        QueryHasContent(
            [in] IUri* voicemailUri,
            [out] Boolean* result);

        SetFetchContentTimeout();

        RegisterContentObserver(
            [in] IUri* uri,
            [in] IContentObserver* observer);

        UnregisterContentObserver(
            [in] ContentObserver observer);

        EnableProximitySensor();

        DisableProximitySensor();

        SetVolumeControlStream(
            [in] Int32 streamType);
    }

    interface IVoicemailPlaybackPresenter {
        /** The enumeration of {@link AsyncTask} objects we use in this class. */
        enmu Tasks {
            CHECK_FOR_CONTENT,
            CHECK_CONTENT_AFTER_CHANGE,
            PREPARE_MEDIA_PLAYER,
            RESET_PREPARE_START_MEDIA_PLAYER,
        }

        OnCreate(
            [in] IBundle* bundle);

        OnSaveInstanceState(
            [in] IBundle* outState);

        OnDestroy();

        CreateRateDecreaseListener(
            [out] IViewOnClickListener** listener);

        CreateRateIncreaseListener(
            [out] IViewOnClickListener** listener);

        HandleCompletion(
            [in] IMediaPlayer* mediaPlayer);

        OnPause();
    }

    } // Voicemail
    } // Dailer
    } // Apps
    } // Elastos
}
