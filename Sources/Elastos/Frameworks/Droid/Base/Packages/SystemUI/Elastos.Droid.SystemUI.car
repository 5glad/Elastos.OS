//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.Droid.Core.eco");

    merge("car/elastos/droid/BatteryMeterView.car");
    merge("car/elastos/droid/DemoMode.car");
    merge("car/elastos/droid/DessertCase.car");
    merge("car/elastos/droid/DessertCaseDream.car");
    merge("car/elastos/droid/DessertCaseView.car");
    merge("car/elastos/droid/ExpandHelper.car");
    merge("car/elastos/droid/Gefingerpoken.car");
    merge("car/elastos/droid/GuestResumeSessionReceiver.car");
    merge("car/elastos/droid/ImageWallpaper.car");
    merge("car/elastos/droid/LoadAverageService.car");
    merge("car/elastos/droid/RecentsComponent.car");
    merge("car/elastos/droid/SearchPanelCircleView.car");
    merge("car/elastos/droid/SearchPanelView.car");
    merge("car/elastos/droid/SwipeHelper.car");
    merge("car/elastos/droid/SystemUI.car");
    merge("car/elastos/droid/SystemUIApplication.car");
    merge("car/elastos/droid/SystemUIService.car");

    //doze
    merge("car/elastos/droid/doze/DozeHost.car");
    merge("car/elastos/droid/doze/DozeService.car");

    //egg
    merge("car/elastos/droid/egg/LLand.car");
    merge("car/elastos/droid/egg/LLandActivity.car");

    //keyguard
    merge("car/elastos/droid/keyguard/AppearAnimationCreator.car");
    merge("car/elastos/droid/keyguard/KeyguardActivityLauncher.car");
    merge("car/elastos/droid/keyguard/KeyguardDisplayManager.car");
    merge("car/elastos/droid/keyguard/KeyguardHostView.car");
    merge("car/elastos/droid/keyguard/KeyguardSecurityViewFlipper.car");
    merge("car/elastos/droid/keyguard/KeyguardSecurityModel.car");
    merge("car/elastos/droid/keyguard/KeyguardSecurityContainer.car");
    merge("car/elastos/droid/keyguard/KeyguardSecurityCallback.car");
    merge("car/elastos/droid/keyguard/KeyguardSecurityView.car");
    merge("car/elastos/droid/keyguard/KeyguardService.car");
    merge("car/elastos/droid/keyguard/KeyguardUpdateMonitor.car");
    merge("car/elastos/droid/keyguard/KeyguardUpdateMonitorCallback.car");
    merge("car/elastos/droid/keyguard/KeyguardViewBase.car");
    merge("car/elastos/droid/keyguard/KeyguardViewMediator.car");
    merge("car/elastos/droid/keyguard/ViewMediatorCallback.car");
    merge("car/elastos/droid/keyguard/SecurityMessageDisplay.car");
    merge("car/elastos/droid/keyguard/KeyguardFaceUnlockView.car");
    merge("car/elastos/droid/keyguard/KeyguardWidgetFrame.car");
    merge("car/elastos/droid/keyguard/PagedView.car");
    merge("car/elastos/droid/keyguard/MultiPaneChallengeLayout.car");
    merge("car/elastos/droid/keyguard/SlidingChallengeLayout.car");
    merge("car/elastos/droid/keyguard/KeyguardMultiUserSelectorView.car");
    merge("car/elastos/droid/keyguard/KeyguardViewStateManager.car");
    merge("car/elastos/droid/keyguard/KeyguardWidgetPager.car");
    merge("car/elastos/droid/keyguard/KeyguardTransportControlView.car");
    merge("car/elastos/droid/keyguard/KeyguardConstants.car");
    merge("car/elastos/droid/keyguard/BiometricSensorUnlock.car");
    merge("car/elastos/droid/keyguard/CameraWidgetFrame.car");
    merge("car/elastos/droid/keyguard/CarrierText.car");
    merge("car/elastos/droid/keyguard/ChallengeLayout.car");
    merge("car/elastos/droid/keyguard/EmergencyButton.car");
    merge("car/elastos/droid/keyguard/EmergencyCarrierArea.car");
    merge("car/elastos/droid/keyguard/KeyguardGlowStripView.car");
    merge("car/elastos/droid/keyguard/KeyguardLinearLayout.car");
    merge("car/elastos/droid/keyguard/KeyguardMessageArea.car");
    merge("car/elastos/droid/keyguard/KeyguardMultiUserAvatar.car");
    merge("car/elastos/droid/keyguard/KeyguardCircleFramedDrawable.car");
    merge("car/elastos/droid/keyguard/PasswordTextView.car");
    merge("car/elastos/droid/keyguard/KeyguardStatusView.car");

    //usb
    merge("car/elastos/droid/usb/StorageNotification.car");
    merge("car/elastos/droid/usb/UsbStorageActivity.car");

    //volume
    merge("car/elastos/droid/volume/InteractionCallback.car");
    merge("car/elastos/droid/volume/SegmentedButtons.car");
    merge("car/elastos/droid/volume/VolumeComponent.car");
    merge("car/elastos/droid/volume/VolumePanel.car");
    merge("car/elastos/droid/volume/ZenModePanel.car");
    merge("car/elastos/droid/volume/VolumeUI.car");


    //net
    merge("car/elastos/droid/net/NetworkOverLimitActivity.car");

    //power
    merge("car/elastos/droid/power/PowerUI.car");

    //qs
    merge("car/elastos/droid/qs/DataUsageGraph.car");
    merge("car/elastos/droid/qs/GlobalSetting.car");
    merge("car/elastos/droid/qs/PseudoGridView.car");
    merge("car/elastos/droid/qs/QSDetailClipper.car");
    merge("car/elastos/droid/qs/QSDetailItems.car");
    merge("car/elastos/droid/qs/QSDualTileLabel.car");
    merge("car/elastos/droid/qs/QSFooter.car");
    merge("car/elastos/droid/qs/QSPanel.car");
    merge("car/elastos/droid/qs/QSTile.car");
    merge("car/elastos/droid/qs/QSTileView.car");
    merge("car/elastos/droid/qs/SecureSetting.car");
    merge("car/elastos/droid/qs/SignalTileView.car");
    merge("car/elastos/droid/qs/UsageTracker.car");

    //qs/tiles
    merge("car/elastos/droid/qs/tiles/AirplaneModeTile.car");
    merge("car/elastos/droid/qs/tiles/BluetoothTile.car");
    merge("car/elastos/droid/qs/tiles/CastTile.car");
    merge("car/elastos/droid/qs/tiles/CellularTile.car");
    merge("car/elastos/droid/qs/tiles/ColorInversionTile.car");
    merge("car/elastos/droid/qs/tiles/DataUsageDetailView.car");
    merge("car/elastos/droid/qs/tiles/FlashlightTile.car");
    merge("car/elastos/droid/qs/tiles/HotspotTile.car");
    merge("car/elastos/droid/qs/tiles/IntentTile.car");
    merge("car/elastos/droid/qs/tiles/LocationTile.car");
    merge("car/elastos/droid/qs/tiles/RotationLockTile.car");
    merge("car/elastos/droid/qs/tiles/UserDetailItemView.car");
    merge("car/elastos/droid/qs/tiles/UserDetailView.car");
    merge("car/elastos/droid/qs/tiles/WifiTile.car");

    //statusbar
    merge("car/elastos/droid/statusbar/ActivatableNotificationView.car");
    merge("car/elastos/droid/statusbar/AlphaImageView.car");
    merge("car/elastos/droid/statusbar/AlphaOptimizedFrameLayout.car");
    merge("car/elastos/droid/statusbar/AnimatedImageView.car");
    merge("car/elastos/droid/statusbar/BackDropView.car");
    merge("car/elastos/droid/statusbar/BaseStatusBar.car");
    merge("car/elastos/droid/statusbar/CommandQueue.car");
    merge("car/elastos/droid/statusbar/DelegateViewHelper.car");
    merge("car/elastos/droid/statusbar/DismissView.car");
    merge("car/elastos/droid/statusbar/DragDownHelper.car");
    merge("car/elastos/droid/statusbar/ExpandableNotificationRow.car");
    merge("car/elastos/droid/statusbar/ExpandableView.car");
    merge("car/elastos/droid/statusbar/ExpandableOutlineView.car");
    merge("car/elastos/droid/statusbar/GestureRecorder.car");
    merge("car/elastos/droid/statusbar/KeyguardAffordanceView.car");
    merge("car/elastos/droid/statusbar/KeyguardIndicationController.car");
    merge("car/elastos/droid/statusbar/NotificationBackgroundView.car");
    merge("car/elastos/droid/statusbar/NotificationData.car");
    merge("car/elastos/droid/statusbar/NotificationGuts.car");
    merge("car/elastos/droid/statusbar/ServiceMonitor.car");
    merge("car/elastos/droid/statusbar/SignalClusterView.car");
    merge("car/elastos/droid/statusbar/StatusBarIconView.car");
    merge("car/elastos/droid/statusbar/SystemBars.car");
    merge("car/elastos/droid/statusbar/NotificationContentView.car");
    merge("car/elastos/droid/statusbar/StatusBarPanel.car");

    //statusbar/phone
    merge("car/elastos/droid/statusbar/phone/ActivityStarter.car");
    merge("car/elastos/droid/statusbar/phone/BarTransitions.car");
    merge("car/elastos/droid/statusbar/phone/BounceInterpolator.car");
    merge("car/elastos/droid/statusbar/phone/DemoStatusIcons.car");
    merge("car/elastos/droid/statusbar/phone/DozeParameters.car");
    merge("car/elastos/droid/statusbar/phone/IconMerger.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardAffordanceHelper.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardBottomAreaView.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardBouncer.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardIndicationTextView.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardPreviewContainer.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardStatusBarView.car");
    merge("car/elastos/droid/statusbar/phone/KeyguardTouchDelegate.car");
    merge("car/elastos/droid/statusbar/phone/MultiUserSwitch.car");
    merge("car/elastos/droid/statusbar/phone/NavigationBarView.car");
    merge("car/elastos/droid/statusbar/phone/NavigationBarViewTaskSwitchHelper.car");
    merge("car/elastos/droid/statusbar/phone/NoisyVelocityTracker.car");
    merge("car/elastos/droid/statusbar/phone/NotificationPanelView.car");
    merge("car/elastos/droid/statusbar/phone/NotificationsQuickSettingsContainer.car");
    merge("car/elastos/droid/statusbar/phone/ObservableScrollView.car");
    merge("car/elastos/droid/statusbar/phone/PanelBar.car");
    merge("car/elastos/droid/statusbar/phone/PanelHolder.car");
    merge("car/elastos/droid/statusbar/phone/PanelView.car");
    merge("car/elastos/droid/statusbar/phone/PhoneStatusBar.car");
    merge("car/elastos/droid/statusbar/phone/PhoneStatusBarPolicy.car");
    merge("car/elastos/droid/statusbar/phone/PhoneStatusBarTransitions.car");
    merge("car/elastos/droid/statusbar/phone/PhoneStatusBarView.car");
    merge("car/elastos/droid/statusbar/phone/PlatformVelocityTracker.car");
    merge("car/elastos/droid/statusbar/phone/QSTileHost.car");
    merge("car/elastos/droid/statusbar/phone/ScrimController.car");
    merge("car/elastos/droid/statusbar/phone/SecureCameraLaunchManager.car");
    merge("car/elastos/droid/statusbar/phone/StatusBarHeaderView.car");
    merge("car/elastos/droid/statusbar/phone/StatusBarKeyguardViewManager.car");
    merge("car/elastos/droid/statusbar/phone/StatusBarWindowManager.car");
    merge("car/elastos/droid/statusbar/phone/StatusBarWindowView.car");
    merge("car/elastos/droid/statusbar/phone/SystemUIDialog.car");
    merge("car/elastos/droid/statusbar/phone/Ticker.car");
    merge("car/elastos/droid/statusbar/phone/TickerView.car");
    merge("car/elastos/droid/statusbar/phone/UnlockMethodCache.car");
    merge("car/elastos/droid/statusbar/phone/UserAvatarView.car");
    merge("car/elastos/droid/statusbar/phone/VelocityTrackerFactory.car");
    merge("car/elastos/droid/statusbar/phone/VelocityTrackerInterface.car");

    //statusbar/stack
    merge("car/elastos/droid/statusbar/stack/AmbientState.car");
    merge("car/elastos/droid/statusbar/stack/AnimationFilter.car");
    merge("car/elastos/droid/statusbar/stack/NotificationStackScrollLayout.car");
    merge("car/elastos/droid/statusbar/stack/StackIndentationFunctor.car");
    merge("car/elastos/droid/statusbar/stack/StackScrollState.car");
    merge("car/elastos/droid/statusbar/stack/StackScrollAlgorithm.car");
    merge("car/elastos/droid/statusbar/stack/StackStateAnimator.car");

    //statusbar/tv
    merge("car/elastos/droid/statusbar/tv/TvStatusBar.car");

    //statusbar/policy
    merge("car/elastos/droid/statusbar/policy/AccessibilityController.car");
    merge("car/elastos/droid/statusbar/policy/BatteryController.car");
    merge("car/elastos/droid/statusbar/policy/BluetoothController.car");
    merge("car/elastos/droid/statusbar/policy/BluetoothUtil.car");
    merge("car/elastos/droid/statusbar/policy/BrightnessMirrorController.car");
    merge("car/elastos/droid/statusbar/policy/CastController.car");
    merge("car/elastos/droid/statusbar/policy/Clock.car");
    merge("car/elastos/droid/statusbar/policy/DateView.car");
    merge("car/elastos/droid/statusbar/policy/DeadZone.car");
    merge("car/elastos/droid/statusbar/policy/FlashlightController.car");
    merge("car/elastos/droid/statusbar/policy/HeadsUpNotificationView.car");
    merge("car/elastos/droid/statusbar/policy/HotspotController.car");
    merge("car/elastos/droid/statusbar/policy/KeyButtonRipple.car");
    merge("car/elastos/droid/statusbar/policy/KeyButtonView.car");
    merge("car/elastos/droid/statusbar/policy/KeyguardMonitor.car");
    merge("car/elastos/droid/statusbar/policy/KeyguardUserSwitcher.car");
    merge("car/elastos/droid/statusbar/policy/KeyguardUserSwitcherScrim.car");
    merge("car/elastos/droid/statusbar/policy/Listenable.car");
    merge("car/elastos/droid/statusbar/policy/LocationController.car");
    merge("car/elastos/droid/statusbar/policy/MobileDataController.car");
    merge("car/elastos/droid/statusbar/policy/NetworkController.car");
    merge("car/elastos/droid/statusbar/policy/NetworkControllerImpl.car");
    merge("car/elastos/droid/statusbar/policy/NextAlarmController.car");
    merge("car/elastos/droid/statusbar/policy/PreviewInflater.car");
    merge("car/elastos/droid/statusbar/policy/RotationLockController.car");
    merge("car/elastos/droid/statusbar/policy/ScrollAdapter.car");
    merge("car/elastos/droid/statusbar/policy/SecurityController.car");
    merge("car/elastos/droid/statusbar/policy/SplitClockView.car");
    merge("car/elastos/droid/statusbar/policy/UserInfoController.car");
    merge("car/elastos/droid/statusbar/policy/UserSwitcherController.car");
    merge("car/elastos/droid/statusbar/policy/WifiAccessPointController.car");
    merge("car/elastos/droid/statusbar/policy/ZenModeController.car");

    //recent
    merge("car/elastos/droid/recent/Constants.car");
    merge("car/elastos/droid/recent/RecentsCallback.car");
    merge("car/elastos/droid/recent/TaskDescription.car");
    merge("car/elastos/droid/recent/RecentsPanelView.car");
    merge("car/elastos/droid/recent/RecentTasksLoader.car");
    merge("car/elastos/droid/recent/RecentsActivity.car");

    //recents
    merge("car/elastos/droid/recents/AlternateRecentsComponent.car");
    //merge("car/elastos/droid/recents/Constants.car");
    merge("car/elastos/droid/recents/RecentsActivity.car");
    merge("car/elastos/droid/recents/RecentsAppWidgetHost.car");
    merge("car/elastos/droid/recents/RecentsConfiguration.car");

    //recents/model
    merge("car/elastos/droid/recents/model/RecentsPackageMonitor.car");
    merge("car/elastos/droid/recents/model/Task.car");
    merge("car/elastos/droid/recents/model/TaskGrouping.car");
    merge("car/elastos/droid/recents/model/TaskStack.car");
    merge("car/elastos/droid/recents/model/SpaceNode.car");

    //recents/views
    merge("car/elastos/droid/recents/views/DebugOverlayView.car");
    merge("car/elastos/droid/recents/views/FakeShadowDrawable.car");
    merge("car/elastos/droid/recents/views/FixedSizeImageView.car");
    merge("car/elastos/droid/recents/views/RecentsView.car");
    merge("car/elastos/droid/recents/views/SwipeHelper.car");
    merge("car/elastos/droid/recents/views/TaskView.car");
    merge("car/elastos/droid/recents/views/TaskStackViewScroller.car");
    merge("car/elastos/droid/recents/views/TaskStackView.car");
    merge("car/elastos/droid/recents/views/TaskViewFooter.car");
    merge("car/elastos/droid/recents/views/TaskViewHeader.car");
    merge("car/elastos/droid/recents/views/TaskViewThumbnail.car");
    merge("car/elastos/droid/recents/views/ViewPool.car");
    merge("car/elastos/droid/recents/views/TaskStackViewLayoutAlgorithm.car");
    merge("car/elastos/droid/recents/views/AnimateableViewBounds.car");

    //settings
    merge("car/elastos/droid/settings/BrightnessController.car");
    merge("car/elastos/droid/settings/ToggleSlider.car");

    using interface Elastos.Droid.App.IApplication;
    using interface Elastos.Droid.App.IAlertDialog;
    using interface Elastos.Droid.App.IDialog;
    using interface Elastos.Droid.App.INotification;
    using interface Elastos.Droid.App.IService;
    using interface Elastos.Droid.App.IActivity;
    using interface Elastos.Droid.App.IIUserSwitchObserver;
    using interface Elastos.Droid.Animation.IAnimatorListener;
    using interface Elastos.Droid.Animation.ITimeInterpolator;
    using interface Elastos.Droid.Content.IBroadcastReceiver;
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Content.IContextWrapper;
    using interface Elastos.Droid.Content.IComponentCallbacks;
    using interface Elastos.Droid.Content.IComponentCallbacks2;
    using interface Elastos.Droid.Content.IDialogInterface;
    using interface Elastos.Droid.Content.IIntent;
    using interface Elastos.Droid.Content.Res.IResources;
    using interface Elastos.Droid.Content.Pm.IResolveInfo;
    using interface Elastos.Droid.Database.IContentObserver;
    using interface Elastos.Droid.Database.IDataSetObserver;
    using interface Elastos.Droid.Media.IIRemoteVolumeController;
    using interface Elastos.Droid.Media.IIRingtonePlayer;
    using interface Elastos.Droid.Media.IIVolumeController;
    using interface Elastos.Droid.Media.IAudioManager;
    using interface Elastos.Droid.Utility.IAttributeSet;
    using interface Elastos.Droid.Graphics.Drawable.IColorDrawable;
    using interface Elastos.Droid.Graphics.Drawable.IDrawable;
    using interface Elastos.Droid.Graphics.Drawable.IDrawableCallback;
    using interface Elastos.Droid.Graphics.Drawable.IInsetDrawable;
    using interface Elastos.Droid.Internal.App.IAlertActivity;
    using interface Elastos.Droid.Internal.App.IResolverActivity;
    using interface Elastos.Droid.Internal.Policy.IIKeyguardService;
    using interface Elastos.Droid.Internal.Policy.IIFaceLockCallback;
    using interface Elastos.Droid.Internal.StatusBar.IIStatusBar;
    using interface Elastos.Droid.Internal.StatusBar.IStatusBarIconList;
    using interface Elastos.Droid.Os.IBinder;
    using interface Elastos.Droid.Os.IHandler;
    using interface Elastos.Droid.Os.IHandlerCallback;
    using interface Elastos.Droid.Service.Dreams.IDreamService;
    using interface Elastos.Droid.Service.Notification.IIConditionListener;
    using interface Elastos.Droid.Service.Notification.INotificationListenerService;
    using interface Elastos.Droid.Service.Wallpaper.IWallpaperService;
    using interface Elastos.Droid.Text.ITextWatcher;
    using interface Elastos.Droid.View.IView;
    using interface Elastos.Droid.View.IRotationWatcher;
    using interface Elastos.Droid.View.IViewOnLayoutChangeListener;
    using interface Elastos.Droid.View.IViewOutlineProvider;
    using interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource;
    using interface Elastos.Droid.View.IViewOnClickListener;
    using interface Elastos.Droid.View.IViewOnLongClickListener;
    using interface Elastos.Droid.View.IContextThemeWrapper;
    using interface Elastos.Droid.View.ILayoutInflaterFactory;
    using interface Elastos.Droid.View.ILayoutInflaterFactory2;
    using interface Elastos.Droid.View.IOnPreDrawListener;
    using interface Elastos.Droid.View.IOnWindowDismissedCallback;
    using interface Elastos.Droid.View.IViewGroupMarginLayoutParams;
    using interface Elastos.Droid.View.IViewGroupLayoutParams;
    using interface Elastos.Droid.View.IViewGroup;
    using interface Elastos.Droid.View.IViewManager;
    using interface Elastos.Droid.View.IViewParent;
    using interface Elastos.Droid.View.IViewStubOnInflateListener;
    using interface Elastos.Droid.View.IWindowCallback;
    using interface Elastos.Droid.View.IKeyEventCallback;
    using interface Elastos.Droid.View.IViewOnKeyListener;
    using interface Elastos.Droid.View.IViewOnCreateContextMenuListener;
    using interface Elastos.Droid.View.Animation.IInterpolator;
    using interface Elastos.Droid.Widget.IButton;
    using interface Elastos.Droid.Widget.IBaseAdapter;
    using interface Elastos.Droid.Widget.IAbsSeekBar;
    using interface Elastos.Droid.Widget.IAdapterViewOnItemClickListener;
    using interface Elastos.Droid.Widget.ICompoundButtonOnCheckedChangeListener;
    using interface Elastos.Droid.Widget.IFrameLayout;
    using interface Elastos.Droid.Widget.IGridLayout;
    using interface Elastos.Droid.Widget.IImageButton;
    using interface Elastos.Droid.Widget.IImageView;
    using interface Elastos.Droid.Widget.ILinearLayout;
    using interface Elastos.Droid.Widget.IProgressBar;
    using interface Elastos.Droid.Widget.IRelativeLayout;
    using interface Elastos.Droid.Widget.ISeekBar;
    using interface Elastos.Droid.Widget.IScrollView;
    using interface Elastos.Droid.Widget.ITextView;
    using interface Elastos.Droid.Widget.ITextSwitcher;
    using interface Elastos.Droid.Widget.IViewAnimator;
    using interface Elastos.Droid.Widget.IViewSwitcher;
    using interface Elastos.Droid.Widget.IViewFlipper;
    using interface Elastos.Droid.Widget.IOnEditorActionListener;
    using interface Elastos.Droid.Widget.IFrameLayoutLayoutParams;
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.SystemUI.IDemoMode;
    interface Elastos.Droid.SystemUI.IExpandHelperCallback;
    interface Elastos.Droid.SystemUI.IRecentsComponent;
    interface Elastos.Droid.SystemUI.IRecentsComponentCallbacks;
    interface Elastos.Droid.SystemUI.ISystemUI;
    interface Elastos.Droid.SystemUI.ISwipeHelperCallback;
    interface Elastos.Droid.SystemUI.Qs.IQSPanel;
    interface Elastos.Droid.SystemUI.Qs.IQSTile;
    interface Elastos.Droid.SystemUI.StatusBar.IBaseStatusBar;
    interface Elastos.Droid.SystemUI.StatusBar.ICommandQueueCallbacks;
    interface Elastos.Droid.SystemUI.StatusBar.IDragDownCallback;
    interface Elastos.Droid.SystemUI.StatusBar.IExpansionLogger;
    interface Elastos.Droid.SystemUI.StatusBar.IExpandableViewOnHeightChangedListener;
    interface Elastos.Droid.SystemUI.StatusBar.INotificationEnvironment;
    interface Elastos.Droid.SystemUI.StatusBar.INotificationOverflowIconsView;
    interface Elastos.Droid.SystemUI.StatusBar.IStatusBarPanel;
    interface Elastos.Droid.SystemUI.StatusBar.Stack.IOnOverscrollTopChangedListener;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IAccessibilityStateChangedCallback;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IBatteryStateChangeCallback;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IClock;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IKeyguardUserSwitcher;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IListenable;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.INetworkControllerImplSignalCluster;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.INextAlarmChangeCallback;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IScrollAdapter;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.ISecurityControllerCallback;
    interface Elastos.Droid.SystemUI.StatusBar.Policy.IZenModeController;
    interface Elastos.Droid.SystemUI.StatusBar.Phone.IIconMerger;
    interface Elastos.Droid.SystemUI.StatusBar.Phone.ISystemUIDialog;
    interface Elastos.Droid.SystemUI.Recents.Model.ITaskStack;
    interface Elastos.Droid.SystemUI.Recents.IRecentsConfiguration;
    interface Elastos.Droid.SystemUI.Recents.IRecentsAppWidgetHostCallbacks;
    interface Elastos.Droid.SystemUI.Recents.Views.IRecentsViewCallbacks;
    interface Elastos.Droid.SystemUI.Recents.Views.IDebugOverlayViewCallbacks;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {

    class CImageWallpaper {
        constructor();

        interface IImageWallpaper;
        interface IWallpaperService;
        interface IService;
        interface IContext;
        interface IContextWrapper;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
    }

    class CLoadAverageService {
        constructor();

        interface ILoadAverageService;
        interface IService;
        interface IContext;
        interface IContextWrapper;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
    }

    class CSomnambulator {
        constructor();

        interface IActivity;
        interface IContext;
        interface IContextWrapper;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
    }

    class CSystemUIService {
        constructor();

        interface ISystemUIService;
        interface IService;
        interface IContext;
        interface IContextWrapper;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
    }

    class CSystemUIApplication {
        constructor();

        interface ISystemUIApplication;
        interface IApplication;
        interface IContextWrapper;
        interface IContext;
        interface IComponentCallbacks2;
        interface IComponentCallbacks;
    }

    [local]
    class CSystemUIBroadcastReceiver {
        constructor(
            [in] ISystemUIApplication* host);

        interface IBroadcastReceiver;
    }

    [local]
    class CBatteryMeterView {
        constructor(
            [in] IContext* ctx);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IBatteryStateChangeCallback;
        interface IDemoMode;
    }

    class CBootReceiver {
        constructor();

        interface IBroadcastReceiver;
    }

    class CDessertCase {
        constructor();

        interface IDessertCase;
        interface IActivity;
        interface IContext;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
    }

    class CDessertCaseDream {
        constructor();

        interface IDessertCaseDream;
        interface IDreamService;
        interface IService;
        interface IContext;
        interface IContextWrapper;
        interface IComponentCallbacks2;
        interface IComponentCallbacks;
        interface IWindowCallback;
    }

    [local]
    class CDessertCaseView {
        constructor(
            [in] IContext* ctx);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        interface IDessertCaseView;
        interface IFrameLayout;
        interface IViewGroup;
        interface IView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [local]
    class CSwipeHelper {
        constructor(
            [in] Int32 swipeDirection,
            [in] ISwipeHelperCallback* cb,
            [in] IContext* ctx);

        interface ISwipeHelper;
        interface IGefingerpoken;
    }

    [local]
    class CExpandHelper {
        /**
         * Handle expansion gestures to expand and contract children of the callback.
         *
         * @param context application context
         * @param callback the container that holds the items to be manipulated
         * @param small the smallest allowable size for the manuipulated items.
         * @param large the largest allowable size for the manuipulated items.
         * @param scoller if non-null also manipulate the scroll position to obey the gravity.
         */
        constructor(
            [in] IContext* ctx,
            [in] IExpandHelperCallback* cb,
            [in] Int32 small,
            [in] Int32 large);

        interface IExpandHelper;
        interface IViewOnClickListener;
    }

    [local]
    class CViewScaler {
        constructor(
            [in] IExpandHelper* helper);

        interface IViewScaler;
    }

    class CGuestResumeSessionReceiver {
        constructor();

        interface IGuestResumeSessionReceiver;
        interface IBroadcastReceiver;
    }

    [local]
    class CResetSessionDialog {
        constructor(
            [in] IContext* ctx,
            [in] Int32 userId);

        interface ISystemUIDialog;
        interface IAlertDialog;
        interface IDialog;
        interface IDialogInterface;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IOnWindowDismissedCallback;
    }

    [local]
    class CSearchPanelView {
        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        interface ISearchPanelView;
        interface IStatusBarPanel;
        interface IFrameLayout;
        interface IViewGroup;
        interface IView;
        interface IViewParent;
        interface IViewManager;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    class CBatteryMeterViewBatteryTracker {
        constructor(
            [in] IBatteryMeterView* view);

        interface IBroadcastReceiver;
    }

    [local]
    class CSearchPanelCircleView {
        constructor(
            [in] IContext* ctx);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle,
            [in] Int32 defStyleRes);

        interface ISearchPanelCircleView;
        interface IFrameLayout;
        interface IViewGroup;
        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IViewParent;
        interface IViewManager;
    }

    //===========================================================================
    //                              Doze
    //===========================================================================
    namespace Doze {
        class CDozeService {
            constructor();

            interface IDozeService;
            interface IDreamService;
            interface IService;
            interface IContext;
            interface IContextWrapper;
            interface IComponentCallbacks2;
            interface IComponentCallbacks;
            interface IWindowCallback;
        }
    } // namespace Doze

    //===========================================================================
    //                              Egg
    //===========================================================================
    namespace Egg {
        [local]
        class CLLand {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface ILLand;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IViewParent;
            interface IViewManager;
        }

        class CLLandActivity {
            constructor();

            interface ILLandActivity;
            interface IActivity;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IContextThemeWrapper;
            interface IContextWrapper;
            interface IContext;
        }

        singleton class CLLandHelper {
            interface ILLandHelper;
        }

    } // namespace Egg

    //===========================================================================
    //                              Keyguard
    //===========================================================================
    namespace Keyguard {

        class CKeyguardService {
            constructor();

            interface IKeyguardService;
            interface IService;
            interface IContext;
            interface IContextWrapper;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
        }

        class CKeyguardViewMediator {
            constructor();

            interface IKeyguardViewMediator;
            interface ISystemUI;
        }

        [local]
        class CAlphaOptimizedLinearLayout {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface ILinearLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardStatusView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            interface IGridLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardStatusView;
        }

        [local]
        class CAlphaOptimizedImageButton {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IImageButton;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CAlphaOptimizedRelativeLayout {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IRelativeLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CIKeyguardService {
            constructor(
                [in] IKeyguardService* host);

            interface IIKeyguardService;
            interface IBinder;
        }

        [local]
        class CCarrierText {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface ICarrierText;
            interface ITextView;
            interface IView;
            interface IOnPreDrawListener;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CEmergencyButton {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IButton;
            interface IEmergencyButton;
            interface ITextView;
            interface IView;
            interface IOnPreDrawListener;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CEmergencyCarrierArea {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IEmergencyCarrierArea;
        }

        class CFaceUnlockFaceLockCallback {
            constructor(
                [in] IHandlerCallback* face);

            interface IIFaceLockCallback;
            interface IBinder;
        }

        [local]
        class CKeyguardAccountView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
        }

        [local]
        class CKeyguardFaceUnlockView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
        }

        class CKeyguardFaceUnlockViewRotationWatcher {
            constructor(
                [in] IKeyguardFaceUnlockView* host);

            interface IBinder;
            interface IRotationWatcher;
        }

        [local]
        class CKeyguardGlowStripView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardGlowStripView;
        }

        [local]
        class CKeyguardHostView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardViewBase;
            interface IKeyguardHostView;
        }

        [local]
        class CKeyguardWidgetFrame {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardWidgetFrame;
        }

        [local]
        class CKeyguardLinearLayout {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
        }

        [local]
        class CKeyguardMessageArea {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface ITextView;
            interface IView;
            interface IOnPreDrawListener;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardMessageArea;
        }

        [local]
        class CKeyguardMultiUserAvatar {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardMultiUserAvatar;
        }

        [local]
        class CKeyguardMultiUserSelectorView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardMultiUserSelectorView;
            interface IViewOnClickListener;
        }

        [local]
        class CKeyguardPINView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
            interface IViewOnKeyListener;
        }

        [local]
        class CKeyguardPasswordView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
        }

        [local]
        class CKeyguardPatternView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
            interface IAppearAnimationCreator;
        }

        [local]
        class CKeyguardSimPinView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
        }

        [local]
        class CKeyguardSimPukView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IKeyguardSecurityView;
        }

        [local]
        class CKeyguardTransportControlView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IKeyguardTransportControlView;
        }

        [local]
        class CKeyguardWidgetPager {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IPagedView;
            interface IKeyguardWidgetPager;
            interface IChallengeLayoutOnBouncerStateChangedListener;
        }

        [local]
        class CKeyguardWidgetCarousel {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IPagedView;
            interface IKeyguardWidgetPager;
            interface IChallengeLayoutOnBouncerStateChangedListener;
        }

        [local]
        class CMultiPaneChallengeLayout {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IChallengeLayout;
            interface IMultiPaneChallengeLayout;
        }

        [local]
        class CNumPadKey {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
        }

        [local]
        class CPasswordTextView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IPasswordTextView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CSlidingChallengeLayout {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IChallengeLayout;
            interface ISlidingChallengeLayout;
        }

    } // namespace Keyguard

    //===========================================================================
    //                              usb
    //===========================================================================
    namespace Usb {

        class CStorageNotification
        {
            constructor();

            interface IStorageNotification;
            interface ISystemUI;
        }

        class CUsbAccessoryUriActivity {
            constructor();

            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
            interface IAlertActivity;
        }

        class CUsbConfirmActivity {
            constructor();

            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
            interface IAlertActivity;
        }

        class CUsbStorageActivity {
            constructor();

            interface IUsbStorageActivity;
            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
        }

        class CUsbDebuggingActivity {
            constructor();

            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
            interface IAlertActivity;
        }

        class CUsbPermissionActivity {
            constructor();

            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
            interface IAlertActivity;
        }

        class CUsbResolverActivity {
            constructor();

            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
            interface IResolverActivity;
        }

    } // namespace Usb

    //===========================================================================
    //                              volume
    //===========================================================================
    namespace Volume {

        [local]
        class CSegmentedButtons {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface ISegmentedButtons;
        }

        class CVolumeController {
            constructor(
                [in] IVolumeUI* host);

            interface IIVolumeController;
            interface IBinder;
            interface IVolumeComponent;
        }

        class CRemoteVolumeController {
            constructor(
                [in] IVolumeUI* host);

            interface IIRemoteVolumeController;
            interface IBinder;
        }

        [local]
        class CZenModePanel {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IView;
            interface IViewGroup;
            interface IViewParent;
            interface IViewManager;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface IDrawableCallback;
            interface ILinearLayout;
            interface IZenModePanel;
        }

        [local]
        class CVolumePanel {
            constructor(
                [in] IContext* ctx,
                [in] IZenModeController* zenController);

            interface IHandler;
            interface IVolumePanel;
        }

        class CVolumeUI {
            constructor();

            interface ISystemUI;
        }

        class CVolumePanelBroadcastReceiver {
            constructor(
                [in] IVolumePanel* host);

            interface IBroadcastReceiver;
        }

        class CVolumePanelCloseSystemDialogsReceiver {
            constructor(
                [in] ISystemUIDialog* host);

            interface IBroadcastReceiver;
        }

        [local]
        class CVolumePanelSafetyWarning {
            constructor(
                [in] IContext* ctx,
                [in] IVolumePanel* volumePanel,
                [in] IAudioManager* audioManager);

            interface ISystemUIDialog;
            interface IAlertDialog;
            interface IDialog;
            interface IDialogInterface;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IOnWindowDismissedCallback;
        }

        [local]
        class CVolumeDialog {
            constructor(
                [in] IContext* ctx,
                [in] IVolumePanel* volumePanel);

            interface IDialog;
            interface IDialogInterface;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IOnWindowDismissedCallback;
        }
    }

     //===========================================================================
     //                              Media
     //===========================================================================
     namespace Media {

        class CMediaProjectionPermissionActivity {
            constructor();

            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IActivity;
            interface IAlertActivity;
        }

        [local]
        class CMyRingtonePlayer {
            constructor(
                [in] ISystemUI* host);

            interface IIRingtonePlayer;
            interface IBinder;
        }

        class CRingtonePlayer {
            constructor();

            interface ISystemUI;
        }

     } // namespace Media

    //===========================================================================
    //                              Net
    //===========================================================================
    namespace Net {

        class CNetworkOverLimitActivity {
            constructor();

            interface INetworkOverLimitActivity;
            interface IActivity;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IContextThemeWrapper;
            interface IContextWrapper;
            interface IContext;
        }

    } // namespace Net

    //===========================================================================
    //                              Power
    //===========================================================================
    namespace Power {
        class CPowerUI {
            constructor();

            interface IPowerUI;
            interface ISystemUI;
        }

        class CPowerUIReceiver {
            constructor(
                [in] IPowerUI* host);

            interface IBroadcastReceiver;
        }

    } // Power

    //===========================================================================
    //                              Recent
    //===========================================================================
    namespace Recent {
        [local]
        class CRecentsPanelView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            interface IRecentsPanelView;
            interface IAdapterViewOnItemClickListener;
            interface IStatusBarPanel;
            interface IAnimatorListener;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CRecentsVerticalScrollView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IRecentsScrollView;
            interface ISwipeHelperCallback;
            interface IScrollView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CRecents {
            constructor();

            interface IRecentsComponent;
            interface ISystemUI;
        }

        class CRecentsActivity {
            constructor();

            interface IActivity;
            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IRecentsActivity;
        }

        class CRecentsPreloadReceiver {
            constructor();

            interface IBroadcastReceiver;
        }

        class CColorDrawableWithDimensions {
            constructor(
                [in] Int32 color,
                [in] Int32 width,
                [in] Int32 height);

            interface IColorDrawable;
            interface IDrawable;
        }
    } // Recent

    //===========================================================================
    //                              Recents
    //===========================================================================
    namespace Recents {

        class CRecentsActivity {
            constructor();

            interface IActivity;
            interface IContext;
            interface IContextWrapper;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
            interface IRecentsActivity;
        }

        [local]
        class CRecentAnimationEndedReceiver {
            constructor(
                [in] IAlternateRecentsComponent* host);

            interface IBroadcastReceiver;
        }

        [local]
        class CRecentsActivityServiceBroadcastReceiver {
            constructor(
                [in] IRecentsActivity* host);

            interface IBroadcastReceiver;
        }

        [local]
        class CRecentsActivitySystemBroadcastReceiver {
            constructor(
                [in] IRecentsActivity* host);

            interface IBroadcastReceiver;
        }

    namespace Views {
        [local]
        class CDebugOverlayView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IDebugOverlayView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CFixedSizeImageView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IFixedSizeImageView;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CRecentsView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IRecentsView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CTaskStackView {
            constructor(
                [in] IContext* ctx,
                [in] ITaskStack* stack);

            interface ITaskStackView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CTaskView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface ITaskView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CTaskViewFooter {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface ITaskViewFooter;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CTaskViewHeader {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface ITaskViewHeader;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CTaskViewThumbnail {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface ITaskViewThumbnail;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CFakeShadowDrawable {
            constructor(
                [in] IResources* res,
                [in] IRecentsConfiguration* config);

            interface IDrawable;
        }

        [local]
        class CTaskStackViewScroller {
            constructor(
                [in] IContext* context,
                [in] IRecentsConfiguration* config,
                [in] ITaskStackViewLayoutAlgorithm* layoutAlgorithm);

            interface ITaskStackViewScroller;
        }

        [local]
        class CAnimateableViewBounds {
            constructor(
                [in] ITaskView* taskView,
                [in] Int32 cornerRadius);

            interface IAnimateableViewBounds;
            interface IViewOutlineProvider;
        }


    } // namespace Views
    } // namespace Recents

    //===========================================================================
    //                              Screenshot
    //===========================================================================
    namespace Screenshot {

        class CTakeScreenshotService {
            constructor();

            interface IService;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IContextWrapper;
            interface IContext;
        }

    } // namespace Screenshot

    //===========================================================================
    //                              StatusBar
    //===========================================================================
    namespace StatusBar {
        class CSystemBars {
            constructor();

            interface ISystemUI;
            interface IServiceMonitorCallbacks;
        }

        [local]
        class CAlphaImageView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IAlphaImageView;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNotificationBackgroundView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationBackgroundView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CAnimatedImageView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IAnimatedImageView;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CAlphaOptimizedView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IAlphaOptimizedView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CAlphaOptimizedFrameLayout {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IAlphaOptimizedFrameLayout;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNotificationContentView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationContentView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CDismissView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IDismissView;
            interface IStackScrollerDecorView;
            interface IExpandableView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CEmptyShadeView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IEmptyShadeView;
            interface IStackScrollerDecorView;
            interface IExpandableView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CSpeedBumpView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface ISpeedBumpView;
            interface IExpandableView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CCommandQueue {
            constructor(
                [in] ICommandQueueCallbacks* cbs,
                [in] IStatusBarIconList* list);

            interface ICommandQueue;
            interface IIStatusBar;
            interface IBinder;
        }

        [local]
        class CBackDropView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IBackDropView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CDismissViewImageButton {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IDismissViewImageButton;
            interface IImageButton;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CExpandableNotificationRow {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IExpandableNotificationRow;
            interface IActivatableNotificationView;
            interface IExpandableOutlineView;
            interface IExpandableView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNotificationOverflowContainer {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationOverflowContainer;
            interface IActivatableNotificationView;
            interface IExpandableOutlineView;
            interface IExpandableView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CScrimView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IScrimView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNotificationGuts {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationGuts;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local, deprecated]
        class CStatusBarIconView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] String attrs,
                [in] INotification* notification);

            interface IStatusBarIconView;
            interface IAnimatedImageView;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardAffordanceView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IKeyguardAffordanceView;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CSignalClusterView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface ISignalClusterView;
            interface ILinearLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
            interface INetworkControllerImplSignalCluster;
            interface ISecurityControllerCallback;
        }

        [local]
        class CNotificationOverflowIconsView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationOverflowIconsView;
            interface IIconMerger;
            interface ILinearLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CSettingsObserver {
            constructor(
                [in] IHandler* handler,
                [in] IBaseStatusBar* host);

            interface IContentObserver;
        }

        class CLockscreenSettingsObserver {
            constructor(
                [in] IHandler* handler,
                [in] IBaseStatusBar* host);

            interface IContentObserver;
        }

        class CBaseBroadcastReceiver {
            constructor(
                [in] IBaseStatusBar* bar);

            interface IBroadcastReceiver;
        }

        class CNotificationListenerService {
            constructor();

            constructor(
                [in] IBaseStatusBar* bar);

            interface INotificationListenerService;
            interface IService;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IContextWrapper;
            interface IContext;
        }

        //===========================================================================
        //                              Stack
        //===========================================================================
        namespace Stack {
            [local]
            class CNotificationStackScrollLayout {
                constructor(
                    [in] IContext* ctx);

                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs);

                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs,
                    [in] Int32 defStyleAttr);

                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs,
                    [in] Int32 defStyleAttr,
                    [in] Int32 defStyleRes);

                interface INotificationStackScrollLayout;
                interface ISwipeHelperCallback;
                interface IExpandHelperCallback;
                interface IScrollAdapter;
                interface IViewGroup;
                interface IView;
                interface IViewParent;
                interface IViewManager;
                interface IDrawableCallback;
                interface IKeyEventCallback;
                interface IAccessibilityEventSource;
            }
        } // namespace Stack

        //===========================================================================
        //                              Policy
        //===========================================================================
        namespace Policy {

        [local]
        class CDateView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IDateView;
            interface ITextView;
            interface IView;
            interface IOnPreDrawListener;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CClock {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IClock;
            interface IDemoMode;
            interface ITextView;
            interface IView;
            interface IOnPreDrawListener;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CClockIntentReceiver {
            constructor(
                [in] IClock* clock);

            interface IBroadcastReceiver;
        }

        [local]
        class CDeadZone {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IDeadZone;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CSplitClockView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface ISplitClockView;
            interface ILinearLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CHeadsUpNotificationView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IHeadsUpNotificationView;
            interface ISwipeHelperCallback;
            interface IExpandHelperCallback;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyButtonView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IKeyButtonView;
            interface IImageView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CLocationControllerBroadcastReceiver {
            constructor(
                [in] ILocationController* controller);

            interface IBroadcastReceiver;
        }

        class CLocationControllerLocationModeChangedReceiver {
            constructor(
                [in] ILocationController* controller);

            interface IBroadcastReceiver;
        }

        class CBatteryControllerBroadcastReceiver {
            constructor(
                [in] IBatteryController* controller);

            interface IBroadcastReceiver;
        }

        class CNetworkControllerBroadcastReceiver {
            constructor(
                [in] INetworkControllerImpl* controller);

            interface IBroadcastReceiver;
        }

        class CNextAlarmControllerBroadcastReceiver {
            constructor(
                [in] INextAlarmController* controller);

            interface IBroadcastReceiver;
        }

        class CUserInfoControllerReceiver {
            constructor(
                [in] IUserInfoController* controller);

            interface IBroadcastReceiver;
        }

        class CProfileReceiverBroadcastReceiver {
            constructor(
                [in] IUserInfoController* controller);

            interface IBroadcastReceiver;
        }

        class CHotspotControllerReceiver {
            constructor(
                [in] IHotspotController* controller);

            interface IBroadcastReceiver;
        }

        [local]
        class CKeyButtonRipple {
            constructor(
                [in] IContext* ctx,
                [in] IView* targetView);

            interface IKeyButtonRipple;
            interface IDrawable;
        }

        [local]
        class CKeyguardUserSwitcherScrim {
            constructor(
                [in] IView* host);

            interface IKeyguardUserSwitcherScrim;
            interface IViewOnLayoutChangeListener;
            interface IDrawable;
        }

        [local]
        class CUserSwitcherControllerSettingsObserver {
            constructor(
                [in] IUserSwitcherController* host);

            interface IContentObserver;
        }


        class CZenModeControllerConditionListener {
            constructor(
                [in] IZenModeController* host);

            interface IIConditionListener;
        }

        } // namespace Policy

    //===========================================================================
    //                                  Phone
    //===========================================================================
    namespace Phone {
        class CBounceInterpolator {
            constructor();

            interface IBounceInterpolator;
            interface IInterpolator;
            interface ITimeInterpolator;
        }

        [local]
        class CSystemUIDialog {
            constructor(
                [in] IContext* ctx);

            interface ISystemUIDialog;
            interface IAlertDialog;
            interface IDialog;
            interface IDialogInterface;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IOnWindowDismissedCallback;
        }

        [local]
        class CIconMerger {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IIconMerger;
            interface ILinearLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CObservableScrollView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IObservableScrollView;
            interface IScrollView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardBottomAreaView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyle);

            interface IKeyguardBottomAreaView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CIntrinsicSizeDrawable {
            constructor(
                [in] IDrawable* drawable,
                [in] Int32 intrinsicWidth,
                [in] Int32 intrinsicHeight);

            interface IInsetDrawable;
            interface IDrawable;
            interface IDrawableCallback;
        }

        [local]
        class CKeyguardIndicationTextView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IKeyguardIndicationTextView;
            interface ITextView;
            interface IView;
            interface IOnPreDrawListener;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardStatusBarView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IKeyguardStatusBarView;
            interface IRelativeLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CMultiUserSwitch {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IMultiUserSwitch;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNavigationBarView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INavigationBarView;
            interface ILinearLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNotificationsQuickSettingsContainer {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationsQuickSettingsContainer;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CNotificationPanelView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface INotificationPanelView;
            interface IPanelView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CTickerView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface ITickerView;
            interface ITextSwitcher;
            interface IViewSwitcher;
            interface IViewAnimator;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CPanelHolder {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IPanelHolder;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CUserAvatarView {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr,
                [in] Int32 defStyleRes);

            interface IUserAvatarView;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CStatusBarWindowView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IStatusBarWindowView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CStatusBarHeaderView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IStatusBarHeaderView;
            interface IRelativeLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CPhoneStatusBarView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IPhoneStatusBarView;
            interface IPanelBar;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        class CPhoneStatusBar {
            constructor();

            interface IPhoneStatusBar;
            interface IDemoMode;
            interface IDragDownCallback;
            interface IActivityStarter;
            interface IBaseStatusBar;
            interface ICommandQueueCallbacks;
            interface IRecentsComponentCallbacks;
            interface IExpansionLogger;
            interface INotificationEnvironment;
            interface ISystemUI;
        }

        [local]
        class CPhoneStatusBarReceiver {
            constructor(
                [in] IPhoneStatusBar* statusBar);

            interface IBroadcastReceiver;
        }

        [local]
        class CPhoneStatusBarUserSetupObserver {
            constructor(
                [in] IPhoneStatusBar* statusBar,
                [in] IHandler* handler);

            interface IContentObserver;
        }

        [local]
        class CPhoneStatusBarHeadsUpObserver {
            constructor(
                [in] IPhoneStatusBar* statusBar,
                [in] IHandler* handler);

            interface IContentObserver;
        }

        [local]
        class CBarBackgroundDrawable {
            constructor(
                [in] IContext* ctx,
                [in] Int32 gradientResourceId);

            interface IDrawable;
        }

        class CFastColorDrawable {
            constructor(
                [in] Int32 color);

            interface IDrawable;
        }

        class CBlackBarDrawable {
            constructor(
                [in] IKeyguardPreviewContainer* host);

            interface IDrawable;
        }

        [local]
        class CTrustDrawable {
            constructor(
                [in] IContext* ctx);

            interface IDrawable;
        }

        class CPhoneStatusBarPolicyIntentReceiver {
            constructor(
                [in] IInterface* policy);

            interface IBroadcastReceiver;
        }

    } // namespace Phone

    } // namespace StatusBar

    namespace Qs {
        [local]
        class CDataUsageGraph {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IDataUsageGraph;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CQSDetailItems {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IQSDetailItems;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CQSPanel {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IQSPanel;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CViewGroupAdapterBridge {
            constructor(
                [in] IViewGroup* viewGroup,
                [in] IBaseAdapter* adapter);

            interface IDataSetObserver;
        }

        namespace Tiles {
            [local]
            class CDataUsageDetailView {
                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs);

                interface IDataUsageDetailView;
                interface ILinearLayout;
                interface IViewGroup;
                interface IView;
                interface IViewParent;
                interface IViewManager;
                interface IDrawableCallback;
                interface IKeyEventCallback;
                interface IAccessibilityEventSource;
            }

            [local]
            class CUserDetailItemView {
                constructor(
                    [in] IContext* ctx);

                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs);

                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs,
                    [in] Int32 defStyleAttr);

                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs,
                    [in] Int32 defStyleAttr,
                    [in] Int32 defStyleRes);

                interface IUserDetailItemView;
                interface ILinearLayout;
                interface IViewGroup;
                interface IView;
                interface IViewParent;
                interface IViewManager;
                interface IDrawableCallback;
                interface IKeyEventCallback;
                interface IAccessibilityEventSource;
            }

            [local]
            class CUserDetailView {
                constructor(
                    [in] IContext* ctx,
                    [in] IAttributeSet* attrs);

                interface IUserDetailView;
                interface IViewGroup;
                interface IView;
                interface IViewParent;
                interface IViewManager;
                interface IDrawableCallback;
                interface IKeyEventCallback;
                interface IAccessibilityEventSource;
            }

            [local]
            class CHotspotTileAPChangedReceiver {
                constructor(
                    [in] IQSTile* tile);

                interface IBroadcastReceiver;
            }
        }

        class CUsageTrackerReceiver {
            constructor(
                [in] IListenable* tile);

            interface IBroadcastReceiver;
        }
    } // namespace Qs

    namespace Settings {
        class CBrightnessDialog {
            constructor();

            interface IActivity;
            interface IContext;
            interface IContextThemeWrapper;
            interface ILayoutInflaterFactory;
            interface ILayoutInflaterFactory2;
            interface IWindowCallback;
            interface IKeyEventCallback;
            interface IViewOnCreateContextMenuListener;
            interface IComponentCallbacks;
            interface IComponentCallbacks2;
            interface IOnWindowDismissedCallback;
        }

        class CBrightnessObserver {
            constructor(
                [in] IBrightnessController* controller,
                [in] IHandler* handle);

            interface IContentObserver;
        }

        [local]
        class CToggleSlider {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            interface IToggleSlider;
            interface IRelativeLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CToggleSeekBar {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            interface ISeekBar;
            interface IAbsSeekBar;
            interface IProgressBar;
            interface IView;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

    } // namespace Settings

    namespace Keyguard
    {
        [local]
        class CKeyguardSimpleHostView {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IKeyguardViewBase;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardSecurityContainer {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs,
                [in] Int32 defStyleAttr);

            interface IKeyguardSecurityContainer;
            interface IKeyguardSecurityView;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardSecurityViewFlipper {
            constructor(
                [in] IContext* ctx);

            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            interface IKeyguardSecurityView;
            interface IViewFlipper;
            interface IViewAnimator;
            interface IFrameLayout;
            interface IViewGroup;
            interface IView;
            interface IViewParent;
            interface IViewManager;
            interface IDrawableCallback;
            interface IKeyEventCallback;
            interface IAccessibilityEventSource;
        }

        [local]
        class CKeyguardSecurityViewFlipperLayoutParams {
            constructor(
                [in] IContext* ctx,
                [in] IAttributeSet* attrs);

            constructor(
                [in] IViewGroupLayoutParams* source);

            constructor(
                [in] IKeyguardSecurityViewFlipperLayoutParams* ksvfSource);

            interface IKeyguardSecurityViewFlipperLayoutParams;
            interface IFrameLayoutLayoutParams;
            interface IViewGroupMarginLayoutParams;
            interface IViewGroupLayoutParams;
        }

        class CKeyguardUpdateMonitorContentObserver {
            constructor(
                [in] IKeyguardUpdateMonitor* host);

            interface IContentObserver;
        }

        class CKeyguardUpdateMonitorBroadcastReceiver1 {
            constructor(
                [in] IKeyguardUpdateMonitor* host);

            interface IBroadcastReceiver;
        }

        class CKeyguardUpdateMonitorBroadcastReceiver2 {
            constructor(
                [in] IKeyguardUpdateMonitor* host);

            interface IBroadcastReceiver;
        }

        class CKeyguardUpdateMonitorUserSwitchObserver {
            constructor(
                [in] IKeyguardUpdateMonitor* host);

            interface IIUserSwitchObserver;
            interface IBinder;
        }


    } // namespace Keyguard

    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}
