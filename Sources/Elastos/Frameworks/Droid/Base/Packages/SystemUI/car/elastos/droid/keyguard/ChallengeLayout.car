
module
{
    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace Keyguard {

    /**
     * Listener interface that reports changes in bouncer state.
     * The bouncer is
     */
    interface IChallengeLayoutOnBouncerStateChangedListener {
        /**
         * Called when the bouncer state changes.
         * The bouncer is activated when the user must pass a security challenge
         * to proceed with the requested action.
         *
         * <p>This differs from simply showing or hiding the security challenge
         * as the bouncer will prevent interaction with other elements of the UI.
         * If the user attempts to escape from the bouncer, it will be dismissed,
         * this method will be called with false as the parameter, and the action
         * should be canceled. If the security component reports a successful
         * authentication and the containing code calls HideBouncer() as a result,
         * this method will also be called with a false parameter. It is up to the
         * caller of HideBouncer to be ready for this.</p>
         *
         * @param bouncerActive true if the bouncer is now active,
         *                      false if the bouncer was dismissed.
         */
        OnBouncerStateChanged(
            [in] Boolean bouncerActive);
    }

    /**
     * Interface implemented by ViewGroup-derived layouts that implement
     * special logic for presenting security challenges to the user.
     */
    interface IChallengeLayout {
        /**
         * @return true if the security challenge area of this layout is currently visible
         */
        IsChallengeShowing(
            [out] Boolean* result);

        /**
         * @return true if the challenge area significantly overlaps other content
         */
        IsChallengeOverlapping(
            [out] Boolean* result);

        /**
         * Show or hide the challenge layout.
         *
         * If you want to show the challenge layout in bouncer mode where applicable,
         * use {@link #showBouncer()} instead.
         *
         * @param b true to show, false to hide
         */
        ShowChallenge(
            [in] Boolean show);

        /**
         * Show the bouncer challenge. This may block access to other child views.
         */
        ShowBouncer();

        /**
         * Hide the bouncer challenge if it is currently showing.
         * This may restore previously blocked access to other child views.
         */
        HideBouncer();

        /**
         * Returns true if the challenge is currently in bouncer mode,
         * potentially blocking access to other child views.
         */
        IsBouncing(
            [out] Boolean* result);

        /**
         * Returns the duration of the bounce animation.
         */
        GetBouncerAnimationDuration(
            [out] Int32* result);

        /**
         * Set a listener that will respond to changes in bouncer state.
         *
         * @param listener listener to register
         */
        SetOnBouncerStateChangedListener(
            [in] IChallengeLayoutOnBouncerStateChangedListener* listener);
    }

    } // namespace Keyguard
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}