
module
{
    using interface Elastos.Droid.Graphics.IRect;
    using interface Elastos.Droid.View.IView;

    interface IChallengeLayoutOnBouncerStateChangedListener;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace Keyguard {

    interface ISlidingChallengeLayoutLayoutParams {
        const Int32 CHILD_TYPE_NONE = 0;
        const Int32 CHILD_TYPE_CHALLENGE = 2;
        const Int32 CHILD_TYPE_SCRIM = 4;
        const Int32 CHILD_TYPE_WIDGETS = 5;
        const Int32 CHILD_TYPE_EXPAND_CHALLENGE_HANDLE = 6;
    }

    /**
     * Listener interface that reports changes in scroll state of the challenge area.
     */
    interface ISlidingChallengeLayoutOnChallengeScrolledListener {
        /**
         * The scroll state itself changed.
         *
         * <p>scrollState will be one of the following:</p>
         *
         * <ul>
         * <li><code>SCROLL_STATE_IDLE</code> - The challenge area is stationary.</li>
         * <li><code>SCROLL_STATE_DRAGGING</code> - The user is actively dragging
         * the challenge area.</li>
         * <li><code>SCROLL_STATE_SETTLING</code> - The challenge area is animating
         * into place.</li>
         * </ul>
         *
         * <p>Do not perform expensive operations (e.g. layout)
         * while the scroll state is not <code>SCROLL_STATE_IDLE</code>.</p>
         *
         * @param scrollState The new scroll state of the challenge area.
         */
        OnScrollStateChanged(
           [in] Int32 scrollState);

        /**
         * The precise position of the challenge area has changed.
         *
         * <p>NOTE: It is NOT safe to modify layout or call any View methods that may
         * result in a requestLayout anywhere in your view hierarchy as a result of this call.
         * It may be called during drawing.</p>
         *
         * @param scrollPosition New relative position of the challenge area.
         *                       1.f = fully visible/ready to be interacted with.
         *                       0.f = fully invisible/inaccessible to the user.
         * @param challengeTop Position of the top edge of the challenge view in px in the
         *                     SlidingChallengeLayout's coordinate system.
         */
        OnScrollPositionChanged(
           [in] Float scrollPosition,
           [in] Int32 challengeTop);
    }

    [local]
    interface ISlidingChallengeLayout {
        const Int32 SCROLL_STATE_IDLE = 0;
        const Int32 SCROLL_STATE_DRAGGING = 1;
        const Int32 SCROLL_STATE_SETTLING = 2;
        const Int32 SCROLL_STATE_FADING = 3;

        const Int32 CHALLENGE_FADE_OUT_DURATION = 100;
        const Int32 CHALLENGE_FADE_IN_DURATION = 160;

        SetEnableChallengeDragging(
            [in] Boolean enabled);

        SetInsets(
            [in] IRect* insets);

        SetHandleAlpha(
            [in] Float alpha);

        SetChallengeInteractive(
            [in] Boolean interactive);

        AnimateHandle(
            [in] Boolean visible);

        SetOnChallengeScrolledListener(
            [in] ISlidingChallengeLayoutOnChallengeScrolledListener* listener);

        SetOnBouncerStateChangedListener(
            [in] IChallengeLayoutOnBouncerStateChangedListener* listener);

        // We want the duration of the page snap animation to be influenced by the distance that
        // the screen has to travel, however, we don't want this duration to be effected in a
        // purely linear fashion. Instead, we use this method to moderate the effect that the distance
        // of travel has on the overall snap duration.
        DistanceInfluenceForSnapDuration(
            [in] Float f,
            [out] Float* value);

        SetScrollState(
            [in] Int32 state);

        CompleteChallengeScroll();

        SetScrimView(
            [in] IView* scrim);

        /**
         * Animate the bottom edge of the challenge view to the given position.
         *
         * @param y desired final position for the bottom edge of the challenge view in px
         * @param velocity velocity in
         */
        AnimateChallengeTo(
            [in] Int32 y,
            [in] Int32 velocity);

        /**
         * @return true if the challenge is at all visible.
         */
        IsChallengeShowing(
            [out] Boolean* result);

        ComputeScroll();

        FadeInChallenge();

        FadeOutChallenge();

        FadeChallenge(
            [in] Boolean show);

        GetMaxChallengeTop(
            [out] Int32* top);

        /**
         * Show or hide the challenge view, animating it if necessary.
         * @param show true to show, false to hide
         */
        ShowChallenge(
            [in] Boolean show);
    }

    } // namespace Keyguard
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}