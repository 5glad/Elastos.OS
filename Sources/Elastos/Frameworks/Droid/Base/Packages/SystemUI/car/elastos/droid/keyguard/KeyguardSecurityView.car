//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Droid.Internal.Widget.ILockPatternUtils;
    using interface Elastos.Core.IRunnable;

    interface Elastos.Droid.SystemUI.Keyguard.IKeyguardSecurityCallback;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace Keyguard {


    [local]
    interface IKeyguardSecurityView {
        const Int32 SCREEN_ON = 1;
        const Int32 VIEW_REVEALED = 2;

        /**
         * Interface back to keyguard to tell it when security
         * @param callback
         */
        SetKeyguardCallback(
            [in] IKeyguardSecurityCallback* cb);

        /**
         * Set {@link LockPatternUtils} object. Useful for providing a mock interface.
         * @param utils
         */
        SetLockPatternUtils(
            [in] ILockPatternUtils* utils);

        /**
         * Reset the view and prepare to take input. This should do things like clearing the
         * password or pattern and clear error messages.
         */
        Reset();

        /**
         * Emulate activity life cycle within the view. When called, the view should clean up
         * and prepare to be removed.
         */
        OnPause();

        /**
         * Emulate activity life cycle within this view.  When called, the view should prepare itself
         * to be shown.
         * @param reason the root cause of the event.
         */
        OnResume(
            [in] Int32 reason);

        /**
         * Inquire whether this view requires IME (keyboard) interaction.
         *
         * @return true if IME interaction is required.
         */
        NeedsInput(
            [out] Boolean* result);

        /**
         * Get {@link KeyguardSecurityCallback} for the given object
         * @return KeyguardSecurityCallback
         */
        GetCallback(
            [out] IKeyguardSecurityCallback** cb);

        /**
         * Instruct the view to show usability hints, if any.
         *
         */
        ShowUsabilityHint();

        /**
         * Place the security view into bouncer mode.
         * Animate transisiton if duration is non-zero.
         * @param duration millisends for the transisiton animation.
         */
        ShowBouncer(
            [in] Int32 duration);

        /**
         * Place the security view into non-bouncer mode.
         * Animate transisiton if duration is non-zero.
         * @param duration millisends for the transisiton animation.
         */
        HideBouncer(
            [in] Int32 duration);

        /**
         * Starts the animation which should run when the security view appears.
         */
        StartAppearAnimation();

        /**
         * Starts the animation which should run when the security view disappears.
         *
         * @param finishRunnable the runnable to be run when the animation ended
         * @return true if an animation started and {@code finishRunnable} will be run, false if no
         *         animation started and {@code finishRunnable} will not be run
         */
        StartDisappearAnimation(
            [in] IRunnable* finishRunnable,
            [out] Boolean* result);
    }

    } // namespace Keyguard
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}