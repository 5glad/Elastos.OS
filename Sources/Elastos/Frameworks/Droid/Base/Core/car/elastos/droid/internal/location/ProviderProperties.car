//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Location {

    /**
     * A Parcelable containing (legacy) location provider properties.
     * This object is just used inside the framework and system services.
     * @hide
     */
    /**
     * @Involve
     * interface IParcelable
     */
    interface IProviderProperties {
        /**
         * True if provider requires access to a
         * data network (e.g., the Internet), false otherwise.
         */
        SetRequiresNetwork(
            [in] Boolean network);

        GetRequiresNetwork(
            [out] Boolean* network);

        /**
         * True if the provider requires access to a
         * satellite-based positioning system (e.g., GPS), false
         * otherwise.
         */
        SetRequiresSatellite(
            [in] Boolean satellite);

        GetRequiresSatellite(
            [out] Boolean* satellite);
        /**
         * True if the provider requires access to an appropriate
         * cellular network (e.g., to make use of cell tower IDs), false
         * otherwise.
         */
        SetRequiresCell(
            [in] Boolean cell);

        GetRequiresCell(
            [out] Boolean* cell);
        /**
         * True if the use of this provider may result in a
         * monetary charge to the user, false if use is free.  It is up to
         * each provider to give accurate information. Cell (network) usage
         * is not considered monetary cost.
         */
        SetHasMonetaryCost(
            [in] Boolean hasMonetaryCost);

        GetHasMonetaryCost(
            [out] Boolean* hasMonetaryCost);

        /**
         * True if the provider is able to provide altitude
         * information, false otherwise.  A provider that reports altitude
         * under most circumstances but may occasionally not report it
         * should return true.
         */
        SetSupportsAltitude(
            [in] Boolean supportsAltitude);

        GetSupportsAltitude(
            [out] Boolean* supportsAltitude);
        /**
         * True if the provider is able to provide speed
         * information, false otherwise.  A provider that reports speed
         * under most circumstances but may occasionally not report it
         * should return true.
         */
        SetSupportsSpeed(
            [in] Boolean supportsSpeed);

        GetSupportsSpeed(
            [out] Boolean* supportsSpeed);

        /**
         * True if the provider is able to provide bearing
         * information, false otherwise.  A provider that reports bearing
         * under most circumstances but may occasionally not report it
         * should return true.
         */
        SetSupportsBearing(
            [in] Boolean supportsBearing);

        GetSupportsBearing(
            [out] Boolean* supportsBearing);

        /**
         * Power requirement for this provider.
         *
         * @return the power requirement for this provider, as one of the
         * constants Criteria.POWER_*.
         */

        SetPowerRequirement(
            [in] Int32 powerRequirement);

        GetPowerRequirement(
            [out] Int32* powerRequirement);

        /**
         * Constant describing the horizontal accuracy returned
         * by this provider.
         *
         * @return the horizontal accuracy for this provider, as one of the
         * constants Criteria.ACCURACY_COARSE or Criteria.ACCURACY_FINE
         */
        SetAccuracy(
            [in] Int32 accuracy);

        GetAccuracy(
            [out] Int32* accuracy);
    }

    } //namespace Location
    } //namespace Internal
    } //namespace Droid
    } //namespace Elastos
}
