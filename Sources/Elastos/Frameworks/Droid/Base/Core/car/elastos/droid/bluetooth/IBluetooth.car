//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Os.IParcelUuid;
    interface Elastos.Droid.Os.IParcelFileDescriptor;
    interface Elastos.Droid.Bluetooth.IIBluetoothCallback;
    interface Elastos.Droid.Bluetooth.IBluetoothDevice;
    interface Elastos.Droid.Bluetooth.IBluetoothActivityEnergyInfo;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

    [deprecated]
    interface IIBluetooth {
        IsEnabled(
            [out] Boolean* isEnable);

        GetState(
            [out] Int32* state);

        Enable(
            [out] Boolean* result);

        EnableNoAutoConnect(
            [out] Boolean* result);

        Disable(
            [out] Boolean* result);

        GetAddress(
            [out] String* address);

        GetUuids(
            [out, callee] ArrayOf<IParcelUuid*>* uuids);

        SetName(
            [in] String name,
            [out] Boolean* result);

        GetName(
            [out] String* name);

        GetScanMode(
            [out] Int32* mode);

        SetScanMode(
            [in] Int32 mode,
            [in] Int32 duration,
            [out] Boolean* result);

        GetDiscoverableTimeout(
            [out] Int32* timeout);

        SetDiscoverableTimeout(
            [in] Int32 timeout,
            [out] Boolean* result);

        StartDiscovery(
            [out] Boolean* result);

        CancelDiscovery(
            [out] Boolean* result);

        IsDiscovering(
            [out] Boolean* IsDiscovering);

        GetAdapterConnectionState(
            [out] Int32* state);

        GetProfileConnectionState(
            [in] Int32 profile,
            [out] Int32* state);

        GetBondedDevices(
            [out, callee] ArrayOf<IBluetoothDevice*>* devices);

        CreateBond(
            [in] IBluetoothDevice* device,
            [in] Int32 transport,
            [out] Boolean* result);

        CancelBondProcess(
            [in] IBluetoothDevice* device,
            [out] Boolean* result);

        RemoveBond(
            [in] IBluetoothDevice* device,
            [out] Boolean* result);

        GetBondState(
            [in] IBluetoothDevice* device,
            [out] Int32* state);

        IsConnected(
            [in] IBluetoothDevice* device,
            [out] Boolean* result);

        GetRemoteName(
            [in] IBluetoothDevice* device,
            [out] String* name);

        GetRemoteType(
            [in] IBluetoothDevice* device,
            [out] Int32* type);

        GetRemoteAlias(
            [in] IBluetoothDevice* device,
            [out] String* alias);

        SetRemoteAlias(
            [in] IBluetoothDevice* device,
            [in] String name,
            [out] Boolean* result);

        SetRemoteTrust(
            [in] IBluetoothDevice* device,
            [in] Boolean value,
            [out] Boolean* result);

        GetRemoteTrust(
            [in] IBluetoothDevice* device,
            [out] Boolean* result);

        GetRemoteClass(
            [in] IBluetoothDevice* device,
            [out] Int32* remoteClass);

        GetRemoteUuids(
            [in] IBluetoothDevice* device,
            [out, callee] ArrayOf<IParcelUuid*>* uuids);

        FetchRemoteUuids(
            [in] IBluetoothDevice* device,
            [out] Boolean* result);

        FetchRemoteMasInstances(
            [in] IBluetoothDevice* device,
            [out] Boolean* result);

        SetPin(
            [in] IBluetoothDevice* device,
            [in] Boolean accept,
            [in] Int32 len,
            [in] ArrayOf<Byte>* pinCode,
            [out] Boolean* result);

        SetPasskey(
            [in] IBluetoothDevice* device,
            [in] Boolean accept,
            [in] Int32 len,
            [in] ArrayOf<Byte>* passkey,
            [out] Boolean* result);

        SetPairingConfirmation(
            [in] IBluetoothDevice* device,
            [in] Boolean accept,
            [out] Boolean* result);

        GetPhonebookAccessPermission(
            [in] IBluetoothDevice* device,
            [out] Int32* result);

        SetPhonebookAccessPermission(
            [in] IBluetoothDevice* device,
            [in] Int32 value,
            [out] Boolean* result);

        GetMessageAccessPermission(
            [in] IBluetoothDevice* device,
            [out] Int32* result);

        SetMessageAccessPermission(
            [in] IBluetoothDevice* device,
            [in] Int32 value,
            [out] Boolean* result);

        SendConnectionStateChange(
            [in] IBluetoothDevice* device,
            [in] Int32 profile,
            [in] Int32 state,
            [in] Int32 prevState);

        RegisterCallback(
            [in] IIBluetoothCallback* bluetoothCallback);

        UnregisterCallback(
            [in] IIBluetoothCallback* bluetoothCallback);

        // For Socket
        ConnectSocket(
            [in] IBluetoothDevice* device,
            [in] Int32 type,
            [in] IParcelUuid* uuid,
            [in] Int32 port,
            [in] Int32 flag,
            [out] IParcelFileDescriptor** fd);

        CreateSocketChannel(
            [in] Int32 type,
            [in] String serviceName,
            [in] IParcelUuid* uuid,
            [in] Int32 port,
            [in] Int32 flag,
            [out] IParcelFileDescriptor** fd);

        ConfigHciSnoopLog(
            [in] Boolean isEnable,
            [out] Boolean* result);

        IsMultiAdvertisementSupported(
            [out] Boolean* result);

        IsOffloadedFilteringSupported(
            [out] Boolean* result);

        IsOffloadedScanBatchingSupported(
            [out] Boolean* result);

        IsActivityAndEnergyReportingSupported(
            [out] Boolean* result);

        GetActivityEnergyInfoFromController();

        ReportActivityInfo(
            [out] IBluetoothActivityEnergyInfo** info);

        SetSocketOpt(
            [in] Int32 type,
            [in] Int32 port,
            [in] Int32 optionName,
            [in] ArrayOf<Byte>* optionVal,
            [in] Int32 optionLen,
            [out] Int32* result);

        GetSocketOpt(
            [in] Int32 type,
            [in] Int32 port,
            [in] Int32 optionName,
            [in] ArrayOf<Byte>* optionVal,
            [out] Int32* result);

        GetRemoteDiRecord(
            [in] IBluetoothDevice* device,
            [out] IBluetoothRemoteDiRecord** record);
    }

    } // Bluetooth
    } // Droid
    } // Elastos
}
