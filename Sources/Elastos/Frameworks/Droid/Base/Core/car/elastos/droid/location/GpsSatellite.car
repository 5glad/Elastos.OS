//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Location {

    /**
     * This class represents the current state of a GPS satellite.
     * This class is used in conjunction with the {@link GpsStatus} class.
     */
    interface IGpsSatellite {
        /**
         * Used by {@link LocationManager#getGpsStatus} to copy LocationManager's
         * cached GpsStatus instance to the client's copy.
         */
        SetStatus(
            [in] IGpsSatellite* satellite);

        /**
         * Returns the PRN (pseudo-random number) for the satellite.
         *
         * @return PRN number
         */
        GetPrn(
            [out] Int32* prn);

        /**
         * Returns the signal to noise ratio for the satellite.
         *
         * @return the signal to noise ratio
         */
        GetSnr(
            [out] Float* snr);

        /**
         * Returns the elevation of the satellite in degrees.
         * The elevation can vary between 0 and 90.
         *
         * @return the elevation in degrees
         */
        GetElevation(
            [out] Float* elevation);

        /**
         * Returns the azimuth of the satellite in degrees.
         * The azimuth can vary between 0 and 360.
         *
         * @return the azimuth in degrees
         */
        GetAzimuth(
            [out] Float* azimuth);

        /**
         * Returns true if the GPS engine has ephemeris data for the satellite.
         *
         * @return true if the satellite has ephemeris data
         */
        HasEphemeris(
            [out] Boolean* hasEphemeris);

        /**
         * Returns true if the GPS engine has almanac data for the satellite.
         *
         * @return true if the satellite has almanac data
         */
        HasAlmanac(
            [out] Boolean* hasAlmanac);

        /**
         * Returns true if the satellite was used by the GPS engine when
         * calculating the most recent GPS fix.
         *
         * @return true if the satellite was used to compute the most recent fix.
         */
        UsedInFix(
            [out] Boolean* usedInFix);

        IsValid(
            [out] Boolean* result);

        SetValid(
            [in] Boolean usedInFix);

        //Below is added for Set data from outside
        SetSnr(
            [in] Float snr);

        SetElevation(
            [in] Float elevation);

        SetAzimuth(
            [in] Float azimuth);

        SetHasEphemeris(
            [in] Boolean hasEphemeris);

        SetHasAlmanac(
            [in] Boolean hasAlmanac);

        SetUsedInFix(
            [in] Boolean usedInFix);
    }

    }//namespace Location
    }//namespace Droid
    }//namespace Elastos
}
