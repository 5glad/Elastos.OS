//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Marshal {
    namespace Impl {

    /**
     * Marshal/unmarshal built-in primitive types to and from a {@link ByteBuffer}.
     *
     * <p>The following list of type marshaling is supported:
     * <ul>
     * <li>byte <-> TYPE_BYTE
     * <li>int <-> TYPE_INT32
     * <li>long <-> TYPE_INT64
     * <li>float <-> TYPE_FLOAT
     * <li>double <-> TYPE_DOUBLE
     * <li>Rational <-> TYPE_RATIONAL
     * </ul>
     * </p>
     *
     * <p>Due to the nature of generics, values are always boxed; this also means that both
     * the boxed and unboxed types are supported (i.e. both {@code int} and {@code Integer}).</p>
     *
     * <p>Each managed type <!--(other than boolean)--> must correspond 1:1 to the native type
     * (e.g. a byte will not map to a {@link CameraMetadataNative#TYPE_INT32 TYPE_INT32} or vice versa)
     * for marshaling.</p>
     *
     * @invoke interface IMarshalQueryable
     */
    interface IMarshalQueryablePrimitive {
    }

    } // namespace Impl
    } // namespace Marshal
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
