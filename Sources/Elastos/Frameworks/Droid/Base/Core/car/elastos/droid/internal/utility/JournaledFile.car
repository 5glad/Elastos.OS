//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.IO.IFile;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Utility {

    /**
     * @deprecated Use {@link com.android.internal.os.AtomicFile} instead.  It would
     * be nice to update all existing uses of this to switch to AtomicFile, but since
     * their on-file semantics are slightly different that would run the risk of losing
     * data if at the point of the platform upgrade to the new code it would need to
     * roll back to the backup file.  This can be solved...  but is it worth it and
     * all of the testing needed to make sure it is correct?
     */
    [local]
    interface IJournaledFile {
        /** Returns the file for you to read.
         * @more
         * Prefers the real file.  If it doesn't exist, uses the temp one, and then copies
         * it to the real one.  If there is both a real file and a temp one, assumes that the
         * temp one isn't fully written and deletes it.
         */
        ChooseForRead(
            [out] IFile** file);

        /**
         * Returns a file for you to write.
         * @more
         * If a write is already happening, throws.  In other words, you must provide your
         * own locking.
         * <p>
         * Call {@link #commit} to commit the changes, or {@link #rollback} to forget the changes.
         */
        ChooseForWrite(
            [out] IFile** file);

        /**
         * Commit changes.
         */
        Commit();

        /**
         * Roll back changes.
         */
        Rollback();
    }

    } // namespace Utility
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
