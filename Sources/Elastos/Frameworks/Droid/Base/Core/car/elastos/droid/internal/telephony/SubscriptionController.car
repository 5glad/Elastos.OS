
module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Net.INetworkRequest;

    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    interface ISubscriptionControllerOnDemandDdsLockNotifier {
        NotifyOnDemandDdsLockGranted(
            [in] INetworkRequest* n);
    }

    /**
     * @Involve
     * interface IISub
     */
    [local, deprecated]
    interface ISubscriptionController {
        GetSubIdFromNetworkRequest(
            [in] INetworkRequest* n,
            [out] Int64* result);

        StartOnDemandDataSubscriptionRequest(
            [in] INetworkRequest* n);

        StopOnDemandDataSubscriptionRequest(
            [in] INetworkRequest* n);

        /**
         * Set MCC/MNC by subscription ID
         * @param mccMnc MCC/MNC associated with the subscription
         * @param subId the unique SubInfoRecord index in database
         * @return the number of records updated
         */
        SetMccMnc(
            [in] String mccMnc,
            [in] Int64 subId,
            [out] Int32* result);

        GetCurrentDds(
            [out] Int64* result);

        SetDataSubId(
            [in] Int64 subId);

        /* Sets the default subscription. If only one sub is active that
         * sub is set as default subId. If two or more  sub's are active
         * the first sub is set as default subscription
         */
        // FIXME
        SetDefaultSubId(
            [in] Int64 subId);

        /* This should return long and not long [] since each phone has
         * exactly 1 sub id for now, it could return the 0th element
         * returned from getSubId()
         */
        // FIXME will design a mechanism to manage the relationship between PhoneId/SlotId/SubId
        // since phoneId = SlotId is not always true
        GetSubIdUsingPhoneId(
            [in] Int32 phoneId,
            [out] Int64* result);

        GetSubIdUsingSlotId(
            [in] Int32 slotId,
            [out, callee] ArrayOf<Int64>* result);

        GetSubInfoUsingSlotIdWithCheck(
            [in] Int32 slotId,
            [in] Boolean needCheck,
            [out] IList** result);

        UpdatePhonesAvailability(
            [in] ArrayOf<IPhoneProxy*>* phones);

        SetNwMode(
            [in] Int64 subId,
            [in] Int32 nwMode);

        GetNwMode(
            [in] Int64 subId,
            [out] Int32* result);

        /* setDds flag is used to trigger DDS switch request during
          device powerUp and when flex map performed */
        UpdateUserPrefs(
            [in] Boolean setDds);

        RegisterForOnDemandDdsLockNotification(
            [in] Int64 clientSubId,
            [in] ISubscriptionControllerOnDemandDdsLockNotifier* cb);

        /* {@hide} */
        NotifyOnDemandDataSubIdChanged(
            [in] INetworkRequest* n);

        RemoveStaleSubPreferences(
            [in] String prefKey);

    }

    [local, deprecated]
    interface ISubscriptionControllerHelper {
        Init(
            [in] IPhone* phone,
            [out] ISubscriptionController** result);

        Init(
            [in] IContext* c,
            [in] ArrayOf<ICommandsInterface*>* ci,
            [out] ISubscriptionController** result);

        GetInstance(
            [out] ISubscriptionController** result);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
