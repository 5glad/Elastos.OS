//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Internal.Telephony.IPhone;

    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    interface ICallManager {

        GetAllPhones(
            [out] IList** result);

        GetState(
            [out] PhoneConstantsState* result);

        GetState(
            [in] Int64 subId,
            [out] PhoneConstantsState* result);

        GetServiceState(
            [out] Int32* result);

        GetServiceState(
            [in] Int64 subId,
            [out] Int32* result);

        GetPhoneInCall(
            [out] IPhone** result);

        GetPhoneInCall(
            [in] Int64 subId,
            [out] IPhone** result);

        RegisterPhone(
            [in] IPhone* phone,
            [out] Boolean* result);

        UnregisterPhone(
            [in] IPhone* phone);

        GetDefaultPhone(
            [out] IPhone** result);

        GetFgPhone(
            [out] IPhone** result);

        GetFgPhone(
            [in] Int64 subId,
            [out] IPhone** result);

        GetBgPhone(
            [out] IPhone** result);

        GetBgPhone(
            [in] Int64 subId,
            [out] IPhone** result);

        GetRingingPhone(
            [out] IPhone** result);

        GetRingingPhone(
            [in] Int64 subId,
            [out] IPhone** result);

        /**
         * Answers a ringing or waiting call.
         *
         * Active call, if any, go on hold.
         * If active call can't be held, i.e., a background call of the same channel exists,
         * the active call will be hang up.
         *
         * Answering occurs asynchronously, and final notification occurs via
         * {@link #registerForPreciseCallStateChanged(android.os.Handler, int,
         * java.lang.Object) registerForPreciseCallStateChanged()}.
         *
         * @exception CallStateException when call is not ringing or waiting
         */
        AcceptCall(
            [in] ICall* ringingCall);

        /**
         * Reject (ignore) a ringing call. In GSM, this means UDUB
         * (User Determined User Busy). Reject occurs asynchronously,
         * and final notification occurs via
         * {@link #registerForPreciseCallStateChanged(android.os.Handler, int,
         * java.lang.Object) registerForPreciseCallStateChanged()}.
         *
         * @exception CallStateException when no call is ringing or waiting
         */
        RejectCall(
            [in] ICall* ringingCall);

        /**
         * Places active call on hold, and makes held call active.
         * Switch occurs asynchronously and may fail.
         *
         * There are 4 scenarios
         * 1. only active call but no held call, aka, hold
         * 2. no active call but only held call, aka, unhold
         * 3. both active and held calls from same phone, aka, swap
         * 4. active and held calls from different phones, aka, phone swap
         *
         * Final notification occurs via
         * {@link #registerForPreciseCallStateChanged(android.os.Handler, int,
         * java.lang.Object) registerForPreciseCallStateChanged()}.
         *
         * @exception CallStateException if active call is ringing, waiting, or
         * dialing/alerting, or heldCall can't be active.
         * In these cases, this operation may not be performed.
         */
        SwitchHoldingAndActive(
            [in] ICall* heldCall);

        /**
         * Hangup foreground call and resume the specific background call
         *
         * Note: this is noop if there is no foreground call or the heldCall is null
         *
         * @param heldCall to become foreground
         * @throws CallStateException
         */
        HangupForegroundResumeBackground(
            [in] ICall* heldCall);

        CanConference(
            [in] ICall* heldCall,
            [out] Boolean* result);

        CanConference(
            [in] ICall* heldCall,
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Conferences holding and active. Conference occurs asynchronously
         * and may fail. Final notification occurs via
         * {@link #registerForPreciseCallStateChanged(android.os.Handler, int,
         * java.lang.Object) registerForPreciseCallStateChanged()}.
         *
         * @exception CallStateException if canConference() would return false.
         * In these cases, this operation may not be performed.
         */
        Conference(
            [in] ICall* heldCall);

        /**
         * Initiate a new voice connection. This happens asynchronously, so you
         * cannot assume the audio path is connected (or a call index has been
         * assigned) until PhoneStateChanged notification has occurred.
         *
         * @exception CallStateException if a new outgoing call is not currently
         * possible because no more call slots exist or a call exists that is
         * dialing, alerting, ringing, or waiting.  Other errors are
         * handled asynchronously.
         */
        Dial(
            [in] IPhone* phone,
            [in] String dialString,
            [in] Int32 videoState,
            [out] IConnection** result);

        /**
         * Initiate a new voice connection. This happens asynchronously, so you
         * cannot assume the audio path is connected (or a call index has been
         * assigned) until PhoneStateChanged notification has occurred.
         *
         * @exception CallStateException if a new outgoing call is not currently
         * possible because no more call slots exist or a call exists that is
         * dialing, alerting, ringing, or waiting.  Other errors are
         * handled asynchronously.
         */
        Dial(
            [in] IPhone* phone,
            [in] String dialString,
            [in] IUUSInfo* uusInfo,
            [in] Int32 videoState,
            [out] IConnection** result);

        ClearDisconnected();

        ClearDisconnected(
            [in] Int64 subId);

        CanTransfer(
            [in] ICall* heldCall,
            [out] Boolean* result);

        CanTransfer(
            [in] ICall* heldCall,
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Connects the held call and active call
         * Disconnects the subscriber from both calls
         *
         * Explicit Call Transfer occurs asynchronously
         * and may fail. Final notification occurs via
         * {@link #registerForPreciseCallStateChanged(android.os.Handler, int,
         * java.lang.Object) registerForPreciseCallStateChanged()}.
         *
         * @exception CallStateException if canTransfer() would return false.
         * In these cases, this operation may not be performed.
         */
        ExplicitCallTransfer(
            [in] ICall* heldCall);

        GetPendingMmiCodes(
            [in] IPhone* phone,
            [out] IList** result);

        SendUssdResponse(
            [in] IPhone* phone,
            [in] String ussdMessge,
            [out] Boolean* result);

        SetMute(
            [in] Boolean muted);

        GetMute(
            [out] Boolean* result);

        SetEchoSuppressionEnabled();

        SendDtmf(
            [in] Char32 c,
            [out] Boolean* result);

        StartDtmf(
            [in] Char32 c,
            [out] Boolean* result);

        StopDtmf();

        SendBurstDtmf(
            [in] String dtmfString,
            [in] Int32 on,
            [in] Int32 off,
            [in] IMessage* onComplete,
            [out] Boolean* result);

        RegisterForDisconnect(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForDisconnect(
            [in] IHandler* h);

        RegisterForPreciseCallStateChanged(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForPreciseCallStateChanged(
            [in] IHandler* h);

        RegisterForUnknownConnection(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForUnknownConnection(
            [in] IHandler* h);

        RegisterForNewRingingConnection(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForNewRingingConnection(
            [in] IHandler* h);

        RegisterForIncomingRing(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForIncomingRing(
            [in] IHandler* h);

        RegisterForRingbackTone(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForRingbackTone(
            [in] IHandler* h);

        RegisterForOnHoldTone(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForOnHoldTone(
            [in] IHandler* h);

        RegisterForResendIncallMute(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForResendIncallMute(
            [in] IHandler* h);

        RegisterForMmiInitiate(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForMmiInitiate(
            [in] IHandler* h);

        RegisterForMmiComplete(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForMmiComplete(
            [in] IHandler* h);

        RegisterForEcmTimerReset(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForEcmTimerReset(
            [in] IHandler* h);

        RegisterForServiceStateChanged(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForServiceStateChanged(
            [in] IHandler* h);

        RegisterForSuppServiceNotification(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForSuppServiceNotification(
            [in] IHandler* h);

        RegisterForSuppServiceFailed(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForSuppServiceFailed(
            [in] IHandler* h);

        RegisterForInCallVoicePrivacyOn(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForInCallVoicePrivacyOn(
            [in] IHandler* h);

        RegisterForInCallVoicePrivacyOff(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForInCallVoicePrivacyOff(
            [in] IHandler* h);

        RegisterForCallWaiting(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForCallWaiting(
            [in] IHandler* h);

        RegisterForSignalInfo(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForSignalInfo(
            [in] IHandler* h);

        RegisterForDisplayInfo(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForDisplayInfo(
            [in] IHandler* h);

        RegisterForCdmaOtaStatusChange(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForCdmaOtaStatusChange(
            [in] IHandler* h);

        RegisterForSubscriptionInfoReady(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForSubscriptionInfoReady(
            [in] IHandler* h);

        RegisterForSubscriptionChange(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForSubscriptionChange(
            [in] IHandler* h);

        SetActiveSubscription(
            [in] Int64 subscription);

        RegisterForPostDialCharacter(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForPostDialCharacter(
            [in] IHandler* h);

        GetRingingCalls(
            [out] IList** result);

        GetForegroundCalls(
            [out] IList** result);

        GetBackgroundCalls(
            [out] IList** result);

        HasActiveFgCall(
            [out] Boolean* result);

        HasActiveFgCall(
            [in] Int64 subId,
            [out] Boolean* result);

        HasActiveBgCall(
            [out] Boolean* result);

        HasActiveBgCall(
            [in] Int64 subId,
            [out] Boolean* result);

        HasActiveRingingCall(
            [out] Boolean* result);

        HasActiveRingingCall(
            [in] Int64 subId,
            [out] Boolean* result);

        GetActiveFgCall(
            [out] ICall** result);

        GetActiveFgCall(
            [in] Int64 subId,
            [out] ICall** result);

        GetFirstActiveBgCall(
            [out] ICall** result);

        GetFirstActiveBgCall(
            [in] Int64 subId,
            [out] ICall** result);

        GetFirstActiveRingingCall(
            [out] ICall** result);

        GetFirstActiveRingingCall(
            [in] Int64 subId,
            [out] ICall** result);

        GetActiveFgCallState(
            [out] ICallState* result);

        GetActiveFgCallState(
            [in] Int64 subId,
            [out] ICallState* result);

        GetFgCallConnections(
            [out] IList** result);

        GetFgCallConnections(
            [in] Int64 subId,
            [out] IList** result);

        GetBgCallConnections(
            [out] IList** result);

        GetBgCallConnections(
            [in] Int64 subId,
            [out] IList** result);

        GetFgCallLatestConnection(
            [out] IConnection** result);

        GetFgCallLatestConnection(
            [in] Int64 subId,
            [out] IConnection** result);

        HasDisconnectedFgCall(
            [out] Boolean* result);

        HasDisconnectedFgCall(
            [in] Int64 subId,
            [out] Boolean* result);

        HasDisconnectedBgCall(
            [out] Boolean* result);

        HasDisconnectedBgCall(
            [in] Int64 subId,
            [out] Boolean* result);

    }

    interface ICallManagerHelper {
        GetInstance(
            [out] ICallManager** result);

        IsSamePhone(
            [in] IPhone* p1,
            [in] IPhone* p2,
            [out] Boolean* result);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos
}
