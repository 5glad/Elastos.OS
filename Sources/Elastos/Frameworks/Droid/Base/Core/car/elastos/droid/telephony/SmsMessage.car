
module
{

    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IArrayList;

    namespace Elastos {
    namespace Droid {
    namespace Telephony {

    enum SmsMessageMessageClass {
        SmsMessage_MessageClass_UNKNOWN,
        SmsMessage_MessageClass_CLASS_0,
        SmsMessage_MessageClass_CLASS_1,
        SmsMessage_MessageClass_CLASS_2,
        SmsMessage_MessageClass_CLASS_3
    }


    interface ISmsMessageSubmitPdu {
    }

    interface ISmsMessage {

        /** User data text encoding code unit size */
        const Int32 ENCODING_UNKNOWN = 0;
        const Int32 ENCODING_7BIT = 1;
        const Int32 ENCODING_8BIT = 2;
        const Int32 ENCODING_16BIT = 3;
        /**
         * @hide This value is not defined in global standard. Only in Korea, this is used.
         */
        const Int32 ENCODING_KSC5601 = 4;

        /** The maximum number of payload bytes per message */
        const Int32 MAX_USER_DATA_BYTES = 140;

        /**
         * The maximum number of payload bytes per message if a user data header
         * is present.  This assumes the header only contains the
         * CONCATENATED_8_BIT_REFERENCE element.
         */
        const Int32 MAX_USER_DATA_BYTES_WITH_HEADER = 134;

        /** The maximum number of payload septets per message */
        const Int32 MAX_USER_DATA_SEPTETS = 160;

        /**
         * The maximum number of payload septets per message if a user data header
         * is present.  This assumes the header only contains the
         * CONCATENATED_8_BIT_REFERENCE element.
         */
        const Int32 MAX_USER_DATA_SEPTETS_WITH_HEADER = 153;

        /**
         * Indicates a 3GPP format SMS message.
         * @hide pending API council approval
         */
        const String FORMAT_3GPP = "3gpp";

        /**
         * Indicates a 3GPP2 format SMS message.
         * @hide pending API council approval
         */
        const String FORMAT_3GPP2 = "3gpp2";

        /**
         * Indicates a synthetic SMS message.
         * @hide
         */
        const String FORMAT_SYNTHETIC = "synthetic";

        SetSubId(
            [in] Int64 subId);

        GetSubId(
            [out] Int64* result);

        GetServiceCenterAddress(
            [out] String* result);

        GetOriginatingAddress(
            [out] String* result);

        GetDisplayOriginatingAddress(
            [out] String* result);

        GetMessageBody(
            [out] String* result);

        GetMessageClass(
            [out] SmsMessageMessageClass* result);

        GetDisplayMessageBody(
            [out] String* result);

        GetPseudoSubject(
            [out] String* result);

        GetTimestampMillis(
            [out] Int64* result);

        IsEmail(
            [out] Boolean* result);

        GetEmailBody(
            [out] String* result);

        GetEmailFrom(
            [out] String* result);

        GetProtocolIdentifier(
            [out] Int32* result);

        IsReplace(
            [out] Boolean* result);

        IsCphsMwiMessage(
            [out] Boolean* result);

        IsMWIClearMessage(
            [out] Boolean* result);

        IsMWISetMessage(
            [out] Boolean* result);

        IsMwiDontStore(
            [out] Boolean* result);

        GetUserData(
            [out, callee] ArrayOf<Byte>* result);

        GetPdu(
            [out, callee] ArrayOf<Byte>* result);

        GetStatusOnIcc(
            [out] Int32* result);

        GetIndexOnIcc(
            [out] Int32* result);

        GetStatus(
            [out] Int32* result);

        IsStatusReportMessage(
            [out] Boolean* result);

        IsReplyPathPresent(
            [out] Boolean* result);

        GetRecipientAddress(
            [out] String* result);

    }

    [deprecated]
    interface ISmsMessageHelper {
        /**
         * Create an SmsMessage from a raw PDU.
         *
         * <p><b>This method will soon be deprecated</b> and all applications which handle
         * incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast
         * intent <b>must</b> now pass the new {@code format} String extra from the intent
         * into the new method {@code createFromPdu(byte[], String)} which takes an
         * extra format parameter. This is required in order to correctly decode the PDU on
         * devices that require support for both 3GPP and 3GPP2 formats at the same time,
         * such as dual-mode GSM/CDMA and CDMA/LTE phones.  Guess format based on Voice
         * technology first, if it fails use other format.
         */
        CreateFromPdu(
            [in] ArrayOf<Byte>* pdu,
            [out] ISmsMessage** result);

        /**
         * Create an SmsMessage from a raw PDU with the specified message format. The
         * message format is passed in the {@code SMS_RECEIVED_ACTION} as the {@code format}
         * String extra, and will be either "3gpp" for GSM/UMTS/LTE messages in 3GPP format
         * or "3gpp2" for CDMA/LTE messages in 3GPP2 format.
         *
         * @param pdu the message PDU from the SMS_RECEIVED_ACTION intent
         * @param format the format extra from the SMS_RECEIVED_ACTION intent
         * @hide pending API council approval
         */
        CreateFromPdu(
            [in] ArrayOf<Byte>* pdu,
            [in] String format,
            [out] ISmsMessage** result);

        /**
         * TS 27.005 3.4.1 lines[0] and lines[1] are the two lines read from the
         * +CMT unsolicited response (PDU mode, of course)
         *  +CMT: [&lt;alpha>],<length><CR><LF><pdu>
         *
         * Only public for debugging and for RIL
         *
         * {@hide}
         */
        NewFromCMT(
            [in] ArrayOf<String>* lines,
            [out] ISmsMessage** result);

        /** @hide */
        NewFromParcel(
            [in] IParcel* p,
            [out] ISmsMessage** result);

        /**
         * Create an SmsMessage from an SMS EF record.
         *
         * @param index Index of SMS record. This should be index in ArrayList
         *              returned by SmsManager.getAllMessagesFromSim + 1.
         * @param data Record data.
         * @return An SmsMessage representing the record.
         *
         * @hide
         */
        CreateFromEfRecord(
            [in] Int32 index,
            [in] ArrayOf<Byte>* data,
            [out] ISmsMessage** result);

        /**
         * Create an SmsMessage from an SMS EF record.
         *
         * @param index Index of SMS record. This should be index in ArrayList
         *              returned by SmsManager.getAllMessagesFromSim + 1.
         * @param data Record data.
         * @param subId Subscription Id of the SMS
         * @return An SmsMessage representing the record.
         *
         * @hide
         */
        CreateFromEfRecord(
            [in] Int32 index,
            [in] ArrayOf<Byte>* data,
            [in] Int64 subId,
            [out] ISmsMessage** result);

        /**
         * Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the
         * length in bytes (not hex chars) less the SMSC header
         *
         * FIXME: This method is only used by a CTS test case that isn't run on CDMA devices.
         * We should probably deprecate it and remove the obsolete test case.
         */
        GetTPLayerLengthForPDU(
            [in] String pdu,
            [out] Int32* result);

        /**
         * Calculates the number of SMS's required to encode the message body and
         * the number of characters remaining until the next message.
         *
         * @param msgBody the message to encode
         * @param use7bitOnly if true, characters that are not part of the
         *         radio-specific 7-bit encoding are counted as single
         *         space chars.  If false, and if the messageBody contains
         *         non-7-bit encodable characters, length is calculated
         *         using a 16-bit encoding.
         * @return an int[4] with int[0] being the number of SMS's
         *         required, int[1] the number of code units used, and
         *         int[2] is the number of code units remaining until the
         *         next message. int[3] is an indicator of the encoding
         *         code unit size (see the ENCODING_* definitions in SmsConstants)
         */
        CalculateLength(
            [in] ICharSequence* msgBody,
            [in] Boolean use7bitOnly,
            [out, callee] ArrayOf<Int32>* result);

        /**
         * Divide a message text into several fragments, none bigger than
         * the maximum SMS message text size.
         *
         * @param text text, must not be null.
         * @return an <code>ArrayList</code> of strings that, in order,
         *   comprise the original msg text
         *
         * @hide
         */
        FragmentText(
            [in] String text,
            [out] IArrayList** result);

        /**
         * Calculates the number of SMS's required to encode the message body and
         * the number of characters remaining until the next message, given the
         * current encoding.
         *
         * @param messageBody the message to encode
         * @param use7bitOnly if true, characters that are not part of the radio
         *         specific (GSM / CDMA) alphabet encoding are converted to as a
         *         single space characters. If false, a messageBody containing
         *         non-GSM or non-CDMA alphabet characters are encoded using
         *         16-bit encoding.
         * @return an int[4] with int[0] being the number of SMS's required, int[1]
         *         the number of code units used, and int[2] is the number of code
         *         units remaining until the next message. int[3] is the encoding
         *         type that should be used for the message.
         */
        CalculateLength(
            [in] String messageBody,
            [in] Boolean use7bitOnly,
            [out, callee] ArrayOf<Int32>* result);

        /**
         * Get an SMS-SUBMIT PDU for a destination address and a message.
         * This method will not attempt to use any GSM national language 7 bit encodings.
         *
         * @param scAddress Service Centre address.  Null means use default.
         * @return a <code>SubmitPdu</code> containing the encoded SC
         *         address, if applicable, and the encoded message.
         *         Returns null on encode error.
         */
        GetSubmitPdu(
            [in] String scAddress,
            [in] String destinationAddress,
            [in] String message,
            [in] Boolean statusReportRequested,
            [out] ISmsMessageSubmitPdu** result);

        /**
         * Get an SMS-SUBMIT PDU for a destination address and a message.
         * This method will not attempt to use any GSM national language 7 bit encodings.
         *
         * @param scAddress Service Centre address.  Null means use default.
         * @param subId Subscription of the message
         * @return a <code>SubmitPdu</code> containing the encoded SC
         *         address, if applicable, and the encoded message.
         *         Returns null on encode error.
         * @hide
         */
        GetSubmitPdu(
            [in] String scAddress,
            [in] String destinationAddress,
            [in] String message,
            [in] Boolean statusReportRequested,
            [in] Int64 subId,
            [out] ISmsMessageSubmitPdu** result);

        /**
         * Get an SMS-SUBMIT PDU for a data message to a destination address &amp; port.
         * This method will not attempt to use any GSM national language 7 bit encodings.
         *
         * @param scAddress Service Centre address. null == use default
         * @param destinationAddress the address of the destination for the message
         * @param destinationPort the port to deliver the message to at the
         *        destination
         * @param data the data for the message
         * @return a <code>SubmitPdu</code> containing the encoded SC
         *         address, if applicable, and the encoded message.
         *         Returns null on encode error.
         */
        GetSubmitPdu(
            [in] String scAddress,
            [in] String destinationAddress,
            [in] Int16 destinationPort,
            [in] ArrayOf<Byte>* data,
            [in] Boolean statusReportRequested,
            [out] ISmsMessageSubmitPdu** result);

        /**
         * Decide if the carrier supports long SMS.
         * {@hide}
         */
        HasEmsSupport(
            [out] Boolean* result);

        /**
         * Check where to add " x/y" in each SMS segment, begin or end.
         * {@hide}
         */
        ShouldAppendPageNumberAsPrefix(
            [out] Boolean* result);
    }

    }//Telephony
    }//Droid
    }//Elastos

}
