//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Os.IBatteryStatsUid;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Os {

    enum BatterySipperDrainType {
        BatterySipperDrainType_IDLE,
        BatterySipperDrainType_CELL,
        BatterySipperDrainType_PHONE,
        BatterySipperDrainType_WIFI,
        BatterySipperDrainType_BLUETOOTH,
        BatterySipperDrainType_FLASHLIGHT,
        BatterySipperDrainType_SCREEN,
        BatterySipperDrainType_APP,
        BatterySipperDrainType_USER,
        BatterySipperDrainType_UNACCOUNTED,
        BatterySipperDrainType_OVERCOUNTED
    }

    /**
     * Contains power usage of an application, system service, or hardware type.
     */
    /**
     * @Involve
     * interface IComparable;
     */
    [local, deprecated]
    interface IBatterySipper {
        GetValues(
            [out, callee] ArrayOf<Double>* values);

        ComputeMobilemspp();

        /**
         * Gets a list of packages associated with the current user
         */
        GetPackages(
            [out, callee] ArrayOf<String>* packages);

        GetUid(
            [out] Int32* uid);

        GetUserId(
            [out] Int32* userId);

        SetUserId(
            [in] Int32 userId);

        GetUidObj(
            [out] IBatteryStatsUid** uidObj);

        SetUidObj(
            [in] IBatteryStatsUid* uidObj);

        GetValue(
            [out] Double* value);

        SetValue(
            [in] Double value);

        SetValues(
            [in] ArrayOf<Double>* values);

        GetDrainType(
            [out] BatterySipperDrainType* drainType);

        SetDrainType(
            [in] BatterySipperDrainType drainType);

        GetUsageTime(
            [out] Int64* usageTime);

        SetUsageTime(
            [in] Int64 usageTime);

        GetCpuTime(
            [out] Int64* cpuTime);

        SetCpuTime(
            [in] Int64 cpuTime);

        GetGpsTime(
            [out] Int64* gpsTime);

        SetGpsTime(
            [in] Int64 gpsTime);

        GetWifiRunningTime(
            [out] Int64* wifiRunningTime);

        SetWifiRunningTime(
            [in] Int64 wifiRunningTime);

        GetCpuFgTime(
            [out] Int64* cpuFgTime);

        SetCpuFgTime(
            [in] Int64 cpuFgTime);

        GetWakeLockTime(
            [out] Int64* wakeLockTime);

        SetWakeLockTime(
            [in] Int64 wakeLockTime);

        GetMobileRxPackets(
            [out] Int64* mobileRxPackets);

        SetMobileRxPackets(
            [in] Int64 mobileRxPackets);

        GetMobileTxPackets(
            [out] Int64* mobileTxPackets);

        SetMobileTxPackets(
            [in] Int64 mobileTxPackets);

        GetMobileActive(
            [out] Int64* mobileActive);

        SetMobileActive(
            [in] Int64 mobileActive);

        GetMobileActiveCount(
            [out] Int32* mobileActiveCount);

        SetMobileActiveCount(
            [in] Int32 mobileActiveCount);

        GetMobilemspp(
            [out] Double* mobilemspp);

        SetMobilemspp(
            [in] Double mobilemspp);

        GetWifiRxPackets(
            [out] Int64* wifiRxPackets);

        SetWifiRxPackets(
            [in] Int64 wifiRxPackets);

        GetWifiTxPackets(
            [out] Int64* wifiTxPackets);

        SetWifiTxPackets(
            [in] Int64 wifiTxPackets);

        GetMobileRxBytes(
            [out] Int64* mobileRxBytes);

        SetMobileRxBytes(
            [in] Int64 mobileRxBytes);

        GetMobileTxBytes(
            [out] Int64* mobileTxBytes);

        SetMobileTxBytes(
            [in] Int64 mobileTxBytes);

        GetWifiRxBytes(
            [out] Int64* wifiRxBytes);

        SetWifiRxBytes(
            [in] Int64 wifiRxBytes);

        GetWifiTxBytes(
            [out] Int64* wifiTxBytes);

        SetWifiTxBytes(
            [in] Int64 wifiTxBytes);

        GetPercent(
            [out] Double* percent);

        SetPercent(
            [in] Double percent);

        GetNoCoveragePercent(
            [out] Double* noCoveragePercent);

        SetNoCoveragePercent(
            [in] Double noCoveragePercent);

        SetPackages(
            [in] ArrayOf<String>* packages);

        GetPackageWithHighestDrain(
            [out] String* packageWithHighestDrain);

        SetPackageWithHighestDrain(
            [in] String packageWithHighestDrain);
    }

    } // namespace Os
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
