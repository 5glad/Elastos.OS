
module
{
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IMessage;
    // interface Elastos.Droid.Internal.Telephony.Uicc.IIccRecords;
    // interface Elastos.Droid.Internal.Telephony.Uicc.IIccFileHandler;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    /**
     * {@hide}
     * @Deprecated use UiccController.getUiccCard instead.
     *
     * Integrated Circuit Card (ICC) interface
     * An object of a class implementing this interface is used by external
     * apps (specifically PhoneApp) to perform icc card related functionality.
     *
     * Apps (those that have access to Phone object) can retrieve this object
     * by calling phone.getIccCard()
     *
     * This interface is implemented by IccCardProxy and the object PhoneApp
     * gets when it calls getIccCard is IccCardProxy.
     */
    interface IIccCard {
        /**
         * @return combined Card and current App state
         */
        GetState(
            [out] IccCardConstantsState* result);

        /**
         * @return IccRecords object belonging to current UiccCardApplication
         */
        // GetIccRecords(
        //     [out] IIccRecords** result);

        /**
         * @return IccFileHandler object belonging to current UiccCardApplication
         */
        // GetIccFileHandler(
        //     [out] IIccFileHandler** result);

        /**
         * Notifies handler of any transition into IccCardConstants.State.ABSENT
         */
        RegisterForAbsent(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForAbsent(
            [in] IHandler* h);

        /**
         * Notifies handler of any transition into IccCardConstants.State.PERSO_LOCKED
         */
        RegisterForPersoLocked(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForPersoLocked(
            [in] IHandler* h);

        /**
         * Notifies handler of any transition into IccCardConstants.State.isPinLocked()
         */
        RegisterForLocked(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForLocked(
            [in] IHandler* h);

        /**
         * Supply the ICC PIN to the ICC
         *
         * When the operation is complete, onComplete will be sent to its
         * Handler.
         *
         * onComplete.obj will be an AsyncResult
         *
         * ((AsyncResult)onComplete.obj).exception == null on success
         * ((AsyncResult)onComplete.obj).exception != null on fail
         *
         * If the supplied PIN is incorrect:
         * ((AsyncResult)onComplete.obj).exception != null
         * && ((AsyncResult)onComplete.obj).exception
         *       instanceof com.android.internal.telephony.gsm.CommandException)
         * && ((CommandException)(((AsyncResult)onComplete.obj).exception))
         *          .getCommandError() == CommandException.Error.PASSWORD_INCORRECT
         */
        SupplyPin (
            [in] String pin,
            [in] IMessage* onComplete);

        /**
         * Supply the ICC PUK to the ICC
         */
        SupplyPuk (
            [in] String puk,
            [in] String newPin,
            [in] IMessage* onComplete);

        /**
         * Supply the ICC PIN2 to the ICC
         */
        SupplyPin2 (
            [in] String pin2,
            [in] IMessage* onComplete);

        /**
         * Supply the ICC PUK2 to the ICC
         */
        SupplyPuk2 (
            [in] String puk2,
            [in] String newPin2,
            [in] IMessage* onComplete);

        /**
         * Check whether fdn (fixed dialing number) service is available.
         * @return true if ICC fdn service available
         *         false if ICC fdn service not available
        */
        GetIccFdnAvailable(
            [out] Boolean* result);

        /**
         * Supply Depersonalization code to the RIL
         */
        SupplyDepersonalization (
            [in] String pin,
            [in] String type,
            [in] IMessage* onComplete);

        /**
         * Check whether ICC pin lock is enabled
         * This is a sync call which returns the cached pin enabled state
         *
         * @return true for ICC locked enabled
         *         false for ICC locked disabled
         */
        GetIccLockEnabled(
            [out] Boolean* result);

        /**
         * Check whether ICC fdn (fixed dialing number) is enabled
         * This is a sync call which returns the cached pin enabled state
         *
         * @return true for ICC fdn enabled
         *         false for ICC fdn disabled
         */
        GetIccFdnEnabled(
            [out] Boolean* result);

        /**
         * Set the ICC pin lock enabled or disabled
         * When the operation is complete, onComplete will be sent to its handler
         *
         * @param enabled "true" for locked "false" for unlocked.
         * @param password needed to change the ICC pin state, aka. Pin1
         * @param onComplete
         *        onComplete.obj will be an AsyncResult
         *        ((AsyncResult)onComplete.obj).exception == null on success
         *        ((AsyncResult)onComplete.obj).exception != null on fail
         */
        SetIccLockEnabled (
            [in] Boolean enabled,
            [in] String password,
            [in] IMessage* onComplete);

        /**
         * Set the ICC fdn enabled or disabled
         * When the operation is complete, onComplete will be sent to its handler
         *
         * @param enabled "true" for locked "false" for unlocked.
         * @param password needed to change the ICC fdn enable, aka Pin2
         * @param onComplete
         *        onComplete.obj will be an AsyncResult
         *        ((AsyncResult)onComplete.obj).exception == null on success
         *        ((AsyncResult)onComplete.obj).exception != null on fail
         */
        SetIccFdnEnabled(
            [in] Boolean enabled,
            [in] String password,
            [in] IMessage* onComplete);

        /**
         * Change the ICC password used in ICC pin lock
         * When the operation is complete, onComplete will be sent to its handler
         *
         * @param oldPassword is the old password
         * @param newPassword is the new password
         * @param onComplete
         *        onComplete.obj will be an AsyncResult
         *        ((AsyncResult)onComplete.obj).exception == null on success
         *        ((AsyncResult)onComplete.obj).exception != null on fail
         */
        ChangeIccLockPassword(
            [in] String oldPassword,
            [in] String newPassword,
            [in] IMessage* onComplete);

        /**
         * Change the ICC password used in ICC fdn enable
         * When the operation is complete, onComplete will be sent to its handler
         *
         * @param oldPassword is the old password
         * @param newPassword is the new password
         * @param onComplete
         *        onComplete.obj will be an AsyncResult
         *        ((AsyncResult)onComplete.obj).exception == null on success
         *        ((AsyncResult)onComplete.obj).exception != null on fail
         */
        ChangeIccFdnPassword(
            [in] String oldPassword,
            [in] String newPassword,
            [in] IMessage* onComplete);

        /**
         * Returns service provider name stored in ICC card.
         * If there is no service provider name associated or the record is not
         * yet available, null will be returned <p>
         *
         * Please use this value when display Service Provider Name in idle mode <p>
         *
         * Usage of this provider name in the UI is a common carrier requirement.
         *
         * Also available via Android property "gsm.sim.operator.alpha"
         *
         * @return Service Provider Name stored in ICC card
         *         null if no service provider name associated or the record is not
         *         yet available
         *
         */
        GetServiceProviderName(
            [out] String* result);

        /**
         * Checks if an Application of specified type present on the card
         * @param type is AppType to look for
         */
        // IsApplicationOnIcc(
        //     [in] IIccCardApplicationStatus.AppType* type,
        //     [out] Boolean* result);

        /**
         * @return true if a ICC card is present
         */
        HasIccCard(
            [out] Boolean* result);

        /**
         * @return true if ICC card is PIN2 blocked
         */
        GetIccPin2Blocked(
            [out] Boolean* result);

        /**
         * @return true if ICC card is PUK2 blocked
         */
        GetIccPuk2Blocked(
            [out] Boolean* result);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
