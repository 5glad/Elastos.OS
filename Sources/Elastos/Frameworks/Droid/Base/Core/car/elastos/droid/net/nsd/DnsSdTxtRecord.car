//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Net {
    namespace Nsd {

    /**
     * This class handles TXT record data for DNS based service discovery as specified at
     * http://tools.ietf.org/html/draft-cheshire-dnsext-dns-sd-11
     *
     * DNS-SD specifies that a TXT record corresponding to an SRV record consist of
     * a packed array of bytes, each preceded by a length byte. Each string
     * is an attribute-value pair.
     *
     * The DnsSdTxtRecord object stores the entire TXT data as a single byte array, traversing it
     * as need be to implement its various methods.
     * @hide
     *
     */
    /**
     * @Involved
     * interface IParcelable;
     */
    interface IDnsSdTxtRecord {
        /**
         * Set a key/value pair. Setting an existing key will replace its value.
         * @param key Must be ascii with no '='
         * @param value matching value to key
         */
        Set(
            [in] String key,
            [in] String value);

        /**
         * Get a value for a key
         *
         * @param key
         * @return The value associated with the key
         */
        Get(
            [in] String key,
            [out] String* result);

        /** Remove a key/value pair. If found, returns the index or -1 if not found */
        Remove(
            [in] String key,
            [out] Int32* result);

        /** Return the count of keys */
        KeyCount(
            [out] Int32* result);

        /** Return true if key is present, false if not. */
        Contains(
            [in] String key,
            [out] Boolean* result);

        /* Gets the size in bytes */
        GetSize(
            [out] Int32* result);

        /* Gets the raw data in bytes */
        GetRawData(
            [out, callee] ArrayOf<Byte>* result);
    }

    } // namespace Nsd
    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
