//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Internal.Telephony.ISmsRawData;

    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    /** Interface for applications to access the ICC phone book.
     *
     * <p>The following code snippet demonstrates a static method to
     * retrieve the ISms interface from Android:</p>
     * <pre>private static ISms getSmsInterface()
                throws DeadObjectException {
        IServiceManager sm = ServiceManagerNative.getDefault();
        ISms ss;
        ss = ISms.Stub.asInterface(sm.getService("isms"));
        return ss;
    }
     * </pre>
     */
    [local, parcelable, deprecated]
    interface IISms {
        SynthesizeMessages(
            [in] String originatingAddress,
            [in] String scAddress,
            [in] IList* messages,
            [in] Int64 timestampMillis);

        /**
         * Retrieves all messages currently stored on ICC.
         *
         * @return list of SmsRawData of all sms on ICC
         */
        GetAllMessagesFromIccEf(
            [in] String callingPkg,
            [out] IList** result);

        /**
         * Retrieves all messages currently stored on ICC.
         * @param subId the subId id.
         * @return list of SmsRawData of all sms on ICC
         */
        GetAllMessagesFromIccEfForSubscriber(
            [in] Int64 subId,
            [in] String callingPkg,
            [out] IList** result);

        /**
         * Update the specified message on the ICC.
         *
         * @param messageIndex record index of message to update
         * @param newStatus new message status (STATUS_ON_ICC_READ,
         *                  STATUS_ON_ICC_UNREAD, STATUS_ON_ICC_SENT,
         *                  STATUS_ON_ICC_UNSENT, STATUS_ON_ICC_FREE)
         * @param pdu the raw PDU to store
         * @return success or not
         *
         */
        UpdateMessageOnIccEf(
            [in] String callingPkg,
            [in] Int32 messageIndex,
            [in] Int32 newStatus,
            [in] ArrayOf<Byte>* pdu,
            [out] Boolean* result);

        /**
         * Update the specified message on the ICC.
         *
         * @param messageIndex record index of message to update
         * @param newStatus new message status (STATUS_ON_ICC_READ,
         *                  STATUS_ON_ICC_UNREAD, STATUS_ON_ICC_SENT,
         *                  STATUS_ON_ICC_UNSENT, STATUS_ON_ICC_FREE)
         * @param pdu the raw PDU to store
         * @param subId the subId id.
         * @return success or not
         *
         */
        UpdateMessageOnIccEfForSubscriber(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] Int32 messageIndex,
            [in] Int32 newStatus,
            [in] ArrayOf<Byte>* pdu,
            [out] Boolean* result);

        /**
         * Copy a raw SMS PDU to the ICC.
         *
         * @param pdu the raw PDU to store
         * @param status message status (STATUS_ON_ICC_READ, STATUS_ON_ICC_UNREAD,
         *               STATUS_ON_ICC_SENT, STATUS_ON_ICC_UNSENT)
         * @return success or not
         *
         */
        CopyMessageToIccEf(
            [in] String callingPkg,
            [in] Int32 status,
            [in] ArrayOf<Byte>* pdu,
            [in] ArrayOf<Byte>* smsc,
            [out] Boolean* result);

        /**
         * Copy a raw SMS PDU to the ICC.
         *
         * @param pdu the raw PDU to store
         * @param status message status (STATUS_ON_ICC_READ, STATUS_ON_ICC_UNREAD,
         *               STATUS_ON_ICC_SENT, STATUS_ON_ICC_UNSENT)
         * @param subId the subId id.
         * @return success or not
         *
         */
        CopyMessageToIccEfForSubscriber(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] Int32 status,
            [in] ArrayOf<Byte>* pdu,
            [in] ArrayOf<Byte>* smsc,
            [out] Boolean* result);

        /**
         * Send a data SMS.
         *
         * @param smsc the SMSC to send the message through, or NULL for the
         *  default SMSC
         * @param data the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applicaitons,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         */
        SendData(
            [in] String callingPkg,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send a data SMS.
         *
         * @param smsc the SMSC to send the message through, or NULL for the
         *  default SMSC
         * @param data the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applicaitons,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         * @param subId the subId id.
         */
        SendDataForSubscriber(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send a data SMS with orig port.
         *
         * @param destAddr the address to send the message to
         * @param scAddr is the service center address or null to use
         *  the current default SMSC
         * @param destPort the port to deliver the message to
         * @param origPort the port set by the sender
         * @param data the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applicaitons,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         */
        SendDataWithOrigPort(
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] Int32 origPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send a data SMS with orig port.
         *
         * @param subId the subId id.
         * @param destAddr the address to send the message to
         * @param scAddr is the service center address or null to use
         *  the current default SMSC
         * @param destPort the port to deliver the message to
         * @param origPort the port set by the sender
         * @param data the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applicaitons,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         */
        SendDataWithOrigPortUsingSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] Int32 origPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send an SMS.
         *
         * @param smsc the SMSC to send the message through, or NULL for the
         *  default SMSC
         * @param text the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applications,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         */
        SendText(
            [in] String callingPkg,
            [in] String destAddr,
            [in] String scAddr,
            [in] String text,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send an SMS.
         *
         * @param smsc the SMSC to send the message through, or NULL for the
         *  default SMSC
         * @param text the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applications,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         * @param subId the subId on which the SMS has to be sent.
         */
        SendTextForSubscriber(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] String destAddr,
            [in] String scAddr,
            [in] String text,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send an SMS with options using Subscription Id.
         *
         * @param subId the subId on which the SMS has to be sent.
         * @param destAddr the address to send the message to
         * @param scAddr the SMSC to send the message through, or NULL for the
         *  default SMSC
         * @param text the body of the message to send
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is sucessfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK<code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applications,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         * @param priority Priority level of the message
         *  Refer specification See 3GPP2 C.S0015-B, v2.0, table 4.5.9-1
         *  ---------------------------------
         *  PRIORITY      | Level of Priority
         *  ---------------------------------
         *      '00'      |     Normal
         *      '01'      |     Interactive
         *      '10'      |     Urgent
         *      '11'      |     Emergency
         *  ----------------------------------
         *  Any Other values included Negative considered as Invalid Priority Indicator of the message.
         * @param isExpectMore is a boolean to indicate the sending message is multi segmented or not.
         * @param validityPeriod Validity Period of the message in mins.
         *  Refer specification 3GPP TS 23.040 V6.8.1 section 9.2.3.12.1.
         *  Validity Period(Minimum) -> 5 mins
         *  Validity Period(Maximum) -> 635040 mins(i.e.63 weeks).
         *  Any Other values included Negative considered as Invalid Validity Period of the message.
         */
        SendTextWithOptionsUsingSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] String text,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent,
            [in] Int32 priority,
            [in] Boolean isExpectMore,
            [in] Int32 validityPeriod);

        /**
         * Inject an SMS PDU into the android platform.
         *
         * @param pdu is the byte array of pdu to be injected into android application framework
         * @param format is the format of SMS pdu (android.telephony.SmsMessage.FORMAT_3GPP or
         * android.telephony.SmsMessage.FORMAT_3GPP2)
         * @param receivedIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is successfully received by the
         *  android application framework. This intent is broadcasted at
         *  the same time an SMS received from radio is acknowledged back.
         */
        InjectSmsPdu(
            [in] ArrayOf<Byte>* pdu,
            [in] String format,
            [in] IPendingIntent* receivedIntent);

        /**
         * Inject an SMS PDU into the android platform.
         *
         * @param subId on which SMS PDU to be injected into android application framework
         * @param pdu is the byte array of pdu to be injected into android application framework
         * @param format is the format of SMS pdu (android.telephony.SmsMessage.FORMAT_3GPP or
         * android.telephony.SmsMessage.FORMAT_3GPP2)
         * @param receivedIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is successfully received by the
         *  android application framework. This intent is broadcasted at
         *  the same time an SMS received from radio is acknowledged back.
         */
        InjectSmsPduForSubscriber(
            [in] Int64 subId,
            [in] ArrayOf<Byte>* pdu,
            [in] String format,
            [in] IPendingIntent* receivedIntent);

        /**
         * Update the status of a pending (send-by-IP) SMS message and resend by PSTN if necessary.
         * This outbound message was handled by the carrier app. If the carrier app fails to send
         * this message, it would be resent by PSTN.
         *
         * @param messageRef the reference number of the SMS message.
         * @param success True if and only if the message was sent successfully. If its value is
         *  false, this message should be resent via PSTN.
         */
        UpdateSmsSendStatus(
            [in] Int32 messageRef,
            [in] Boolean success);

        /**
         * Send a multi-part text based SMS.
         *
         * @param destinationAddress the address to send the message to
         * @param scAddress is the service center address or null to use
         *   the current default SMSC
         * @param parts an <code>ArrayList</code> of strings that, in order,
         *   comprise the original message
         * @param sentIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been sent.
         *   The result code will be <code>Activity.RESULT_OK<code> for success,
         *   or one of these errors:
         *   <code>RESULT_ERROR_GENERIC_FAILURE</code>
         *   <code>RESULT_ERROR_RADIO_OFF</code>
         *   <code>RESULT_ERROR_NULL_PDU</code>.
         * @param deliveryIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been delivered
         *   to the recipient.  The raw pdu of the status report is in the
         *   extended data ("pdu").
         */
        SendMultipartText(
            [in] String callingPkg,
            [in] String destinationAddress,
            [in] String scAddress,
            [in] IList* parts,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents);

        /**
         * Send a multi-part text based SMS.
         *
         * @param destinationAddress the address to send the message to
         * @param scAddress is the service center address or null to use
         *   the current default SMSC
         * @param parts an <code>ArrayList</code> of strings that, in order,
         *   comprise the original message
         * @param sentIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been sent.
         *   The result code will be <code>Activity.RESULT_OK<code> for success,
         *   or one of these errors:
         *   <code>RESULT_ERROR_GENERIC_FAILURE</code>
         *   <code>RESULT_ERROR_RADIO_OFF</code>
         *   <code>RESULT_ERROR_NULL_PDU</code>.
         * @param deliveryIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been delivered
         *   to the recipient.  The raw pdu of the status report is in the
         *   extended data ("pdu").
         * @param subId the subId on which the SMS has to be sent.
         */
        SendMultipartTextForSubscriber(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] String destinationAddress,
            [in] String scAddress,
            [in] IList* parts,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents);

        /**
         * Send a multi-part text based SMS with options using Subscription Id.
         *
         * @param subId the subId on which the SMS has to be sent.
         * @param destinationAddress the address to send the message to
         * @param scAddress is the service center address or null to use
         *   the current default SMSC
         * @param parts an <code>ArrayList</code> of strings that, in order,
         *   comprise the original message
         * @param sentIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been sent.
         *   The result code will be <code>Activity.RESULT_OK<code> for success,
         *   or one of these errors:
         *   <code>RESULT_ERROR_GENERIC_FAILURE</code>
         *   <code>RESULT_ERROR_RADIO_OFF</code>
         *   <code>RESULT_ERROR_NULL_PDU</code>.
         * @param deliveryIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been delivered
         *   to the recipient.  The raw pdu of the status report is in the
         *   extended data ("pdu").
         * @param priority Priority level of the message
         *  Refer specification See 3GPP2 C.S0015-B, v2.0, table 4.5.9-1
         *  ---------------------------------
         *  PRIORITY      | Level of Priority
         *  ---------------------------------
         *      '00'      |     Normal
         *      '01'      |     Interactive
         *      '10'      |     Urgent
         *      '11'      |     Emergency
         *  ----------------------------------
         *  Any Other values included Negative considered as Invalid Priority Indicator of the message.
         * @param isExpectMore is a boolean to indicate the sending message is multi segmented or not.
         * @param validityPeriod Validity Period of the message in mins.
         *  Refer specification 3GPP TS 23.040 V6.8.1 section 9.2.3.12.1.
         *  Validity Period(Minimum) -> 5 mins
         *  Validity Period(Maximum) -> 635040 mins(i.e.63 weeks).
         *  Any Other values included Negative considered as Invalid Validity Period of the message.
         */
        SendMultipartTextWithOptionsUsingSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] IList* parts,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents,
            [in] Int32 priority,
            [in] Boolean isExpectMore,
            [in] Int32 validityPeriod);

        /**
         * Enable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier. Note that if two different clients enable the same
         * message identifier, they must both disable it for the device to stop
         * receiving those messages.
         *
         * @param messageIdentifier Message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @return true if successful, false otherwise
         *
         * @see #disableCellBroadcast(Int32)
         */
        EnableCellBroadcast(
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        /**
         * Enable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier. Note that if two different clients enable the same
         * message identifier, they must both disable it for the device to stop
         * receiving those messages.
         *
         * @param messageIdentifier Message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param subId for which the broadcast has to be enabled
         * @return true if successful, false otherwise
         *
         * @see #disableCellBroadcast(Int32)
         */
        EnableCellBroadcastForSubscriber(
            [in] Int64 subId,
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        /**
         * Disable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier. Note that if two different clients enable the same
         * message identifier, they must both disable it for the device to stop
         * receiving those messages.
         *
         * @param messageIdentifier Message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @return true if successful, false otherwise
         *
         * @see #enableCellBroadcast(Int32)
         */
        DisableCellBroadcast(
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        /**
         * Disable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier. Note that if two different clients enable the same
         * message identifier, they must both disable it for the device to stop
         * receiving those messages.
         *
         * @param messageIdentifier Message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param subId for which the broadcast has to be disabled
         * @return true if successful, false otherwise
         *
         * @see #enableCellBroadcast(Int32)
         */
        DisableCellBroadcastForSubscriber(
            [in] Int64 subId,
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        /*
         * Enable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier range. Note that if two different clients enable
         * a message identifier range, they must both disable it for the device
         * to stop receiving those messages.
         *
         * @param startMessageId first message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param endMessageId last message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @return true if successful, false otherwise
         *
         * @see #disableCellBroadcastRange(Int32, Int32)
         */
        EnableCellBroadcastRange(
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        /*
         * Enable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier range. Note that if two different clients enable
         * a message identifier range, they must both disable it for the device
         * to stop receiving those messages.
         *
         * @param startMessageId first message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param endMessageId last message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param subId for which the broadcast has to be enabled
         * @return true if successful, false otherwise
         *
         * @see #disableCellBroadcastRange(Int32, Int32)
         */
        EnableCellBroadcastRangeForSubscriber(
            [in] Int64 subId,
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        /**
         * Disable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier range. Note that if two different clients enable
         * a message identifier range, they must both disable it for the device
         * to stop receiving those messages.
         *
         * @param startMessageId first message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param endMessageId last message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @return true if successful, false otherwise
         *
         * @see #enableCellBroadcastRange(Int32, Int32)
         */
        DisableCellBroadcastRange(
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        /**
         * Disable reception of cell broadcast (SMS-CB) messages with the given
         * message identifier range. Note that if two different clients enable
         * a message identifier range, they must both disable it for the device
         * to stop receiving those messages.
         *
         * @param startMessageId first message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param endMessageId last message identifier as specified in TS 23.041 (3GPP) or
         *   C.R1001-G (3GPP2)
         * @param subId for which the broadcast has to be disabled
         * @return true if successful, false otherwise
         *
         * @see #enableCellBroadcastRange(Int32, Int32, Int32)
         */
        DisableCellBroadcastRangeForSubscriber(
            [in] Int64 subId,
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        /**
         * Returns the premium SMS send permission for the specified package.
         * Requires system permission.
         */
        GetPremiumSmsPermission(
            [in] String packageName,
            [out] Int32* permission);

        /**
         * Returns the premium SMS send permission for the specified package.
         * Requires system permission.
         */
        GetPremiumSmsPermissionForSubscriber(
            [in] Int64 subId,
            [in] String packageName,
            [out] Int32* permission);

        /**
         * Set the SMS send permission for the specified package.
         * Requires system permission.
         */
        SetPremiumSmsPermission(
            [in] String packageName,
            [in] Int32 permission);

        /**
         * Set the SMS send permission for the specified package.
         * Requires system permission.
         */
         /**
         * Set the SMS send permission for the specified package.
         * Requires system permission.
         */
        SetPremiumSmsPermissionForSubscriber(
            [in] Int64 subId,
            [in] String packageName,
            [in] Int32 permission);

        /**
         * SMS over IMS is supported if IMS is registered and SMS is supported
         * on IMS.
         *
         * @return true if SMS over IMS is supported, false otherwise
         *
         * @see #getImsSmsFormat()
         */
        IsImsSmsSupported(
            [out] Boolean* result);

        /**
         * SMS over IMS is supported if IMS is registered and SMS is supported
         * on IMS.
         * @param subId for subId which isImsSmsSupported is queried
         * @return true if SMS over IMS is supported, false otherwise
         *
         * @see #getImsSmsFormat()
         */
        IsImsSmsSupportedForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Gets SMS format supported on IMS.  SMS over IMS format is
         * either 3GPP or 3GPP2.
         *
         * @return android.telephony.SmsMessage.FORMAT_3GPP,
         *         android.telephony.SmsMessage.FORMAT_3GPP2
         *      or android.telephony.SmsMessage.FORMAT_UNKNOWN
         *
         * @see #isImsSmsSupported()
         */
        GetImsSmsFormat(
            [out] String* format);

        /**
         * Gets SMS format supported on IMS.  SMS over IMS format is
         * either 3GPP or 3GPP2.
         * @param subId for subId which getImsSmsFormat is queried
         * @return android.telephony.SmsMessage.FORMAT_3GPP,
         *         android.telephony.SmsMessage.FORMAT_3GPP2
         *      or android.telephony.SmsMessage.FORMAT_UNKNOWN
         *
         * @see #isImsSmsSupported()
         */
        GetImsSmsFormatForSubscriber(
            [in] Int64 subId,
            [out] String* format);

        /**
         * Send a system stored text message.
         *
         * This is used for sending a previously sent, but failed-to-send, message or
         * for sending a text message that has been stored as a draft.
         *
         * @param subId the SIM id.
         * @param callingPkg the package name of the calling app
         * @param messageUri the URI of the stored message
         * @param scAddress is the service center address or null to use the current default SMSC
         * @param sentIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is successfully sent, or failed.
         *  The result code will be <code>Activity.RESULT_OK</code> for success,
         *  or one of these errors:<br>
         *  <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *  <code>RESULT_ERROR_RADIO_OFF</code><br>
         *  <code>RESULT_ERROR_NULL_PDU</code><br>
         *  For <code>RESULT_ERROR_GENERIC_FAILURE</code> the sentIntent may include
         *  the extra "errorCode" containing a radio technology specific value,
         *  generally only useful for troubleshooting.<br>
         *  The per-application based SMS control checks sentIntent. If sentIntent
         *  is NULL the caller will be checked against all unknown applications,
         *  which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
         *  broadcast when the message is delivered to the recipient.  The
         *  raw pdu of the status report is in the extended data ("pdu").
         */
        SendStoredText(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] IUri* messageUri,
            [in] String scAddress,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        /**
         * Send a system stored multi-part text message.
         *
         * This is used for sending a previously sent, but failed-to-send, message or
         * for sending a text message that has been stored as a draft.
         * The provided <code>PendingIntent</code> lists should match the part number of the
         * divided text of the stored message by using <code>divideMessage</code>
         *
         * @param subId the SIM id.
         * @param callingPkg the package name of the calling app
         * @param messageUri the URI of the stored message
         * @param scAddress is the service center address or null to use
         *   the current default SMSC
         * @param sentIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been sent.
         *   The result code will be <code>Activity.RESULT_OK</code> for success,
         *   or one of these errors:<br>
         *   <code>RESULT_ERROR_GENERIC_FAILURE</code><br>
         *   <code>RESULT_ERROR_RADIO_OFF</code><br>
         *   <code>RESULT_ERROR_NULL_PDU</code><br>
         *   For <code>RESULT_ERROR_GENERIC_FAILURE</code> each sentIntent may include
         *   the extra "errorCode" containing a radio technology specific value,
         *   generally only useful for troubleshooting.<br>
         *   The per-application based SMS control checks sentIntent. If sentIntent
         *   is NULL the caller will be checked against all unknown applications,
         *   which cause smaller number of SMS to be sent in checking period.
         * @param deliveryIntents if not null, an <code>ArrayList</code> of
         *   <code>PendingIntent</code>s (one for each message part) that is
         *   broadcast when the corresponding message part has been delivered
         *   to the recipient.  The raw pdu of the status report is in the
         *   extended data ("pdu").
         */
        SendStoredMultipartText(
            [in] Int64 subId,
            [in] String callingPkg,
            [in] IUri* messageUri,
            [in] String scAddress,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents);

        /**
         * Get the capacity count of sms on Icc card.
         *
         * @param subId for subId which getSmsCapacityOnIcc is queried.
         * @return capacity of ICC
         */
        GetSmsCapacityOnIccForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);
    }

    } // namespace Telephony
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
