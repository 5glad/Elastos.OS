//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    namespace Elastos {
    namespace Droid {
    namespace Telecom {

        interface IVideoProfileVideoState {
            /**
             * Call is currently in an audio-only mode with no video transmission or receipt.
             */
            const Int32 AUDIO_ONLY = 0x0;

            /**
             * Video transmission is enabled.
             */
            const Int32 TX_ENABLED = 0x1;

            /**
             * Video reception is enabled.
             */
            const Int32 RX_ENABLED = 0x2;

            /**
             * Video signal is bi-directional.
             */
            const Int32 BIDIRECTIONAL = TX_ENABLED | RX_ENABLED;

            /**
             * Video is paused.
             */
            const Int32 PAUSED = 0x4;
        }

        /**
         *  Represents attributes of video calls.
         *  @hide
         *
         * @Involve
         * interface IParcelable
         */
        interface IVideoProfile {
            /**
             * "High" video quality.
             */
            const Int32 QUALITY_HIGH = 1;

            /**
             * "Medium" video quality.
             */
            const Int32 QUALITY_MEDIUM = 2;

            /**
             * "Low" video quality.
             */
            const Int32 QUALITY_LOW = 3;

            /**
             * Use default video quality.
             */
            const Int32 QUALITY_DEFAULT = 4;

            GetVideoState(
                [out] Int32* res);

            GetQuality(
                [out] Int32* res);
        }

        interface IVideoProfileVideoStateHelper {
            /**
             * Whether the video state is audio only.
             * @param videoState The video state.
             * @return Returns true if the video state is audio only.
             */
            IsAudioOnly(
                [in] Int32 videoState,
                [out] Boolean* result);

            /**
             * Whether the video state is any of the video type
             * @param videoState The video state.
             * @return Returns true if the video state TX or RX or Bidirectional
             */
            IsVideo(
                [in] Int32 videoState,
                [out] Boolean* result);

            /**
             * Whether the video transmission is enabled.
             * @param videoState The video state.
             * @return Returns true if the video transmission is enabled.
             */
            IsTransmissionEnabled(
                [in] Int32 videoState,
                [out] Boolean* result);

            /**
             * Whether the video reception is enabled.
             * @param videoState The video state.
             * @return Returns true if the video transmission is enabled.
             */
            IsReceptionEnabled(
                [in] Int32 videoState,
                [out] Boolean* result);

            /**
             * Whether the video signal is bi-directional.
             * @param videoState
             * @return Returns true if the video signal is bi-directional.
             */
            IsBidirectional(
                [in] Int32 videoState,
                [out] Boolean* result);

            /**
             * Whether the video is paused.
             * @param videoState The video state.
             * @return Returns true if the video is paused.
             */
            IsPaused(
                [in] Int32 videoState,
                [out] Boolean* result);

            /**
             * Determines if a specified state is set in a videoState bit-mask.
             *
             * @param videoState The video state bit-mask.
             * @param state The state to check.
             * @return {@code True} if the state is set.
             * {@hide}
             */
            HasState(
                [in] Int32 videoState,
                [in] Int32 state,
                [out] Boolean* result);

        }

    } // namespace Telecom
    } // namespace Droid
    } // namespace Elastos
}
