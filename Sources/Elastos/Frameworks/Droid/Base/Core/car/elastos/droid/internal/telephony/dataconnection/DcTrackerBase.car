
module
{
    interface Elastos.Droid.Os.IAsyncResult;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Net.ILinkProperties;
    interface Elastos.Droid.Net.INetworkCapabilities;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccRecords;
    enum Elastos.Droid.Internal.Telephony.DctConstantsActivity;
    enum Elastos.Droid.Internal.Telephony.DctConstantsState;
    // interface Elastos.Droid.Internal.Telephony.Uicc.IIccRecords;
    // interface Elastos.Droid.Internal.Telephony.DataConnection.IDcFailCause;

    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IPrintWriter;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace DataConnection {

    interface IDcTrackerBaseTxRxSum {
        Reset();

        UpdateTxRxSum();

        GetTxPkts(
            [out] Int64* result);

        SetTxPkts(
            [in] Int64 txPkts);

        GetRxPkts(
            [out] Int64* result);

        SetRxPkts(
            [in] Int64 rxPkts);
    }

    /**
     * @Involve
     * interface IHandler
     */
    [deprecated]
    interface IDcTrackerBase {
        GetInitialMaxRetry(
            [out] Int32* result);

        OnActionIntentReconnectAlarm(
            [in] IIntent* intent);

        OnActionIntentRestartTrySetupAlarm(
            [in] IIntent* intent);

        OnActionIntentDataStallAlarm(
            [in] IIntent* intent);

        Dispose();

        GetActivity(
            [out] DctConstantsActivity* result);

        IsApnTypeActive(
            [in] String type,
            [out] Boolean* result);

        FetchDunApn(
            [out] IApnSetting** result);

        GetActiveApnTypes(
            [out, callee] ArrayOf<String>* result);

        GetActiveApnString(
            [in] String apnType,
            [out] String* result);

        SetDataOnRoamingEnabled(
            [in] Boolean enabled);

        GetDataOnRoamingEnabled(
            [out] Boolean* result);

        SetDataEnabled(
            [in] Boolean enbl);

        GetDataEnabled(
            [out] Boolean* result);

        // abstract methods
        RestartRadio();

        IsDataAllowed(
            [out] Boolean* result);

        IsApnTypeAvailable(
            [in] String type,
            [out] Boolean* result);

        GetState(
            [in] String apnType,
            [out] DctConstantsState* result);

        IsProvisioningApn(
            [in] String apnType,
            [out] Boolean* result);

        SetState(
            [in] DctConstantsState s);

        GotoIdleAndNotifyDataConnection(
            [in] String reason);

        OnTrySetupData(
            [in] String reason,
            [out] Boolean* result);

        OnRoamingOff();

        OnRoamingOn();

        OnRadioAvailable();

        OnRadioOffOrNotAvailable();

        OnDataSetupComplete(
            [in] IAsyncResult* ar);

        OnDataSetupCompleteError(
            [in] IAsyncResult* ar);

        OnDisconnectDone(
            [in] Int32 connId,
            [in] IAsyncResult* ar);

        OnDisconnectDcRetrying(
            [in] Int32 connId,
            [in] IAsyncResult* ar);

        OnVoiceCallStarted();

        OnVoiceCallEnded();

        OnCleanUpConnection(
            [in] Boolean tearDown,
            [in] Int32 apnId,
            [in] String reason);

        OnCleanUpAllConnections(
            [in] String cause);

        IsDataPossible(
            [in] String apnType,
            [out] Boolean* result);

        IsOnDemandDataPossible(
            [in] String apnType,
            [out] Boolean* result);

        OnUpdateIcc(
            [out] Boolean* result);

        CompleteConnection(
            [in] IApnContext* apnContext);

        SetDataAllowed(
            [in] Boolean enbl,
            [in] IMessage* response);

        GetPcscfAddress(
            [in] String apnType,
            [out, callee] ArrayOf<String>* result);

        SetImsRegistrationState(
            [in] Boolean registered);

        MvnoMatches(
            [in] IIccRecords* r,
            [in] String mvno_type,
            [in] String mvno_match_data,
            [out] Boolean* result);

        IsPermanentFail(
            [in] IDcFailCause* dcFailCause,
            [out] Boolean* result);

        GetAnyDataEnabled(
            [out] Boolean* result);

        IsEmergency(
            [out] Boolean* result);

        ApnTypeToId(
            [in] String type,
            [out] Int32* result);

        ApnIdToType(
            [in] Int32 id,
            [out] String* result);

        GetLinkProperties(
            [in] String apnType,
            [out] ILinkProperties** result);

        GetNetworkCapabilities(
            [in] String apnType,
            [out] INetworkCapabilities** result);

        NotifyDataConnection(
            [in] String reason);

        NotifyOffApnsOfAvailability(
            [in] String reason);

        IsApnTypeEnabled(
            [in] String apnType,
            [out] Boolean* result);

        IsApnIdEnabled(
            [in] Int32 id,
            [out] Boolean* result);

        SetEnabled(
            [in] Int32 id,
            [in] Boolean enabled);

        OnEnableApn(
            [in] Int32 apnId,
            [in] Int32 enabled);

        OnEnableNewApn();

        OnResetDone(
            [in] IAsyncResult* ar);

        SetInternalDataEnabled(
            [in] Boolean enbl,
            [out] Boolean* result);

        OnSetInternalDataEnabled(
            [in] Boolean enabled);

        CleanUpAllConnections(
            [in] String cause);

        IsDisconnected(
            [out] Boolean* result);

        OnSetUserDataEnabled(
            [in] Boolean enabled);

        OnSetDependencyMet(
            [in] String apnType,
            [in] Boolean met);

        OnSetPolicyDataEnabled(
            [in] Boolean enabled);

        GetReryConfig(
            [in] Boolean forDefault,
            [out] String* result);

        ResetPollStats();

        GetOverallState(
            [out] DctConstantsState* result);

        SendStartNetStatPoll(
            [in] DctConstantsActivity activity);

        HandleStartNetStatPoll(
            [in] DctConstantsActivity activity);

        SendStopNetStatPoll(
            [in] DctConstantsActivity activity);

        HandleStopNetStatPoll(
            [in] DctConstantsActivity activity);

        UpdateDataActivity();

        GetRecoveryAction(
            [out] Int32* result);

        PutRecoveryAction(
            [in] Int32 action);

        IsConnected(
            [out] Boolean* result);


        DoRecovery();

        OnDataStallAlarm(
            [in] Int32 tag);

        StartDataStallAlarm(
            [in] Boolean suspectedStall);

        StopDataStallAlarm();

        RestartDataStallAlarm();

        SetInitialAttachApn();

        SetDataProfilesAsNeeded();

        OnActionIntentProvisioningApnAlarm(
            [in] IIntent* intent);

        StartProvisioningApnAlarm();

        StopProvisioningApnAlarm();

        Dump(
            [in] IFileDescriptor* fd,
            [in] IPrintWriter* pw,
            [in] ArrayOf<String>* args);
    }

    }//DataConnection
    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
