//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Service.Fingerprint.IFingerprintManagerReceiver;

    namespace Elastos {
    namespace Droid {
    namespace Service {
    namespace Fingerprint {

    /**
     * A class that coordinates access to the fingerprint hardware.
     * @hide
     */
    interface IFingerprintManager {
        // Errors generated by layers above HAL
        const Int32 FINGERPRINT_ERROR_NO_RECEIVER = -10;

        // Message types.  Must agree with HAL (fingerprint.h)
        const Int32 FINGERPRINT_ERROR = -1;
        const Int32 FINGERPRINT_ACQUIRED = 1;
        const Int32 FINGERPRINT_PROCESSED = 2;
        const Int32 FINGERPRINT_TEMPLATE_ENROLLING = 3;
        const Int32 FINGERPRINT_TEMPLATE_REMOVED = 4;

        // Error messages. Must agree with HAL (fingerprint.h)
        const Int32 FINGERPRINT_ERROR_HW_UNAVAILABLE = 1;
        const Int32 FINGERPRINT_ERROR_UNABLE_TO_PROCESS = 2;
        const Int32 FINGERPRINT_ERROR_TIMEOUT = 3;
        const Int32 FINGERPRINT_ERROR_NO_SPACE = 4;

        // FINGERPRINT_ACQUIRED messages.  Must agree with HAL (fingerprint.h)
        const Int32 FINGERPRINT_ACQUIRED_GOOD = 0;
        const Int32 FINGERPRINT_ACQUIRED_PARTIAL = 1;
        const Int32 FINGERPRINT_ACQUIRED_INSUFFICIENT = 2;
        const Int32 FINGERPRINT_ACQUIRED_IMAGER_DIRTY = 4;
        const Int32 FINGERPRINT_ACQUIRED_TOO_SLOW = 8;
        const Int32 FINGERPRINT_ACQUIRED_TOO_FAST = 16;

        /**
         * Determine whether the user has at least one fingerprint enrolled and enabled.
         *
         * @return true if at least one is enrolled and enabled
         */
        EnrolledAndEnabled(
            [out] Boolean* ret);

        /**
         * Start the enrollment process.  Timeout dictates how long to wait for the user to
         * enroll a fingerprint.
         *
         * @param timeout
         */
        Enroll(
            [in] Int64 timeout);

        /**
         * Remove the given fingerprintId from the system.  FingerprintId of 0 has special meaning
         * which is to delete all fingerprint data for the current user. Use with caution.
         * @param fingerprintId
         */
        Remove(
            [in] Int32 fingerprintId);

        /**
         * Starts listening for fingerprint events.  When a finger is scanned or recognized, the
         * client will be notified via the callback.
         */
        StartListening(
            [in] IFingerprintManagerReceiver* receiver);

        /**
         * Stops the client from listening to fingerprint events.
         */
        StopListening();

        EnrollCancel();
    }

    } // namespace Fingerprint
    } // namespace Service
    } // namepsace Droid
    } // namespace Elastos
}
