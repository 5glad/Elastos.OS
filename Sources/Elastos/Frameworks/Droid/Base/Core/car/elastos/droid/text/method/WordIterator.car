//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Core.ICharSequence;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Method {

    /**
     * Walks through cursor positions at word boundaries. Internally uses
     * {@link BreakIterator#getWordInstance()}, and caches {@link CharSequence}
     * for performance reasons.
     *
     * Also provides methods to determine word boundaries.
     * {@hide}
     *
     * @Involve
     * interface ISelectionPositionIterator
     */
    interface IWordIterator {
        SetCharSequence(
            [in] ICharSequence* charSequence,
            [in] Int32 start,
            [in] Int32 end);

        /** If <code>offset</code> is within a word, returns the index of the first character of that
         * word, otherwise returns BreakIterator.DONE.
         *
         * The offsets that are considered to be part of a word are the indexes of its characters,
         * <i>as well as</i> the index of its last character plus one.
         * If offset is the index of a low surrogate character, BreakIterator.DONE will be returned.
         *
         * Valid range for offset is [0..textLength] (note the inclusive upper bound).
         * The returned value is within [0..offset] or BreakIterator.DONE.
         *
         * @throws IllegalArgumentException is offset is not valid.
         */
        GetBeginning(
            [in] Int32 offset,
            [out] Int32* ret);

        /** If <code>offset</code> is within a word, returns the index of the last character of that
         * word plus one, otherwise returns BreakIterator.DONE.
         *
         * The offsets that are considered to be part of a word are the indexes of its characters,
         * <i>as well as</i> the index of its last character plus one.
         * If offset is the index of a low surrogate character, BreakIterator.DONE will be returned.
         *
         * Valid range for offset is [0..textLength] (note the inclusive upper bound).
         * The returned value is within [offset..textLength] or BreakIterator.DONE.
         *
         * @throws IllegalArgumentException is offset is not valid.
         */
        GetEnd(
            [in] Int32 offset,
            [out] Int32* ret);
    }

    }//namespace Method
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
