//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module {

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    interface ISmsUsageMonitor {

        /** Premium SMS permission for a new package (ask user when first premium SMS sent). */
        const Int32 PREMIUM_SMS_PERMISSION_UNKNOWN = 0;

        /** Default premium SMS permission (ask user for each premium SMS sent). */
        const Int32 PREMIUM_SMS_PERMISSION_ASK_USER = 1;

        /** Premium SMS permission when the owner has denied the app from sending premium SMS. */
        const Int32 PREMIUM_SMS_PERMISSION_NEVER_ALLOW = 2;

        /** Premium SMS permission when the owner has allowed the app to send premium SMS. */
        const Int32 PREMIUM_SMS_PERMISSION_ALWAYS_ALLOW = 3;

        /**
         * Check to see if an application is allowed to send new SMS messages, and confirm with
         * user if the send limit was reached or if a non-system app is potentially sending to a
         * premium SMS short code or number.
         *
         * @param appName the package name of the app requesting to send an SMS
         * @param smsWaiting the number of new messages desired to send
         * @return true if application is allowed to send the requested number
         *  of new sms messages
         */
        Check(
            [in] String appName,
            [in] Int32 smsWaiting,
            [out] Boolean* result);

        CheckDestination(
            [in] String destAddress,
            [in] String countryIso,
            [out] Int32* result);

        GetPremiumSmsPermission(
            [in] String packageName,
            [out] Int32* result);

        SetPremiumSmsPermission(
            [in] String packageName,
            [in] Int32 permission);

    }

    interface ISmsUsageMonitorHelper {
        MergeShortCodeCategories(
            [in] Int32 type1,
            [in] Int32 type2,
            [out] Int32* result);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
