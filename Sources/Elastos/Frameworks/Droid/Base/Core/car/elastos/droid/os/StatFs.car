//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Os {

    interface IStatFs {
        /**
         * Perform a restat of the file system referenced by this object. This is
         * the same as re-constructing the object with the same file system path,
         * and the new stat values are available upon return.
         */
        Restat(
            [in] String path);

        /**
         * The size, in bytes, of a block on the file system. This corresponds to
         * the Unix {@code statfs.f_bsize} field.
         */
        GetBlockSize(
            [out] Int32* size);

        /**
         * The size, in bytes, of a block on the file system. This corresponds to
         * the Unix {@code statvfs.f_bsize} field.
         */
        GetBlockSize(
            [out] Int64* size);

        /**
         * The total number of blocks on the file system. This corresponds to the
         * Unix {@code statfs.f_blocks} field.
         */
        GetBlockCount(
            [out] Int32* count);

        /**
         * The total number of blocks on the file system. This corresponds to the
         * Unix {@code statvfs.f_blocks} field.
         */
        GetBlockCount(
            [out] Int64* count);

        /**
         * The total number of blocks that are free on the file system, including
         * reserved blocks (that are not available to normal applications). This
         * corresponds to the Unix {@code statfs.f_bfree} field. Most applications
         * will want to use {@link #getAvailableBlocks()} instead.
         */
        GetFreeBlocks(
            [out] Int32* blocks);

        /**
         * The total number of blocks that are free on the file system, including
         * reserved blocks (that are not available to normal applications). This
         * corresponds to the Unix {@code statvfs.f_bfree} field. Most applications
         * will want to use {@link #getAvailableBlocks()} instead.
         */
        GetFreeBlocks(
            [out] Int64* blocks);

        /**
         * The number of blocks that are free on the file system and available to
         * applications. This corresponds to the Unix {@code statfs.f_bavail} field.
         */
        GetAvailableBlocks(
            [out] Int32* blocks);

        /**
         * The number of blocks that are free on the file system and available to
         * applications. This corresponds to the Unix {@code statvfs.f_bavail} field.
         */
        GetAvailableBlocks(
            [out] Int64* blocks);

        /**
         * The number of bytes that are free on the file system and available to
         * applications.
         */
        GetAvailableBytes(
            [out] Int64* blocks);

        /**
         * The total number of bytes supported by the file system.
         */
        GetTotalBytes(
            [out] Int64* blocks);
    }

    } //Os
    } //Droid
    } //Elastos
}