module {

    namespace Elastos {
    namespace Droid {
    namespace Provider {

    interface IThemesContract {
        const String AUTHORITY = "com.cyanogenmod.themes";
    }

    interface IThemesContractThemesColumns {
        /**
         * The unique ID for a row.
         * <P>Type: INTEGER (long)</P>
         */
        const String _ID = "_id";

        /**
         * The user visible title.
         * <P>Type: TEXT</P>
         */
        const String TITLE = "title";

        /**
         * Unique text to identify the apk pkg. ie "com.foo.bar"
         * <P>Type: TEXT</P>
         */
        const String PKG_NAME = "pkg_name";

        /**
         * A 32 bit RRGGBB color representative of the themes color scheme
         * <P>Type: INTEGER</P>
         */
        const String PRIMARY_COLOR = "primary_color";

        /**
         * A 2nd 32 bit RRGGBB color representative of the themes color scheme
         * <P>Type: INTEGER</P>
         */
        const String SECONDARY_COLOR = "secondary_color";

        /**
         * Name of the author of the theme
         * <P>Type: TEXT</P>
         */
        const String AUTHOR = "author";

        /**
         * The time that this row was created on its originating client (msecs
         * since the epoch).
         * <P>Type: INTEGER</P>
         */
        const String DATE_CREATED = "created";

        /**
         * URI to an image that shows the homescreen with the theme applied
         * since the epoch).
         * <P>Type: TEXT</P>
         */
        const String HOMESCREEN_URI = "homescreen_uri";

        /**
         * URI to an image that shows the lockscreen with theme applied
         * <P>Type: TEXT</P>
         */
        const String LOCKSCREEN_URI = "lockscreen_uri";

        /**
         * URI to an image that shows the style (aka skin) with theme applied
         * <P>Type: TEXT</P>
         */
        const String STYLE_URI = "style_uri";

        /**
         * TODO: Figure structure for actual animation instead of static
         * URI to an image of the boot_anim.
         * <P>Type: TEXT</P>
         */
        const String BOOT_ANIM_URI = "bootanim_uri";

        /**
         * URI to an image of the status bar for this theme.
         * <P>Type: TEXT</P>
         */
        const String STATUSBAR_URI = "status_uri";

        /**
         * URI to an image of the fonts in this theme.
         * <P>Type: TEXT</P>
         */
        const String FONT_URI = "font_uri";

        /**
         * URI to an image of the fonts in this theme.
         * <P>Type: TEXT</P>
         */
        const String ICON_URI = "icon_uri";

        /**
         * URI to an image of the fonts in this theme.
         * <P>Type: TEXT</P>
         */
        const String OVERLAYS_URI = "overlays_uri";

        /**
         * 1 if theme modifies the launcher/homescreen else 0
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_LAUNCHER = "mods_homescreen";

        /**
         * 1 if theme modifies the lockscreen else 0
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_LOCKSCREEN = "mods_lockscreen";

        /**
         * 1 if theme modifies icons else 0
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_ICONS = "mods_icons";

        /**
         * 1 if theme modifies fonts
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_FONTS = "mods_fonts";

        /**
         * 1 if theme modifies boot animation
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_BOOT_ANIM = "mods_bootanim";

        /**
         * 1 if theme modifies notifications
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_NOTIFICATIONS = "mods_notifications";

        /**
         * 1 if theme modifies alarm sounds
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_ALARMS = "mods_alarms";

        /**
         * 1 if theme modifies ringtones
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_RINGTONES = "mods_ringtones";

        /**
         * 1 if theme has overlays
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_OVERLAYS = "mods_overlays";

        /**
         * 1 if theme has an overlay for SystemUI/StatusBar
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_STATUS_BAR = "mods_status_bar";

        /**
         * 1 if theme has an overlay for SystemUI/NavBar
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String MODIFIES_NAVIGATION_BAR = "mods_navigation_bar";

        /**
         * URI to the theme's wallpaper. We should support multiple wallpaper
         * but for now we will just have 1.
         * <P>Type: TEXT</P>
         */
        const String WALLPAPER_URI = "wallpaper_uri";

        /**
         * 1 if this row should actually be presented as a theme to the user.
         * For example if a "theme" only modifies one component (ex icons) then
         * we do not present it to the user under the themes table.
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String PRESENT_AS_THEME = "present_as_theme";

        /**
         * 1 if this theme is a legacy theme.
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String IS_LEGACY_THEME = "is_legacy_theme";

        /**
         * 1 if this theme is the system default theme.
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String IS_DEFAULT_THEME = "is_default_theme";

        /**
         * 1 if this theme is a legacy iconpack. A legacy icon pack is an APK that was written
         * for Trebuchet or a 3rd party launcher.
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String IS_LEGACY_ICONPACK = "is_legacy_iconpack";

        /**
         * install/update time in millisecs. When the row is inserted this column
         * is populated by the PackageInfo. It is used for syncing to PM
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String LAST_UPDATE_TIME = "updateTime";

        /**
         * install time in millisecs. When the row is inserted this column
         * is populated by the PackageInfo.
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String INSTALL_TIME = "install_time";

        /**
         * The target API this theme supports
         * is populated by the PackageInfo.
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String TARGET_API = "target_api";

        /**
         * The install state of the theme.
         * Can be one of the following:
         * {@link InstallState#UNKNOWN}
         * {@link InstallState#INSTALLING}
         * {@link InstallState#UPDATING}
         * {@link InstallState#INSTALLED}
         * <P>Type: INTEGER</P>
         * <P>Default: 0</P>
         */
        const String INSTALL_STATE = "install_state";
    }

    interface IThemesContractThemesColumnsInstallState {
        const Int32 UNKNOWN = 0;
        const Int32 INSTALLING = 1;
        const Int32 UPDATING = 2;
        const Int32 INSTALLED = 3;
    }

    interface IThemesContractMixnMatchColumns {
        /**
         * The unique key for a row. See the KEY_* constants
         * for valid examples
         * <P>Type: TEXT</P>
         */
        const String COL_KEY = "key";

        /**
         * The package name that corresponds to a given component.
         * <P>Type: String</P>
         */
        const String COL_VALUE = "value";

        /**
         * The package name that corresponds to where this component was applied from previously
         * <P>Type: String</P>
         */
        const String COL_PREV_VALUE = "previous_value";

        /**
         * Time when this entry was last updated
         * <P>Type: INTEGER</P>
         */
        const String COL_UPDATE_TIME = "update_time";

        /**
         * Valid keys
         */
        const String KEY_HOMESCREEN = "mixnmatch_homescreen";
        const String KEY_LOCKSCREEN = "mixnmatch_lockscreen";
        const String KEY_ICONS = "mixnmatch_icons";
        const String KEY_STATUS_BAR = "mixnmatch_status_bar";
        const String KEY_BOOT_ANIM = "mixnmatch_boot_anim";
        const String KEY_FONT = "mixnmatch_font";
        const String KEY_ALARM = "mixnmatch_alarm";
        const String KEY_NOTIFICATIONS = "mixnmatch_notifications";
        const String KEY_RINGTONE = "mixnmatch_ringtone";
        const String KEY_OVERLAYS = "mixnmatch_overlays";
        const String KEY_NAVIGATION_BAR = "mixnmatch_navigation_bar";
    }

    interface IThemesContractPreviewColumns {
        /**
         * The unique ID for a row.
         * <P>Type: INTEGER (long)</P>
         */
        const String _ID = "_id";

        /**
         * The unique ID for the theme these previews belong to.
         * <P>Type: INTEGER (long)</P>
         */
        const String THEME_ID = "theme_id";

        /**
         * Cached image of the themed status bar background.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_BACKGROUND = "statusbar_background";

        /**
         * Cached image of the themed bluetooth status icon.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_BLUETOOTH_ICON = "statusbar_bluetooth_icon";

        /**
         * Cached image of the themed wifi status icon.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_WIFI_ICON = "statusbar_wifi_icon";

        /**
         * Cached image of the themed cellular signal status icon.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_SIGNAL_ICON = "statusbar_signal_icon";

        /**
         * Cached image of the themed battery using portrait style.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_BATTERY_PORTRAIT = "statusbar_battery_portrait";

        /**
         * Cached image of the themed battery using landscape style.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_BATTERY_LANDSCAPE = "statusbar_battery_landscape";

        /**
         * Cached image of the themed battery using circle style.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STATUSBAR_BATTERY_CIRCLE = "statusbar_battery_circle";

        /**
         * The themed margin value between the wifi and rssi signal icons.
         * <P>Type: INTEGER (int)</P>
         */
        const String STATUSBAR_WIFI_COMBO_MARGIN_END = "wifi_combo_margin_end";

        /**
         * The themed color used for clock text in the status bar.
         * <P>Type: INTEGER (int)</P>
         */
        const String STATUSBAR_CLOCK_TEXT_COLOR = "statusbar_clock_text_color";

        /**
         * Cached image of the themed navigation bar background.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String NAVBAR_BACKGROUND = "navbar_background";

        /**
         * Cached image of the themed back button.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String NAVBAR_BACK_BUTTON = "navbar_back_button";

        /**
         * Cached image of the themed home button.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String NAVBAR_HOME_BUTTON = "navbar_home_button";

        /**
         * Cached image of the themed recents button.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String NAVBAR_RECENT_BUTTON = "navbar_recent_button";

        /**
         * Cached image of the 1/4 icons
         * <P>Type: BLOB (bitmap)</P>
         */
        const String ICON_PREVIEW_1 = "icon_preview_1";

        /**
         * Cached image of the 2/4 icons
         * <P>Type: BLOB (bitmap)</P>
         */
        const String ICON_PREVIEW_2 = "icon_preview_2";

        /**
         * Cached image of the 3/4 icons
         * <P>Type: BLOB (bitmap)</P>
         */
        const String ICON_PREVIEW_3 = "icon_preview_3";

        /**
         * Cached image of the 4/4 icons
         * <P>Type: BLOB (bitmap)</P>
         */
        const String ICON_PREVIEW_4 = "icon_preview_4";

        /**
         * Cached preview of UI controls representing the theme's style
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STYLE_PREVIEW = "style_preview";

        /**
         * Cached thumbnail preview of UI controls representing the theme's style
         * <P>Type: BLOB (bitmap)</P>
         */
        const String STYLE_THUMBNAIL = "style_thumbnail";

        /**
         * Cached thumbnail of the theme's boot animation
         * <P>Type: BLOB (bitmap)</P>
         */
        const String BOOTANIMATION_THUMBNAIL = "bootanimation_thumbnail";

        /**
         * Cached thumbnail of the theme's wallpaper
         * <P>Type: BLOB (bitmap)</P>
         */
        const String WALLPAPER_THUMBNAIL = "wallpaper_thumbnail";

        /**
         * Cached preview of the theme's wallpaper which is larger than the thumbnail
         * but smaller than the full sized wallpaper.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String WALLPAPER_PREVIEW = "wallpaper_preview";

        /**
         * Cached thumbnail of the theme's lockscreen wallpaper
         * <P>Type: BLOB (bitmap)</P>
         */
        const String LOCK_WALLPAPER_THUMBNAIL = "lock_wallpaper_thumbnail";

        /**
         * Cached preview of the theme's lockscreen  wallpaper which is larger than the thumbnail
         * but smaller than the full sized lockscreen wallpaper.
         * <P>Type: BLOB (bitmap)</P>
         */
        const String LOCK_WALLPAPER_PREVIEW = "lock_wallpaper_preview";
    }

    interface IThemesContractIntent {
        /**
         * Action sent from the provider when a theme has been fully installed.  Fully installed
         * means that the apk was installed by PackageManager and the theme resources were
         * processed and cached by {@link com.android.server.ThemeService}
         * Requires the {@link android.Manifest.permission#READ_THEMES} permission to receive
         * this broadcast.
         */
        const String ACTION_THEME_INSTALLED =
                "themescontract.intent.action.THEME_INSTALLED";

        /**
         * Action sent from the provider when a theme has been updated.
         * Requires the {@link android.Manifest.permission#READ_THEMES} permission to receive
         * this broadcast.
         */
        const String ACTION_THEME_UPDATED =
                "themescontract.intent.action.THEME_UPDATED";

        /**
         * Action sent from the provider when a theme has been removed.
         * Requires the {@link android.Manifest.permission#READ_THEMES} permission to receive
         * this broadcast.
         */
        const String ACTION_THEME_REMOVED =
                "themescontract.intent.action.THEME_REMOVED";

        /**
         * Uri scheme used to broadcast the theme's package name when broadcasting
         * {@link android.provider.ThemesContract.Intent#ACTION_THEME_INSTALLED} or
         * {@link android.provider.ThemesContract.Intent#ACTION_THEME_REMOVED}
         */
        const String URI_SCHEME_PACKAGE = "package";
    }

    } // namespace Provider
    } // namespace Droid
    } // namespace Elastos
}