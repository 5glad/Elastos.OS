//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Core.IArrayOf;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntentFilter;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Nfc.INfcEvent;

    namespace Elastos {
    namespace Droid {
    namespace Nfc {

    interface INfcAdapterReaderCallback {

        OnTagDiscovered(
            [in] ITag* tag);
    }

    interface INfcAdapterOnNdefPushCompleteCallback {

        OnNdefPushComplete(
            [in] INfcEvent* event);
    }

    interface INfcAdapterCreateNdefMessageCallback {

        CreateNdefMessage(
            [in] INfcEvent* event,
            [out] INdefMessage** message);
    }

    interface INfcAdapterCreateBeamUrisCallback {

        CreateBeamUris(
            [in] INfcEvent* event,
            [out, callee] ArrayOf<IUri*> * uris);
    }

    interface INfcAdapterNfcUnlockHandler {

        OnUnlockAttempted(
            [in] ITag* tag,
            [out] Boolean* res);
    }

    [deprecated, local]
    interface INfcAdapter {
        const String ACTION_NDEF_DISCOVERED = "android.nfc.action.NDEF_DISCOVERED";

        const String ACTION_TECH_DISCOVERED = "android.nfc.action.TECH_DISCOVERED";

        const String ACTION_TAG_DISCOVERED = "android.nfc.action.TAG_DISCOVERED";

        const String ACTION_TAG_LEFT_FIELD = "android.nfc.action.TAG_LOST";

        const String EXTRA_TAG = "android.nfc.extra.TAG";

        const String EXTRA_NDEF_MESSAGES = "android.nfc.extra.NDEF_MESSAGES";

        const String EXTRA_ID = "android.nfc.extra.ID";

        const String ACTION_ADAPTER_STATE_CHANGED =
            "android.nfc.action.ADAPTER_STATE_CHANGED";

        const String EXTRA_ADAPTER_STATE = "android.nfc.extra.ADAPTER_STATE";

        const Int32 STATE_OFF = 1;
        const Int32 STATE_TURNING_ON = 2;
        const Int32 STATE_ON = 3;
        const Int32 STATE_TURNING_OFF = 4;

        const Int32 FLAG_READER_NFC_A = 0x1;

        /**
         * Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this flag enables polling for Nfc-B technology.
         */
        const Int32 FLAG_READER_NFC_B = 0x2;

        /**
         * Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this flag enables polling for Nfc-F technology.
         */
        const Int32 FLAG_READER_NFC_F = 0x4;

        /**
         * Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this flag enables polling for Nfc-V (ISO15693) technology.
         */
        const Int32 FLAG_READER_NFC_V = 0x8;

        /**
         * Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this flag enables polling for NfcBarcode technology.
         */
        const Int32 FLAG_READER_NFC_BARCODE = 0x10;

        /**
         * Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this flag allows the caller to prevent the
         * platform from performing an NDEF check on the tags it
         * finds.
         */
        const Int32 FLAG_READER_SKIP_NDEF_CHECK = 0x80;

        /**
         * Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this flag allows the caller to prevent the
         * platform from playing sounds when it discovers a tag.
         */
        const Int32 FLAG_READER_NO_PLATFORM_SOUNDS = 0x100;

        /**
         * Int Extra for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
         * <p>
         * Setting this integer extra allows the calling application to specify
         * the delay that the platform will use for performing presence checks
         * on any discovered tag.
         */
        const String EXTRA_READER_PRESENCE_CHECK_DELAY = "presence";

        /** @hide */
        const Int32 FLAG_NDEF_PUSH_NO_CONFIRM = 0x1;

        /** @hide */
        const String ACTION_HANDOVER_TRANSFER_STARTED = "android.nfc.action.HANDOVER_TRANSFER_STARTED";

        /** @hide */
        const String ACTION_HANDOVER_TRANSFER_DONE = "android.nfc.action.HANDOVER_TRANSFER_DONE";

        /** @hide */
        const String EXTRA_HANDOVER_TRANSFER_STATUS = "android.nfc.extra.HANDOVER_TRANSFER_STATUS";

        /** @hide */
        const Int32 HANDOVER_TRANSFER_STATUS_SUCCESS = 0;
        /** @hide */
        const Int32 HANDOVER_TRANSFER_STATUS_FAILURE = 1;

        /** @hide */
        const String EXTRA_HANDOVER_TRANSFER_URI = "android.nfc.extra.HANDOVER_TRANSFER_URI";

        GetContext(
            [out] IContext** context);

        GetService(
            [out] INfcAdapter** adapter);

        GetTagService(
            [out] IINfcTag** tag);

        GetCardEmulationService(
            [out] IINfcCardEmulation** res);

        IsEnabled(
            [out] Boolean* res);

        GetAdapterState(
            [out] Int32* state);

        Enable(
            [out] Boolean* res);

        Disable(
            [out] Boolean* res);

        Disable(
            [in] Boolean persist,
            [out] Boolean* res);

        PausePolling(
            [in] Int32 timeoutInMs);

        ResumePolling();

        SetBeamPushUris(
            [in] ArrayOf<IUri*> * uris,
            [in] IActivity* activity);

        SetBeamPushUrisCallback(
            [in] INfcAdapterCreateBeamUrisCallback* cb,
            [in] IActivity* activity);

        SetNdefPushMessage(
            [in] INdefMessage* message,
            [in] IActivity* activity,
            [in] ArrayOf<IActivity*>* activities);

        SetNdefPushMessage(
            [in] INdefMessage* message,
            [in] IActivity* activity,
            [in] Int32 flags);

        SetNdefPushMessageCallback(
            [in] INfcAdapterCreateNdefMessageCallback* cb,
            [in] IActivity* activity,
            [in] ArrayOf<IActivity*>* activities);

        SetNdefPushMessageCallback(
            [in] INfcAdapterCreateNdefMessageCallback* cb,
            [in] IActivity* activity,
            [in] Int32 flags);

        SetOnNdefPushCompleteCallback(
            [in] INfcAdapterOnNdefPushCompleteCallback* cb,
            [in] IActivity* activity,
            [in] ArrayOf<IActivity*>* activities);

        EnableForegroundDispatch(
            [in] IActivity* activity,
            [in] IPendingIntent* intent,
            [in] ArrayOf<IIntentFilter*>* filters,
            [in] ArrayOf< IArrayOf* >* techLists);

        DisableForegroundDispatch(
            [in] IActivity* activity);

        DisableForegroundDispatchInternal(
            [in] IActivity* activity,
            [in] Boolean force);

        EnableReaderMode(
            [in] IActivity* activity,
            [in] INfcAdapterReaderCallback* cb,
            [in] Int32 flags,
            [in] IBundle* extras);

        DisableReaderMode(
            [in] IActivity* activity);

        InvokeBeam(
            [in] IActivity* activity,
            [out] Boolean* res);

        InvokeBeam(
            [in] IBeamShareData* shareData,
            [out] Boolean* res);

        EnableForegroundNdefPush(
            [in] IActivity* activity,
            [in] INdefMessage* message);

        DisableForegroundNdefPush(
            [in] IActivity* activity);

        EnableNdefPush(
            [out] Boolean* res);

        DisableNdefPush(
            [out] Boolean* res);

        IsNdefPushEnabled(
            [out] Boolean* res);

        Dispatch(
            [in] ITag* tag);

        SetP2pModes(
            [in] Int32 initiatorModes,
            [in] Int32 targetModes);

        AddNfcUnlockHandler(
            [in] INfcAdapterNfcUnlockHandler* unlockHandler,
            [in] ArrayOf<String>* tagTechnologies,
            [out] Boolean* res);

        RemoveNfcUnlockHandler(
            [in] INfcAdapterNfcUnlockHandler* unlockHandler,
            [out] Boolean* res);

        GetNfcAdapterExtrasInterface(
            [out] IINfcAdapterExtras** extras);

        EnforceResumed(
            [in] IActivity* activity);

        GetSdkVersion(
            [out] Int32* vs);
    }

    [local]
    interface INfcAdapterHelper {
        GetNfcAdapter(
            [in] IContext* ctx,
            [out] INfcAdapter** adapter);

        GetDefaultAdapter(
            [in] IContext* ctx,
            [out] INfcAdapter** adapter);

        GetDefaultAdapter(
            [out] INfcAdapter** adapter);
    }

    }// namespace Nfc
    }// namespace Droid
    }// namespace Elastos
}