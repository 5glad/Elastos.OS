//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    namespace Elastos {
    namespace Droid {
    namespace View {

    interface IEstimator
    {
        /**
         * Gets an estimate of the X position of the pointer at the specified time point.
         * @param time The time point in seconds, 0 is the last recorded time.
         * @return The estimated X coordinate.
         */
        EstimateX(
            [in] Float time,
            [out] Float* result);

        /**
         * Gets an estimate of the Y position of the pointer at the specified time point.
         * @param time The time point in seconds, 0 is the last recorded time.
         * @return The estimated Y coordinate.
         */
        EstimateY(
            [in] Float time,
            [out] Float* result);

        /**
         * Gets the X coefficient with the specified index.
         * @param index The index of the coefficient to return.
         * @return The X coefficient, or 0 if the index is greater than the degree.
         */
        GetXCoeff(
            [in] Int32 index,
            [out] Float* result);

        /**
         * Gets the Y coefficient with the specified index.
         * @param index The index of the coefficient to return.
         * @return The Y coefficient, or 0 if the index is greater than the degree.
         */
        GetYCoeff(
            [in] Int32 index,
            [out] Float* result);
    }

    /**
     * Helper for tracking the velocity of touch events, for implementing
     * flinging and other such gestures.
     *
     * Use {@link #obtain} to retrieve a new instance of the class when you are going
     * to begin tracking.  Put the motion events you receive into it with
     * {@link #addMovement(MotionEvent)}.  When you want to determine the velocity call
     * {@link #computeCurrentVelocity(int)} and then call {@link #getXVelocity(int)}
     * and {@link #getYVelocity(int)} to retrieve the velocity for each pointer id.
     */
    interface IVelocityTracker {
        Recycle();

        Clear();

        AddMovement(
            [in] IMotionEvent* event);

        ComputeCurrentVelocity(
            [in] Int32 units);

        ComputeCurrentVelocity(
            [in] Int32 units,
            [in] Float maxVelocity);

        GetXVelocity(
            [out] Float* velocity);

        GetYVelocity(
            [out] Float* velocity);

        GetXVelocity(
            [in] Int32 id,
            [out] Float* velocity);

        GetYVelocity(
            [in] Int32 id,
            [out] Float* velocity);

        GetEstimator(
            [in] Int32 id,
            [in] IEstimator* outEstimatorObj,
            [out] Boolean* result);
    }

    interface IVelocityTrackerHelper {
        Obtain(
            [out] IVelocityTracker** velocity);

        Obtain(
            [in] String strategy,
            [out] IVelocityTracker** velocity);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
