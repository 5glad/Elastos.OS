//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    [local]
    interface ICallerInfoAsyncQueryOnQueryCompleteListener {
        OnQueryComplete(
            [in] Int32 token,
            [in] IInterface* cookie,
            [in] ICallerInfo* ci);
    }

    [local]
    interface ICallerInfoAsyncQuery {
        /**
         * Method to add listeners to a currently running query
         */
        AddQueryListener(
            [in] Int32 token,
            [in] ICallerInfoAsyncQueryOnQueryCompleteListener* listener,
            [in] IInterface* cookie);
    }

    [local]
    interface ICallerInfoAsyncQueryHelper {
        /**
         * Factory method to start query with a Uri query spec
         */
        StartQuery(
            [in] Int32 token,
            [in] IContext* ctx,
            [in] IUri* contactRef,
            [in] ICallerInfoAsyncQueryOnQueryCompleteListener* listener,
            [in] IInterface* cookie,
            [out] ICallerInfoAsyncQuery** cia);

        /**
         * Factory method to start the query based on a number.
         *
         * Note: if the number contains an "@" character we treat it
         * as a SIP address, and look it up directly in the Data table
         * rather than using the PhoneLookup table.
         * TODO: But eventually we should expose two separate methods, one for
         * numbers and one for SIP addresses, and then have
         * PhoneUtils.startGetCallerInfo() decide which one to call based on
         * the phone type of the incoming connection.
         */
        StartQuery(
            [in] Int32 token,
            [in] IContext* ctx,
            [in] String number,
            [in] ICallerInfoAsyncQueryOnQueryCompleteListener* listener,
            [in] IInterface* cookie,
            [out] ICallerInfoAsyncQuery** cia);

        /**
         * Factory method to start the query based on a number with specific subscription.
         *
         * Note: if the number contains an "@" character we treat it
         * as a SIP address, and look it up directly in the Data table
         * rather than using the PhoneLookup table.
         * TODO: But eventually we should expose two separate methods, one for
         * numbers and one for SIP addresses, and then have
         * PhoneUtils.startGetCallerInfo() decide which one to call based on
         * the phone type of the incoming connection.
         */
        StartQuery(
            [in] Int32 token,
            [in] IContext* ctx,
            [in] String number,
            [in] ICallerInfoAsyncQueryOnQueryCompleteListener* listener,
            [in] IInterface* cookie,
            [in] Int64 subId,
            [out] ICallerInfoAsyncQuery** cia);
    }

    } // namespace Telephony
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
