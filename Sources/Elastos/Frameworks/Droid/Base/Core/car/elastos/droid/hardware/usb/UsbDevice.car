//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Hardware.Usb.IUsbInterface;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Usb {

    /**
     * This class represents a USB device attached to the android device with the android device
     * acting as the USB host.
     * Each device contains one or more {@link UsbInterface}s, each of which contains a number of
     * {@link UsbEndpoint}s (the channels via which data is transmitted over USB).
     *
     * <p> This class contains information (along with {@link UsbInterface} and {@link UsbEndpoint})
     * that describes the capabilities of the USB device.
     * To communicate with the device, you open a {@link UsbDeviceConnection} for the device
     * and use {@link UsbRequest} to send and receive data on an endpoint.
     * {@link UsbDeviceConnection#controlTransfer} is used for control requests on endpoint zero.
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For more information about communicating with USB hardware, read the
     * <a href="{@docRoot}guide/topics/usb/index.html">USB</a> developer guide.</p>
     * </div>
     *
     * @Involve
     * interface IParcelable;
     */
    [deprecated]
    interface IUsbDevice {
        /**
         * Returns the name of the device.
         * In the standard implementation, this is the path of the device file
         * for the device in the usbfs file system.
         *
         * @return the device name
         */
        GetDeviceName(
            [out] String* name);

        /**
         * Returns the manufacturer name of the device.
         *
         * @return the manufacturer name
         */
        GetManufacturerName(
            [out] String* name);

        /**
         * Returns the product name of the device.
         *
         * @return the product name
         */
        GetProductName(
            [out] String* name);

        /**
         * Returns the serial number of the device.
         *
         * @return the serial number name
         */
        GetSerialNumber(
            [out] String* name);

        /**
         * Returns a unique integer ID for the device.
         * This is a convenience for clients that want to use an integer to represent
         * the device, rather than the device name.
         * IDs are not persistent across USB disconnects.
         *
         * @return the device ID
         */
        GetDeviceId(
            [out] Int32* id);

        /**
         * Returns a vendor ID for the device.
         *
         * @return the device vendor ID
         */
        GetVendorId(
            [out] Int32* id);

        /**
         * Returns a product ID for the device.
         *
         * @return the device product ID
         */
        GetProductId(
            [out] Int32* id);

        /**
         * Returns the devices's class field.
         * Some useful constants for USB device classes can be found in {@link UsbConstants}.
         *
         * @return the devices's class
         */
        GetDeviceClass(
            [out] Int32* cls);

        /**
         * Returns the device's subclass field.
         *
         * @return the device's subclass
         */
        GetDeviceSubclass(
            [out] Int32* cls);

        /**
         * Returns the device's protocol field.
         *
         * @return the device's protocol
         */
        GetDeviceProtocol(
            [out] Int32* protocol);

        /**
         * Returns the number of {@link UsbInterface}s this device contains.
         *
         * @return the number of interfaces
         */
        GetInterfaceCount(
            [out] Int32* count);

        /**
         * Returns the {@link UsbInterface} at the given index.
         *
         * @return the interface
         */
        GetInterface(
            [in] Int32 index,
            [out] IUsbInterface** usbInterface);

        SetConfigurations(
            [in] ArrayOf<IParcelable*>* configuration);

        GetHashCode(
            [out] Int32* value);

        ToString(
            [out] String* str);
    }

    interface IUsbDeviceHelper {
        GetDeviceId(
            [in] String name,
            [out] Int32* id);

        GetDeviceName(
            [in] Int32 id,
            [out] String* name);
    }

    } // namespace Usb
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
