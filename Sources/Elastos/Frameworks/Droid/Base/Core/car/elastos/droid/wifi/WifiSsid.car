//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.IO.IByteArrayOutputStream;

    namespace Elastos {
    namespace Droid {
    namespace Wifi {

    /**
     * Stores SSID octets and handles conversion.
     *
     * For Ascii encoded string, any octet < 32 or > 127 is encoded as
     * a "\x" followed by the hex representation of the octet.
     * Exception chars are ", \, \e, \n, \r, \t which are escaped by a \
     * See src/utils/common.c for the implementation in the supplicant.
     *
     * @hide
     */
    /**
     * @Involved
     * interface IParcelable;
     */
    interface IWifiSsid {
        const String NONE = "<unknown ssid>";

        GetOctets(
            [out] IByteArrayOutputStream** result);

        /** @hide */
        IsHidden(
            [out] Boolean* result);

        /** @hide */
        GetOctets(
            [out, callee] ArrayOf<Byte>* result);

        /** @hide */
        GetHexString(
            [out] String* result);
    }

    interface IWifiSsidHelper {
        CreateFromAsciiEncoded(
            [in] String asciiEncoded,
            [out] IWifiSsid** result);

        CreateFromHex(
            [in] String hexStr,
            [out] IWifiSsid** result);
    }

    } // namespace Wifi
    } // namespace Droid
    } // namespace Elastos
}
