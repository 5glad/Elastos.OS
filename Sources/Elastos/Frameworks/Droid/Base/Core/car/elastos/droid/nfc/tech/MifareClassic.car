//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{

    interface Elastos.Droid.Nfc.ITag;

    namespace Elastos {
    namespace Droid {
    namespace Nfc{
    namespace Tech{

    /**
     * @Involve
     * interace IBasicTagTechnology
     */
    [deprecated]
    interface IMifareClassic {
        GetType(
            [out] Int32* type);

        GetSize(
            [out] Int32* size);

        IsEmulated(
            [out] Boolean* emulated);

        GetSectorCount(
            [out] Int32* count);

        GetBlockCount(
            [out] Int32* count);

        GetBlockCountInSector(
            [in] Int32 sectorIndex,
            [out] Int32* type);

        BlockToSector(
            [in] Int32 blockIndex,
            [out] Int32* type);

        SectorToBlock(
            [in] Int32 sectorIndex,
            [out] Int32* type);

        AuthenticateSectorWithKeyA(
            [in] Int32 sectorIndex,
            [in] ArrayOf<Byte>* key,
            [out] Boolean* res);

        AuthenticateSectorWithKeyB(
            [in] Int32 sectorIndex,
            [in] ArrayOf<Byte>* key,
            [out] Boolean* res);

        ReadBlock(
            [in] Int32 blockIndex,
            [out, callee] ArrayOf<Byte>* src);

        WriteBlock(
            [in] Int32 blockIndex,
            [out, callee] ArrayOf<Byte>* data);

        Increment(
            [in] Int32 blockIndex,
            [in] Int32 value);

        Decrement(
            [in] Int32 blockIndex,
            [in] Int32 value);

        Transfer(
            [in] Int32 blockIndex);

        Restore(
            [in] Int32 blockIndex);

        Transceive(
            [in] ArrayOf<Byte>* data,
            [out, callee] ArrayOf<Byte>* res);

        GetMaxTransceiveLength(
            [out] Int32* len);

        SetTimeout(
            [in] Int32 timeout);

        GetTimeout(
            [out] Int32* timeout);


    }

    interface IMifareClassicHelper {
        GetMifareClassic(
            [in] ITag* tag,
            [out] IMifareClassic** classic);
    }

    }// namespace Tech
    }// namespace Nfc
    }// namespace Droid
    }// namespace Elastos
}