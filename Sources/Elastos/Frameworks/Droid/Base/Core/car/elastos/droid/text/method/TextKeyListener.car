//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.Text.ISpannable;
    interface Elastos.Droid.Text.IEditable;
    interface Elastos.Droid.Text.ISpanWatcher;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Method {

    enum Capitalize {
        Capitalize_NONE,
        Capitalize_SENTENCES,
        Capitalize_WORDS,
        Capitalize_CHARACTERS,
    }

    /**
     * This is the key listener for typing normal text.  It delegates to
     * other key listeners appropriate to the current keyboard and language.
     * <p></p>
     * As for all implementations of {@link KeyListener}, this class is only concerned
     * with hardware keyboards.  Software input methods have no obligation to trigger
     * the methods in this class.
     *
     * @Involve
     * interface INoCopySpan
     * interface ISpanWatcher
     * interface IKeyListener
     * interface IMetaKeyKeyListener
     * interface IBaseKeyListener
     */
    interface ITextKeyListener {
        ReleaseListener();
    }

    /**
     * @Involve
     * interface IMetaKeyKeyListenerHelper
     * interface IBaseKeyListenerHelper
     */
    [local]
    interface ITextKeyListenerHelper{
        //---------ITextKeyListenerHelper---------
        /**
         * Clear all the input state (autotext, autocap, multitap, undo)
         * from the specified Editable, going beyond Editable.clear(), which
         * just clears the text but not the input state.
         *
         * @param e the buffer whose text and state are to be cleared.
         */
        Clear(
            [in] IEditable* e);

        /**
         * Returns a new or existing instance with no automatic capitalization
         * or correction.
         */
        GetInstance(
            [out] ITextKeyListener** ret);

        /**
         * Returns a new or existing instance with the specified capitalization
         * and correction properties.
         *
         * @param cap when, if ever, to automatically capitalize.
         * @param autotext whether to automatically do spelling corrections.
         */
        GetInstance(
            [in] Boolean autotext,
            [in] Capitalize cap,
            [out] ITextKeyListener** ret);

        /**
         * Returns whether it makes sense to automatically capitalize at the
         * specified position in the specified text, with the specified rules.
         *
         * @param cap the capitalization rules to consider.
         * @param cs the text in which an insertion is being made.
         * @param off the offset into that text where the insertion is being made.
         *
         * @return whether the character being inserted should be capitalized.
         */
        ShouldCap(
            [in] Capitalize cap,
            [in] ICharSequence* cs,
            [in] Int32 off,
            [out] Boolean* ret);
    }

    }//namespace Method
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
