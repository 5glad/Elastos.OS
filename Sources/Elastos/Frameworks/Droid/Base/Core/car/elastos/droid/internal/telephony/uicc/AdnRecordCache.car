//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Os.IMessage;

    using interface Elastos.Utility.IArrayList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Uicc {

    /**
     * @Involve
     * interface IHandler
     * interface IIccConstants
     */
    interface IAdnRecordCache {
        Reset();

        /**
         * @return List of AdnRecords for efid if we've already loaded them this
         * radio session, or null if we haven't
         */
        GetRecordsIfLoaded(
            [in] Int32 efid,
            [out] IArrayList** result);

        ExtensionEfForEf(
            [in] Int32 efid,
            [out] Int32* result);

        /**
         * Update an ADN-like record in EF by record index
         *
         * @param efid must be one among EF_ADN, EF_FDN, and EF_SDN
         * @param adn is the new adn to be stored
         * @param recordIndex is the 1-based adn record index
         * @param pin2 is required to update EF_FDN, otherwise must be null
         * @param response message to be posted when done
         *        response.exception hold the exception in error
         */
        UpdateAdnByIndex(
            [in] Int32 efid,
            [in] IAdnRecord* adn,
            [in] Int32 recordIndex,
            [in] String pin2,
            [in] IMessage* response);

        /**
         * Replace oldAdn with newAdn in ADN-like record in EF
         *
         * The ADN-like records must be read through requestLoadAllAdnLike() before
         *
         * @param efid must be one of EF_ADN, EF_FDN, and EF_SDN
         * @param oldAdn is the adn to be replaced
         *        If oldAdn.isEmpty() is ture, it insert the newAdn
         * @param newAdn is the adn to be stored
         *        If newAdn.isEmpty() is true, it delete the oldAdn
         * @param pin2 is required to update EF_FDN, otherwise must be null
         * @param response message to be posted when done
         *        response.exception hold the exception in error
         */
        UpdateAdnBySearch(
            [in] Int32 efid,
            [in] IAdnRecord* oldAdn,
            [in] IAdnRecord* newAdn,
            [in] String pin2,
            [in] IMessage* response);

        /**
         * Responds with exception (in response) if efid is not a known ADN-like
         * record
         */
        RequestLoadAllAdnLike(
            [in] Int32 efid,
            [in] Int32 extensionEf,
            [in] IMessage* response);

        UpdateUsimAdnByIndex(
            [in] Int32 efid,
            [in] IAdnRecord* newAdn,
            [in] Int32 recordIndex,
            [in] String pin2,
            [in] IMessage* response);

        GetAnrCount(
            [out] Int32* result);

        GetEmailCount(
            [out] Int32* result);

        GetSpareAnrCount(
            [out] Int32* result);

        GetSpareEmailCount(
            [out] Int32* result);

        GetAdnCount(
            [out] Int32* result);

        SetAdnCount(
            [in] Int32 count);

        GetUsimAdnCount(
            [out] Int32* result);

    }

    }//Uicc
    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
