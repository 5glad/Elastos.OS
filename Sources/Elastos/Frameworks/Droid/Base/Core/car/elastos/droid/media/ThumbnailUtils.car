//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Graphics.IBitmap;

    namespace Elastos {
    namespace Droid {
    namespace Media {


    interface IThumbnailUtils
    {
        /**
         * Constant used to indicate we should recycle the input in
         * {@link #extractThumbnail(Bitmap, int, int, int)} unless the output is the input.
         */
        const Int32 OPTIONS_RECYCLE_INPUT = 0x2;

        /**
         * Constant used to indicate the dimension of mini thumbnail.
         * @hide Only used by media framework and media provider internally.
         */
        const Int32 TARGET_SIZE_MINI_THUMBNAIL = 320;

        /**
         * Constant used to indicate the dimension of micro thumbnail.
         * @hide Only used by media framework and media provider internally.
         */
        const Int32 TARGET_SIZE_MICRO_THUMBNAIL = 96;

        /**
         * This method first examines if the thumbnail embedded in EXIF is bigger than our target
         * size. If not, then it'll create a thumbnail from original image. Due to efficiency
         * consideration, we want to let MediaThumbRequest avoid calling this method twice for
         * both kinds, so it only requests for MICRO_KIND and set saveImage to true.
         *
         * This method always returns a "square thumbnail" for MICRO_KIND thumbnail.
         *
         * @param filePath the path of image file
         * @param kind could be MINI_KIND or MICRO_KIND
         * @return Bitmap, or null on failures
         *
         * @hide This method is only used by media framework and media provider internally.
         */
        CreateImageThumbnail(
            [in] String filePath,
            [in] Int32 kind,
            [out] IBitmap** result);

        /**
         * Create a video thumbnail for a video. May return null if the video is
         * corrupt or the format is not supported.
         *
         * @param filePath the path of video file
         * @param kind could be MINI_KIND or MICRO_KIND
         */
        CreateVideoThumbnail(
            [in] String filePath,
            [in] Int32 kind,
            [out] IBitmap** result);

        /**
         * Creates a centered bitmap of the desired size.
         *
         * @param source original bitmap source
         * @param width targeted width
         * @param height targeted height
         */
        ExtractThumbnail(
            [in] IBitmap* source,
            [in] Int32 width,
            [in] Int32 height,
            [out] IBitmap** result);

        /**
         * Creates a centered bitmap of the desired size.
         *
         * @param source original bitmap source
         * @param width targeted width
         * @param height targeted height
         * @param options options used during thumbnail extraction
         */
        ExtractThumbnail(
            [in] IBitmap* source,
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 options,
            [out] IBitmap** result);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
