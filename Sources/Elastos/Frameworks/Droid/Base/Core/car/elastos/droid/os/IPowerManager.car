//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Os.IWorkSource;

    namespace Elastos {
    namespace Droid {
    namespace Os {

    [deprecated]
    interface IIPowerManager
    {
        // WARNING: The first five methods must remain the first five methods because their
        // transaction numbers must not change unless IPowerManager.cpp is also updated.
        AcquireWakeLock(
            [in] IBinder* lock,
            [in] Int32 flags,
            [in] String tag,
            [in] String packageName,
            [in] IWorkSource* ws,
            [in] String historyTag);

        AcquireWakeLockWithUid(
            [in] IBinder* lock,
            [in] Int32 flags,
            [in] String tag,
            [in] String packageName,
            [in] Int32 uidtoblame);

        ReleaseWakeLock(
            [in] IBinder* lock,
            [in] Int32 flags);

        UpdateWakeLockUids(
            [in] IBinder* lock,
            [in] ArrayOf<Int32>* uids);

        [oneway]
        PowerHint(
            [in] Int32 hintId,
            [in] Int32 data);

        UpdateWakeLockWorkSource(
            [in] IBinder* lock,
            [in] IWorkSource* ws,
            [in] String historyTag);

        IsWakeLockLevelSupported(
            [in] Int32 level,
            [out] Boolean* res);

        UserActivity(
            [in] Int64 eventTime,
            [in] Int32 event,
            [in] Int32 flags);

        WakeUp(
            [in] Int64 eventTime);

        GoToSleep(
            [in] Int64 eventTime,
            [in] Int32 reason,
            [in] Int32 flags);

        Nap(
            [in] Int64 eventTime);

        IsInteractive(
            [out] Boolean* result);

        IsPowerSaveMode(
            [out] Boolean* result);

        SetPowerSaveMode(
            [in] Boolean mode,
            [out] Boolean* result);

        Reboot(
            [in] Boolean confirm,
            [in] String reason,
            [in] Boolean wait);

        Shutdown(
            [in] Boolean confirm,
            [in] Boolean wait);

        Crash(
            [in] String message);

        SetStayOnSetting(
            [in] Int32 val);

        SetMaximumScreenOffTimeoutFromDeviceAdmin(
            [in] Int32 timeMs);

        // temporarily overrides the screen brightness settings to allow the user to
        // see the effect of a settings change without applying it immediately
        SetTemporaryScreenBrightnessSettingOverride(
            [in] Int32 brightness);

        SetTemporaryScreenAutoBrightnessAdjustmentSettingOverride(
            [in] Float adj);

        // sets the attention light (used by phone app only)
        SetAttentionLight(
            [in] Boolean on,
            [in] Int32 color);

        // update the uids being synchronized by network socket request manager
        UpdateBlockedUids(
            [in] Int32 uid,
            [in] Boolean isBlocked);

        CpuBoost(
            [in] Int32 duration);

        SetKeyboardVisibility(
            [in] Boolean visible);

        SetKeyboardLight(
            [in] Boolean on,
            [in] Int32 key);

        WakeUpWithProximityCheck(
            [in] Int64 time);

        SetPowerProfile(
            [in] String profile,
            [out] Boolean* result);

        GetPowerProfile(
            [out] String* result);

        ActivityResumed(
            [in] String componentName);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos
}
