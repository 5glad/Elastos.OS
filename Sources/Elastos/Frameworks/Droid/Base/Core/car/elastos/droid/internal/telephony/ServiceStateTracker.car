
module
{
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Telephony.ISignalStrength;
    interface Elastos.Droid.Internal.Telephony.DataConnection.IDcTrackerBase;

    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IPrintWriter;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    /**
     * @Involve
     * interface IHandler
     */
    [deprecated]
    interface IServiceStateTracker {
        /* The otaspMode passed to PhoneStateListener#onOtaspChanged */
        const Int32 OTASP_UNINITIALIZED     = 0;
        const Int32 OTASP_UNKNOWN           = 1;
        const Int32 OTASP_NEEDED            = 2;
        const Int32 OTASP_NOT_NEEDED        = 3;

        /** Waiting period before recheck gprs and voice registration. */
        const Int32 DEFAULT_GPRS_CHECK_PERIOD_MILLIS = 60 * 1000;

        Dispose();

        GetDesiredPowerState(
            [out] Boolean* result);

        /**
         * Registration point for combined roaming on
         * combined roaming is true when roaming is true and ONS differs SPN
         *
         * @param h handler to notify
         * @param what what code of message when delivered
         * @param obj placed in Message.obj
         */
        RegisterForRoamingOn(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForRoamingOn(
            [in] IHandler* h);

        /**
         * Registration point for combined roaming off
         * combined roaming is true when roaming is true and ONS differs SPN
         *
         * @param h handler to notify
         * @param what what code of message when delivered
         * @param obj placed in Message.obj
         */
        RegisterForRoamingOff(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForRoamingOff(
            [in] IHandler* h);

        /**
         * Re-register network by toggling preferred network type.
         * This is a work-around to deregister and register network since there is
         * no ril api to set COPS=2 (deregister) only.
         *
         * @param onComplete is dispatched when this is complete.  it will be
         * an AsyncResult, and onComplete.obj.exception will be non-null
         * on failure.
         */
        ReRegisterNetwork(
            [in] IMessage* onComplete);

        SetRadioPower(
            [in] Boolean power);

        EnableSingleLocationUpdate();

        EnableLocationUpdates();

        DisableLocationUpdates();

        GetCurrentDataConnectionState(
            [out] Int32* result);

        IsConcurrentVoiceAndDataAllowed(
            [out] Boolean* result);

        SetImsRegistrationState(
            [in] Boolean registered);

        PollState();

        RegisterForDataConnectionAttached(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForDataConnectionAttached(
            [in] IHandler* h);

        RegisterForDataConnectionDetached(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForDataConnectionDetached(
            [in] IHandler* h);

        RegisterForDataRegStateOrRatChanged(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForDataRegStateOrRatChanged(
            [in] IHandler* h);

        RegisterForNetworkAttached(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForNetworkAttached(
            [in] IHandler* h);

        RegisterForPsRestrictedEnabled(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForPsRestrictedEnabled(
            [in] IHandler* h);

        RegisterForPsRestrictedDisabled(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForPsRestrictedDisabled(
            [in] IHandler* h);

        PowerOffRadioSafely(
             [in] IDcTrackerBase* dcTracker);

        ProcessPendingRadioPowerOffAfterDataOff(
            [out] Boolean* result);

        GetSystemProperty(
            [in] String property,
            [in] String defValue,
            [out] String* result);

        GetAllCellInfo(
            [out] IList** result);

        GetSignalStrength(
            [out] ISignalStrength** result);

        Dump(
            [in] IFileDescriptor* fd,
            [in] IPrintWriter* pw,
            [in] ArrayOf<String>* args);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
