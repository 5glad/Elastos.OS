
module
{
    interface Elastos.Droid.App.IPendingIntent;

    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    /**
     * @Involve
     * interface ISms
     */
    [deprecated]
    interface IUiccSmsController {
        UpdateMessageOnIccEf(
            [in] String callingPackage,
            [in] Int32 index,
            [in] Int32 status,
            [in] ArrayOf<Byte>* pdu,
            [out] Boolean* result);

        UpdateMessageOnIccEfForSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] Int32 index,
            [in] Int32 status,
            [in] ArrayOf<Byte>* pdu,
            [out] Boolean* result);

        CopyMessageToIccEf(
            [in] String callingPackage,
            [in] Int32 status,
            [in] ArrayOf<Byte>* pdu,
            [in] ArrayOf<Byte>* smsc,
            [out] Boolean* result);

        CopyMessageToIccEfForSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] Int32 status,
            [in] ArrayOf<Byte>* pdu,
            [in] ArrayOf<Byte>* smsc,
            [out] Boolean* result);

        GetAllMessagesFromIccEf(
            [in] String callingPackage,
            [out] IList** result);

        GetAllMessagesFromIccEfForSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [out] IList** result);

        SendData(
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        SendDataForSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        SendDataWithOrigPort(
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] Int32 origPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        SendDataWithOrigPortUsingSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] Int32 destPort,
            [in] Int32 origPort,
            [in] ArrayOf<Byte>* data,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        SendText(
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] String text,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        SendTextForSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] String text,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent);

        SendTextWithOptionsUsingSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] String text,
            [in] IPendingIntent* sentIntent,
            [in] IPendingIntent* deliveryIntent,
            [in] Int32 priority,
            [in] Boolean isExpectMore,
            [in] Int32 validityPeriod);

        SendMultipartText(
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] IList* parts,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents);

        SendMultipartTextForSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] IList* parts,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents);

        SendMultipartTextWithOptionsUsingSubscriber(
            [in] Int64 subId,
            [in] String callingPackage,
            [in] String destAddr,
            [in] String scAddr,
            [in] IList* parts,
            [in] IList* sentIntents,
            [in] IList* deliveryIntents,
            [in] Int32 priority,
            [in] Boolean isExpectMore,
            [in] Int32 validityPeriod);

        EnableCellBroadcast(
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        EnableCellBroadcastForSubscriber(
            [in] Int64 subId,
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        EnableCellBroadcastRange(
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        EnableCellBroadcastRangeForSubscriber(
            [in] Int64 subId,
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        DisableCellBroadcast(
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        DisableCellBroadcastForSubscriber(
            [in] Int64 subId,
            [in] Int32 messageIdentifier,
            [out] Boolean* result);

        DisableCellBroadcastRange(
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        DisableCellBroadcastRangeForSubscriber(
            [in] Int64 subId,
            [in] Int32 startMessageId,
            [in] Int32 endMessageId,
            [out] Boolean* result);

        GetPremiumSmsPermission(
            [in] String packageName,
            [out] Int32* result);

        SetPremiumSmsPermission(
            [in] String packageName,
            [in] Int32 permission);

        IsImsSmsSupported(
            [out] Boolean* result);

        GetImsSmsFormat(
            [out] String* result);

        InjectSmsPduForSubscriber(
            [in] Int64 subId,
            [in] ArrayOf<Byte>* pdu,
            [in] String format,
            [in] IPendingIntent* receivedIntent);

        /**
         * Get the capacity count of sms on Icc card.
         **/
        GetSmsCapacityOnIccForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
