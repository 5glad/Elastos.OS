
module
{
    interface Elastos.Droid.Internal.Telephony.IConnection;
    interface Elastos.Droid.Internal.Telephony.IUUSInfo;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IMessage;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Gsm {

    /**
     * @Involve
     * interface IPhoneBase
     * interface IPhone
     * interface IHandler
     */
    interface IGSMPhone {
        // Key used to read/write current ciphering state
        const String CIPHERING_KEY = "ciphering_key";
        // Key used to read/write voice mail number
        const String VM_NUMBER = "vm_number_key";
        // Key used to read/write the SIM IMSI used for storing the imsi
        const String SIM_IMSI = "sim_imsi_key";
        // Key used to read/write if Call Forwarding is enabled
        const String CF_ENABLED = "cf_enabled_key";

        GetCallForwardingIndicator(
            [out] Boolean* result);

        NotifyNewRingingConnection(
            [in] IConnection* c);

        CanDial(
            [out] Boolean* result);

        Dial(
            [in] String dialString,
            [in] IUUSInfo* uusInfo,
            [in] Int32 videoState,
            [in] IBundle* extras,
            [out] IConnection** result);

        SendBurstDtmf(
            [in] String dtmfString);

        GetSystemProperty(
            [in] String property,
            [in] String defValue,
            [out] String* result);

        UpdateDataConnectionTracker();

        /**
         * Sets the "current" field in the telephony provider according to the SIM's operator
         *
         * @return true for success; false otherwise.
         */
        UpdateCurrentCarrierInProvider(
            [out] Boolean* result);

        /**
         * Saves CLIR setting so that we can re-apply it as necessary
         * (in case the RIL resets it across reboots).
         */
        SaveClirSetting(
            [in] Int32 commandInterfaceCLIRMode);

        IsManualNetSelAllowed(
            [out] Boolean* result);

        /**
         * @return operator numeric.
         */
        GetOperatorNumeric(
            [out] String* result);

        RegisterForAllDataDisconnected(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForAllDataDisconnected(
            [in] IHandler* h);

        SetInternalDataEnabled(
            [in] Boolean enbl,
            [in] IMessage* onCompleteMsg);

        SetInternalDataEnabledFlag(
            [in] Boolean enbl,
            [out] Boolean* result);

        NotifyEcbmTimerReset(
            [in] Boolean flag);

        /**
         * Registration point for Ecm timer reset
         *
         * @param h handler to notify
         * @param what User-defined message code
         * @param obj placed in Message.obj
         */
        RegisterForEcmTimerReset(
            [in] IHandler* h,
            [in] Int32 what,
            [in] IInterface* obj);

        UnregisterForEcmTimerReset(
            [in] IHandler* h);

        ResetSubSpecifics();

        GetCallBarringOption(
            [in] String facility,
            [in] String password,
            [in] IMessage* onComplete);

        SetCallBarringOption(
            [in] String facility,
            [in] Boolean lockState,
            [in] String password,
            [in] IMessage* onComplete);

        RequestChangeCbPsw(
            [in] String facility,
            [in] String oldPwd,
            [in] String newPwd,
            [in] IMessage* result);

    }

    }//Gsm
    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
