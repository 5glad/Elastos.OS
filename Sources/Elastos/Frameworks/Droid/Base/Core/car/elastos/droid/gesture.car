//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    merge("gesture/Prediction.car");
    merge("gesture/GestureConstants.car");
    merge("gesture/GesturePoint.car");
    merge("gesture/OrientedBoundingBox.car");
    merge("gesture/GestureStroke.car");
    merge("gesture/GestureUtils.car");
    merge("gesture/Gesture.car");
    merge("gesture/Instance.car");
    merge("gesture/Learner.car");
    merge("gesture/InstanceLearner.car");
    merge("gesture/InstanceHelper.car");
    merge("gesture/GestureLibrary.car");
    merge("gesture/GestureStore.car");
    merge("gesture/GestureLibraries.car");
    merge("gesture/GestureOverlayView.car");

    using interface Elastos.Utility.IList;
    using interface Elastos.Core.IRunnable;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Utility.IAttributeSet;

    namespace Elastos {
    namespace Droid {
    namespace Gesture {

    class CPrediction {
        constructor(
            [in] String label,
            [in] Double predictionScore);

        interface IPrediction;
    }

    class CGesturePoint {
        constructor(
            [in] Float x,
            [in] Float y,
            [in] Int64 t);

        interface IGesturePoint;
    }

    class COrientedBoundingBox {
        constructor(
            [in] Float angle,
            [in] Float cx,
            [in] Float cy,
            [in] Float w,
            [in] Float h);

        interface IOrientedBoundingBox;
    }

    class CGestureStroke {
        /**
         * A constructor that constructs a gesture stroke from a list of gesture points.
         *
         * @param points
         */
        constructor(
            [in] IArrayList* points);

        interface IGestureStroke;
    }

    class CGestureStore {
        constructor();

        interface IGestureStore;
    }

    class CGesture {
        constructor();

        interface IGesture;
        interface IParcelable;
    }

    class CInstance {
        constructor();

        interface IInstance;
    }

    class CInstanceLearner {
        constructor();

        interface IInstanceLearner;
    }

    singleton class CGestureLibraries {
        interface IGestureLibraries;
    }

    singleton class CInstanceHelper {
        interface IInstanceHelper;
    }

    singleton class CGestureUtils {
        interface IGestureUtils;
    }

    [local]
    class CGestureOverlayView {
        constructor(
            [in] IContext* ctx);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet *attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet *attrs,
            [in] Int32 defStyle);

        interface IGestureOverlayView;
    }

    class CFadeOutRunnable {
        constructor();

        interface IFadeOutRunnable;
        interface IRunnable;
    }

    } // namespace Gesture
    } // namespace Droid
    } // namespace Elastos
}
