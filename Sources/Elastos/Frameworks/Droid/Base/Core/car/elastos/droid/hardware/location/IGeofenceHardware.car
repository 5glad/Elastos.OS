//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Location.IIGpsGeofenceHardware;
    interface Elastos.Droid.Location.IIFusedGeofenceHardware;
    interface Elastos.Droid.Hardware.Location.IGeofenceHardwareRequestParcelable;
    interface Elastos.Droid.Hardware.Location.IIGeofenceHardwareCallback;
    interface Elastos.Droid.Hardware.Location.IIGeofenceHardwareMonitorCallback;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Location {

    /** @hide */
    [local]
    interface IIGeofenceHardware {
        SetGpsGeofenceHardware(
            [in] IIGpsGeofenceHardware* service);

        SetFusedGeofenceHardware(
            [in] IIFusedGeofenceHardware* service);

        GetMonitoringTypes(
            [out, callee] ArrayOf<Int32>* types);

        GetStatusOfMonitoringType(
            [in] Int32 monitoringType,
            [out] Int32* type);

        AddCircularFence(
            [in] Int32 monitoringType,
            [in] IGeofenceHardwareRequestParcelable* request,
            [in] IIGeofenceHardwareCallback* _callback,
            [out] Boolean* result);

        RemoveGeofence(
            [in] Int32 id,
            [in] Int32 monitoringType,
            [out] Boolean* result);

        PauseGeofence(
            [in] Int32 id,
            [in] Int32 monitoringType,
            [out] Boolean* result);

        ResumeGeofence(
            [in] Int32 id,
            [in] Int32 monitoringType,
            [in] Int32 monitorTransitions,
            [out] Boolean* result);

        RegisterForMonitorStateChangeCallback(
            [in] Int32 monitoringType,
            [in] IIGeofenceHardwareMonitorCallback* _callback,
            [out] Boolean* result);

        UnregisterForMonitorStateChangeCallback(
            [in] Int32 monitoringType,
            [in] IIGeofenceHardwareMonitorCallback* _callback,
            [out] Boolean* result);
    }

    } // namespace Location
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
