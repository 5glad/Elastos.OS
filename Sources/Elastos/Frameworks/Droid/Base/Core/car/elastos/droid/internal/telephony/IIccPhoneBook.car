//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Content.IContentValues;

    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    /** Interface for applications to access the ICC phone book.
     *
     * <p>The following code snippet demonstrates a static method to
     * retrieve the IIccPhoneBook interface from Android:</p>
     * <pre>private static IIccPhoneBook getSimPhoneBookInterface()
                throws DeadObjectException {
        IServiceManager sm = ServiceManagerNative.getDefault();
        IIccPhoneBook spb;
        spb = IIccPhoneBook.Stub.asInterface(sm.getService("iccphonebook"));
        return spb;
    }
     * </pre>
     */

    interface IIIccPhoneBook {

        /**
         * Loads the AdnRecords in efid and returns them as a
         * List of AdnRecords
         *
         * @param efid the EF id of a ADN-like SIM
         * @return List of AdnRecord
         */
        GetAdnRecordsInEf(
            [in] Int32 efid,
            [out] IList** result);

        /**
         * Loads the AdnRecords in efid and returns them as a
         * List of AdnRecords
         *
         * @param efid the EF id of a ADN-like SIM
         * @param subId user preferred subId
         * @return List of AdnRecord
         */
        GetAdnRecordsInEfForSubscriber(
            [in] Int64 subId,
            [in] Int32 efid,
            [out] IList** result);

        /**
         * Replace oldAdn with newAdn in ADN-like record in EF
         *
         * getAdnRecordsInEf must be called at least once before this function,
         * otherwise an error will be returned
         *
         * @param efid must be one among EF_ADN, EF_FDN, and EF_SDN
         * @param oldTag adn tag to be replaced
         * @param oldPhoneNumber adn number to be replaced
         *        Set both oldTag and oldPhoneNubmer to "" means to replace an
         *        empty record, aka, insert new record
         * @param newTag adn tag to be stored
         * @param newPhoneNumber adn number ot be stored
         *        Set both newTag and newPhoneNubmer to "" means to replace the old
         *        record with empty one, aka, delete old record
         * @param pin2 required to update EF_FDN, otherwise must be null
         * @return true for success
         */
        UpdateAdnRecordsInEfBySearch(
            [in] Int32 efid,
            [in] String oldTag,
            [in] String oldPhoneNumber,
            [in] String newTag,
            [in] String newPhoneNumber,
            [in] String pin2,
            [out] Boolean* result);

        /**
         * Replace oldAdn with newAdn in ADN-like record in EF
         *
         * getAdnRecordsInEf must be called at least once before this function,
         * otherwise an error will be returned
         *
         * @param efid must be one among EF_ADN, EF_FDN, and EF_SDN
         * @param oldTag adn tag to be replaced
         * @param oldPhoneNumber adn number to be replaced
         *        Set both oldTag and oldPhoneNubmer to "" means to replace an
         *        empty record, aka, insert new record
         * @param newTag adn tag to be stored
         * @param newPhoneNumber adn number ot be stored
         *        Set both newTag and newPhoneNubmer to "" means to replace the old
         *        record with empty one, aka, delete old record
         * @param pin2 required to update EF_FDN, otherwise must be null
         * @param subId user preferred subId
         * @return true for success
         */
        UpdateAdnRecordsInEfBySearchForSubscriber(
            [in] Int64 subId,
            [in] Int32 efid,
            [in] String oldTag,
            [in] String oldPhoneNumber,
            [in] String newTag,
            [in] String newPhoneNumber,
            [in] String pin2,
            [out] Boolean* result);

        /**
         * Replace oldAdn with newAdn in ADN-like record in EF
         *
         * getAdnRecordsInEf must be called at least once before this function,
         * otherwise an error will be returned
         *
         * @param efid must be one among EF_ADN, EF_FDN, and EF_SDN
         * @param values to be updated
         * @param pin2 required to update EF_FDN, otherwise must be null
         * @return true for success
         */
        UpdateAdnRecordsWithContentValuesInEfBySearch(
            [in] Int32 efid,
            [in] IContentValues* values,
            [in] String pin2,
            [out] Boolean* result);

        UpdateAdnRecordsWithContentValuesInEfBySearchUsingSubId(
            [in] Int64 subId,
            [in] Int32 efid,
            [in] IContentValues* values,
            [in] String pin2,
            [out] Boolean* result);

        /**
         * Update an ADN-like EF record by record index
         *
         * This is useful for iteration the whole ADN file, such as write the whole
         * phone book or erase/format the whole phonebook
         *
         * @param efid must be one among EF_ADN, EF_FDN, and EF_SDN
         * @param newTag adn tag to be stored
         * @param newPhoneNumber adn number to be stored
         *        Set both newTag and newPhoneNubmer to "" means to replace the old
         *        record with empty one, aka, delete old record
         * @param index is 1-based adn record index to be updated
         * @param pin2 required to update EF_FDN, otherwise must be null
         * @return true for success
         */
        UpdateAdnRecordsInEfByIndex(
            [in] Int32 efid,
            [in] String newTag,
            [in] String newPhoneNumber,
            [in] Int32 index,
            [in] String pin2,
            [out] Boolean* result);

        /**
         * Update an ADN-like EF record by record index
         *
         * This is useful for iteration the whole ADN file, such as write the whole
         * phone book or erase/format the whole phonebook
         *
         * @param efid must be one among EF_ADN, EF_FDN, and EF_SDN
         * @param newTag adn tag to be stored
         * @param newPhoneNumber adn number to be stored
         *        Set both newTag and newPhoneNubmer to "" means to replace the old
         *        record with empty one, aka, delete old record
         * @param index is 1-based adn record index to be updated
         * @param pin2 required to update EF_FDN, otherwise must be null
         * @param subId user preferred subId
         * @return true for success
         */
        UpdateAdnRecordsInEfByIndexForSubscriber(
            [in] Int64 subId,
            [in] Int32 efid,
            [in] String newTag,
            [in] String newPhoneNumber,
            [in] Int32 index,
            [in] String pin2,
            [out] Boolean* result);

        /**
         * Get the max munber of records in efid
         *
         * @param efid the EF id of a ADN-like SIM
         * @return  int[3] array
         *            recordSizes[0]  is the single record length
         *            recordSizes[1]  is the total length of the EF file
         *            recordSizes[2]  is the number of records in the EF file
         */
        GetAdnRecordsSize(
            [in] Int32 efid,
            [out, callee] ArrayOf<Int32>* result);

        /**
         * Get the max munber of records in efid
         *
         * @param efid the EF id of a ADN-like SIM
         * @param subId user preferred subId
         * @return  int[3] array
         *            recordSizes[0]  is the single record length
         *            recordSizes[1]  is the total length of the EF file
         *            recordSizes[2]  is the number of records in the EF file
         */
        GetAdnRecordsSizeForSubscriber(
            [in] Int64 subId,
            [in] Int32 efid,
            [out, callee] ArrayOf<Int32>* result);

        /**
         * Get the adn count of sim card
         *
         * @return the adn count of sim card
         */
        GetAdnCount(
            [out] Int32* result);

        GetAdnCountUsingSubId(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Get the anr count of sim card
         *
         * @return the anr count of sim card
         */
        GetAnrCount(
            [out] Int32* result);

        GetAnrCountUsingSubId(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Get the email count of sim card
         *
         * @return the email count of sim card
         */
        GetEmailCount(
            [out] Int32* result);

        GetEmailCountUsingSubId(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Get the spare anr count of sim card
         *
         * @return the spare anr count of sim card
         */
        GetSpareAnrCount(
            [out] Int32* result);

        GetSpareAnrCountUsingSubId(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Get the spare email count of sim card
         *
         * @return the spare email count of sim card
         */
        GetSpareEmailCount(
            [out] Int32* result);

        GetSpareEmailCountUsingSubId(
            [in] Int64 subId,
            [out] Int32* result);
    }

    }//Telephony
    }//Internal
    }//Droid
    }//Elastos

}
