//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.App.INotificationGroup;
    interface Elastos.Droid.App.IProfile;
    interface Elastos.Droid.App.IIProfileManager;
    interface Elastos.Utility.IUUID;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /** {@hide} */
    interface IProfileManager {
        /**
         * <p>Broadcast Action: A new profile has been selected. This can be triggered by the user
         * or by calls to the ProfileManagerService / Profile.</p>
         * @hide
         */
        const String INTENT_ACTION_PROFILE_SELECTED =
                "android.intent.action.PROFILE_SELECTED";

        /**
         * Extra for {@link INTENT_ACTION_PROFILE_SELECTED} and {@link INTENT_ACTION_PROFILE_UPDATED}:
         * The name of the newly activated or updated profile
         * @hide
         */
        const String EXTRA_PROFILE_NAME = "name";

        /**
         * Extra for {@link INTENT_ACTION_PROFILE_SELECTED} and {@link INTENT_ACTION_PROFILE_UPDATED}:
         * The string representation of the UUID of the newly activated or updated profile
         * @hide
         */
        const String EXTRA_PROFILE_UUID = "uuid";

        /**
         * Extra for {@link INTENT_ACTION_PROFILE_SELECTED}:
         * The name of the previously active profile
         * @hide
         */
        const String EXTRA_LAST_PROFILE_NAME = "lastName";

        /**
         * Extra for {@link INTENT_ACTION_PROFILE_SELECTED}:
         * The string representation of the UUID of the previously active profile
         * @hide
         */
        const String EXTRA_LAST_PROFILE_UUID = "uuid";

        /**
        * <p>Broadcast Action: Current profile has been updated. This is triggered every time the
        * currently active profile is updated, instead of selected.</p>
        * <p> For instance, this includes profile updates caused by a locale change, which doesn't
        * trigger a profile selection, but causes its name to change.</p>
        * @hide
        */
        const String INTENT_ACTION_PROFILE_UPDATED =
                "android.intent.action.PROFILE_UPDATED";

        /**
         * Activity Action: Shows a profile picker.
         * <p>
         * Input: {@link #EXTRA_PROFILE_EXISTING_UUID}, {@link #EXTRA_PROFILE_SHOW_NONE},
         * {@link #EXTRA_PROFILE_TITLE}.
         * <p>
         * Output: {@link #EXTRA_PROFILE_PICKED_UUID}.
         * @hide
         */
        // @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
        const String ACTION_PROFILE_PICKER = "android.intent.action.PROFILE_PICKER";

        /**
         * Given to the profile picker as a boolean. Whether to show an item for
         * deselect the profile. If the "None" item is picked,
         * {@link #EXTRA_PROFILE_PICKED_UUID} will be {@link #NO_PROFILE}.
         *
         * @see #ACTION_PROFILE_PICKER
         * @hide
         */
        const String EXTRA_PROFILE_SHOW_NONE =
                "android.intent.extra.profile.SHOW_NONE";

        /**
         * Given to the profile picker as a {@link UUID} string representation. The {@link UUID}
         * representation of the current profile, which will be used to show a checkmark next to
         * the item for this {@link UUID}. If the item is {@link #NO_PROFILE} then "None" item
         * is selected if {@link EXTRA_PROFILE_SHOW_NONE} is enabled. Otherwise, the current
         * profile is selected.
         *
         * @see #ACTION_PROFILE_PICKER
         * @hide
         */
        const String EXTRA_PROFILE_EXISTING_UUID =
                "android.intent.extra.profile.EXISTING_UUID";

        /**
         * Given to the profile picker as a {@link CharSequence}. The title to
         * show for the profile picker. This has a default value that is suitable
         * in most cases.
         *
         * @see #ACTION_PROFILE_PICKER
         * @hide
         */
        const String EXTRA_PROFILE_TITLE = "android.intent.extra.profile.TITLE";

        /**
         * Returned from the profile picker as a {@link UUID} string representation.
         * <p>
         * It will be one of:
         * <li> the picked profile,
         * <li> null if the "None" item was picked.
         *
         * @see #ACTION_PROFILE_PICKER
         * @hide
         */
        const String EXTRA_PROFILE_PICKED_UUID =
                "android.intent.extra.profile.PICKED_UUID";


        /**
         * Broadcast intent action indicating that Profiles has been enabled or disabled.
         * One extra provides this state as an int.
         *
         * @see #EXTRA_PROFILES_STATE
         * @hide
         */
        // @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
        const String PROFILES_STATE_CHANGED_ACTION =
            "android.app.profiles.PROFILES_STATE_CHANGED";

        /**
         * The lookup key for an int that indicates whether Profiles are enabled or
         * disabled. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.
         *
         * @see #PROFILES_STATE_DISABLED
         * @see #PROFILES_STATE_ENABLED
         * @hide
         */
        const String EXTRA_PROFILES_STATE = "profile_state";

        /**
         * Set the resource id theme to use for the dialog picker activity.<br/>
         * The default theme is <code>com.android.internal.R.Theme_Holo_Dialog_Alert</code>.
         *
         * @see #ACTION_PROFILE_PICKER
         * @hide
         */
        const String EXTRA_PROFILE_DIALOG_THEME =
                "android.intent.extra.profile.DIALOG_THEME";

        /**
         * Profiles are disabled.
         *
         * @see #PROFILES_STATE_CHANGED_ACTION
         * @hide
         */
        const Int32 PROFILES_STATE_DISABLED = 0;

        /**
         * Profiles are enabled.
         *
         * @see #PROFILES_STATE_CHANGED_ACTION
         * @hide
         */
        const Int32 PROFILES_STATE_ENABLED = 1;

        // @Deprecated
        SetActiveProfile(
            [in] String profileName);

        SetActiveProfile(
            [in] IUUID* profileUuid);

        GetActiveProfile(
            [out] IProfile** profile);

        /** @hide */
        AddProfile(
            [in] IProfile* profile);

        /** @hide */
        RemoveProfile(
            [in] IProfile* profile);

        /** @hide */
        UpdateProfile(
            [in] IProfile* profile);

        // @Deprecated
        GetProfile(
            [in] String profileName,
            [out] IProfile** profile);

        GetProfile(
            [in] IUUID* profileUuid,
            [out] IProfile** profile);

        GetProfileNames(
            [out, callee] ArrayOf<String>* names);

        GetProfiles(
            [out, callee] ArrayOf<IProfile*>* profiles);

        ProfileExists(
            [in] String profileName,
            [out] Boolean* isExisted);

        ProfileExists(
            [in] IUUID* profileUuid,
            [out] Boolean* isExisted);

        NotificationGroupExists(
            [in] String notificationGroupName,
            [out] Boolean* isExisted);

        /** @hide */
        GetNotificationGroups(
            [out, callee] ArrayOf<INotificationGroup*>* groups);

        /** @hide */
        AddNotificationGroup(
            [in] INotificationGroup* group);

        /** @hide */
        RemoveNotificationGroup(
            [in] INotificationGroup* group);

        /** @hide */
        UpdateNotificationGroup(
            [in] INotificationGroup* group);

        /** @hide */
        GetNotificationGroupForPackage(
            [in] String pkg,
            [out] INotificationGroup** group);

        /** @hide */
        GetNotificationGroup(
            [in] IUUID* groupParcelUuid,
            [out] INotificationGroup** group);

        /** @hide */
        GetActiveProfileGroup(
            [in] String packageName,
            [out] IProfileGroup** group);

        /** @hide */
        ResetAll();
    }

    interface IProfileManagerHelper {
        GetNoProfile(
            [out] IUUID** noprofile);

        GetService(
            [out] IIProfileManager** service);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
