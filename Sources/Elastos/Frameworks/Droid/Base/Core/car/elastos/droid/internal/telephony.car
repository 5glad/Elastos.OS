module
{
    merge("telephony/ATParseEx.car");
    merge("telephony/ATResponseParser.car");
    merge("telephony/BaseCommands.car");
    merge("telephony/Call.car");
    merge("telephony/CallForwardInfo.car");
    merge("telephony/PhoneConstants.car");
    merge("telephony/UUSInfo.car");
    merge("telephony/CallManager.car");
    merge("telephony/CallStateException.car");
    merge("telephony/CallTracker.car");
    merge("telephony/CellBroadcastHandler.car");
    merge("telephony/CommandException.car");
    merge("telephony/CommandsInterface.car");
    merge("telephony/Connection.car");
    merge("telephony/CallInfo.car");
    merge("telephony/CallerInfo.car");
    merge("telephony/CallerInfoAsyncQuery.car");
    merge("telephony/DctConstants.car");
    merge("telephony/DebugService.car");
    merge("telephony/DefaultPhoneNotifier.car");
    merge("telephony/DriverCall.car");
    merge("telephony/GsmAlphabet.car");
    merge("telephony/HardwareConfig.car");
    merge("telephony/HbpcdLookup.car");
    merge("telephony/HbpcdUtils.car");
    merge("telephony/IIccPhoneBook.car");
    merge("telephony/IccCard.car");
    merge("telephony/IccPhoneBookInterfaceManager.car");
    merge("telephony/IccPhoneBookInterfaceManagerProxy.car");
    merge("telephony/IccProvider.car");
    merge("telephony/IccSmsInterfaceManager.car");
    merge("telephony/IccUtils.car");
    merge("telephony/ImsSMSDispatcher.car");
    merge("telephony/InboundSmsHandler.car");
    merge("telephony/InboundSmsTracker.car");
    merge("telephony/IntRangeManager.car");
    merge("telephony/ICallService.car");
    merge("telephony/ICallServiceAdapter.car");
    merge("telephony/IMms.car");
    merge("telephony/IPhoneStateListener.car");
    merge("telephony/IPhoneSubInfo.car");
    merge("telephony/ISms.car");
    merge("telephony/ISub.car");
    merge("telephony/ITelephony.car");
    merge("telephony/ITelephonyRegistry.car");
    merge("telephony/IWapPushManager.car");
    merge("telephony/IccCardConstants.car");
    merge("telephony/MccTable.car");
    merge("telephony/MmiCode.car");
    merge("telephony/ModemBindingPolicyHandler.car");
    merge("telephony/ModemStackController.car");
    merge("telephony/OperatorInfo.car");
    merge("telephony/Operators.car");
    merge("telephony/PhoneSubInfo.car");
    merge("telephony/Phone.car");
    merge("telephony/PhoneBase.car");
    merge("telephony/PhoneFactory.car");
    merge("telephony/PhoneNotifier.car");
    merge("telephony/PhoneProxy.car");
    merge("telephony/PhoneStateIntentReceiver.car");
    merge("telephony/PhoneSubInfoController.car");
    merge("telephony/PhoneSubInfoProxy.car");
    merge("telephony/ProxyController.car");
    merge("telephony/RILConstants.car");
    merge("telephony/RIL.car");
    merge("telephony/RadioNVItems.car");
    merge("telephony/RestrictedState.car");
    merge("telephony/RetryManager.car");
    merge("telephony/ServiceStateTracker.car");
    merge("telephony/SmsConstants.car");
    merge("telephony/SmsRawData.car");
    merge("telephony/SMSDispatcher.car");
    merge("telephony/Sms7BitEncodingTranslator.car");
    merge("telephony/SmsAddress.car");
    merge("telephony/SmsApplication.car");
    merge("telephony/SmsBroadcastUndelivered.car");
    merge("telephony/SmsHeader.car");
    merge("telephony/SmsMessageBase.car");
    merge("telephony/SmsNumberUtils.car");
    merge("telephony/SmsResponse.car");
    merge("telephony/SmsStorageMonitor.car");
    merge("telephony/SmsUsageMonitor.car");
    merge("telephony/SubInfoRecordUpdater.car");
    merge("telephony/Subscription.car");
    merge("telephony/SubscriptionController.car");
    merge("telephony/SubscriptionData.car");
    merge("telephony/SubscriptionHelper.car");
    merge("telephony/SyntheticSmsMessage.car");
    merge("telephony/TelephonyIntents.car");
    merge("telephony/TelephonyProperties.car");
    merge("telephony/TelephonyCapabilities.car");
    merge("telephony/TelephonyDevController.car");
    merge("telephony/TelephonyTester.car");
    merge("telephony/UiccPhoneBookController.car");
    merge("telephony/UiccSmsController.car");
    merge("telephony/WakeLockStateMachine.car");
    merge("telephony/WapPushManagerParams.car");
    merge("telephony/WapPushOverSms.car");
    merge("telephony/WspTypeDecoder.car");

    merge("telephony/cat/AppInterface.car");
    merge("telephony/cat/CallControlResult.car");
    merge("telephony/cat/CatCmdMessage.car");
    merge("telephony/cat/CatLog.car");
    merge("telephony/cat/CatResponseMessage.car");
    merge("telephony/cat/CatService.car");
    merge("telephony/cat/CatServiceFactory.car");
    merge("telephony/cat/ComprehensionTlvTag.car");
    merge("telephony/cat/Duration.car");
    merge("telephony/cat/FontSize.car");
    merge("telephony/cat/ImageDescriptor.car");
    merge("telephony/cat/Input.car");
    merge("telephony/cat/Item.car");
    merge("telephony/cat/LaunchBrowserMode.car");
    merge("telephony/cat/Menu.car");
    merge("telephony/cat/PresentationType.car");
    merge("telephony/cat/ResultCode.car");
    merge("telephony/cat/ResultException.car");
    merge("telephony/cat/TextAlignment.car");
    merge("telephony/cat/TextAttribute.car");
    merge("telephony/cat/TextColor.car");
    merge("telephony/cat/TextMessage.car");
    merge("telephony/cat/Tone.car");
    merge("telephony/cat/ToneSettings.car");

    merge("telephony/cdma/sms/BearerData.car");
    merge("telephony/cdma/sms/CdmaSmsAddress.car");
    merge("telephony/cdma/sms/CdmaSmsSubaddress.car");
    merge("telephony/cdma/sms/SmsEnvelope.car");
    merge("telephony/cdma/sms/UserData.car");

    merge("telephony/cdma/CDMALTEPhone.car");
    merge("telephony/cdma/CDMAPhone.car");
    merge("telephony/cdma/CallFailCause.car");
    merge("telephony/cdma/CdmaCall.car");
    merge("telephony/cdma/CdmaCallTracker.car");
    merge("telephony/cdma/CdmaCallWaitingNotification.car");
    merge("telephony/cdma/CdmaConnection.car");
    merge("telephony/cdma/CdmaInboundSmsHandler.car");
    merge("telephony/cdma/CdmaInformationRecords.car");
    merge("telephony/cdma/CdmaLteServiceStateTracker.car");
    merge("telephony/cdma/CdmaMmiCode.car");
    merge("telephony/cdma/CdmaSMSDispatcher.car");
    merge("telephony/cdma/CdmaServiceCategoryProgramHandler.car");
    merge("telephony/cdma/CdmaServiceStateTracker.car");
    merge("telephony/cdma/CdmaSmsBroadcastConfigInfo.car");
    merge("telephony/cdma/CdmaSubscriptionSourceManager.car");
    merge("telephony/cdma/EriInfo.car");
    merge("telephony/cdma/EriManager.car");
    merge("telephony/cdma/RuimPhoneBookInterfaceManager.car");
    merge("telephony/cdma/SignalToneUtil.car");
    merge("telephony/cdma/SmsMessage.car");

    merge("telephony/dataconnection/ApnContext.car");
    merge("telephony/dataconnection/ApnProfileOmh.car");
    merge("telephony/dataconnection/ApnSetting.car");
    merge("telephony/dataconnection/CdmaApnProfileTracker.car");
    merge("telephony/dataconnection/DataCallResponse.car");
    merge("telephony/dataconnection/DataConnection.car");
    merge("telephony/dataconnection/DataProfile.car");
    merge("telephony/dataconnection/DcAsyncChannel.car");
    merge("telephony/dataconnection/DcController.car");
    merge("telephony/dataconnection/DcFailCause.car");
    merge("telephony/dataconnection/DcRetryAlarmController.car");
    merge("telephony/dataconnection/DcSwitchAsyncChannel.car");
    merge("telephony/dataconnection/DcSwitchState.car");
    merge("telephony/dataconnection/DcTesterDeactivateAll.car");
    merge("telephony/dataconnection/DcTesterFailBringUpAll.car");
    merge("telephony/dataconnection/DcTracker.car");
    merge("telephony/dataconnection/DcTrackerBase.car");
    merge("telephony/dataconnection/DctController.car");
    merge("telephony/dataconnection/DdsScheduler.car");
    merge("telephony/dataconnection/DdsSchedulerAc.car");

    merge("telephony/gsm/CallFailCause.car");
    merge("telephony/gsm/GSMPhone.car");
    merge("telephony/gsm/GsmCall.car");
    merge("telephony/gsm/GsmCallTracker.car");
    merge("telephony/gsm/GsmCellBroadcastHandler.car");
    merge("telephony/gsm/GsmConnection.car");
    merge("telephony/gsm/GsmInboundSmsHandler.car");
    merge("telephony/gsm/GsmMmiCode.car");
    merge("telephony/gsm/GsmSMSDispatcher.car");
    merge("telephony/gsm/GsmServiceStateTracker.car");
    merge("telephony/gsm/GsmSmsAddress.car");
    merge("telephony/gsm/GsmSmsCbMessage.car");
    merge("telephony/gsm/SimPhoneBookInterfaceManager.car");
    merge("telephony/gsm/SimTlv.car");
    merge("telephony/gsm/SmsBroadcastConfigInfo.car");
    merge("telephony/gsm/SmsCbConstants.car");
    merge("telephony/gsm/SmsCbHeader.car");
    merge("telephony/gsm/SmsMessage.car");
    merge("telephony/gsm/SsData.car");
    merge("telephony/gsm/SuppServiceNotification.car");
    merge("telephony/gsm/UsimDataDownloadHandler.car");
    merge("telephony/gsm/UsimPhoneBookManager.car");

    merge("telephony/imsphone/ImsPhone.car");
    merge("telephony/imsphone/ImsPhoneCall.car");
    merge("telephony/imsphone/ImsPhoneCallTracker.car");
    merge("telephony/imsphone/ImsPhoneConnection.car");
    merge("telephony/imsphone/ImsPhoneFactory.car");
    merge("telephony/imsphone/ImsPhoneMmiCode.car");

    merge("telephony/sip/SipPhone.car");
    merge("telephony/sip/SipPhoneBase.car");
    merge("telephony/sip/SipPhoneFactory.car");

    merge("telephony/uicc/AdnRecord.car");
    merge("telephony/uicc/AdnRecordCache.car");
    merge("telephony/uicc/AdnRecordLoader.car");
    merge("telephony/uicc/CsimFileHandler.car");
    merge("telephony/uicc/IccCardApplicationStatus.car");
    merge("telephony/uicc/IccCardProxy.car");
    merge("telephony/uicc/IccCardStatus.car");
    merge("telephony/uicc/IccConstants.car");
    merge("telephony/uicc/IccException.car");
    merge("telephony/uicc/IccFileHandler.car");
    merge("telephony/uicc/IccFileNotFound.car");
    merge("telephony/uicc/IccFileTypeMismatch.car");
    merge("telephony/uicc/IccIoResult.car");
    merge("telephony/uicc/IccRecords.car");
    merge("telephony/uicc/IccRefreshResponse.car");
    merge("telephony/uicc/IccServiceTable.car");
    merge("telephony/uicc/IccUtils.car");
    merge("telephony/uicc/IccVmFixedException.car");
    merge("telephony/uicc/IccVmNotSupportedException.car");
    merge("telephony/uicc/IsimFileHandler.car");
    merge("telephony/uicc/IsimRecords.car");
    merge("telephony/uicc/IsimUiccRecords.car");
    merge("telephony/uicc/RuimFileHandler.car");
    merge("telephony/uicc/RuimRecords.car");
    merge("telephony/uicc/SIMFileHandler.car");
    merge("telephony/uicc/SIMRecords.car");
    merge("telephony/uicc/SpnOverride.car");
    merge("telephony/uicc/UICCConfig.car");
    merge("telephony/uicc/UiccCard.car");
    merge("telephony/uicc/UiccCardApplication.car");
    merge("telephony/uicc/UiccCarrierPrivilegeRules.car");
    merge("telephony/uicc/UiccController.car");
    merge("telephony/uicc/UiccTlvData.car");
    merge("telephony/uicc/UsimFileHandler.car");
    merge("telephony/uicc/UsimServiceTable.car");

    merge("telephony/utility/BlacklistUtils.car");

    interface Elastos.Droid.Internal.Telephony.IInboundSmsHandler;
    interface Elastos.Droid.Internal.Telephony.IServiceStateTracker;
    interface Elastos.Droid.Internal.Telephony.IPhoneNotifier;
    interface Elastos.Droid.Internal.Telephony.ISmsAddress;
    interface Elastos.Droid.Internal.Telephony.IDriverCall;
    interface Elastos.Droid.Internal.Telephony.ICall;
    interface Elastos.Droid.Internal.Telephony.ICellBroadcastHandler;
    interface Elastos.Droid.Internal.Telephony.ISmsMessageBase;
    interface Elastos.Droid.Internal.Telephony.ISMSDispatcher;
    interface Elastos.Droid.Internal.Telephony.IIccPhoneBookInterfaceManager;
    interface Elastos.Droid.Internal.Telephony.IWakeLockStateMachine;
    interface Elastos.Droid.Internal.Telephony.ISmsUsageMonitor;
    interface Elastos.Droid.Internal.Telephony.IImsSMSDispatcher;
    interface Elastos.Droid.Internal.Telephony.ICallTracker;
    interface Elastos.Droid.Internal.Telephony.ICommandsInterface;
    interface Elastos.Droid.Internal.Telephony.IConnection;
    interface Elastos.Droid.Internal.Telephony.IMmiCode;
    interface Elastos.Droid.Content.IBroadcastReceiver;
    interface Elastos.Droid.Content.IServiceConnection;
    interface Elastos.Droid.Internal.Telephony.IPhone;
    interface Elastos.Droid.Internal.Telephony.IPhoneBase;
    interface Elastos.Droid.Internal.Telephony.IPhoneProxy;
    interface Elastos.Droid.Internal.Telephony.IIccCard;
    interface Elastos.Droid.Internal.Telephony.ISmsStorageMonitor;
    interface Elastos.Droid.Internal.Telephony.Cdma.ICDMAPhone;
    //interface Elastos.Droid.Internal.Telephony.Cdma.ICdmaSmsAddress;
    //interface Elastos.Droid.Internal.Telephony.Cdma.ICdmaSmsAddressHelper;
    //interface Elastos.Droid.Internal.Telephony.Cdma.ICdmaSmsSubaddress;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccFileHandler;
    interface Elastos.Droid.Internal.Telephony.Uicc.IAdnRecord;
    interface Elastos.Droid.Internal.Telephony.Uicc.IAdnRecordCache;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccConstants;
    interface Elastos.Droid.Internal.Telephony.Uicc.IAdnRecordLoader;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccCardApplication;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccCardApplicationStatus;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccCardProxy;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccCardStatus;
    interface Elastos.Droid.Internal.Telephony.Uicc.ICsimFileHandler;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccIoResult;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccRecords;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccRefreshResponse;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccServiceTable;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccUtils;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIsimFileHandler;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIsimRecords;
    interface Elastos.Droid.Internal.Telephony.Uicc.IRuimFileHandler;
    interface Elastos.Droid.Internal.Telephony.Uicc.IRuimRecords;
    interface Elastos.Droid.Internal.Telephony.Uicc.ISIMFileHandler;
    interface Elastos.Droid.Internal.Telephony.Uicc.ISIMRecords;
    interface Elastos.Droid.Internal.Telephony.Uicc.ISpnOverride;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUICCConfig;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccCard;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccController;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccControllerHelper;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccTlvData;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccTlvDataHelper;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUsimFileHandler;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUiccCarrierPrivilegeRules;
    interface Elastos.Droid.Internal.Telephony.Uicc.IUsimServiceTable;
    interface Elastos.Droid.Net.INetworkConfig;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Telephony.ICellInfo;
    interface Elastos.Droid.Internal.Utility.IStateMachine;

    using interface Elastos.Core.IRunnable;
    using interface Elastos.Core.IInteger32;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

        class CCallInfo {

            constructor();

            constructor(
                [in] String handle);

            interface ICallInfo;
            interface IParcelable;
        }

        class CCallerInfo {

            constructor();

            interface ICallerInfo;
        }

        singleton class CCallerInfoHelper {

            interface ICallerInfoHelper;
        }

        class CCallerInfoAsyncQuery {

            constructor();

            interface ICallerInfoAsyncQuery;
        }

        singleton class CCallerInfoAsyncQueryHelper {

            interface ICallerInfoAsyncQueryHelper;
        }

        class CGsmAlphabetTextEncodingDetails {

            constructor();

            interface IGsmAlphabetTextEncodingDetails;
        }

        singleton class CGsmAlphabet {

            interface IGsmAlphabet;
        }

        //singleton class CSms7BitEncodingTranslator {
        //
        //    interface ISms7BitEncodingTranslator;
        //}

        class CSmsAddress {

            interface ISmsAddress;
        }

        class CSmsBroadcastUndelivered {

            interface IRunnable;
        }

        class CSmsHeader {

            interface ISmsHeader;
        }

        singleton class CSmsHeaderHelper {

            interface ISmsHeaderHelper;
        }

        singleton class CSmsNumberUtils {

            interface ISmsNumberUtils;
        }

        [deprecated]
        class CSmsRawData {

            constructor();

            constructor(
                [in] ArrayOf<Byte>* data);

            interface ISmsRawData;
            interface IParcelable;
        }

        class CSmsResponse {
            constructor(
                [in] Int32 messageRef,
                [in] String ackPdu,
                [in] Int32 errorCode);

            interface ISmsResponse;
        }

        [local]
        class CSmsStorageMonitor {
            constructor(
                [in] IPhoneBase* phoneBase);

            interface IHandler;
            interface ISmsStorageMonitor;
        }

        [local]
        class CSmsUsageMonitor {
            constructor(
                [in]  IContext* ctx);

            interface IHandler;
            interface ISmsUsageMonitor;
        }

        [local, deprecated]
        class CSubInfoRecordUpdater {
            constructor(
                [in]  IContext* ctx,
                [in]  ArrayOf<IPhone*>* phoneProxy,
                [in]  ArrayOf<ICommandsInterface*>* ci);

            interface ISubInfoRecordUpdater;
        }

        singleton class CSubInfoRecordUpdaterHelper {

            interface ISubInfoRecordUpdaterHelper;
        }

        class CSubscription {

            interface ISubscription;
        }

        class CSubscriptionData {

            interface ISubscriptionData;
        }

        //class CServiceStateTracker {
        //    constructor(
        //        [in] IPhoneBase* phoneBase,
        //        [in] ICommandsInterface* ci,
        //        [in] ICellInfo* cellInfo);
        //
        //    interface IServiceStateTracker;
        //    interface IHandler;
        //}

        class COperatorInfo {
            constructor();

            constructor(
                [in] String operatorAlphaLong,
                [in] String operatorAlphaShort,
                [in] String operatorNumeric,
                [in] IOperatorInfoState state);

            constructor(
                [in] String operatorAlphaLong,
                [in] String operatorAlphaShort,
                [in] String operatorNumeric,
                [in] String stateString);

            interface IOperatorInfo;
            interface IParcelable;
        }

        singleton class CPhoneFactory {
            interface IPhoneFactory;
        }

        [local]
        class CPhoneProxy {
            constructor(
                [in] IPhoneBase* phone);

            interface IPhoneProxy;
            interface IPhone;
            interface IHandler;
        }

        [local]
        class CPhoneStateIntentReceiver {
            constructor();

            constructor(
                [in] IContext* ctx,
                [in] IHandler* target);

            interface IPhoneStateIntentReceiver;
            interface IBroadcastReceiver;
        }

        [local]
        class CPhoneSubInfo {
            constructor(
                [in] IPhone* phone);

            interface IPhoneSubInfo;
        }

        [local, deprecated]
        class CPhoneSubInfoController {
            constructor(
                [in] ArrayOf<IPhone*>* phone);

            interface IIPhoneSubInfo;
            interface IPhoneSubInfoController;
        }

        class CPhoneSubInfoProxy {
            constructor(
                [in] IPhoneSubInfo* phoneSubInfo);

            interface IIPhoneSubInfo;
            interface IPhoneSubInfoProxy;
        }

        singleton class CProxyControllerHelper {
            interface IProxyControllerHelper;
        }

        [local]
        class CRIL {
            constructor(
                [in] IContext* ctx,
                [in] Int32 preferredNetworkType,
                [in] Int32 cdmaSubscription);

            constructor(
                [in] IContext* ctx,
                [in] Int32 preferredNetworkType,
                [in] Int32 cdmaSubscription,
                [in] IInteger32* instanceId);

            interface IBaseCommands;
            interface ICommandsInterface;
            interface IRIL;
        }

        [local]
        class CSubscriptionController {
            constructor(
                [in] IContext* c);

            constructor(
                [in] IPhone* phone);

            interface ISubscriptionController;
            interface IISub;
        }

        [local, deprecated]
        class CSubscriptionHelper {
            constructor(
                [in] IContext* c,
                [in] ArrayOf<ICommandsInterface*>* ci);

            interface ISubscriptionHelper;
            interface IHandler;
        }

        class CSyntheticSmsMessage {
            constructor(
                [in] String originatingAddress,
                [in] String scAddress,
                [in] String messageBody,
                [in] Int64 timestampMillis);

            interface ISyntheticSmsMessage;
            interface ISmsMessageBase;
        }

        class CTelephonyDevController {
            constructor();

            interface ITelephonyDevController;
            interface IHandler;
        }

        [local, deprecated]
        class CUiccPhoneBookController {
            constructor(
                [in] ArrayOf<IPhone*>* phone);

            interface IUiccPhoneBookController;
            interface IIIccPhoneBook;
        }

        [local, deprecated]
        class CUiccSmsController {
            constructor(
                [in] ArrayOf<IPhone*>* phone,
                [in] IContext* context);

            interface IUiccSmsController;
            interface IISms;
        }

        [deprecated]
        class CUUSInfo {
            constructor(
                [in] Int32 uusType,
                [in] Int32 uusDcs,
                [in] ArrayOf<Byte>* uusData);

            interface IUUSInfo;
        }

        [local]
        class CWapPushOverSms {
            constructor(
                [in] IContext* context);

            interface IServiceConnection;
            interface IWapPushOverSms;
        }

        [deprecated]
        class CWspTypeDecoder {
            constructor(
                [in] ArrayOf<Byte>* pdu);

            interface IWspTypeDecoder;
        }

        singleton class CTelephonyCapabilities {
            interface ITelephonyCapabilities;
        }

        singleton class CSms7BitEncodingTranslator {
            interface ISms7BitEncodingTranslator;
        }

        singleton class CSmsApplication {
            interface ISmsApplication;
        }

        singleton class CSubscriptionControllerHelper {
            interface ISubscriptionControllerHelper;
        }

        singleton class CSubscriptionHelperHelper {
            interface ISubscriptionHelperHelper;
        }

        singleton class CSyntheticSmsMessageHelper {
            interface ISyntheticSmsMessageHelper;
        }

        singleton class CTelephonyDevControllerHelper {
            interface ITelephonyDevControllerHelper;
        }

        singleton class CCallManagerHelper {
            interface ICallManagerHelper;
        }

        class CRestrictedState {
            constructor();

            interface IRestrictedState;
        }

        class CRetryManager {
            constructor();

            interface IRetryManager;
        }

    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Utility {
        singleton class CBlacklistUtils {
                interface IBlacklistUtils;
        }
    } // Utility
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace DataConnection {

        [local]
        class CApnContext {
            constructor(
                [in] IContext* ctx,
                [in] String apnType,
                [in] String logTag,
                [in] INetworkConfig* config,
                [in] IDcTrackerBase* tracker);

            interface IApnContext;
        }

        class CApnProfileOmh {
            constructor(
                [in] Int32 profileId,
                [in] Int32 priority);

            interface IApnProfileOmh;
        }

        [deprecated]
        class CApnSetting {
            constructor(
                [in] Int32 id,
                [in] String numeric,
                [in] String carrier,
                [in] String apn,
                [in] String proxy,
                [in] String port,
                [in] String mmsc,
                [in] String mmsProxy,
                [in] String mmsPort,
                [in] String user,
                [in] String password,
                [in] Int32 authType,
                [in] ArrayOf<String>* types,
                [in] String protocol,
                [in] String roamingProtocol,
                [in] Boolean carrierEnabled,
                [in] Int32 bearer,
                [in] Int32 profileId,
                [in] Boolean modemCognitive,
                [in] Int32 maxConns,
                [in] Int32 waitTime,
                [in] Int32 maxConnsTime,
                [in] Int32 mtu,
                [in] String mvnoType,
                [in] String mvnoMatchData);

            interface IApnSetting;
        }

        singleton class CApnSettingHelper {
            interface IApnSettingHelper;
        }

        class CCdmaApnProfileTracker {
            constructor(
                [in] ICDMAPhone* phone);

            interface ICdmaApnProfileTracker;
        }

        class CDataCallResponse {
            constructor();

            interface IDataCallResponse;
        }

        class CDataConnection {
            interface IDataConnection;
        }

        class CDataProfile {
            constructor(
                [in] Int32 profileId,
                [in] String apn,
                [in] String protocol,
                [in] Int32 authType,
                [in] String user,
                [in] String password,
                [in] Int32 type,
                [in] Int32 maxConnsTime,
                [in] Int32 maxConns,
                [in] Int32 waitTime,
                [in] Boolean enabled);
            constructor(
                [in] IApnSetting* apn,
                [in] Boolean isRoaming);

            interface IDataProfile;
        }

        singleton class CDataProfileHelper {
            interface IDataProfileHelper;
        }

        class CDcAsyncChannel {
            constructor(
                [in] IDataConnection* dc,
                [in] String logTag);

            interface IDcAsyncChannel;
        }

        class CDcFailCause {
            constructor(
                [in] Int32 errorCode);

            interface IDcFailCause;
        }

        singleton class CDcFailCauseHelper {
            interface IDcFailCauseHelper;
        }

        [local]
        class CDcRetryAlarmController {
            constructor(
                [in] IPhoneBase* phone,
                [in] IDataConnection* dc);

            interface IDcRetryAlarmController;
        }

        class CDcSwitchAsyncChannel {
            constructor(
                [in] IDcSwitchState* dcSwitchState,
                [in] Int32 id);

            interface IDcSwitchAsyncChannel;
        }

        [local]
        class CDcSwitchState {
            constructor(
                [in] IPhone* phone,
                [in] String name,
                [in] Int32 id);

            interface IDcSwitchState;
        }

        [local]
        class CDcTesterDeactivateAll {
            constructor(
                [in] IPhoneBase* phone,
                [in] IDcController* dcc,
                [in] IHandler* handler);

            interface IDcTesterDeactivateAll;
        }

        [local]
        class CDcTesterFailBringUpAll {
            constructor(
                [in] IPhoneBase* phone,
                [in] IHandler* handler);

            interface IDcTesterFailBringUpAll;
        }

        [local]
        class CDcTracker {
            constructor(
                [in] IPhoneBase* p);

            interface IDcTracker;
        }

        [local, deprecated]
        class CDctController {
            constructor(
                [in] ArrayOf<IPhoneProxy*>* phones,
                [in] ILooper* looper);

            interface IDctController;
            interface IHandler;
        }

        singleton class CDctControllerHelper {
            interface IDctControllerHelper;
        }

        class CDdsScheduler {
            interface IDdsScheduler;
        }

        singleton class CDdsSchedulerHelper {
            interface IDdsSchedulerHelper;
        }

        class CDdsSchedulerAc {
            constructor();

            interface IDdsSchedulerAc;
        }

    } // DataConnection
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Cat {

        class CCatCmdMessageBrowserSettings {
            interface IBrowserSettings;
        }

        class CCatCmdMessageCallSettings {
            interface ICallSettings;
        }

        class CCatCmdMessageSetupEventListSettings {
            interface ISetupEventListSettings;
        }

        class CCatCmdMessage {
            constructor();

            constructor(
                [in] IInterface* cmdParams);

            interface ICatCmdMessage;
            interface IParcelable;
        }

        class CCatResponseMessage {
            constructor(
                [in] ICatCmdMessage* cmdMsg);

            interface ICatResponseMessage;
        }

        [local]
        class CCatService {
            constructor(
                [in] ICommandsInterface* ci,
                [in] IContext* ctx,
                [in] IIccFileHandler* fh,
                [in] Int32 slotId);

            interface IHandler;
            interface IAppInterface;
            interface ICatService;
        }

        singleton class CCatServiceFactory {
            interface ICatServiceFactory;
        }

        class CDuration {
            constructor();

            constructor(
                [in] Int32 timeInterval,
                [in] IDurationTimeUnit timeUnit);

            interface IDuration;
            interface IParcelable;
        }

        class CInput {
            constructor();

            interface IInput;
            interface IParcelable;
        }

        class CItem {
            constructor();

            constructor(
                [in] Int32 id,
                [in] String text);

            interface IItem;
            interface IParcelable;
        }

        class CCatMenu {
            constructor();

            interface IMenu;
            interface IParcelable;
        }

        class CTextAttribute {
            constructor(
                [in] Int32 start,
                [in] Int32 length,
                [in] TextAlignment align,
                [in] FontSize size,
                [in] Boolean bold,
                [in] Boolean italic,
                [in] Boolean underlined,
                [in] Boolean strikeThrough,
                [in] TextColor color);

            interface ITextAttribute;
        }

        class CTextMessage {
            constructor();

            interface ITextMessage;
            interface IParcelable;
        }

        class CToneSettings {
            constructor();

            constructor(
                [in] IDuration* duration,
                [in] Tone tone,
                [in] Boolean vibrate);

            interface IToneSettings;
            interface IParcelable;
        }

    } // Cat
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Uicc {

        [deprecated]
        class CAdnRecord {

            constructor();

            constructor(
                [in] ArrayOf<Byte>* record);

            constructor(
                [in] Int32 efid,
                [in] Int32 recordNumber,
                [in] ArrayOf<Byte>* record);

            constructor(
                [in] String alphaTag,
                [in] String number);

            constructor(
                [in] String alphaTag,
                [in] String number,
                [in] ArrayOf<String>* emails);

            constructor(
                [in] String alphaTag,
                [in] String number,
                [in] ArrayOf<String>* emails,
                [in] ArrayOf<String>* additionalNumbers);

            constructor(
                [in] Int32 efid,
                [in] Int32 recordNumber,
                [in] String alphaTag,
                [in] String number,
                [in] ArrayOf<String>* emails);

            constructor(
                [in] Int32 efid,
                [in] Int32 recordNumber,
                [in] String alphaTag,
                [in] String number,
                [in] ArrayOf<String>* emails,
                [in] ArrayOf<String>* additionalNumbers);

            constructor(
                [in] Int32 efid,
                [in] Int32 recordNumber,
                [in] String alphaTag,
                [in] String number);


            interface IAdnRecord;
            interface IParcelable;
        }

        class CAdnRecordCache {
            constructor(
                [in] IIccFileHandler* fh);

            interface IHandler;
            interface IAdnRecordCache;
            interface IIccConstants;
        }

        class CAdnRecordLoader {
            constructor(
                [in] IIccFileHandler* fh);

            interface IHandler;
            interface IAdnRecordLoader;
        }

        class CCsimFileHandler {

            constructor(
                [in] IUiccCardApplication* app,
                [in] String aid,
                [in] ICommandsInterface* ci);

            interface IIccFileHandler;
            interface IIccConstants;
            interface ICsimFileHandler;
        }

        class CIccCardApplicationStatus {
            interface IIccCardApplicationStatus;
        }

        [local]
        class CIccCardProxy {
            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] Int32 cardIndex);

            interface IHandler;
            interface IIccCard;
            interface IIccCardProxy;
        }

        class CIccCardStatus {
            interface IIccCardStatus;
        }

        //class CIccFileHandler {
        //    //interface IHandler;
        //    interface IIccConstants;
        //}

        [deprecated]
        class CIccIoResult {
            constructor(
                [in] Int32 sw1,
                [in] Int32 sw2,
                [in] ArrayOf<Byte>* payload);

            constructor(
                [in] Int32 sw1,
                [in] Int32 sw2,
                [in] String hexString);

            interface IIccIoResult;
        }

        //class CIccRecords {
        //    constructor(
        //        [in] IUiccCardApplication* app,
        //        [in] IContext* ctx,
        //        [in] ICommandsInterface* ci);

        //    //interface IHandler;
        //    interface IIccConstants;
        //    interface IIccRecords;
        //}

        class CIccRefreshResponse {
            interface IIccRefreshResponse;
        }

        //[deprecated]
        //class CIccServiceTable {
        //    constructor(
        //        [in] ArrayOf<Byte>* table);

        //    interface IIccServiceTable;
        //}

        singleton class CIccUtils {
            interface IIccUtils;
        }

        class CIsimFileHandler {
            constructor(
                [in] IUiccCardApplication* app,
                [in] String aid,
                [in] ICommandsInterface* ci);

            interface IIccFileHandler;
            interface IIccConstants;
            interface IIsimFileHandler;

        }

        [local]
        class CIsimUiccRecords {
            constructor(
                [in] IUiccCardApplication* app,
                [in] IContext* ctx,
                [in] ICommandsInterface* ci);

            interface IHandler;
            interface IIccConstants;
            interface IIccRecords;
            interface IIsimRecords;
        }

        class CRuimFileHandler {
            constructor(
                [in] IUiccCardApplication* app,
                [in] String aid,
                [in] ICommandsInterface* ci);

            interface IIccFileHandler;
            interface IRuimFileHandler;
        }

        [local]
        class CRuimRecords {
            constructor(
                [in] IUiccCardApplication* app,
                [in] IContext* ctx,
                [in] ICommandsInterface* ci);

            interface IIccRecords;
            interface IRuimRecords;
        }

        class CSIMFileHandler {
            constructor(
                [in] IUiccCardApplication* app,
                [in] String aid,
                [in] ICommandsInterface* ci);

            interface IIccFileHandler;
            interface IIccConstants;
            interface ISIMFileHandler;
        }

        [local]
        class CSIMRecords {
            constructor(
                [in] IUiccCardApplication* app,
                [in] IContext* ctx,
                [in] ICommandsInterface* ci);

            interface IIccRecords;
            interface ISIMRecords;
        }

        class CSpnOverride {
            interface ISpnOverride;
        }

        class CUICCConfig {
            interface IUICCConfig;
        }

        [local]
        class CUiccCard {
            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IIccCardStatus* ics,
                [in] Int32 slotId);

            interface IUiccCard;
        }

        [local]
        class CUiccCardApplication {
            constructor(
                [in] IUiccCard* uiccCard,
                [in] IIccCardApplicationStatus* as,
                [in] IContext* ctx,
                [in] ICommandsInterface* ci);

            interface IUiccCardApplication;
        }

        [local]
        class CUiccCarrierPrivilegeRules {
            constructor(
                [in] IUiccCard* uiccCard,
                [in] IMessage* loadedCallback);

            interface IHandler;
            interface IUiccCarrierPrivilegeRules;
        }

        [local, deprecated]
        class CUiccController {
            constructor(
                [in] IContext* ctx,
                [in] ArrayOf<ICommandsInterface*>* ci);

            interface IHandler;
            interface IUiccController;
        }

        singleton class CUiccControllerHelper {
            interface IUiccControllerHelper;
        }

        class CUiccTlvData {
            constructor();

            interface IUiccTlvData;
        }

        singleton class CUiccTlvDataHelper {
            interface IUiccTlvDataHelper;
        }

        class CUsimFileHandler {
            constructor(
                [in] IUiccCardApplication* app,
                [in] String aid,
                [in] ICommandsInterface* ci);

            interface IIccFileHandler;
            interface IIccConstants;
            interface IUsimFileHandler;
        }

        [deprecated]
        class CUsimServiceTable {
            constructor(
                [in] ArrayOf<Byte>* table);

            interface IIccServiceTable;
            interface IUsimServiceTable;
        }

    } // Uicc
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Sip {

        [local]
        class CSipPhone {
            constructor(
                [in] IContext* ctx,
                [in] IPhoneNotifier* notifier,
                [in] /*TODO ISipProfile*/IInterface* profile);

            interface IPhone;
            interface IHandler;
            interface IPhoneBase;
            interface ISipPhoneBase;
            interface ISipPhone;
        }

        singleton class CSipPhoneFactory {
            interface ISipPhoneFactory;
        }

    } // Sip
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace ImsPhone {

        [local]
        class CImsPhone {
            constructor(
                [in] IContext* ctx,
                [in] IPhoneNotifier* notifier,
                [in] IPhone* defaultPhone);

            interface IPhone;
            interface IHandler;
            interface IPhoneBase;
            interface IImsPhone;
        }

        class CImsPhoneCall {
            constructor();

            constructor(
                [in] IImsPhoneCallTracker* owner);

            interface ICall;
            interface IImsPhoneCall;
        }

        [local]
        class CImsPhoneCallTracker {
            constructor(
                [in] IImsPhone* phone);

            interface IHandler;
            interface ICallTracker;
            interface IImsPhoneCallTracker;
        }

        [local]
        class CImsPhoneConnection {
            constructor(
                [in] IContext* ctx,
                [in] /*TODO IImsCall*/IInterface* imsCall,
                [in] IImsPhoneCallTracker* ct,
                [in] IImsPhoneCall* parent);

            constructor(
                [in] IContext* ctx,
                [in] String dialString,
                [in] IImsPhoneCallTracker* ct,
                [in] IImsPhoneCall* parent,
                [in] IBundle* extras);

            interface IConnection;
            interface IImsPhoneConnection;
        }

        singleton class CImsPhoneFactory {
            interface IImsPhoneFactory;
        }

        [local]
        class CImsPhoneMmiCode {
            constructor(
                [in] IImsPhone* phone);

            interface IHandler;
            interface IMmiCode;
            interface IImsPhoneMmiCode;
        }

    } // ImsPhone
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Cdma {
    namespace Sms {
        singleton class CBearerDataTimeStampHelper {
            interface IBearerDataTimeStampHelper;
        }

        class CBearerData {
            interface IBearerData;
        }

        singleton class CBearerDataHelper {
            interface IBearerDataHelper;
        }

        class CCdmaSmsAddress {
            interface ISmsAddress;
            interface ICdmaSmsAddress;
        }

        singleton class CCdmaSmsAddressHelper {
            interface ICdmaSmsAddressHelper;
        }

        class CCdmaSmsSubaddress {
            interface ICdmaSmsSubaddress;
        }

        class CSmsEnvelope {
            interface ISmsEnvelope;
        }

        class CUserData {
            interface IUserData;
        }

        singleton class CUserDataHelper {
            interface IUserDataHelper;
        }

    } // Sms
    } // Cdma
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Cdma {

        [local]
        class CCDMALTEPhone {
            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Int32 phoneId);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Boolean unitTestMode,
                [in] Int32 phoneId);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier);

            interface IPhone;
            interface IHandler;
            interface IPhoneBase;
            interface ICDMAPhone;
            interface ICDMALTEPhone;
        }

        [local]
        class CCDMAPhone {
            constructor();

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Int32 phoneId);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Boolean unitTestMode);


            interface IPhone;
            interface IHandler;
            interface IPhoneBase;
            interface ICDMAPhone;
        }

        class CCdmaCall {
            constructor(
                [in] ICdmaCallTracker* owner);

            interface ICdmaCall;
            interface ICall;
        }

        class CCdmaCallTracker {
            constructor(
                [in] ICDMAPhone* phone);

            interface IHandler;
            interface ICdmaCallTracker;
        }

        class CCdmaCallWaitingNotification {
            interface ICdmaCallWaitingNotification;
        }

        singleton class CCdmaCallWaitingNotificationHelper {
            interface ICdmaCallWaitingNotificationHelper;
        }

        [local]
        class CCdmaConnection {
            constructor(
                [in] IContext* ctx,
                [in] IDriverCall* dc,
                [in] ICdmaCallTracker* ct,
                [in] Int32 index);

            constructor(
                [in] IContext* ctx,
                [in] String dialString,
                [in] ICdmaCallTracker* ct,
                [in] ICdmaCall* parent);

            constructor(
                [in] IContext* ctx,
                [in] ICdmaCallWaitingNotification* cw,
                [in] ICdmaCallTracker* ct,
                [in] ICdmaCall* parent);


            interface IConnection;
            interface ICdmaConnection;
        }

        singleton class CCdmaConnectionHelper {
            interface ICdmaConnectionHelper;
        }

        //class CCdmaInboundSmsHandler {

        //    //interface IStateMachine;
        //    interface IInboundSmsHandler;
        //    interface ICdmaInboundSmsHandler;
        //}

        singleton class CCdmaInboundSmsHandlerHelper {
            interface ICdmaInboundSmsHandlerHelper;
        }

        class CCdmaInformationRecords {

            interface ICdmaInformationRecords;
        }

        singleton class CCdmaInformationRecordsHelper {
            interface ICdmaInformationRecordsHelper;
        }

        class CCdmaLteServiceStateTracker {

            constructor(
                [in] ICDMALTEPhone* phone);

            interface IHandler;
            interface IServiceStateTracker;
            interface ICdmaServiceStateTracker;
            interface ICdmaLteServiceStateTracker;
        }

        class CCdmaMmiCode {
            constructor(
                [in] ICDMAPhone* phone,
                [in] IUiccCardApplication* app);

            interface IHandler;
            interface IMmiCode;
            interface ICdmaMmiCode;
        }

        [local, deprecated]
        class CCdmaSMSDispatcher {
            constructor(
                [in] IPhoneBase* phone,
                [in] ISmsUsageMonitor* usageMonitor,
                [in] IImsSMSDispatcher* imsSMSDispatcher);

            interface IHandler;
            interface ISMSDispatcher;
            interface ICdmaSMSDispatcher;
        }

        [local]
        class CCdmaServiceCategoryProgramHandler {
            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* commandsInterface);

            //interface IStateMachine;
            interface IWakeLockStateMachine;
            interface ICdmaServiceCategoryProgramHandler;
        }

        class CCdmaServiceStateTracker {
            constructor();

            constructor(
                [in] ICDMAPhone* phone);

            interface IHandler;
            interface IServiceStateTracker;
            interface ICdmaServiceStateTracker;
        }

        class CCdmaSmsBroadcastConfigInfo {
            constructor(
                [in] Int32 fromServiceCategory,
                [in] Int32 toServiceCategory,
                [in] Int32 language,
                [in] Boolean selected);

            interface ICdmaSmsBroadcastConfigInfo;
        }

        singleton class CCdmaSubscriptionSourceManagerHelper {
            interface ICdmaSubscriptionSourceManagerHelper;
        }

        class CEriInfo {
            constructor(
                [in] Int32 roamingIndicator,
                [in] Int32 iconIndex,
                [in] Int32 iconMode,
                [in] String eriText,
                [in] Int32 callPromptId,
                [in] Int32 alertId);

            interface IEriInfo;
        }

        [local]
        class CEriManager {
            constructor(
                [in] IPhoneBase* phone,
                [in] IContext* ctx,
                [in] Int32 eriFileSource);

            interface IEriManager;
        }

        class CRuimPhoneBookInterfaceManager {
            constructor(
                [in] ICDMAPhone* phone);

            interface IIccPhoneBookInterfaceManager;
            interface IRuimPhoneBookInterfaceManager;
        }

        singleton class CSignalToneUtilHelper {
            interface ISignalToneUtilHelper;
        }

        class CCdmaSmsMessageSubmitPdu {
            interface ISmsMessageSubmitPdu;
        }

        class CCdmaSmsMessage {

            interface ISmsMessageBase;
            interface ISmsMessage;
        }

        singleton class CCdmaSmsMessageHelper {
            interface ISmsMessageHelper;
        }

    } // Cdma
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Gsm {

        [local]
        class CGSMPhone {
            constructor();

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Boolean unitTestMode);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Int32 phoneId);

            constructor(
                [in] IContext* ctx,
                [in] ICommandsInterface* ci,
                [in] IPhoneNotifier* notifier,
                [in] Boolean unitTestMode,
                [in] Int32 phoneId);

            interface IGSMPhone;
            interface IPhoneBase;
            interface IPhone;
            interface IHandler;
        }

        class CGsmCall {
            constructor();

            constructor(
                [in] IGsmCallTracker* owner);

            interface IGsmCall;
            interface ICall;
        }

        class CGsmCallTracker {
            constructor();

            constructor(
                [in] IGSMPhone* phone);

            interface IGsmCallTracker;
            interface ICallTracker;
            interface IHandler;
        }

        [local]
        class CGsmCellBroadcastHandler {
            constructor();

            constructor(
                [in] IContext* ctx,
                [in] IPhoneBase* phone);

            interface IGsmCellBroadcastHandler;
            interface ICellBroadcastHandler;
            interface IWakeLockStateMachine;
            //interface IStateMachine;
        }

        singleton class CGsmCellBroadcastHandlerHelper {
            interface IGsmCellBroadcastHandlerHelper;
        }

        [local]
        class CGsmConnection {
            constructor();

            constructor(
                [in] IContext* ctx,
                [in] IDriverCall* dc,
                [in] IGsmCallTracker* ct,
                [in] Int32 index);

            constructor(
                [in] IContext* ctx,
                [in] String dialString,
                [in] IGsmCallTracker* ct,
                [in] IGsmCall* parent);

            interface IGsmConnection;
            interface IConnection;
        }

//        [local]
//        class CGsmInboundSmsHandler {
//            constructor();
//
//            constructor(
//                [in] IContext* ctx,
//                [in] ISmsStorageMonitor* storageMonitor,
//                [in] IPhoneBase* phone);
//
//            interface IGsmInboundSmsHandler;
//            interface IInboundSmsHandler;
//            //interface IStateMachine;
//        }

        singleton class CGsmInboundSmsHandlerHelper {
            interface IGsmInboundSmsHandlerHelper;
        }

        class CGsmMmiCode {
            constructor();

            constructor(
                [in] IGSMPhone* phone,
                [in] IUiccCardApplication* app);

            interface IGsmMmiCode;
            interface IMmiCode;
            interface IHandler;
        }

        [local]
        class CGsmSMSDispatcher {
            constructor();

            constructor(
                [in] IPhoneBase* phone,
                [in] ISmsUsageMonitor* usageMonitor,
                [in] IImsSMSDispatcher* imsSMSDispatcher,
                [in] IGsmInboundSmsHandler* gsmInboundSmsHandler);

            interface IGsmSMSDispatcher;
            interface ISMSDispatcher;
            interface IHandler;
        }

        class CGsmServiceStateTracker {
            constructor();

            constructor(
                [in] IGSMPhone* phone);

            interface IGsmServiceStateTracker;
            interface IServiceStateTracker;
            interface IHandler;
        }

        [deprecated]
        class CGsmSmsAddress {
            constructor();

            constructor(
                [in] ArrayOf<Byte>* data,
                [in] Int32 offset,
                [in] Int32 length);

            interface IGsmSmsAddress;
            interface ISmsAddress;
        }

        class CGsmSmsCbMessage {
            constructor();

            interface IGsmSmsCbMessage;
        }

        singleton class CGsmSmsCbMessageHelper {
            interface IGsmSmsCbMessageHelper;
        }

        class CSimPhoneBookInterfaceManager {
            constructor();

            constructor(
                [in] IGSMPhone* phone);

            interface ISimPhoneBookInterfaceManager;
            interface IIccPhoneBookInterfaceManager;
        }

        [deprecated]
        class CSimTlv {
            constructor();

            constructor(
                [in] ArrayOf<Byte>* record,
                [in] Int32 offset,
                [in] Int32 length);

            interface ISimTlv;
        }

        class CSmsBroadcastConfigInfo {
            constructor();

            constructor(
                [in] Int32 fromId,
                [in] Int32 toId,
                [in] Int32 fromScheme,
                [in] Int32 toScheme,
                [in] Boolean selected);

            interface ISmsBroadcastConfigInfo;
        }

        [deprecated]
        class CSmsCbHeader {
            constructor();

            constructor(
                [in] ArrayOf<Byte>* pdu);

            interface ISmsCbHeader;
        }

        class CSmsMessage {
            constructor();

            interface ISmsMessage;
            interface ISmsMessageBase;
        }

        singleton class CSmsMessageHelper {
            interface ISmsMessageHelper;
        }

        class CSsData {
            constructor();

            interface ISsData;
        }

        class CSuppServiceNotification {
            constructor();

            interface ISuppServiceNotification;
        }

        class CUsimDataDownloadHandler {
            constructor();

            constructor(
                [in] ICommandsInterface* commandsInterface);

            interface IUsimDataDownloadHandler;
            interface IHandler;
        }

        class CUsimPhoneBookManager {
            constructor();

            constructor(
                [in] IIccFileHandler* fh,
                [in] IAdnRecordCache* cache);

            interface IUsimPhoneBookManager;
            interface IIccConstants;
            interface IHandler;
        }

    } // Gsm
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

}
