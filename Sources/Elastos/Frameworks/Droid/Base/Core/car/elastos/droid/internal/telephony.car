module
{
    merge("telephony/ATParseEx.car");
    merge("telephony/ATResponseParser.car");
    merge("telephony/BaseCommands.car");
    merge("telephony/Call.car");
    merge("telephony/CallForwardInfo.car");
    merge("telephony/PhoneConstants.car");
    merge("telephony/UUSInfo.car");
    merge("telephony/CallManager.car");
    merge("telephony/CallStateException.car");
    merge("telephony/CallTracker.car");
    merge("telephony/CellBroadcastHandler.car");
    merge("telephony/CommandException.car");
    merge("telephony/CommandsInterface.car");
    merge("telephony/Connection.car");
    merge("telephony/CallInfo.car");
    merge("telephony/CallerInfo.car");
    merge("telephony/CallerInfoAsyncQuery.car");
    merge("telephony/DctConstants.car");
    merge("telephony/DebugService.car");
    merge("telephony/DefaultPhoneNotifier.car");
    merge("telephony/DriverCall.car");
    merge("telephony/GsmAlphabet.car");
    merge("telephony/HardwareConfig.car");
    merge("telephony/HbpcdLookup.car");
    merge("telephony/HbpcdUtils.car");
    merge("telephony/IIccPhoneBook.car");
    merge("telephony/IccCard.car");
    merge("telephony/IccPhoneBookInterfaceManager.car");
    merge("telephony/IccPhoneBookInterfaceManagerProxy.car");
    merge("telephony/IccProvider.car");
    merge("telephony/IccSmsInterfaceManager.car");
    merge("telephony/IccUtils.car");
    merge("telephony/ImsSMSDispatcher.car");
    merge("telephony/InboundSmsHandler.car");
    merge("telephony/InboundSmsTracker.car");
    merge("telephony/IntRangeManager.car");
    merge("telephony/ICallService.car");
    merge("telephony/ICallServiceAdapter.car");
    merge("telephony/IMms.car");
    merge("telephony/IPhoneStateListener.car");
    merge("telephony/IPhoneSubInfo.car");
    merge("telephony/ISms.car");
    merge("telephony/ISub.car");
    merge("telephony/ITelephony.car");
    merge("telephony/ITelephonyRegistry.car");
    merge("telephony/IWapPushManager.car");
    merge("telephony/IccCardConstants.car");
    merge("telephony/MccTable.car");
    merge("telephony/MmiCode.car");
    merge("telephony/ModemBindingPolicyHandler.car");
    merge("telephony/ModemStackController.car");
    merge("telephony/OperatorInfo.car");
    merge("telephony/Operators.car");
    merge("telephony/PhoneSubInfo.car");
    merge("telephony/Phone.car");
    merge("telephony/PhoneBase.car");
    merge("telephony/PhoneFactory.car");
    merge("telephony/PhoneNotifier.car");
    merge("telephony/PhoneProxy.car");
    merge("telephony/PhoneSubInfoController.car");
    merge("telephony/PhoneSubInfoProxy.car");
    merge("telephony/ProxyController.car");
    merge("telephony/RILConstants.car");
    merge("telephony/RIL.car");
    merge("telephony/RadioNVItems.car");
    merge("telephony/RestrictedState.car");
    merge("telephony/RetryManager.car");
    merge("telephony/ServiceStateTracker.car");
    merge("telephony/SmsConstants.car");
    merge("telephony/SmsRawData.car");
    merge("telephony/SMSDispatcher.car");
    merge("telephony/Sms7BitEncodingTranslator.car");
    merge("telephony/SmsAddress.car");
    merge("telephony/SmsApplication.car");
    merge("telephony/SmsBroadcastUndelivered.car");
    merge("telephony/SmsHeader.car");
    merge("telephony/SmsMessageBase.car");
    merge("telephony/SmsNumberUtils.car");
    merge("telephony/SmsResponse.car");
    merge("telephony/SmsStorageMonitor.car");
    merge("telephony/SmsUsageMonitor.car");
    merge("telephony/SubInfoRecordUpdater.car");
    merge("telephony/Subscription.car");
    merge("telephony/SubscriptionController.car");
    merge("telephony/SubscriptionData.car");
    merge("telephony/SyntheticSmsMessage.car");
    merge("telephony/TelephonyIntents.car");
    merge("telephony/TelephonyProperties.car");
    merge("telephony/TelephonyCapabilities.car");
    merge("telephony/TelephonyDevController.car");
    merge("telephony/TelephonyTester.car");
    merge("telephony/UiccPhoneBookController.car");
    merge("telephony/UiccSmsController.car");
    merge("telephony/WakeLockStateMachine.car");
    merge("telephony/WapPushManagerParams.car");
    merge("telephony/WapPushOverSms.car");
    merge("telephony/WspTypeDecoder.car");

    merge("telephony/cat/AppInterface.car");
    merge("telephony/cat/CallControlResult.car");
    merge("telephony/cat/CatCmdMessage.car");
    merge("telephony/cat/CatLog.car");
    merge("telephony/cat/CatResponseMessage.car");
    merge("telephony/cat/CatService.car");
    merge("telephony/cat/CatServiceFactory.car");
    merge("telephony/cat/ComprehensionTlvTag.car");
    merge("telephony/cat/Duration.car");
    merge("telephony/cat/FontSize.car");
    merge("telephony/cat/ImageDescriptor.car");
    merge("telephony/cat/Input.car");
    merge("telephony/cat/Item.car");
    merge("telephony/cat/LaunchBrowserMode.car");
    merge("telephony/cat/Menu.car");
    merge("telephony/cat/PresentationType.car");
    merge("telephony/cat/ResultCode.car");
    merge("telephony/cat/ResultException.car");
    merge("telephony/cat/TextAlignment.car");
    merge("telephony/cat/TextAttribute.car");
    merge("telephony/cat/TextColor.car");
    merge("telephony/cat/TextMessage.car");
    merge("telephony/cat/Tone.car");
    merge("telephony/cat/ToneSettings.car");

    merge("telephony/cdma/sms/BearerData.car");
    merge("telephony/cdma/sms/CdmaSmsAddress.car");
    merge("telephony/cdma/sms/CdmaSmsSubaddress.car");
    merge("telephony/cdma/sms/SmsEnvelope.car");
    merge("telephony/cdma/sms/UserData.car");

    merge("telephony/cdma/CDMALTEPhone.car");
    merge("telephony/cdma/CDMAPhone.car");
    merge("telephony/cdma/CallFailCause.car");
    merge("telephony/cdma/CdmaCall.car");
    merge("telephony/cdma/CdmaCallTracker.car");
    merge("telephony/cdma/CdmaCallWaitingNotification.car");
    merge("telephony/cdma/CdmaConnection.car");
    merge("telephony/cdma/CdmaInboundSmsHandler.car");
    merge("telephony/cdma/CdmaInformationRecords.car");
    merge("telephony/cdma/CdmaLteServiceStateTracker.car");
    merge("telephony/cdma/CdmaMmiCode.car");
    merge("telephony/cdma/CdmaSMSDispatcher.car");
    merge("telephony/cdma/CdmaServiceCategoryProgramHandler.car");
    merge("telephony/cdma/CdmaServiceStateTracker.car");
    merge("telephony/cdma/CdmaSmsBroadcastConfigInfo.car");
    merge("telephony/cdma/CdmaSubscriptionSourceManager.car");
    merge("telephony/cdma/EriInfo.car");
    merge("telephony/cdma/EriManager.car");
    merge("telephony/cdma/RuimPhoneBookInterfaceManager.car");
    merge("telephony/cdma/SignalToneUtil.car");
    merge("telephony/cdma/SmsMessage.car");

    merge("telephony/dataconnection/ApnContext.car");
    merge("telephony/dataconnection/ApnProfileOmh.car");
    merge("telephony/dataconnection/ApnSetting.car");
    merge("telephony/dataconnection/CdmaApnProfileTracker.car");
    merge("telephony/dataconnection/DataCallResponse.car");
    merge("telephony/dataconnection/DataConnection.car");
    merge("telephony/dataconnection/DataProfile.car");
    merge("telephony/dataconnection/DcAsyncChannel.car");
    merge("telephony/dataconnection/DcController.car");
    merge("telephony/dataconnection/DcFailCause.car");
    merge("telephony/dataconnection/DcRetryAlarmController.car");
    merge("telephony/dataconnection/DcSwitchAsyncChannel.car");
    merge("telephony/dataconnection/DcSwitchState.car");
    merge("telephony/dataconnection/DcTesterDeactivateAll.car");
    merge("telephony/dataconnection/DcTesterFailBringUpAll.car");
    merge("telephony/dataconnection/DcTracker.car");
    merge("telephony/dataconnection/DcTrackerBase.car");
    merge("telephony/dataconnection/DctController.car");
    merge("telephony/dataconnection/DdsScheduler.car");
    merge("telephony/dataconnection/DdsSchedulerAc.car");

    merge("telephony/gsm/CallFailCause.car");
    merge("telephony/gsm/GSMPhone.car");
    merge("telephony/gsm/GsmCallTracker.car");
    merge("telephony/gsm/GsmCellBroadcastHandler.car");
    merge("telephony/gsm/GsmConnection.car");
    merge("telephony/gsm/GsmInboundSmsHandler.car");
    merge("telephony/gsm/GsmMmiCode.car");
    merge("telephony/gsm/GsmSMSDispatcher.car");
    merge("telephony/gsm/GsmSmsAddress.car");
    merge("telephony/gsm/GsmSmsCbMessage.car");
    merge("telephony/gsm/SimPhoneBookInterfaceManager.car");
    merge("telephony/gsm/SimTlv.car");
    merge("telephony/gsm/SmsBroadcastConfigInfo.car");
    merge("telephony/gsm/SmsCbConstants.car");
    merge("telephony/gsm/SmsMessage.car");
    merge("telephony/gsm/SsData.car");
    merge("telephony/gsm/SuppServiceNotification.car");
    merge("telephony/gsm/UsimDataDownloadHandler.car");
    merge("telephony/gsm/UsimPhoneBookManager.car");

    merge("telephony/imsphone/ImsPhone.car");
    merge("telephony/imsphone/ImsPhoneCall.car");
    merge("telephony/imsphone/ImsPhoneCallTracker.car");
    merge("telephony/imsphone/ImsPhoneConnection.car");
    merge("telephony/imsphone/ImsPhoneFactory.car");
    merge("telephony/imsphone/ImsPhoneMmiCode.car");

    merge("telephony/sip/SipPhone.car");
    merge("telephony/sip/SipPhoneBase.car");
    merge("telephony/sip/SipPhoneFactory.car");

    merge("telephony/uicc/AdnRecord.car");
    merge("telephony/uicc/AdnRecordCache.car");
    merge("telephony/uicc/AdnRecordLoader.car");
    merge("telephony/uicc/CsimFileHandler.car");
    merge("telephony/uicc/IccCardApplicationStatus.car");
    merge("telephony/uicc/IccCardProxy.car");
    merge("telephony/uicc/IccCardStatus.car");
    merge("telephony/uicc/IccConstants.car");
    merge("telephony/uicc/IccException.car");
    merge("telephony/uicc/IccFileHandler.car");
    merge("telephony/uicc/IccFileNotFound.car");
    merge("telephony/uicc/IccFileTypeMismatch.car");
    merge("telephony/uicc/IccIoResult.car");
    merge("telephony/uicc/IccRecords.car");
    merge("telephony/uicc/IccRefreshResponse.car");
    merge("telephony/uicc/IccServiceTable.car");
    merge("telephony/uicc/IccUtils.car");
    merge("telephony/uicc/IccVmFixedException.car");
    merge("telephony/uicc/IccVmNotSupportedException.car");
    merge("telephony/uicc/IsimFileHandler.car");
    merge("telephony/uicc/IsimRecords.car");
    merge("telephony/uicc/IsimUiccRecords.car");
    merge("telephony/uicc/RuimFileHandler.car");
    merge("telephony/uicc/RuimRecords.car");
    merge("telephony/uicc/SIMFileHandler.car");
    merge("telephony/uicc/SIMRecords.car");
    merge("telephony/uicc/SpnOverride.car");
    merge("telephony/uicc/UICCConfig.car");
    merge("telephony/uicc/UiccCard.car");
    merge("telephony/uicc/UiccCardApplication.car");
    merge("telephony/uicc/UiccCarrierPrivilegeRules.car");
    merge("telephony/uicc/UiccController.car");
    merge("telephony/uicc/UiccTlvData.car");
    merge("telephony/uicc/UsimFileHandler.car");
    merge("telephony/uicc/UsimServiceTable.car");

    merge("telephony/utility/BlacklistUtils.car");

    interface Elastos.Droid.Internal.Telephony.ICommandsInterface;
    interface Elastos.Droid.Internal.Telephony.IPhone;
    interface Elastos.Droid.Internal.Telephony.IPhoneBase;
    interface Elastos.Droid.Internal.Telephony.IPhoneProxy;
    interface Elastos.Droid.Internal.Telephony.Cdma.ICDMAPhone;
    interface Elastos.Droid.Internal.Telephony.Uicc.IIccFileHandler;
    interface Elastos.Droid.Net.INetworkConfig;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Telephony.ICellInfo;

    using interface Elastos.Core.IRunnable;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

        class CCallInfo {

            constructor();

            constructor(
                [in] String handle);

            interface ICallInfo;
            interface IParcelable;
        }

        class CCallerInfo {

            constructor();

            interface ICallerInfo;
        }

        singleton class CCallerInfoHelper {

            interface ICallerInfoHelper;
        }

        class CCallerInfoAsyncQuery {

            constructor();

            interface ICallerInfoAsyncQuery;
        }

        singleton class CCallerInfoAsyncQueryHelper {

            interface ICallerInfoAsyncQueryHelper;
        }

        class CGsmAlphabetTextEncodingDetails {

            constructor();

            interface IGsmAlphabetTextEncodingDetails;
        }

        singleton class CGsmAlphabet {

            interface IGsmAlphabet;
        }

        //singleton class CSms7BitEncodingTranslator {
        //
        //    interface ISms7BitEncodingTranslator;
        //}

        class CSmsAddress {

            interface ISmsAddress;
        }

        class CSmsBroadcastUndelivered {

            interface IRunnable;
        }

        class CSmsHeader {

            interface ISmsHeader;
        }

        singleton class CSmsHeaderHelper {

            interface ISmsHeaderHelper;
        }

        singleton class CSmsNumberUtils {

            interface ISmsNumberUtils;
        }

        [deprecated]
        class CSmsRawData {

            constructor();

            constructor(
                [in] ArrayOf<Byte>* data);

            interface ISmsRawData;
            interface IParcelable;
        }

        class CSmsResponse {
            constructor(
                [in] Int32 messageRef,
                [in] String ackPdu,
                [in] Int32 errorCode);

            interface ISmsResponse;
        }

        [local]
        class CSmsStorageMonitor {
            constructor(
                [in] IPhoneBase* phoneBase);

            //interface IHandler;
            interface ISmsStorageMonitor;
        }

        class CSmsUsageMonitor {
            constructor(
                [in]  IContext* context);

            //interface IHandler;
            interface ISmsUsageMonitor;
        }

        [deprecated]
        class CSubInfoRecordUpdater {
            constructor(
                [in]  IContext* context,
                [in]  ArrayOf<IPhone*>* phoneProxy,
                [in]  ArrayOf<ICommandsInterface*>* ci);

            interface ISubInfoRecordUpdater;
        }

        singleton class CSubInfoRecordUpdaterHelper {

            interface ISubInfoRecordUpdaterHelper;
        }

        class CSubscription {

            interface ISubscription;
        }

        class CSubscriptionData {

            interface ISubscriptionData;
        }

        //class CServiceStateTracker {
        //    constructor(
        //        [in] IPhoneBase* phoneBase,
        //        [in] ICommandsInterface* ci,
        //        [in] ICellInfo* cellInfo);
        //
        //    interface IServiceStateTracker;
        //    interface IHandler;
        //}

        class COperatorInfo {
            constructor();

            constructor(
                [in] String operatorAlphaLong,
                [in] String operatorAlphaShort,
                [in] String operatorNumeric,
                [in] IOperatorInfoState state);

            constructor(
                [in] String operatorAlphaLong,
                [in] String operatorAlphaShort,
                [in] String operatorNumeric,
                [in] String stateString);

            interface IOperatorInfo;
            interface IParcelable;
        }

    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Utility {
        singleton class CBlacklistUtils {
                interface IBlacklistUtils;
        }
    } // Utility
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace DataConnection {

        class CApnContext {
            constructor(
                [in] IContext* context,
                [in] String apnType,
                [in] String logTag,
                [in] INetworkConfig* config,
                [in] IDcTrackerBase* tracker);

            interface IApnContext;
        }

        class CApnProfileOmh {
            constructor(
                [in] Int32 profileId,
                [in] Int32 priority);

            interface IApnProfileOmh;
        }

        [deprecated]
        class CApnSetting {
            constructor(
                [in] Int32 id,
                [in] String numeric,
                [in] String carrier,
                [in] String apn,
                [in] String proxy,
                [in] String port,
                [in] String mmsc,
                [in] String mmsProxy,
                [in] String mmsPort,
                [in] String user,
                [in] String password,
                [in] Int32 authType,
                [in] ArrayOf<String>* types,
                [in] String protocol,
                [in] String roamingProtocol,
                [in] Boolean carrierEnabled,
                [in] Int32 bearer,
                [in] Int32 profileId,
                [in] Boolean modemCognitive,
                [in] Int32 maxConns,
                [in] Int32 waitTime,
                [in] Int32 maxConnsTime,
                [in] Int32 mtu,
                [in] String mvnoType,
                [in] String mvnoMatchData);

            interface IApnSetting;
        }

        singleton class CApnSettingHelper {
            interface IApnSettingHelper;
        }

        class CCdmaApnProfileTracker {
            constructor(
                [in] ICDMAPhone* phone);

            interface ICdmaApnProfileTracker;
        }

        class CDataCallResponse {
            constructor();

            interface IDataCallResponse;
        }

        class CDataConnection {
            constructor();

            interface IDataConnection;
        }

        class CDataProfile {
            constructor(
                [in] Int32 profileId,
                [in] String apn,
                [in] String protocol,
                [in] Int32 authType,
                [in] String user,
                [in] String password,
                [in] Int32 type,
                [in] Int32 maxConnsTime,
                [in] Int32 maxConns,
                [in] Int32 waitTime,
                [in] Boolean enabled);
            constructor(
                [in] IApnSetting* apn,
                [in] Boolean isRoaming);

            interface IDataProfile;
        }

        singleton class CDataProfileHelper {
            interface IDataProfileHelper;
        }

        class CDcAsyncChannel {
            constructor(
                [in] IDataConnection* dc,
                [in] String logTag);

            interface IDcAsyncChannel;
        }

        class CDcFailCause {
            constructor(
                [in] Int32 errorCode);

            interface IDcFailCause;
        }

        singleton class CDcFailCauseHelper {
            interface IDcFailCauseHelper;
        }

        [local]
        class CDcRetryAlarmController {
            constructor(
                [in] IPhoneBase* phone,
                [in] IDataConnection* dc);

            interface IDcRetryAlarmController;
        }

        class CDcSwitchAsyncChannel {
            constructor(
                [in] IDcSwitchState* dcSwitchState,
                [in] Int32 id);

            interface IDcSwitchAsyncChannel;
        }

        class CDcSwitchState {
            constructor(
                [in] IPhone* phone,
                [in] String name,
                [in] Int32 id);

            interface IDcSwitchState;
        }

        [local]
        class CDcTesterDeactivateAll {
            constructor(
                [in] IPhoneBase* phone,
                [in] IDcController* dcc,
                [in] IHandler* handler);

            interface IDcTesterDeactivateAll;
        }

        [local]
        class CDcTesterFailBringUpAll {
            constructor(
                [in] IPhoneBase* phone,
                [in] IHandler* handler);

            interface IDcTesterFailBringUpAll;
        }

        [local]
        class CDcTracker {
            constructor(
                [in] IPhoneBase* p);

            interface IDcTracker;
        }

        [deprecated]
        class CDctController {
            interface IDctController;
        }

        singleton class CDctControllerHelper {
            interface IDctControllerHelper;
        }

        class CDdsScheduler {
            interface IDdsScheduler;
        }

        singleton class CDdsSchedulerHelper {
            interface IDdsSchedulerHelper;
        }

        class CDdsSchedulerAc {
            constructor();

            interface IDdsSchedulerAc;
        }

    } // DataConnection
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {
    namespace Cat {

        class CCatCmdMessageBrowserSettings {
            interface IBrowserSettings;
        }

        class CCatCmdMessageCallSettings {
            interface ICallSettings;
        }

        class CCatCmdMessageSetupEventListSettings {
            interface ISetupEventListSettings;
        }

        class CCatCmdMessage {
            constructor();

            constructor(
                [in] IInterface* cmdParams);

            constructor(
                [in] IParcel* parcel);

            interface ICatCmdMessage;
            interface IParcelable;
        }

        class CCatLog {
            interface ICatLog;
        }

        class CCatResponseMessage {
            constructor(
                [in] ICatCmdMessage* cmdMsg);

            interface ICatResponseMessage;
        }

        class CCatService {
            constructor(
                [in] ICommandsInterface* ci,
                [in] IContext* context,
                [in] IIccFileHandler* fh,
                [in] Int32 slotId);

            //TODO interface IHandler;
            interface IAppInterface;
            interface ICatService;
        }

        singleton class CCatServiceFactory {
            interface ICatServiceFactory;
        }

        class CDuration {
            constructor();

            constructor(
                [in] Int32 timeInterval,
                [in] IDurationTimeUnit timeUnit);

            interface IDuration;
            interface IParcelable;
        }

        class CInput {
            constructor();

            interface IInput;
            interface IParcelable;
        }

        class CItem {
            constructor();

            constructor(
                [in] Int32 id,
                [in] String text);

            constructor(
                [in] IParcel* parcel);

            interface IItem;
            interface IParcelable;
        }

        class CCatMenu {
            constructor();

            interface IMenu;
            interface IParcelable;
        }

        class CTextAttribute {
            constructor(
                [in] Int32 start,
                [in] Int32 length,
                [in] TextAlignment align,
                [in] FontSize size,
                [in] Boolean bold,
                [in] Boolean italic,
                [in] Boolean underlined,
                [in] Boolean strikeThrough,
                [in] TextColor color);

            interface ITextAttribute;
        }

        class CTextMessage {
            constructor();

            interface ITextMessage;
            interface IParcelable;
        }

        class CToneSettings {
            constructor();

            constructor(
                [in] IDuration* duration,
                [in] Tone tone,
                [in] Boolean vibrate);

            interface IToneSettings;
            interface IParcelable;
        }

    } // Cat
    } // Telephony
    } // Internal
    } // Droid
    } // Elastos
}
