//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.Graphics.IBitmap;

    namespace Elastos {
    namespace Droid {
    namespace Emoji {

    interface IEmojiFactory {
        GetName(
            [out] String* name);

        /**
         * Returns Bitmap object corresponding to the AndroidPua.
         *
         * Note that each Bitmap is cached by this class, which means that, if you modify a
         * Bitmap object (using setPos() method), all same emoji Bitmap will be modified.
         * If it is unacceptable, please copy the object before modifying it.
         *
         * @param pua A unicode codepoint.
         * @return Bitmap object when this factory knows the Bitmap relevant to the codepoint.
         * Otherwise null is returned.
         */
        GetBitmapFromAndroidPua(
            [in] Int32 pua,
            [out] IBitmap** bitmap);

        /**
         * Returns Bitmap object corresponding to the vendor specified  sjis.
         *
         * See comments in getBitmapFromAndroidPua().
         *
         * @param sjis sjis code specific to each career(vendor)
         * @return Bitmap object when this factory knows the Bitmap  relevant to the code. Otherwise
         * null is returned.
         */
        GetBitmapFromVendorSpecificSjis(
            [in] Char32 sjis,
            [out] IBitmap** bitmap);

        /**
         * Returns Bitmap object corresponding to the vendor specific  Unicode.
         *
         * See comments in getBitmapFromAndroidPua().
         *
         * @param vsp vendor specific PUA.
         * @return Bitmap object when this factory knows the Bitmap  relevant to the code. Otherwise
         * null is returned.
         */
       GetBitmapFromVendorSpecificPua(
           [in] Int32 vsp,
           [out] IBitmap** bitmap);

        /**
         * Returns Unicode PUA for Android corresponding to the vendor  specific sjis.
         *
         * @param sjis vendor specific sjis
         * @return Unicode PUA for Android, or -1 if there's no map for  the sjis.
         */
        GetAndroidPuaFromVendorSpecificSjis(
            [in] Char32 sjis,
            [out] Int32* pua);

        /**
         * Returns vendor specific sjis corresponding to the Unicode  AndroidPua.
         *
         * @param pua Unicode PUA for Android,
         * @return vendor specific sjis, or -1 if there's no map for the  AndroidPua.
         */
        GetVendorSpecificSjisFromAndroidPua(
            [in] Int32 pua,
            [out] Int32* sjis);

        /**
         * Returns Unicode PUA for Android corresponding to the vendor  specific Unicode.
         *
         * @param vsp vendor specific PUA.
         * @return Unicode PUA for Android, or -1 if there's no map for the
         * Unicode.
         */
        GetAndroidPuaFromVendorSpecificPua(
            [in] Int32 vsp,
            [out] Int32* pua);


        GetAndroidPuaFromVendorSpecificPua(
            [in] String vspString,
            [out] String* pua);

        /**
         * Returns vendor specific Unicode corresponding to the Unicode AndroidPua.
         *
         * @param pua Unicode PUA for Android,
         * @return vendor specific sjis, or -1 if there's no map for the AndroidPua.
         */
        GetVendorSpecificPuaFromAndroidPua(
            [in] Int32 pua,
            [out] Int32* vsp);

        GetVendorSpecificPuaFromAndroidPua(
            [in] String puaString,
            [out] String* vspString);

        /**
         * Returns the lowest code point corresponding to an Android
         * emoji character.
         */
        GetMinimumAndroidPua(
            [out] Int32* pua);

        /**
         * Returns the highest code point corresponding to an Android
         * emoji character.
         */
        GetMaximumAndroidPua(
            [out] Int32* pua);
    }

    interface IEmojiFactoryHelper {
        /**
         * Constructs an instance of EmojiFactory corresponding to the name.
         *
         * @param class_name Name of the factory. This must include complete package name.
         * @return A concrete EmojiFactory instance corresponding to factory_name.
         * If factory_name is invalid, null is returned.
         */
        NewInstance(
            [in] String class_name,
            [out] IEmojiFactory** EmojiFactory);

        /**
         * Constructs an instance of available EmojiFactory.
         *
         * @return A concrete EmojiFactory instance. If there are several available
         * EmojiFactory class, preferred one is chosen by the system. If there isn't, null
         * is returned.
         */
        NewAvailableInstance(
            [out] IEmojiFactory** EmojiFactory);
    }

    } // namespace Emoji
    } // namepsace Droid
    } // namespace Elastos

}
