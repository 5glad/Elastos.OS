
module
{
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.CodeAurora.Ims.Csvt.IICsvtServiceListener;

    namespace Elastos {
    namespace Droid {
    namespace CodeAurora {
    namespace Ims {
    namespace Csvt {

    interface IICsvtService {

        /**
         * Initiate a new CSVT connection. This happens asynchronously, so you
         * cannot assume the audio path is connected (or a call index has been
         * assigned) until PhoneStateChanged notification has occurred.
         */
        Dial(
            [in] String number);

        /**
         * Hang up the foreground call. Reject occurs asynchronously,
         * and final notification occurs via PhoneStateChanged callback.
         */
        Hangup();

        /**
         * Answers a ringing.
         * Answering occurs asynchronously, and final notification occurs via
         * PhoneStateChanged callback.
         */
        AcceptCall();

        /**
         * Reject (ignore) a ringing call. In GSM, this means UDUB
         * (User Determined User Busy). Reject occurs asynchronously,
         * and final notification occurs via  PhoneStateChanged callback.
         */
        RejectCall();

        /**
         * Reject (ignore) a ringing call and sends Incompatible Destination
         * fail cause to the remote party. Reject occurs asynchronously,
         * and final notification occurs via  PhoneStateChanged callback.
         */
        FallBack();

        /**
         * Checks if there is an active or ringing CSVT call.
         * @return true if there is an active or ringing CSVT call.
         */
        IsIdle(
            [out] Boolean* result);

        /**
        * Checks if there is an active Csvt call.
        * @return true if there is an active Csvt call.
        */
        IsActive(
            [out] Boolean* result);

        /**
         * Checks if all non-CSVT calls are idle.
         * @return true if all non-CSVT calls are idle.
         */
        IsNonCsvtIdle(
            [out] Boolean* result);

        /**
         * getCallForwardingOptions
         * Call Forwarding options are returned via
         * ICsvtServiceListener.onCallForwardingOptions callback.
         *
         * @param commandInterfaceCFReason is one of the valid call forwarding
         *        CF_REASONS, as defined in
         *        <code>com.android.internal.telephony.CommandsInterface.</code>
         * @param onComplete a callback message when the action is completed.
         *        onComplete.arg1 is set to zero (0) if the action is completed
         *        successfully.
         * @see   ICsvtServiceListener.onCallForwardingOptions
         */
        GetCallForwardingOption(
            [in] Int32 commandInterfaceCFReason,
            [in] IMessage* onComplete);

        /**
         * setCallForwardingOptions
         * sets a call forwarding option.
         *
         * @param commandInterfaceCFReason is one of the valid call forwarding
         *        CF_REASONS, as defined in
         *        <code>com.android.internal.telephony.CommandsInterface.</code>
         * @param commandInterfaceCFAction is one of the valid call forwarding
         *        CF_ACTIONS, as defined in
         *        <code>com.android.internal.telephony.CommandsInterface.</code>
         * @param dialingNumber is the target phone number to forward calls to
         * @param timerSeconds is used by CFNRy to indicate the timeout before
         *        forwarding is attempted.
         * @param onComplete a callback message when the action is completed.
         *        onComplete.arg1 is set to zero (0) if the action is completed
         *        successfully.
         */
        SetCallForwardingOption(
            [in] Int32 commandInterfaceCFReason,
            [in] Int32 commandInterfaceCFAction,
            [in] String dialingNumber,
            [in] Int32 timerSeconds,
            [in] IMessage* onComplete);
        /**
         * getCallWaiting
         * gets call waiting activation state. The call waiting activation state
         * is returned via ICsvtServiceListener.onCallWaiting callback.
         *
         * @param onComplete a callback message when the action is completed.
         *        onComplete.arg1 is set to zero (0) if the action completed
         *        successfully.
         * @see   ICsvtServiceListener.onCallWaiting
         */
        GetCallWaiting(
            [in] IMessage* onComplete);

        /**
         * setCallWaiting
         * sets a call forwarding option.
         *
         * @param enable is a boolean representing the state that you are
         *        requesting, true for enabled, false for disabled.
         * @param onComplete a callback message when the action is completed.
         *        onComplete.arg1 is set to zero (0) if the action is completed
         *        successfully.
         */
        SetCallWaiting(
            [in] Boolean enbl,
            [in] IMessage* msg);

        RegisterListener(
            [in] IICsvtServiceListener* l);

        UnregisterListener(
            [in] IICsvtServiceListener* l);
    }

    }//Csvt
    }//Ims
    }//CodeAurora
    }//Droid
    }//Elastos

}
