//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.View.IWindowIdFocusObserver;
    interface Elastos.Droid.View.IIWindowId;

    namespace Elastos {
    namespace Droid {
    namespace View {

    /**
     * Safe identifier for a window.  This currently allows you to retrieve and observe
     * the input focus state of the window.  Most applications will
     * not use this, instead relying on the simpler (and more efficient) methods available
     * on {@link View}.  This classes is useful when window input interactions need to be
     * done across processes: the class itself is a Parcelable that can be passed to other
     * processes for them to interact with your window, and it provides a limited safe API
     * that doesn't allow the other process to negatively harm your window.
     */
    /**
     * @Involve
     * interface IParcelable
     */
    interface IWindowId {
        /**
         * Retrieve the current focus state of the associated window.
         */
        IsFocused(
            [out] Boolean* result);

        /**
         * Start monitoring for changes in the focus state of the window.
         */
        RegisterFocusObserver(
            [in] IWindowIdFocusObserver* observer);

        /**
         * Stop monitoring changes in the focus state of the window.
         */
        UnregisterFocusObserver(
            [in] IWindowIdFocusObserver* observer);

        /** @hide */
        GetTarget(
            [out] IIWindowId** id);
    }

    /**
     * Subclass for observing changes to the focus state of an {@link WindowId}.
     * You should use the same instance of this class for observing multiple
     * {@link WindowId} objects, since this class is fairly heavy-weight -- the
     * base class includes all of the mechanisms for connecting to and receiving updates
     * from the window.
     */
    interface IWindowIdFocusObserver {

        /**
         * Called when one of the monitored windows gains input focus.
         */
        OnFocusGained(
            [in] IWindowId* token);

        /**
         * Called when one of the monitored windows loses input focus.
         */
        OnFocusLost(
            [in] IWindowId* token);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
