
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Utils {

    /**
     * Super type token; allows capturing generic types at runtime by forcing them to be reified.
     *
     * <p>Usage example: <pre>{@code
     *      // using anonymous classes (preferred)
     *      TypeReference&lt;Integer> intToken = new TypeReference&lt;Integer>() {{ }};
     *
     *      // using named classes
     *      class IntTypeReference extends TypeReference&lt;Integer> {...}
     *      TypeReference&lt;Integer> intToken = new IntTypeReference();
     * }</p></pre>
     *
     * <p>Unlike the reference implementation, this bans nested TypeVariables; that is all
     * dynamic types must equal to the static types.</p>
     *
     * <p>See <a href="http://gafter.blogspot.com/2007/05/limitation-of-super-type-tokens.html">
     * http://gafter.blogspot.com/2007/05/limitation-of-super-type-tokens.html</a>
     * for more details.</p>
     */
    [local]
    interface ITypeReference {
        /**
         * Return the dynamic {@link Type} corresponding to the captured type {@code T}.
         */
        GetClassType(
            [out] ClassID* clsID);

        GetInterfaceType(
            [out] InterfaceID* interfaceID);

        /**
         * Get the component type, e.g. {@code T} from {@code T[]}.
         *
         * @return component type, or {@code null} if {@code T} is not an array
         */
        GetComponent(
            [out] ITypeReference** clsID);
    }

    [local]
    interface ITypeReferenceHelper {
        /**
         * Create a specialized type reference from a dynamic class instance,
         * bypassing the standard compile-time checks.
         *
         * <p>As with a regular type reference, the {@code klass} must not contain
         * any type variables.</p>
         *
         * @param klass a non-{@code null} {@link Class} instance
         *
         * @return a type reference which captures {@code T} at runtime
         *
         * @throws IllegalArgumentException if {@code T} had any type variables
         */
        CreateSpecializedTypeReference(
            [in] ClassID classId,
            [in] InterfaceID interfaceId,
            [out] ITypeReference** reference);
    }

    } // namespace Utils
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
