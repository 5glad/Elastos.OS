//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Widget {

    /**
     * @Involve
     * interface ILinearLayoutLayoutParams
     */
    interface ITableLayoutLayoutParams {
    }

    /**
     * @Involve
     * extends Elastos.Droid.View.IView
     * extends Elastos.Droid.View.IViewGroup
     * extends Elastos.Droid.View.ILinearLayout
     *
     * interface Elastos.Droid.View.IViewParent
     * interface Elastos.Droid.View.IViewManager
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     */
    interface ITableLayout {
        /**
         * <p>Indicates whether all columns are shrinkable or not.</p>
         *
         * @return true if all columns are shrinkable, false otherwise
         */
        IsShrinkAllColumns(
            [out] Boolean* shrinkAllColumns);

        /**
         * <p>Convenience method to mark all columns as shrinkable.</p>
         *
         * @param shrinkAllColumns true to mark all columns shrinkable
         *
         * @attr ref android.R.styleable#TableLayout_shrinkColumns
         */
        SetShrinkAllColumns(
            [in] Boolean shrinkAllColumns);

        /**
         * <p>Indicates whether all columns are stretchable or not.</p>
         *
         * @return true if all columns are stretchable, false otherwise
         */
        IsStretchAllColumns(
            [out] Boolean* stretchAllColumns);

        /**
         * <p>Convenience method to mark all columns as stretchable.</p>
         *
         * @param stretchAllColumns true to mark all columns stretchable
         *
         * @attr ref android.R.styleable#TableLayout_stretchColumns
         */
        SetStretchAllColumns(
            [in] Boolean stretchAllColumns);

        /**
         * <p>Collapses or restores a given column. When collapsed, a column
         * does not appear on screen and the extra space is reclaimed by the
         * other columns. A column is collapsed/restored only when it belongs to
         * a {@link android.widget.TableRow}.</p>
         *
         * <p>Calling this method requests a layout operation.</p>
         *
         * @param columnIndex the index of the column
         * @param isCollapsed true if the column must be collapsed, false otherwise
         *
         * @attr ref android.R.styleable#TableLayout_collapseColumns
         */
        SetColumnCollapsed(
            [in] Int32 columnIndex,
            [in] Boolean isCollapsed);

        /**
         * <p>Returns the collapsed state of the specified column.</p>
         *
         * @param columnIndex the index of the column
         * @return true if the column is collapsed, false otherwise
         */
        IsColumnCollapsed(
            [in] Int32 columnIndex,
            [out] Boolean* isCollapsed);

        /**
         * <p>Makes the given column stretchable or not. When stretchable, a column
         * takes up as much as available space as possible in its row.</p>
         *
         * <p>Calling this method requests a layout operation.</p>
         *
         * @param columnIndex the index of the column
         * @param isStretchable true if the column must be stretchable,
         *                      false otherwise. Default is false.
         *
         * @attr ref android.R.styleable#TableLayout_stretchColumns
         */
        SetColumnStretchable(
            [in] Int32 columnIndex,
            [in] Boolean isStretchable);

        /**
         * <p>Returns whether the specified column is stretchable or not.</p>
         *
         * @param columnIndex the index of the column
         * @return true if the column is stretchable, false otherwise
         */
        IsColumnStretchable(
            [in] Int32 columnIndex,
            [out] Boolean* isStretchable);

        /**
         * <p>Makes the given column shrinkable or not. When a row is too wide, the
         * table can reclaim extra space from shrinkable columns.</p>
         *
         * <p>Calling this method requests a layout operation.</p>
         *
         * @param columnIndex the index of the column
         * @param isShrinkable true if the column must be shrinkable,
         *                     false otherwise. Default is false.
         *
         * @attr ref android.R.styleable#TableLayout_shrinkColumns
         */
        SetColumnShrinkable(
            [in] Int32 columnIndex,
            [in] Boolean isShrinkable);

        /**
         * <p>Returns whether the specified column is shrinkable or not.</p>
         *
         * @param columnIndex the index of the column
         * @return true if the column is shrinkable, false otherwise. Default is false.
         */
        IsColumnShrinkable(
            [in] Int32 columnIndex,
            [out] Boolean* isShrinkable);
    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}
