//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {

    /** {@hide} */
    [deprecated]
    interface ICmHardwareManager {
        /**
         * Adaptive backlight support (this refers to technologies like NVIDIA SmartDimmer,
         * QCOM CABL or Samsung CABC)
         */
        const Int32 FEATURE_ADAPTIVE_BACKLIGHT = 0x1;

        /**
         * Color enhancement support
         */
        const Int32 FEATURE_COLOR_ENHANCEMENT = 0x2;

        /**
         * Display RGB color calibration
         */
        const Int32 FEATURE_DISPLAY_COLOR_CALIBRATION = 0x4;

        /**
         * Display gamma calibration
         */
        const Int32 FEATURE_DISPLAY_GAMMA_CALIBRATION = 0x8;

        /**
         * High touch sensitivity for touch panels
         */
        const Int32 FEATURE_HIGH_TOUCH_SENSITIVITY = 0x10;

        /**
         * Hardware navigation key disablement
         */
        const Int32 FEATURE_KEY_DISABLE = 0x20;

        /**
         * Long term orbits (LTO)
         */
        const Int32 FEATURE_LONG_TERM_ORBITS = 0x40;

        /**
         * Serial number other than ro.serialno
         */
        const Int32 FEATURE_SERIAL_NUMBER = 0x80;

        /**
         * Increased display readability in bright light
         */
        const Int32 FEATURE_SUNLIGHT_ENHANCEMENT = 0x100;

        /**
         * Double-tap the touch panel to wake up the device
         */
        const Int32 FEATURE_TAP_TO_WAKE = 0x200;

        /**
         * Variable vibrator intensity
         */
        const Int32 FEATURE_VIBRATOR = 0x400;

        /**
         * Touchscreen hovering
         */
        const Int32 FEATURE_TOUCH_HOVERING = 0x800;

        /**
         * {@hide}
         */
        const Int32 VIBRATOR_INTENSITY_INDEX = 0;
        /**
         * {@hide}
         */
        const Int32 VIBRATOR_DEFAULT_INDEX = 1;
        /**
         * {@hide}
         */
        const Int32 VIBRATOR_MIN_INDEX = 2;
        /**
         * {@hide}
         */
        const Int32 VIBRATOR_MAX_INDEX = 3;
        /**
         * {@hide}
         */
        const Int32 VIBRATOR_WARNING_INDEX = 4;

        /**
         * {@hide}
         */
        const Int32 COLOR_CALIBRATION_RED_INDEX = 0;
        /**
         * {@hide}
         */
        const Int32 COLOR_CALIBRATION_GREEN_INDEX = 1;
        /**
         * {@hide}
         */
        const Int32 COLOR_CALIBRATION_BLUE_INDEX = 2;
        /**
         * {@hide}
         */
        const Int32 COLOR_CALIBRATION_DEFAULT_INDEX = 3;
        /**
         * {@hide}
         */
        const Int32 COLOR_CALIBRATION_MIN_INDEX = 4;
        /**
         * {@hide}
         */
        const Int32 COLOR_CALIBRATION_MAX_INDEX = 5;

        /**
         * {@hide}
         */
        const Int32 GAMMA_CALIBRATION_RED_INDEX = 0;
        /**
         * {@hide}
         */
        const Int32 GAMMA_CALIBRATION_GREEN_INDEX = 1;
        /**
         * {@hide}
         */
        const Int32 GAMMA_CALIBRATION_BLUE_INDEX = 2;
        /**
         * {@hide}
         */
        const Int32 GAMMA_CALIBRATION_MIN_INDEX = 3;
        /**
         * {@hide}
         */
        const Int32 GAMMA_CALIBRATION_MAX_INDEX = 4;

        /**
         * @return the supported features bitmask
         */
        GetSupportedFeatures(
            [out] Int32* result);

        /**
         * Determine if a CM Hardware feature is supported on this device
         *
         * @param feature The CM Hardware feature to query
         *
         * @return true if the feature is supported, false otherwise.
         */
        IsSupported(
            [in] Int32 feature,
            [out] Boolean* result);

        /**
         * Determine if the given feature is enabled or disabled.
         *
         * Only used for features which have simple enable/disable controls.
         *
         * @param feature the CM Hardware feature to query
         *
         * @return true if the feature is enabled, false otherwise.
         */
        Get(
            [in] Int32 feature,
            [out] Boolean* result);

        /**
         * Enable or disable the given feature
         *
         * Only used for features which have simple enable/disable controls.
         *
         * @param feature the CM Hardware feature to set
         * @param enable true to enable, false to disale
         *
         * @return true if the feature is enabled, false otherwise.
         */
        Set(
            [in] Int32 feature,
            [in] Boolean enabled,
            [out] Boolean* result);


        /**
         * @return The current vibrator intensity.
         */
        GetVibratorIntensity(
            [out] Int32* result);

        /**
         * @return The default vibrator intensity.
         */
        GetVibratorDefaultIntensity(
            [out] Int32* result);

        /**
         * @return The minimum vibrator intensity.
         */
        GetVibratorMinIntensity(
            [out] Int32* result);

        /**
         * @return The maximum vibrator intensity.
         */
        GetVibratorMaxIntensity(
            [out] Int32* result);

        /**
         * @return The warning threshold vibrator intensity.
         */
        GetVibratorWarningIntensity(
            [out] Int32* result);

        /**
         * Set the current vibrator intensity
         *
         * @param intensity the intensity to set, between {@link #getVibratorMinIntensity()} and
         * {@link #getVibratorMaxIntensity()} inclusive.
         *
         * @return true on success, false otherwise.
         */
        SetVibratorIntensity(
            [in] Int32 intensity,
            [out] Boolean* result);

        /**
         * @return the current RGB calibration, where Int32[0] = R, Int32[1] = G, Int32[2] = B.
         */
        GetDisplayColorCalibration(
            [out, callee] ArrayOf<Int32>* result);

        /**
         * @return the default value for all colors
         */
        GetDisplayColorCalibrationDefault(
            [out] Int32* result);

        /**
         * @return The minimum value for all colors
         */
        GetDisplayColorCalibrationMin(
            [out] Int32* result);

        /**
         * @return The minimum value for all colors
         */
        GetDisplayColorCalibrationMax(
            [out] Int32* result);

        /**
         * Set the display color calibration to the given rgb triplet
         *
         * @param rgb RGB color calibration.  Each value must be between
         * {@link getDisplayColorCalibrationMin()} and {@link getDisplayColorCalibrationMax()},
         * inclusive.
         *
         * @return true on success, false otherwise.
         */
        SetDisplayColorCalibration(
            [in] ArrayOf<Int32>* rgb,
            [out] Boolean* result);

        /**
         * @return the number of RGB controls the device supports
         */
        GetNumGammaControls(
            [out] Int32* result);

        /**
         * @param the control to query
         *
         * @return the current RGB gamma calibration for the given control
         */
        GetDisplayGammaCalibration(
            [in] Int32 idx,
            [out, callee] ArrayOf<Int32>* result);

        /**
         * @return the minimum value for all colors
         */
        GetDisplayGammaCalibrationMin(
            [out] Int32* result);

        /**
         * @return the maximum value for all colors
         */
        GetDisplayGammaCalibrationMax(
            [out] Int32* result);

        /**
         * Set the display gamma calibration for a specific control
         *
         * @param idx the control to set
         * @param rgb RGB color calibration.  Each value must be between
         * {@link getDisplayGammaCalibrationMin()} and {@link getDisplayGammaCalibrationMax()},
         * inclusive.
         *
         * @return true on success, false otherwise.
         */
        SetDisplayGammaCalibration(
            [in] Int32 idx,
            [in] ArrayOf<Int32>* rgb,
            [out] Boolean* result);

        /**
         * @return the source location of LTO data, or null on failure
         */
        GetLtoSource(
            [out] String* result);

        /**
         * @return the destination location of LTO data, or null on failure
         */
        GetLtoDestination(
            [out] String* result);

        /**
         * @return the interval, in milliseconds, to trigger LTO data download
         */
        GetLtoDownloadInterval(
            [out] Int64* result);

        /**
         * @return the serial number to display instead of ro.serialno, or null on failure
         */
        GetSerialNumber(
            [out] String* result);

        /**
         * @return true if adaptive backlight should be enabled when sunlight enhancement
         * is enabled.
         */
        RequireAdaptiveBacklightForSunlightEnhancement(
            [out] Boolean* result);
    }

    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
