module
{

    using interface Elastos.Droid.Graphics.Drawable.IDrawable;
    using interface Elastos.Droid.View.IView;
    using interface Elastos.Droid.View.IKeyEvent;

    interface Elastos.Droid.Support.V4.View.IPagerAdapter;

    namespace Elastos {
    namespace Droid {
    namespace Support {
    namespace V4 {
    namespace View {

    /**
     * Callback interface for responding to changing state of the selected page.
     */
    interface IViewPagerOnPageChangeListener {

        /**
         * This method will be invoked when the current page is scrolled, either as part
         * of a programmatically initiated smooth scroll or a user initiated touch scroll.
         *
         * @param position Position index of the first page currently being displayed.
         *                 Page position+1 will be visible if positionOffset is nonzero.
         * @param positionOffset Value from [0, 1) indicating the offset from the page at position.
         * @param positionOffsetPixels Value in pixels indicating the offset from position.
         */
        OnPageScrolled(
            [in] Int32 position,
            [in] Float positionOffset,
            [in] Int32 positionOffsetPixels);

        /**
         * This method will be invoked when a new page becomes selected. Animation is not
         * necessarily complete.
         *
         * @param position Position index of the new selected page.
         */
        OnPageSelected(
            [in] Int32 position);

        /**
         * Called when the scroll state changes. Useful for discovering when the user
         * begins dragging, when the pager is automatically settling to the current page,
         * or when it is fully stopped/idle.
         *
         * @param state The new scroll state.
         * @see ViewPager#SCROLL_STATE_IDLE
         * @see ViewPager#SCROLL_STATE_DRAGGING
         * @see ViewPager#SCROLL_STATE_SETTLING
         */
        OnPageScrollStateChanged(
            [in] Int32 state);
    }

    /**
     * A PageTransformer is invoked whenever a visible/attached page is scrolled.
     * This offers an opportunity for the application to apply a custom transformation
     * to the page views using animation properties.
     *
     * <p>As property animation is only supported as of Android 3.0 and forward,
     * setting a PageTransformer on a ViewPager on earlier platform versions will
     * be ignored.</p>
     */
    [local]
    interface IViewPagerPageTransformer {
        /**
         * Apply a property transformation to the given page.
         *
         * @param page Apply the transformation to this page
         * @param position Position of page relative to the current front-and-center
         *                 position of the pager. 0 is front and center. 1 is one full
         *                 page position to the right, and -1 is one page position to the left.
         */
        TransformPage(
            [in] IView* page,
            [in] Float position);
    }

    /**
     * Used internally to monitor when adapters are switched.
     */
    [local]
    interface IViewPagerOnAdapterChangeListener {
        OnAdapterChanged(
            [in] IPagerAdapter* oldAdapter,
            [in] IPagerAdapter* newAdapter);
    }

    /**
     * Used internally to tag special types of child views that should be added as
     * pager decorations by default.
     */
    interface IViewPagerDecor {
    }

    /**
     * @Involve
     * interface Elastos.Droid.View.IViewBaseSavedState
     * interface Elastos.Droid.View.IAbsSavedState
     * interface IParcelable
     */
    interface IViewPagerSavedState {
    }

    /**
     * @Involve
     * interface Elastos.Droid.View.IViewGroupLayoutParams
     */
     interface IViewPagerLayoutParams {
     }

    /**
     * Layout manager that allows the user to flip left and right
     * through pages of data.  You supply an implementation of a
     * {@link PagerAdapter} to generate the pages that the view shows.
     *
     * <p>Note this class is currently under early design and
     * development.  The API will likely change in later updates of
     * the compatibility library, requiring changes to the source code
     * of apps when they are compiled against the newer version.</p>
     *
     * <p>ViewPager is most often used in conjunction with {@link android.app.Fragment},
     * which is a convenient way to supply and manage the lifecycle of each page.
     * There are standard adapters implemented for using fragments with the ViewPager,
     * which cover the most common use cases.  These are
     * {@link android.support.v4.app.FragmentPagerAdapter} and
     * {@link android.support.v4.app.FragmentStatePagerAdapter}; each of these
     * classes have simple code showing how to build a full user interface
     * with them.
     *
     * <p>For more information about how to use ViewPager, read <a
     * href="{@docRoot}training/implementing-navigation/lateral.html">Creating Swipe Views with
     * Tabs</a>.</p>
     *
     * <p>Below is a more complicated example of ViewPager, using it in conjunction
     * with {@link android.app.ActionBar} tabs.  You can find other examples of using
     * ViewPager in the API 4+ Support Demos and API 13+ Support Demos sample code.
     *
     * {@sample development/samples/Support13Demos/src/com/example/android/supportv13/app/ActionBarTabsPager.java
     *      complete}
     */
    /**
     * @Involve
     * interface IView;
     * interface IDrawableCallback;
     * interface IKeyEventCallback;
     * interface IAccessibilityEventSource;
     * interface IViewParent;
     * interface IViewManager;
     * interface IViewGroup;
     */
    [local]
    interface IViewPager {

        /**
         * Indicates that the pager is in an idle, settled state. The current page
         * is fully in view and no animation is in progress.
         */
        const Int32 SCROLL_STATE_IDLE = 0;

        /**
         * Indicates that the pager is currently being dragged by the user.
         */
        const Int32 SCROLL_STATE_DRAGGING = 1;

        /**
         * Indicates that the pager is in the process of settling to a final position.
         */
        const Int32 SCROLL_STATE_SETTLING = 2;

        /**
         * Set a PagerAdapter that will supply views for this pager as needed.
         *
         * @param adapter Adapter to use
         */
        SetAdapter(
            [in] IPagerAdapter* adapter);

        /**
         * Retrieve the current adapter supplying pages.
         *
         * @return The currently registered PagerAdapter
         */
        GetAdapter(
            [out] IPagerAdapter** adapter);

        /**
         * Set the currently selected page. If the ViewPager has already been through its first
         * layout with its current adapter there will be a smooth animated transition between
         * the current item and the specified item.
         *
         * @param item Item index to select
         */
        SetCurrentItem(
            [in] Int32 item);

        /**
         * Set the currently selected page.
         *
         * @param item Item index to select
         * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately
         */
        SetCurrentItem(
            [in] Int32 item,
            [in] Boolean smoothScroll);

        GetCurrentItem(
            [out] Int32* item);

        /**
         * Set a listener that will be invoked whenever the page changes or is incrementally
         * scrolled. See {@link OnPageChangeListener}.
         *
         * @param listener Listener to set
         */
        SetOnPageChangeListener(
            [in] IViewPagerOnPageChangeListener* listener);

        /**
         * Set a {@link PageTransformer} that will be called for each attached page whenever
         * the scroll position is changed. This allows the application to apply custom property
         * transformations to each page, overriding the default sliding look and feel.
         *
         * <p><em>Note:</em> Prior to Android 3.0 the property animation APIs did not exist.
         * As a result, setting a PageTransformer prior to Android 3.0 (API 11) will have no effect.</p>
         *
         * @param reverseDrawingOrder true if the supplied PageTransformer requires page views
         *                            to be drawn from last to first instead of first to last.
         * @param transformer PageTransformer that will modify each page's animation properties
         */
        SetPageTransformer(
            [in] Boolean reverseDrawingOrder,
            [in] IViewPagerPageTransformer* transformer);

        /**
         * Returns the number of pages that will be retained to either side of the
         * current page in the view hierarchy in an idle state. Defaults to 1.
         *
         * @return How many pages will be kept offscreen on either side
         * @see #setOffscreenPageLimit(int)
         */
        GetOffscreenPageLimit(
            [out] Int32* value);

        /**
         * Set the number of pages that should be retained to either side of the
         * current page in the view hierarchy in an idle state. Pages beyond this
         * limit will be recreated from the adapter when needed.
         *
         * <p>This is offered as an optimization. If you know in advance the number
         * of pages you will need to support or have lazy-loading mechanisms in place
         * on your pages, tweaking this setting can have benefits in perceived smoothness
         * of paging animations and interaction. If you have a small number of pages (3-4)
         * that you can keep active all at once, less time will be spent in layout for
         * newly created view subtrees as the user pages back and forth.</p>
         *
         * <p>You should keep this limit low, especially if your pages have complex layouts.
         * This setting defaults to 1.</p>
         *
         * @param limit How many pages will be kept offscreen in an idle state.
         */
        SetOffscreenPageLimit(
            [in] Int32 limit);

        /**
         * Set the margin between pages.
         *
         * @param marginPixels Distance between adjacent pages in pixels
         * @see #getPageMargin()
         * @see #setPageMarginDrawable(Drawable)
         * @see #setPageMarginDrawable(int)
         */
        SetPageMargin(
            [in] Int32 marginPixels);

        /**
         * Return the margin between pages.
         *
         * @return The size of the margin in pixels
         */
        GetPageMargin(
            [out] Int32* margin);

        /**
         * Set a drawable that will be used to fill the margin between pages.
         *
         * @param d Drawable to display between pages
         */
        SetPageMarginDrawable(
            [in] IDrawable* d);

        /**
         * Set a drawable that will be used to fill the margin between pages.
         *
         * @param resId Resource ID of a drawable to display between pages
         */
        SetPageMarginDrawable(
            [in] Int32 resId);

        /**
         * This method will be invoked when the current page is scrolled, either as part
         * of a programmatically initiated smooth scroll or a user initiated touch scroll.
         * If you override this method you must call through to the superclass implementation
         * (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled
         * returns.
         *
         * @param position Position index of the first page currently being displayed.
         *                 Page position+1 will be visible if positionOffset is nonzero.
         * @param offset Value from [0, 1) indicating the offset from the page at position.
         * @param offsetPixels Value in pixels indicating the offset from position.
         */
        OnPageScrolled(
            [in] Int32 position,
            [in] Float offset,
            [in] Int32 offsetPixels);

        /**
         * Start a fake drag of the pager.
         *
         * <p>A fake drag can be useful if you want to synchronize the motion of the ViewPager
         * with the touch scrolling of another view, while still letting the ViewPager
         * control the snapping motion and fling behavior. (e.g. parallax-scrolling tabs.)
         * Call {@link #fakeDragBy(float)} to simulate the actual drag motion. Call
         * {@link #endFakeDrag()} to complete the fake drag and fling as necessary.
         *
         * <p>During a fake drag the ViewPager will ignore all touch events. If a real drag
         * is already in progress, this method will return false.
         *
         * @return true if the fake drag began successfully, false if it could not be started.
         *
         * @see #fakeDragBy(float)
         * @see #endFakeDrag()
         */
        BeginFakeDrag(
            [out] Boolean* result);

        /**
         * End a fake drag of the pager.
         *
         * @see #beginFakeDrag()
         * @see #fakeDragBy(float)
         */
        EndFakeDrag();

        /**
         * Fake drag by an offset in pixels. You must have called {@link #beginFakeDrag()} first.
         *
         * @param xOffset Offset in pixels to drag by.
         * @see #beginFakeDrag()
         * @see #endFakeDrag()
         */
        FakeDragBy(
            [in] Float xOffset);

        /**
         * Returns true if a fake drag is in progress.
         *
         * @return true if currently in a fake drag, false otherwise.
         *
         * @see #beginFakeDrag()
         * @see #fakeDragBy(float)
         * @see #endFakeDrag()
         */
        IsFakeDragging(
            [out] Boolean* result);

        CanScrollHorizontally(
            [in] Int32 direction,
            [out] Boolean* canScroll);

        /**
         * Tests scrollability within child views of v given a delta of dx.
         *
         * @param v View to test for horizontal scrollability
         * @param checkV Whether the view v passed should itself be checked for scrollability (true),
         *               or just its children (false).
         * @param dx Delta scrolled in pixels
         * @param x X coordinate of the active touch point
         * @param y Y coordinate of the active touch point
         * @return true if child views of v can be scrolled by delta of dx.
         */
        CanScroll(
            [in] IView* v,
            [in] Boolean checkV,
            [in] Int32 dx,
            [in] Int32 x,
            [in] Int32 y,
            [out] Boolean* canScroll);

        /**
         * You can call this function yourself to have the scroll view perform
         * scrolling from a key event, just as if the event had been dispatched to
         * it by the view hierarchy.
         *
         * @param event The key event to execute.
         * @return Return true if the event was handled, else false.
         */
        ExecuteKeyEvent(
            [in] IKeyEvent* event,
            [out] Boolean* result);

        ArrowScroll(
            [in] Int32 direction,
            [out] Boolean* result);
    }

    } // namespace View
    } // namespace V4
    } // namespace Support
    } // namespace Droid
    } // namespace Elastos
}