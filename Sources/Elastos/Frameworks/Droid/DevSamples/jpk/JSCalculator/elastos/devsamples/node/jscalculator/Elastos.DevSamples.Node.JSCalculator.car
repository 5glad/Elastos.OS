module
{
    importlib("Org.Javia.Arity.eco");
    importlib("Elastos.Droid.Core.eco");

    //merge("../../../../../../../../../Frameworks/Droid/Support/V4/Elastos.Droid.Support.V4.car");

    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IBundle;

    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;

    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IContextMenu;
    interface Elastos.Droid.View.IContextMenuInfo;

    using interface Elastos.Droid.App.IActivity;
    using interface Elastos.Droid.Content.IContextWrapper;
    using interface Elastos.Droid.Content.IComponentCallbacks;
    using interface Elastos.Droid.Content.IComponentCallbacks2;
    using interface Elastos.Droid.View.IContextThemeWrapper;
    using interface Elastos.Droid.View.ILayoutInflaterFactory;
    using interface Elastos.Droid.View.ILayoutInflaterFactory2;
    using interface Elastos.Droid.View.IWindowCallback;
    using interface Elastos.Droid.View.IKeyEventCallback;
    using interface Elastos.Droid.View.IViewOnCreateContextMenuListener;
    using interface Elastos.Droid.View.IOnWindowDismissedCallback;

    using interface Elastos.Droid.Widget.ITextView;
    using interface Elastos.Droid.Utility.IAttributeSet;
    using interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource;
    using interface Elastos.Droid.Graphics.Drawable.IDrawableCallback;
    using interface Elastos.Droid.View.IOnPreDrawListener;
    using interface Elastos.Droid.Widget.IEditText;

    using interface Elastos.Droid.View.IMotionEvent;
    using interface Elastos.Core.ICharSequence;

    using interface Elastos.Droid.View.IViewGroup;
    using interface Elastos.Droid.View.IViewManager;
    using interface Elastos.Droid.View.IViewParent;

    using interface Elastos.Droid.View.IViewGroupLayoutParams;
    using interface Elastos.Droid.Graphics.Drawable.IDrawable;
    using interface Elastos.Droid.Graphics.ICanvas;
    using interface Elastos.Droid.View.IKeyEvent;
    using interface Elastos.Utility.IArrayList;
    using interface Elastos.Droid.Graphics.IRect;
    using interface Elastos.Droid.View.Accessibility.IAccessibilityEvent;
    using interface Elastos.Droid.View.IViewGroupLayoutParams;

    namespace Elastos {
    namespace DevSamples {
    namespace Node {
    namespace JSCalculator {

    [deprecated]
    interface IMessageListener {
        OnHandleMessage(
            [in] IContext* ctx,
            [in] IMessage* msg);
    }

    [deprecated]
    interface IActivityListener {
        OnCreate(
            [in] IContext* ctx,
            [in] IBundle* savedInstanceState);
        OnStart(
            [in] IContext* context);
        OnResume(
            [in] IContext* context);
        OnPause(
            [in] IContext* context);
        OnStop(
            [in] IContext* context);
        OnDestroy(
            [in] IContext* context);

        OnBackPressed(
            [in] IContext* context);

        OnNewIntent(
            [in] IContext* ctx,
            [in] IIntent *intent);

        OnCreateDialog(
            [in] IContext* ctx,
            [in] Int32 id,
            [out] IInterface** dlg);

        OnActivityResult(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] Int32 resultCode,
            [in] IIntent *data);

        OnCreateContextMenu(
            [in] IContext* ctx,
            [in] IContextMenu* menu,
            [in] IView* v,
            [in] IContextMenuInfo* menuInfo);
    }

    interface ICalculatorEditTextListener;
    interface ICalculatorPadLayoutListener;
    interface ICalculatorPadViewPagerListener;

    [deprecated]
    interface INodeBridgeListener {
        OnRegisterActivity(
            [in] String packageName,
            [in] String activityName,
            [in] IInterface* activityInstance,
            [in] Int32 activityListener,    //IActivityListener**
            [in] IHandler* activityHandler,
            [out] Boolean* result);

        OnRegisterCalculatorEditText(
            [in] IContext* context,
            [in] IInterface* control,
            [in] Int32 listener, //ICalculatorEditTextListener**
            [out] Boolean* result);

        OnRegisterCalculatorPadLayout(
            [in] IContext* context,
            [in] IInterface* control,
            [in] Int32 listener, //ICalculatorPadLayoutListener**
            [out] Boolean* result);

        OnRegisterCalculatorPadViewPager(
            [in] IContext* context,
            [in] IInterface* control,
            [in] Int32 listener, //ICalculatorPadViewPagerListener**
            [out] Boolean* result);
    }

    [deprecated]
    interface INodeListener {
        OnNodeEvent(
            [in] Int32 eventId);

        GetEnqueueUIMessagePtr(
            [out] Int32* outPtr);

        Sleep(
            [in] Int32 interval);

        Lock();

        Unlock();

        SetActivityListener(
            [in] Int32 activityListener,    //IActivityListener**
            [in] IActivityListener* jsActivityListener);

        SetCalculatorEditTextListener(
            [in] Int32 calculatorEditTextListener,    //ICalculatorEditTextListener**
            [in] ICalculatorEditTextListener* jsCalculatorEditTextListener);

        SetCalculatorPadLayoutListener(
            [in] Int32 calculatorPadLayoutListener,    //ICalculatorPadLayoutListener**
            [in] ICalculatorPadLayoutListener* jsCalculatorPadLayoutListener);

        SetCalculatorPadViewPagerListener(
            [in] Int32 calculatorPadViewPagerListener,    //ICalculatorPadViewPagerListener**
            [in] ICalculatorPadViewPagerListener* jsCalculatorPadViewPagerListener);

        SetNodeBridgeListener(
            [in] INodeBridgeListener* nodeBridgeListener);

        SetNodeBridge(
            [in] Int32 from,
            [in] Int32 threadIndex);
    }

    [local]
    interface ICallbackRunnable {
        GetInstance(
            [out] IInterface** instance);
    }

    [local]
    interface IActivityOne {
        OnClickPopupWindow(
            [in] IView* v);
    }

    [local]
    interface IOnTextSizeChangeListener
    {
        OnTextSizeChanged(
            [in] ITextView* textView,
            [in] Float oldSize);
    }

    [local]
    interface ICalculatorEditTextSuperObject
    {
        SetTextSize(
            [in] Int32 unit,
            [in] Float size);
    }

    [local]
    interface ICalculatorEditText
    {
        GetSuperObject(
            [out] ICalculatorEditTextSuperObject** superObject);

        _constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        _OnTouchEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        _OnSaveInstanceState(
            [out] IParcelable** result);

        _SetTextSize(
            [in] Int32 unit,
            [in] Float size);

        _GetCompoundPaddingTop(
            [out] Int32* result);

        _GetCompoundPaddingBottom(
            [out] Int32* result);

        _OnMeasure(
            [in] Int32 widthMeasureSpec,
            [in] Int32 heightMeasureSpec);

        _OnTextChanged(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 lengthBefore,
            [in] Int32 lengthAfter);
    }

    [local]
    interface ICalculatorEditTextListener
    {
        OnCreate(   //constructor
            [in] IInterface* _this,
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        OnTouchEvent(
            [in] IInterface* _this,
            [in] IMotionEvent* event,
            [out] Boolean* result);

        OnSaveInstanceState(
            [in] IInterface* _this,
            [out] IParcelable** result);

        SetTextSize(
            [in] IInterface* _this,
            [in] Int32 unit,
            [in] Float size);

        GetCompoundPaddingTop(
            [in] IInterface* _this,
            [out] Int32* result);

        GetCompoundPaddingBottom(
            [in] IInterface* _this,
            [out] Int32* result);

        OnMeasure(
            [in] IInterface* _this,
            [in] Int32 widthMeasureSpec,
            [in] Int32 heightMeasureSpec);

        OnTextChanged(
            [in] IInterface* _this,
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 lengthBefore,
            [in] Int32 lengthAfter);
    }

    [local]
    interface ICalculatorPadLayoutSuperObject
    {
        Test();
    }

    [local]
    interface ICalculatorPadLayout
    {
        GetSuperObject(
            [out] ICalculatorPadLayoutSuperObject** superObject);

        _constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        //public
        _ShouldDelayChildPressedState(
            [out] Boolean* result);
        //protected
        _OnLayout(
            [in] Boolean changed,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);
        //public
        _GenerateLayoutParams(
            [in] IAttributeSet* attrs,
            [out] IViewGroupLayoutParams** result);
        //public
        _GenerateDefaultLayoutParams(
            [out] IViewGroupLayoutParams** result);
        //protected
        _GenerateLayoutParams(
            [in] IViewGroupLayoutParams* p,
            [out] IViewGroupLayoutParams** result);
        //protected
        _CheckLayoutParams(
            [in] IViewGroupLayoutParams* p,
            [out] Boolean* result);

        _SetChildrenDrawingOrderEnabled(
            [in] Boolean enabled);
    }

    [local]
    interface ICalculatorPadLayoutListener
    {
        OnCreate(   //constructor
            [in] IInterface* _this,
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        //public
        ShouldDelayChildPressedState(
            [in] IInterface* _this,
            [out] Boolean* result);
        //protected
        OnLayout(
            [in] IInterface* _this,
            [in] Boolean changed,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);
        //public
        GenerateLayoutParams(
            [in] IInterface* _this,
            [in] IAttributeSet* attrs,
            [out] IViewGroupLayoutParams** result);
        //public
        GenerateDefaultLayoutParams(
            [in] IInterface* _this,
            [out] IViewGroupLayoutParams** result);
        //protected
        GenerateLayoutParams(
            [in] IInterface* _this,
            [in] IViewGroupLayoutParams* p,
            [out] IViewGroupLayoutParams** result);
        //protected
        CheckLayoutParams(
            [in] IInterface* _this,
            [in] IViewGroupLayoutParams* p,
            [out] Boolean* result);
    }

    [local]
    interface ICalculatorPadViewPagerSuperObject
    {
        Test();
    }

    interface IViewMeasureSpec;

    [local]
    interface ICalculatorPadViewPager
    {
        GetSuperObject(
            [out] ICalculatorPadViewPagerSuperObject** superObject);

        GetMeasureSpec(
            [out] IViewMeasureSpec** measureSpec);

        _constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        //protected:
        _OnFinishInflate();

        _SetMeasuredDimension(
            [in] Int32 measuredWidth,
            [in] Int32 measuredHeight);

        _GetDefaultSize(
            [in] Int32 size,
            [in] Int32 measureSpec,
            [out] Int32* res);
     }

    [local]
    interface IViewPager
    {
        //protected:
        _OnDetachedFromWindow();
        _GetChildDrawingOrder(
            [in] Int32 childCount,
            [in] Int32 i,
            [out] Int32* result);
        _VerifyDrawable(
            [in] IDrawable* who,
            [out] Boolean* result);
        _DrawableStateChanged();

        //public
        _OnSaveInstanceState(
            [out] IParcelable** result);
        _OnRestoreInstanceState(
            [in] IParcelable* state);
        _AddView(
            [in] IView* child,
            [in] Int32 index,
            [in] IViewGroupLayoutParams* params);
        _RemoveView(
            [in] IView* view);

        //protected
        _OnAttachedToWindow();
        _OnMeasure(
            [in] Int32 widthMeasureSpec,
            [in] Int32 heightMeasureSpec);
        _OnSizeChanged(
            [in] Int32 w,
            [in] Int32 h,
            [in] Int32 oldw,
            [in] Int32 oldh);
        _OnLayout(
            [in] Boolean changed,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        //public
        _ComputeScroll();
        _OnInterceptTouchEvent(
            [in] IMotionEvent* ev,
            [out] Boolean* res);
        _OnTouchEvent(
            [in] IMotionEvent* event,
            [out] Boolean* res);
        _Draw(
            [in] ICanvas* canvas);
        _OnDraw(
            [in] ICanvas* canvas);
        _DispatchKeyEvent(
            [in] IKeyEvent* event,
            [out] Boolean* res);
        _AddFocusables(
            [in] IArrayList* views,
            [in] Int32 direction,
            [in] Int32 focusableMode);
        _AddTouchables(
            [in] IArrayList* views);

        //protected
        _OnRequestFocusInDescendants(
            [in] Int32 direction,
            [in] IRect* previouslyFocusedRect,
            [out] Boolean* result);

        //public
        _DispatchPopulateAccessibilityEvent(
            [in] IAccessibilityEvent* event,
            [out] Boolean* res);

        //protected
        _GenerateDefaultLayoutParams(
            [out] IViewGroupLayoutParams** params);
        _GenerateLayoutParams(
            [in] IViewGroupLayoutParams* p,
            [out] IViewGroupLayoutParams** params);
        _CheckLayoutParams(
            [in] IViewGroupLayoutParams* p,
            [out] Boolean* result);

        //public
        _GenerateLayoutParams(
            [in] IAttributeSet* attrs,
            [out] IViewGroupLayoutParams** params);

        _SetChildrenDrawingOrderEnabled(
            [in] Boolean enabled);
    }

    [local]
    interface ICalculatorPadViewPagerListener
    {
        OnCreate(   //constructor
            [in] IInterface* _this,
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        //protected:
        OnFinishInflate(
            [in] IInterface* _this);

        //protected:
        OnDetachedFromWindow(
            [in] IInterface* _this);
        GetChildDrawingOrder(
            [in] IInterface* _this,
            [in] Int32 childCount,
            [in] Int32 i,
            [out] Int32* result);
        VerifyDrawable(
            [in] IInterface* _this,
            [in] IDrawable* who,
            [out] Boolean* result);
        DrawableStateChanged(
            [in] IInterface* _this);

        //public
        OnSaveInstanceState(
            [in] IInterface* _this,
            [out] IParcelable** result);
        OnRestoreInstanceState(
            [in] IInterface* _this,
            [in] IParcelable* state);
        AddView(
            [in] IInterface* _this,
            [in] IView* child,
            [in] Int32 index,
            [in] IViewGroupLayoutParams* params);
        RemoveView(
            [in] IInterface* _this,
            [in] IView* view);

        //protected
        OnAttachedToWindow(
            [in] IInterface* _this);
        OnMeasure(
            [in] IInterface* _this,
            [in] Int32 widthMeasureSpec,
            [in] Int32 heightMeasureSpec);
        OnSizeChanged(
            [in] IInterface* _this,
            [in] Int32 w,
            [in] Int32 h,
            [in] Int32 oldw,
            [in] Int32 oldh);
        OnLayout(
            [in] IInterface* _this,
            [in] Boolean changed,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        //public
        ComputeScroll(
            [in] IInterface* _this);
        OnInterceptTouchEvent(
            [in] IInterface* _this,
            [in] IMotionEvent* ev,
            [out] Boolean* res);
        OnTouchEvent(
            [in] IInterface* _this,
            [in] IMotionEvent* event,
            [out] Boolean* res);
        Draw(
            [in] IInterface* _this,
            [in] ICanvas* canvas);
        OnDraw(
            [in] IInterface* _this,
            [in] ICanvas* canvas);
        DispatchKeyEvent(
            [in] IInterface* _this,
            [in] IKeyEvent* event,
            [out] Boolean* res);
        AddFocusables(
            [in] IInterface* _this,
            [in] IArrayList* views,
            [in] Int32 direction,
            [in] Int32 focusableMode);
        AddTouchables(
            [in] IInterface* _this,
            [in] IArrayList* views);

        //protected
        OnRequestFocusInDescendants(
            [in] IInterface* _this,
            [in] Int32 direction,
            [in] IRect* previouslyFocusedRect,
            [out] Boolean* result);

        //public
        DispatchPopulateAccessibilityEvent(
            [in] IInterface* _this,
            [in] IAccessibilityEvent* event,
            [out] Boolean* res);

        //protected
        GenerateDefaultLayoutParams(
            [in] IInterface* _this,
            [out] IViewGroupLayoutParams** params);
        GenerateLayoutParams(
            [in] IInterface* _this,
            [in] IViewGroupLayoutParams* p,
            [out] IViewGroupLayoutParams** params);
        CheckLayoutParams(
            [in] IInterface* _this,
            [in] IViewGroupLayoutParams* p,
            [out] Boolean* result);

        //public
        GenerateLayoutParams(
            [in] IInterface* _this,
            [in] IAttributeSet* attrs,
            [out] IViewGroupLayoutParams** params);
    }

    [local]
    interface IViewMeasureSpec
    {
        GetMODE_SHIFT(
            [out] Int32* result);
        GetMODE_MASK(
            [out] Int32* result);

        GetUNSPECIFIED(
            [out] Int32* result);
        GetEXACTLY(
            [out] Int32* result);
        GetAT_MOST(
            [out] Int32* result);

        MakeMeasureSpec(
            [in] Int32 size,
            [in] Int32 mode,
            [out] Int32* result);
        GetMode(
            [in] Int32 measureSpec,
            [out] Int32* result);
        GetSize(
            [in] Int32 measureSpec,
            [out] Int32* result);
        Adjust(
            [in] Int32 measureSpec,
            [in] Int32 delta,
            [out] Int32* result);
        GetDescription(
            [in] Int32 measureSpec,
            [out] String* description);
    }

    class CCalculator {
        constructor();

        interface IActivity;
        interface IContext;
        interface IContextThemeWrapper;
        interface ILayoutInflaterFactory;
        interface ILayoutInflaterFactory2;
        interface IWindowCallback;
        interface IKeyEventCallback;
        interface IViewOnCreateContextMenuListener;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IOnWindowDismissedCallback;
        interface IActivityOne;
    }

    [local]
    class CCalculatorEditText
    {
        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        interface ICalculatorEditText;

        interface IEditText;

        interface ITextView;
        interface IOnPreDrawListener;

        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }


    [local]
    class CCalculatorPadLayout
    {
        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyle);

        interface ICalculatorPadLayout;

        interface IViewGroup;
        interface IViewParent;
        interface IViewManager;

        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    [local]
    class CCalculatorPadViewPager
    {
        constructor(
            [in] IContext* ctx);

        constructor(
            [in] IContext* ctx,
            [in] IAttributeSet* attrs);

        interface ICalculatorPadViewPager;

        interface IViewPager;

        interface IViewGroup;
        interface IViewParent;
        interface IViewManager;

        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    class CNodeListener {
        constructor();

        interface INodeListener;
    }

    } // namespace JSCalculator
    } // namespace Node
    } // namespace DevSamples
    } // namespace Elastos
}