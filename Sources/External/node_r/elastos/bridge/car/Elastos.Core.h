#ifndef __CAR_ELASTOS_CORE_H__
#define __CAR_ELASTOS_CORE_H__

#ifndef _NO_INCLIST
#include <elastos.h>
#endif // !_NO_INCLIST
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigDecimal;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigDecimalClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigDecimalHelper;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigDecimalHelperClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigInteger;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigIntegerClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigIntegerHelper;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CBigIntegerHelperClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CMathContext;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CMathContextClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CMathContextHelper;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS ClassID ECLSID_CMathContextHelperClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructAddrinfo;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructAddrinfoClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_COsConstants;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_COsConstantsClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPosix;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPosixClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CIoBridge;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CIoBridgeClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CLibcore;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CLibcoreClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructLinger;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructLingerClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructPasswd;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructPasswdClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructPollfd;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructPollfdClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructStat;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructStatClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructStatFs;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructStatFsClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructTimeval;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructTimevalClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructUtsname;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructUtsnameClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructGroupReq;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStructGroupReqClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSocketTaggerHelper;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSocketTaggerHelperClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBase64;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBase64ClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CAttributedCharacterIteratorAttribute;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CAttributedCharacterIteratorAttributeClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDecimalFormatSymbols;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDecimalFormatSymbolsClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDecimalFormatSymbolsHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDecimalFormatSymbolsHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CFieldPosition;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CFieldPositionClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CParsePosition;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CParsePositionClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CStringCharacterIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CStringCharacterIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CAttributedString;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CAttributedStringClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocale;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleDataHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleDataHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CICUHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CICUHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CCollationElementIteratorICUHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CCollationElementIteratorICUHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CCollationKeyICU;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CCollationKeyICUClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleData;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CLocaleDataClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeBreakIteratorHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeBreakIteratorHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeCollationHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeCollationHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeDecimalFormat;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeDecimalFormatClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeIDNHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeIDNHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeNormalizerHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativeNormalizerHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativePluralRules;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativePluralRulesClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativePluralRulesHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CNativePluralRulesHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CRuleBasedCollatorICU;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CRuleBasedCollatorICUClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CTimeZones;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS ClassID ECLSID_CTimeZonesClassObject;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CBasicLruCache;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CBasicLruCacheClassObject;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCollectionUtils;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCollectionUtilsClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteOrderHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteOrderHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CBufferedWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteArrayInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteArrayInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteArrayOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteArrayOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CCharArrayReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CCharArrayReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CCharArrayWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CCharArrayWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CCharBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CCharBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDataInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDataInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDataInputStreamHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDataInputStreamHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDataOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDataOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFile;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileDescriptor;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileDescriptorClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileDescriptorHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileDescriptorHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFilePermission;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFilePermissionClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFileWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFilterInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFilterInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFilterOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFilterOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInputStreamReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInputStreamReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CLineNumberInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CLineNumberInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CLineNumberReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CLineNumberReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_COutputStreamWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_COutputStreamWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPrintStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPrintStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPrintWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPrintWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPushbackInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPushbackInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPushbackReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CPushbackReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CRandomAccessFile;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CRandomAccessFileClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSequenceInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSequenceInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStringBufferInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStringBufferInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStringReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStringReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStringWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStringWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CByteBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDoubleBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CDoubleBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CHeapBufferIterator;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CHeapBufferIteratorClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStreams;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CStreamsClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CMemory;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CMemoryClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CIoUtils;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CIoUtilsClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CUnsafeByteSequence;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CUnsafeByteSequenceClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFloatBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CFloatBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInt16BufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInt16BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInt32BufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInt32BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInt64BufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CInt64BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CNativeConverterHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CNativeConverterHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CNIOAccessHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CNIOAccessHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSelectorImpl;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSelectorImplClassObject;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS ClassID ECLSID_CChannels;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS ClassID ECLSID_CChannelsClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCodingErrorAction;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCodingErrorActionClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCharsetHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCharsetHelperClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCharsets;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCharsetsClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCoderResult;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCoderResultClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCoderResultHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CCoderResultHelperClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CModifiedUtf8;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS ClassID ECLSID_CModifiedUtf8ClassObject;
}
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSelectorProviderImpl;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS ClassID ECLSID_CSelectorProviderImplClassObject;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS ClassID ECLSID_CSelectorProviderHelper;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS ClassID ECLSID_CSelectorProviderHelperClassObject;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS ClassID ECLSID_CDatagramChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS ClassID ECLSID_CDatagramChannelHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CBitSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CBitSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CBitSetHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CBitSetHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObjectStringMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObjectStringMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObjectInt32Map;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObjectInt32MapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObjectMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObjectMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CZoneInfoDB;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CZoneInfoDBClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CUUID;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CUUIDClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CUUIDHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CUUIDHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CDate;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CDateClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CDateHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CDateHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CGregorianCalendar;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CGregorianCalendarClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCalendarHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCalendarHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTimeZoneHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTimeZoneHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CSimpleTimeZone;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CSimpleTimeZoneClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CZoneInfo;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CZoneInfoClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTimer;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTimerClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CProperties;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CPropertiesClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTimeZoneGetterHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTimeZoneGetterHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedList;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedListClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CArrayList;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CArrayListClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CArrayDeque;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CArrayDequeClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CVector;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CVectorClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CArrays;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CArraysClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCollections;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCollectionsClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CFormatter;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CFormatterClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CComparableTimSortHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CComparableTimSortHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCurrencyHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CCurrencyHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CHashMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CHashSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CHashSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CHashTable;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CHashTableClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CIdentityHashMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CIdentityHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTreeMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTreeMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTreeSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CTreeSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CWeakHashMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CWeakHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedHashMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedHashSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedHashSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CEnumMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CEnumMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CDualPivotQuicksortHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CDualPivotQuicksortHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CStack;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CStackClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CStringTokenizer;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CStringTokenizerClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CScanner;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CScannerClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CPropertyResourceBundle;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CPropertyResourceBundleClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CPriorityQueue;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CPriorityQueueClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObservable;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS ClassID ECLSID_CObservableClassObject;
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CMatcher;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CMatcherClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CMatcherHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CMatcherHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CSplitter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CSplitterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CPatternHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS ClassID ECLSID_CPatternHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CCookieManager;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CCookieManagerClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CCookiePolicyHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CCookiePolicyHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CDatagramPacket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CDatagramPacketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CDatagramSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CDatagramSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CHttpCookie;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CHttpCookieClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetAddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetAddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet4Address;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet4AddressClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet4AddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet4AddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet6Address;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet6AddressClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet6AddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInet6AddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetSocketAddress;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetSocketAddressClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetSocketAddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetSocketAddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPasswordAuthentication;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPasswordAuthenticationClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CProxy;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CProxyClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURI;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURIClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURL;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURLClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURLEncoder;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURLEncoderClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURLDecoder;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CURLDecoderClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CNetworkInterfaceHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CNetworkInterfaceHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CMimeUtils;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CMimeUtilsClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CProxyHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CProxyHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CCookieHandlerHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CCookieHandlerHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CUriCodecHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CUriCodecHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CIDNHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CIDNHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CServerSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CServerSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CServerSocketHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CServerSocketHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPlainSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPlainSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPlainServerSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPlainServerSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketInputStream;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketInputStreamClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketOutputStream;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocketOutputStreamClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CMulticastSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CMulticastSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CRawSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CRawSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPlainDatagramSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CPlainDatagramSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocks4Message;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CSocks4MessageClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetAddress;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS ClassID ECLSID_CInetAddressClassObject;
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CAbstractHttpInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CAbstractHttpInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CChallenge;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CChallengeClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CChunkedInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CChunkedInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CChunkedOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CChunkedOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CFixedLengthInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CFixedLengthInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CFixedLengthOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CFixedLengthOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHeaderParserHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHeaderParserHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpDate;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpDateClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpResponseCache;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpResponseCacheClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpsHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpsHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpEngine;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CHttpEngineClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRawHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRawHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRawHeadersHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRawHeadersHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRequestHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRequestHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CResponseHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CResponseHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRetryableOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CRetryableOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CUnknownLengthHttpInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS ClassID ECLSID_CUnknownLengthHttpInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFileHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFileHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFileURLConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFileURLConnectionClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFtpHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFtpHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFtpURLInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CFtpURLInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CUrlUtilsHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS ClassID ECLSID_CUrlUtilsHelperClassObject;
}
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CAnnotation;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CAnnotationClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatFieldHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatFieldHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatSymbols;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatSymbolsClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatSymbolsHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDateFormatSymbolsHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CBreakIteratorHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CBreakIteratorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CRuleBasedBreakIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CRuleBasedBreakIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CNumberFormatField;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CNumberFormatFieldClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CNumberFormatHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CNumberFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CMessageFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CMessageFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CMessageFormatField;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CMessageFormatFieldClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CChoiceFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CChoiceFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CChoiceFormatHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CChoiceFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDecimalFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CDecimalFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CSimpleDateFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CSimpleDateFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CCollatorHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CCollatorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CCollationElementIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CCollationElementIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CCollationElementIteratorHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CCollationElementIteratorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CRuleBasedCollator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CRuleBasedCollatorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CNormalizerHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CNormalizerHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CBidi;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CBidiClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CBidiHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS ClassID ECLSID_CBidiHelperClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CAccessController;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CAccessControllerClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CAccessControlContext;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CAccessControlContextClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CCodeSigner;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CCodeSignerClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStorePasswordProtection;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStorePasswordProtectionClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreCallbackHandlerProtection;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreCallbackHandlerProtectionClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStorePrivateKeyEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStorePrivateKeyEntryClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreSecretKeyEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreSecretKeyEntryClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreTrustedCertificateEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreTrustedCertificateEntryClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreHelperClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CMessageDigestHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CMessageDigestHelperClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreBuilderHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CKeyStoreBuilderHelperClassObject;
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertPathBuilderHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertPathBuilderHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertPathValidatorHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertPathValidatorHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertStoreHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertStoreHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertificateFactory;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertificateFactoryClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertificateFactoryHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCertificateFactoryHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCollectionCertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CCollectionCertStoreParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CLDAPCertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CLDAPCertStoreParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXBuilderParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXBuilderParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXCertPathBuilderResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXCertPathBuilderResultClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXCertPathValidatorResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXCertPathValidatorResultClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPKIXParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPolicyQualifierInfo;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CPolicyQualifierInfoClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CTrustAnchor;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CTrustAnchorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CX509CRLSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CX509CRLSelectorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CX509CertSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CX509CertSelectorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CDSAParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CDSAParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CDSAPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CDSAPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CDSAPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CDSAPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECFieldF2m;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECFieldF2mClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECFieldFp;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECFieldFpClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECGenParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECGenParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECPoint;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECPointClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CECPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CEllipticCurve;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CEllipticCurveClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CMGF1ParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CMGF1ParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CPKCS8EncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CPKCS8EncodedKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CPSSParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CPSSParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAKeyGenParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAKeyGenParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAMultiPrimePrivateCrtKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAMultiPrimePrivateCrtKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAOtherPrimeInfo;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAOtherPrimeInfoClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAPrivateCrtKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAPrivateCrtKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CRSAPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CX509EncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS ClassID ECLSID_CX509EncodedKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CSecurity;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS ClassID ECLSID_CSecurityClassObject;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
EXTERN const _ELASTOS ClassID ECLSID_CPasswordCallback;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
EXTERN const _ELASTOS ClassID ECLSID_CPasswordCallbackClassObject;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
EXTERN const _ELASTOS ClassID ECLSID_CX500Principal;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
EXTERN const _ELASTOS ClassID ECLSID_CX500PrincipalClassObject;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CPrivateCredentialPermission;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CPrivateCredentialPermissionClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CAuthPermission;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CAuthPermissionClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CSubject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CSubjectClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CSubjectHelper;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CSubjectHelperClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CSubjectDomainCombiner;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS ClassID ECLSID_CSubjectDomainCombinerClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CX509CertificateHelper;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS ClassID ECLSID_CX509CertificateHelperClassObject;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS ClassID ECLSID_CSSLParameters;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS ClassID ECLSID_CSSLParametersClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCountDownLatch;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCountDownLatchClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCyclicBarrier;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCyclicBarrierClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CExecutorCompletionService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CExecutorCompletionServiceClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CExecutors;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CExecutorsClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CFutureTask;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CFutureTaskClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CThreadPoolExecutor;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CThreadPoolExecutorClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CTimeUnitHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CTimeUnitHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CArrayBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CArrayBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentLinkedDeque;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentLinkedDequeClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentLinkedQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentLinkedQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentSkipListMap;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentSkipListMapClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentSkipListSet;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentSkipListSetClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CDelayQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CDelayQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CExchanger;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CExchangerClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CForkJoinWorkerThread;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CForkJoinWorkerThreadClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CForkJoinPool;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CForkJoinPoolClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CForkJoinTaskHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CForkJoinTaskHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedBlockingDeque;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedBlockingDequeClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedTransferQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CLinkedTransferQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CPhaser;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CPhaserClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CPriorityBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CPriorityBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CScheduledThreadPoolExecutor;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CScheduledThreadPoolExecutorClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CSynchronousQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CSynchronousQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CThreadLocalRandom;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CThreadLocalRandomClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CThreadLocalRandomHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CThreadLocalRandomHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCopyOnWriteArrayList;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCopyOnWriteArrayListClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCopyOnWriteArrayListHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCopyOnWriteArrayListHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCopyOnWriteArraySet;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CCopyOnWriteArraySetClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentHashMap;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CConcurrentHashMapClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicBoolean;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicBooleanClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger32;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger32ClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger32Array;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger32ArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger64;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger64ClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger64Array;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicInteger64ArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicMarkableReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicMarkableReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicReferenceArray;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicReferenceArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicStampedReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CAtomicStampedReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CFencesHelper;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS ClassID ECLSID_CFencesHelperClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS ClassID ECLSID_CLockSupport;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS ClassID ECLSID_CLockSupportClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS ClassID ECLSID_CReentrantLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS ClassID ECLSID_CReentrantLockClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS ClassID ECLSID_CReentrantReadWriteLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS ClassID ECLSID_CReentrantReadWriteLockClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CSemaphore;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS ClassID ECLSID_CSemaphoreClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CAdler32;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CAdler32ClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CCRC32;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CCRC32ClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CInflater;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CInflaterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CDeflater;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CDeflaterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CInflaterInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CInflaterInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CInflaterOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CInflaterOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CDeflaterInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CDeflaterInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CDeflaterOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CDeflaterOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CCheckedInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CCheckedInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CCheckedOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CCheckedOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CGZIPInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CGZIPInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CGZIPOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CGZIPOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipEntry;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipEntryClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipFile;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS ClassID ECLSID_CZipFileClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CName;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CNameClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CAttributes;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CAttributesClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarEntry;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarEntryClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarFile;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarFileClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CJarOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CManifest;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CManifestClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CPack200Helper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS ClassID ECLSID_CPack200HelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CSQLWarning;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CSQLWarningClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CTime;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CTimeClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CSqlDate;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CSqlDateClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CTimestamp;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CTimestampClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CDriverPropertyInfo;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CDriverPropertyInfoClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CDataTruncation;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CDataTruncationClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CDriverManager;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CDriverManagerClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CSQLPermission;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS ClassID ECLSID_CSQLPermissionClassObject;
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTableResult;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTableResultClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CShell;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CShellClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CDBDump;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CDBDumpClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CVm;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CVmClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBlob;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBlobClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBlobR;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBlobRClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBlobW;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBlobWClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CDatabase;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CDatabaseClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CDatabaseHelper;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CDatabaseHelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCDriver;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCDriverClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBackup;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CBackupClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CFunctionContext;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CFunctionContextClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CStmt;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CStmtClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CStringEncoderHelper;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CStringEncoderHelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CSinFunc;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CSinFuncClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTestTrace;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTestTraceClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CAuthorizerCallback;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CAuthorizerCallbackClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTestBusyHandler;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTestBusyHandlerClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTestProgressHandler;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CTestProgressHandlerClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CMockFunction;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS ClassID ECLSID_CMockFunctionClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCConnection;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCConnectionClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCPreparedStatement;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCPreparedStatementClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCStatement;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCStatementClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCResultSetMetaData;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCResultSetMetaDataClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CTableResultX;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CTableResultXClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCDatabaseMetaData;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCDatabaseMetaDataClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCResultSet;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CJDBCResultSetClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CDatabaseX;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS ClassID ECLSID_CDatabaseXClassObject;
}
}
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CPathClassLoader;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CPathClassLoaderClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CStringWrapper;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CStringWrapperClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CBoolean;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CBooleanClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CByte;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CByteClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CChar32;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CChar32ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CChar16;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CChar16ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CChar8;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CChar8ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CInteger16;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CInteger16ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CInteger32;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CInteger32ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CInteger64;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CInteger64ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CFloat;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CFloatClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CDouble;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CDoubleClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CArrayOf;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CArrayOfClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CRandom;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CRandomClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CObjectContainer;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CObjectContainerClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CBlockGuard;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CBlockGuardClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CCloseGuard;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CCloseGuardClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CCloseGuardHelper;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CCloseGuardHelperClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CSystem;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS ClassID ECLSID_CSystemClassObject;
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS ClassID ECLSID_CThread;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS ClassID ECLSID_CThreadClassObject;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS ClassID ECLSID_CThreadGroup;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS ClassID ECLSID_CThreadGroupClassObject;
}
}
}

namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICharSequence;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IAppendable;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICloneable;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IComparable;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IComparator;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IStringBuilder;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IStringBuffer;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IArrayOf;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_INumber;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IBoolean;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IByte;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IChar32;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IChar16;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IChar8;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IInteger16;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IInteger32;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IInteger64;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IFloat;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IDouble;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IString;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IRunnable;
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS InterfaceID EIID_ISynchronize;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS InterfaceID EIID_IThreadUncaughtExceptionHandler;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS InterfaceID EIID_IThread;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS InterfaceID EIID_IThreadGroup;
}
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IClassLoader;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IRandom;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IThrowable;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IStackTraceElement;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IBlockGuardPolicy;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IBlockGuard;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICloseGuardReporter;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICloseGuard;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICloseGuardHelper;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_IEnum;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ISystem;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_IMathContext;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_IMathContextHelper;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_IBigDecimal;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_IBigDecimalHelper;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_IBigInteger;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_IBigIntegerHelper;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_ICBigDecimalClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_ICBigDecimalHelperClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_ICBigIntegerClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_ICBigIntegerHelperClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_ICMathContextClassObject;
}
}
namespace Elastos {
namespace Math {
EXTERN const _ELASTOS InterfaceID EIID_ICMathContextHelperClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IOsConstants;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IOs;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IIoBridge;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ILibcore;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructAddrinfo;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructFlock;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructGroupReq;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructLinger;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructPasswd;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructPollfd;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructStat;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructStatFs;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructTimeval;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructTimevalHelper;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStructUtsname;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ISocketTagger;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ISocketTaggerHelper;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBase64;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructAddrinfoClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICOsConstantsClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICPosixClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICIoBridgeClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICLibcoreClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructLingerClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructPasswdClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructPollfdClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructStatClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructStatFsClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructTimevalClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructUtsnameClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStructGroupReqClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICSocketTaggerHelperClassObject;
}
}
namespace Libcore {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICBase64ClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICharacterIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICollationKey;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IStringCharacterIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDecimalFormatSymbols;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDecimalFormatSymbolsHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IFieldPosition;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IParsePosition;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IAttributedCharacterIteratorAttribute;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IAttributedCharacterIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IAttributedString;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICAttributedCharacterIteratorAttributeClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDecimalFormatSymbolsClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDecimalFormatSymbolsHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICFieldPositionClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICParsePositionClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICStringCharacterIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICAttributedStringClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICollationKeyICU;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ILocale;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ILocaleHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ILocaleData;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ILocaleDataHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_IICUHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_IRuleBasedCollatorICU;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ITimeZones;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICollationElementIteratorICU;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICollationElementIteratorICUHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativeDecimalFormat;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativeBreakIterator;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativeBreakIteratorHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativeCollationHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativeIDNHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativePluralRules;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativePluralRulesHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_INativeNormalizerHelper;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICLocaleClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICLocaleHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICLocaleDataHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICICUHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICCollationElementIteratorICUHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICCollationKeyICUClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICLocaleDataClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativeBreakIteratorHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativeCollationHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativeDecimalFormatClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativeIDNHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativeNormalizerHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativePluralRulesClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICNativePluralRulesHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICRuleBasedCollatorICUClassObject;
}
}
namespace Libcore {
namespace ICU {
EXTERN const _ELASTOS InterfaceID EIID_ICTimeZonesClassObject;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IBasicLruCache;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICollectionUtils;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICBasicLruCacheClassObject;
}
}
namespace Libcore {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICCollectionUtilsClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICloseable;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFlushable;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFilterInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBufferedInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFilterOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBufferedOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IReadable;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBufferedReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBufferedWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IByteArrayInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IByteArrayOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBufferIterator;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IHeapBufferIterator;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICharArrayReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICharArrayWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDataInput;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDataInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDataInputStreamHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDataOutput;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDataOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFile;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileDescriptor;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileDescriptorHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileFilter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPermission;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPermissionCollection;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFilePermission;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInputStreamReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IOutputStreamWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFilenameFilter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFilterReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFilterWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ILineNumberInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ILineNumberReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectInput;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectInputStreamGetField;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectInputValidation;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectOutput;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectOutputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectOutputStreamPutField;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ISerializable;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectStreamClass;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectStreamClassHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IObjectStreamField;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPrintStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPrintWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPushbackInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPushbackReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IRandomAccessFile;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ISequenceInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStreamTokenizer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStringBufferInputStream;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStringReader;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStringWriter;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IStreams;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IMemory;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IByteOrderHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IBuffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IByteBuffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IByteBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICharBuffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICharBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDoubleBuffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IDoubleBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFloatBuffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFloatBufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInt16Buffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInt16BufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInt32Buffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInt32BufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInt64Buffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IInt64BufferHelper;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IIoUtils;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IUnsafeByteSequence;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IMappedByteBuffer;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_INIOAccessHelper;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IReadableByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IWritableByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IChannels;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IScatteringByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IGatheringByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IInterruptibleChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IFileChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractInterruptibleChannel;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISelectableChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISelectionKey;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISelector;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISocketChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISocketChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocketChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocketChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractSelectableChannel;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISinkChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ISourceChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IPipe;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IPipeHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_IFileLock;
}
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileDescriptorChannel;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ISelectorProvider;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ISelectorProviderHelper;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractSelector;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractSelectionKey;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICharset;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICharsetHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICoderResult;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICoderResultHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICharsetDecoder;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICharsetEncoder;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICodingErrorAction;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICodingErrorActionHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICharsets;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_IModifiedUtf8;
}
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_INativeConverterHelper;
}
}
namespace Elastos {
namespace IO {
namespace Charset {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ICharsetProvider;
}
}
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ISelectorImpl;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ISelectionKeyImpl;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IPipeImpl;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_IFileChannelImpl;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICByteOrderHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICBufferedInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICBufferedOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICBufferedReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICBufferedWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICByteArrayInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICByteArrayOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICCharArrayReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICCharArrayWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICCharBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICDataInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICDataInputStreamHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICDataOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileDescriptorClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileDescriptorHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFilePermissionClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFileWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFilterInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFilterOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICInputStreamReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICLineNumberInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICLineNumberReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICOutputStreamWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICPrintStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICPrintWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICPushbackInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICPushbackReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICRandomAccessFileClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICSequenceInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStringBufferInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStringReaderClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStringWriterClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICByteBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICDoubleBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICHeapBufferIteratorClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICStreamsClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICMemoryClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICIoUtilsClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICUnsafeByteSequenceClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICFloatBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICInt16BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICInt32BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICInt64BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICNativeConverterHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICNIOAccessHelperClassObject;
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICSelectorImplClassObject;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ICChannelsClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICCodingErrorActionClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICCharsetHelperClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICCharsetsClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICCoderResultClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICCoderResultHelperClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
EXTERN const _ELASTOS InterfaceID EIID_ICModifiedUtf8ClassObject;
}
}
}
namespace Elastos {
namespace IO {
EXTERN const _ELASTOS InterfaceID EIID_ICSelectorProviderImplClassObject;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ICSelectorProviderHelperClassObject;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
EXTERN const _ELASTOS InterfaceID EIID_ICDatagramChannelHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IBitSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IBitSetHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IDate;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IDateHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICalendar;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICalendarHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IIterable;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICollection;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IList;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IMapEntry;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ILinkedList;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IDictionary;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IProperties;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IEnumeration;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IGregorianCalendar;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IIterator;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IListIterator;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IObjectStringMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IObjectInt32Map;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IObjectMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IQueue;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IDeque;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IRandomAccess;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ITimeZone;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ITimeZoneHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IZoneInfo;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ISimpleTimeZone;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ITimerTask;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ITimer;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICurrency;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICurrencyHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IUUID;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IUUIDHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IZoneInfoDB;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ITimeZoneGetter;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ITimeZoneGetterHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IArrayList;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IFormattableFlags;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IFormatter;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IFormattable;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IArrayDeque;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IComparableTimSortHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IDualPivotQuicksortHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IEventListener;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IEventListenerProxy;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IEventObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IResourceBundle;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IResourceBundleControl;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IResourceBundleHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IListResourceBundle;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ISortedMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_INavigableMap;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ISet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ISortedSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_INavigableSet;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IObserver;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IObservable;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IPriorityQueue;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IPropertyResourceBundle;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IScanner;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IServiceLoader;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IServiceLoaderHelper;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IVector;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IArrays;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IStack;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IStringTokenizer;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IUnsafeArrayList;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICollections;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_IEnumMap;
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_IMatchResult;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_IMatcher;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_IMatcherHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_ISplitter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_IPattern;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_IPatternHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILevel;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILevelHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IErrorManager;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IFilter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILogFormatter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILogHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILogger;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IErrorManagerHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILoggingMXBean;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILogManager;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILogManagerHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ILogRecord;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IStreamHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IConsoleHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IMemoryHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ISimpleFormatter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_ISocketHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
EXTERN const _ELASTOS InterfaceID EIID_IXMLFormatter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_INodeChangeEvent;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_INodeChangeListener;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IPreferenceChangeEvent;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IPreferenceChangeListener;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IPreferences;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IPreferencesHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IPreferencesFactory;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IXMLParserHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractPreferences;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IFilePreferencesFactoryImpl;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
EXTERN const _ELASTOS InterfaceID EIID_IFilePreferencesImpl;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ILocaleServiceProvider;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ICurrencyNameProvider;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ILocaleNameProvider;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ITimeZoneNameProvider;
}
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICBitSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICBitSetHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICObjectStringMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICObjectInt32MapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICObjectMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICZoneInfoDBClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICUUIDClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICUUIDHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICDateClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICDateHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICGregorianCalendarClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICCalendarHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICTimeZoneHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICSimpleTimeZoneClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICZoneInfoClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICTimerClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICPropertiesClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICTimeZoneGetterHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICLinkedListClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICArrayListClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICArrayDequeClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICVectorClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICArraysClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICCollectionsClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICFormatterClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICComparableTimSortHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICCurrencyHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICHashSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICHashTableClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICIdentityHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICTreeMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICTreeSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICWeakHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICLinkedHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICLinkedHashSetClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICEnumMapClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICDualPivotQuicksortHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICStackClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICStringTokenizerClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICScannerClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICPropertyResourceBundleClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICPriorityQueueClassObject;
}
}
namespace Elastos {
namespace Utility {
EXTERN const _ELASTOS InterfaceID EIID_ICObservableClassObject;
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_ICMatcherClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_ICMatcherHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_ICSplitterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
EXTERN const _ELASTOS InterfaceID EIID_ICPatternHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IAuthenticator;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IAuthenticatorHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICacheRequest;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICacheResponse;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IContentHandler;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IContentHandlerFactory;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICookieHandler;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICookieHandlerHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURLStreamHandler;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURLStreamHandlerFactory;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURI;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURIHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURL;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICookieManager;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICookiePolicy;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICookiePolicyHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICookieStore;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramPacket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramSocketHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketOptions;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IDatagramSocketImplFactory;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IResponseCache;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IResponseCacheHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURLConnection;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURLConnectionHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IHttpURLConnection;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IHttpURLConnectionHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IExtendedResponseCache;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IFileNameMap;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IMimeUtils;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IHttpCookie;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IIDNHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInetAddress;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInetAddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInet4Address;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInet4AddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInet6Address;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInet6AddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketAddress;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInetSocketAddress;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInetSocketAddressHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IInterfaceAddress;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IMulticastSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_INetworkInterface;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_INetworkInterfaceHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IPasswordAuthentication;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IPlainDatagramSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IPlainSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IPlainServerSocketImpl;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IProxy;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IProxyHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IProxySelector;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IProxySelectorHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISecureCacheResponse;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocketHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketImplFactory;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketInputStream;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketOutputStream;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocks4Message;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURLEncoder;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IURLDecoder;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IUriCodecHelper;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketChannel;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocketChannel;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IRawSocket;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IJarURLConnection;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_INetPermission;
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractHttpInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractHttpOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IChallenge;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IChunkedInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IChunkedOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IFixedLengthInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IFixedLengthOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IRawHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IRawHeadersHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICacheControlHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHeaderParserHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpConnectionAddress;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpConnectionHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpConnectionPool;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpDate;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IResponseHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IRequestHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpResponseCache;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpsHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpEngine;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IHttpURLConnectionImpl;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IRetryableOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_IUnknownLengthHttpInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IFileHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IFileURLConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IFtpHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IFtpURLConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IFtpURLInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IJarHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IJarURLConnectionImpl;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IJarURLConnectionImplHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_IUrlUtilsHelper;
}
}
}
namespace Elastosx {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketFactory;
}
}
namespace Elastosx {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ISocketFactoryHelper;
}
}
namespace Elastosx {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocketFactory;
}
}
namespace Elastosx {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_IServerSocketFactoryHelper;
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IKeyManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IManagerFactoryParameters;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ITrustManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLSession;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLSessionContext;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLEngineResult;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLEngine;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLParameters;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IHandshakeCompletedListener;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IHandshakeCompletedEvent;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLSocket;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IX509TrustManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLContextSpi;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLSocketFactory;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLSocketFactoryHelper;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLServerSocketFactory;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLServerSocketFactoryHelper;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IX509KeyManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IX509ExtendedKeyManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_IKeyManagerFactorySpi;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ISSLServerSocket;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ITrustManagerFactorySpi;
}
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICCookieManagerClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICCookiePolicyHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICDatagramPacketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICDatagramSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICHttpCookieClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInetAddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInet4AddressClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInet4AddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInet6AddressClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInet6AddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInetSocketAddressClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInetSocketAddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICPasswordAuthenticationClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICProxyClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICURIClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICURLClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICURLEncoderClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICURLDecoderClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICNetworkInterfaceHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICMimeUtilsClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICProxyHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICCookieHandlerHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICUriCodecHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICIDNHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICSocketHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICServerSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICServerSocketHelperClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICPlainSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICPlainServerSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICSocketInputStreamClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICSocketOutputStreamClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICMulticastSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICRawSocketClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICPlainDatagramSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICSocks4MessageClassObject;
}
}
namespace Elastos {
namespace Net {
EXTERN const _ELASTOS InterfaceID EIID_ICInetAddressClassObject;
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICAbstractHttpInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICChallengeClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICChunkedInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICChunkedOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICFixedLengthInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICFixedLengthOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICHeaderParserHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICHttpDateClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICHttpHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICHttpResponseCacheClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICHttpsHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICHttpEngineClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICRawHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICRawHeadersHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICRequestHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICResponseHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICRetryableOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
EXTERN const _ELASTOS InterfaceID EIID_ICUnknownLengthHttpInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_ICFileHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_ICFileURLConnectionClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_ICFtpHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_ICFtpURLInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
EXTERN const _ELASTOS InterfaceID EIID_ICUrlUtilsHelperClassObject;
}
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IAnnotation;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IFormatField;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatField;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatFieldHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatSymbols;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatSymbolsHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_INumberFormatField;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_INumberFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_INumberFormatHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IMessageFormatField;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IMessageFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IChoiceFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IChoiceFormatHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IDecimalFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ISimpleDateFormat;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IBreakIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IBreakIteratorHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICollator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICollatorHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICollationElementIterator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICollationElementIteratorHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IRuleBasedCollator;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_INormalizer;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_INormalizerHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IBidi;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IBidiHelper;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_IRuleBasedBreakIterator;
}
}
namespace Elastos {
namespace Text {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IBreakIteratorProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_ICollatorProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IDateFormatSymbolsProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_IDecimalFormatSymbolsProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
EXTERN const _ELASTOS InterfaceID EIID_INumberFormatProvider;
}
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICAnnotationClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDateFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDateFormatFieldHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDateFormatSymbolsClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDateFormatSymbolsHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICBreakIteratorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICRuleBasedBreakIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICNumberFormatFieldClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICNumberFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICMessageFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICMessageFormatFieldClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICChoiceFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICChoiceFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICDecimalFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICSimpleDateFormatClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICCollatorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICCollationElementIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICCollationElementIteratorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICRuleBasedCollatorClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICNormalizerHelperClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICBidiClassObject;
}
}
namespace Elastos {
namespace Text {
EXTERN const _ELASTOS InterfaceID EIID_ICBidiHelperClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKey;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPublicKey;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPrivateKey;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPrincipal;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IMessageDigestSpi;
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertificate;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509Certificate;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509CertificateHelper;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
EXTERN const _ELASTOS InterfaceID EIID_IX500Principal;
}
}
}
}
namespace Elastosx {
namespace Crypto {
EXTERN const _ELASTOS InterfaceID EIID_ISecretKey;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
EXTERN const _ELASTOS InterfaceID EIID_ICallback;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
EXTERN const _ELASTOS InterfaceID EIID_ICallbackHandler;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_IDestroyable;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
EXTERN const _ELASTOS InterfaceID EIID_IOwner;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
EXTERN const _ELASTOS InterfaceID EIID_IAcl;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
EXTERN const _ELASTOS InterfaceID EIID_IAclEntry;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
EXTERN const _ELASTOS InterfaceID EIID_IGroup;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
EXTERN const _ELASTOS InterfaceID EIID_IPermission;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertificate;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509Certificate;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICRL;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICRLSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPath;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathValidatorResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathBuilderResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathBuilderSpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathBuilder;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathBuilderHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathValidator;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathValidatorHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertPathValidatorSpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertStore;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertStoreHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertStoreSpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertificateFactory;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertificateFactoryHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICertificateFactorySpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICollectionCertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ILDAPCertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPKIXParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPKIXBuilderParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPolicyNode;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ITrustAnchor;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPKIXCertPathValidatorResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPKIXCertPathBuilderResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPKIXCertPathChecker;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IPolicyQualifierInfo;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509CRL;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509Extension;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509CRLEntry;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509CRLSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_IX509CertSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IRSAOtherPrimeInfo;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IDSAKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IDSAKeyPairGenerator;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IDSAParams;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IDSAPrivateKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IDSAPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IECKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IECPrivateKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IECPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IRSAKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IRSAPrivateKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IRSAMultiPrimePrivateCrtKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IRSAPrivateCrtKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
EXTERN const _ELASTOS InterfaceID EIID_IRSAPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IAlgorithmParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IDSAPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IDSAPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECField;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECFieldF2m;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECFieldFp;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECGenParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECPoint;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IECPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IEllipticCurve;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IEncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IMGF1ParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IPKCS8EncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IPSSParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IRSAKeyGenParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IRSAPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IRSAMultiPrimePrivateCrtKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IRSAPrivateCrtKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IRSAPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IX509EncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAccessControlContext;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAccessController;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAlgorithmParameterGenerator;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAlgorithmParameterGeneratorHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAlgorithmParameters;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAlgorithmParametersHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IService;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IProvider;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IAuthProvider;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICertificate;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ITimestamp;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICodeSigner;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICodeSource;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IDigestInputStream;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IDigestOutputStream;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IDomainCombiner;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IGuard;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IGuardedObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IIdentity;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IIdentityScope;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IIdentityScopeHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyFactory;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyFactoryHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyFactorySpi;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyPair;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyPairGenerator;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyPairGeneratorHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyPairGeneratorSpi;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreBuilder;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreBuilderHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStorePrivateKeyEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreSecretKeyEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreTrustedCertificateEntry;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreLoadStoreParameter;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreProtectionParameter;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreCallbackHandlerProtection;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStorePasswordProtection;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStore;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IKeyStoreSpi;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IMessageDigest;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IMessageDigestHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPermission;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPermissionCollection;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPolicyParameters;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPolicy;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPolicyHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPrivilegedAction;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IPrivilegedExceptionAction;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IProtectionDomain;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISecureRandom;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISecureRandomSpi;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISecurity;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISignature;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISignatureHelper;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISignedObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ISigner;
}
}
namespace Elastosx {
namespace Crypto {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_IIvParameterSpec;
}
}
}
namespace Elastosx {
namespace Crypto {
EXTERN const _ELASTOS InterfaceID EIID_ICipherSpi;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_IUnresolvedPermission;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
EXTERN const _ELASTOS InterfaceID EIID_IPasswordCallback;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_IPrivateCredentialPermission;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ISubject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ISubjectHelper;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ISubjectDomainCombiner;
}
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICAccessControllerClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICAccessControlContextClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICCodeSignerClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStorePasswordProtectionClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStoreCallbackHandlerProtectionClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStorePrivateKeyEntryClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStoreSecretKeyEntryClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStoreTrustedCertificateEntryClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStoreHelperClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICMessageDigestHelperClassObject;
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICKeyStoreBuilderHelperClassObject;
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICCertPathBuilderHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICCertPathValidatorHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICCertStoreHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICCertificateFactoryClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICCertificateFactoryHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICCollectionCertStoreParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICLDAPCertStoreParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICPKIXBuilderParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICPKIXCertPathBuilderResultClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICPKIXCertPathValidatorResultClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICPKIXParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICPolicyQualifierInfoClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICTrustAnchorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICX509CRLSelectorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICX509CertSelectorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICDSAParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICDSAPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICDSAPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECFieldF2mClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECFieldFpClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECGenParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECPointClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICECPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICEllipticCurveClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICMGF1ParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICPKCS8EncodedKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICPSSParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICRSAKeyGenParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICRSAMultiPrimePrivateCrtKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICRSAOtherPrimeInfoClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICRSAPrivateCrtKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICRSAPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICRSAPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
EXTERN const _ELASTOS InterfaceID EIID_ICX509EncodedKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
EXTERN const _ELASTOS InterfaceID EIID_ICSecurityClassObject;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
EXTERN const _ELASTOS InterfaceID EIID_ICPasswordCallbackClassObject;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
EXTERN const _ELASTOS InterfaceID EIID_ICX500PrincipalClassObject;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ICPrivateCredentialPermissionClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ICAuthPermissionClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ICSubjectClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ICSubjectHelperClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
EXTERN const _ELASTOS InterfaceID EIID_ICSubjectDomainCombinerClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
EXTERN const _ELASTOS InterfaceID EIID_ICX509CertificateHelperClassObject;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
EXTERN const _ELASTOS InterfaceID EIID_ICSSLParametersClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicBoolean;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicInteger32;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicInteger32Array;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicInteger32FieldUpdater;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicInteger64;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicInteger64Array;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicInteger64FieldUpdater;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicMarkableReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicReferenceArray;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicReferenceFieldUpdater;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IAtomicStampedReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_IFencesHelper;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_ILockSupport;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractQueuedInteger64Synchronizer;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractQueuedSynchronizer;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractQueuedSynchronizerHelper;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_ICondition;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_ILock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_IReadWriteLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_IReentrantLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_IReentrantReadWriteLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICallable;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICompletionService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICountDownLatch;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IExecutor;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IExecutors;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IExecutorService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IScheduledExecutorService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IRejectedExecutionHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IRunnableFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IThreadFactory;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ITimeUnit;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ITimeUnitHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IArrayBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IBlockingDeque;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IConcurrentLinkedQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICopyOnWriteArrayList;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICopyOnWriteArrayListHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICyclicBarrier;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IDelayed;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IDelayQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IAbstractExecutorService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IScheduledFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IExchanger;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinPoolManagedBlocker;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinPool;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinPoolForkJoinWorkerThreadFactory;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinPoolHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinWorkerThread;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinTask;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IForkJoinTaskHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IPhaser;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IRunnableScheduledFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ISemaphore;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ISynchronousQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IThreadPoolExecutor;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IThreadLocalRandom;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IThreadLocalRandomHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ITransferQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IConcurrentMap;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_IConcurrentHashMap;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICCountDownLatchClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICCyclicBarrierClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICExecutorCompletionServiceClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICExecutorsClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICFutureTaskClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICLinkedBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICThreadPoolExecutorClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICTimeUnitHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICArrayBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICConcurrentLinkedDequeClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICConcurrentLinkedQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICConcurrentSkipListMapClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICConcurrentSkipListSetClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICDelayQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICExchangerClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICForkJoinWorkerThreadClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICForkJoinPoolClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICForkJoinTaskHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICLinkedBlockingDequeClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICLinkedTransferQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICPhaserClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICPriorityBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICScheduledThreadPoolExecutorClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICSynchronousQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICThreadLocalRandomClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICThreadLocalRandomHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICCopyOnWriteArrayListClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICCopyOnWriteArrayListHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICCopyOnWriteArraySetClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICConcurrentHashMapClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicBooleanClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicInteger32ClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicInteger32ArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicInteger64ClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicInteger64ArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicMarkableReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicReferenceArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICAtomicStampedReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
EXTERN const _ELASTOS InterfaceID EIID_ICFencesHelperClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_ICLockSupportClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_ICReentrantLockClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
EXTERN const _ELASTOS InterfaceID EIID_ICReentrantReadWriteLockClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
EXTERN const _ELASTOS InterfaceID EIID_ICSemaphoreClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IZipConstants;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IChecksum;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IAdler32;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICRC32;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IInflater;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IDeflater;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IZipEntry;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IInflaterInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IInflaterOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IDeflaterInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IDeflaterOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IZipInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IZipOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICheckedInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICheckedOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IGZIPInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IGZIPOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_IZipFile;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICAdler32ClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICCRC32ClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICInflaterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICDeflaterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICInflaterInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICInflaterOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICDeflaterInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICDeflaterOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICCheckedInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICCheckedOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICGZIPInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICGZIPOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICZipInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICZipOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICZipEntryClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
EXTERN const _ELASTOS InterfaceID EIID_ICZipFileClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IName;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IAttributes;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IJarEntry;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IManifest;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IJarFile;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IJarInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IJarOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IPacker;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IUnpacker;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_IPack200Helper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICNameClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICAttributesClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICJarEntryClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICJarFileClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICJarInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICJarOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICManifestClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
EXTERN const _ELASTOS InterfaceID EIID_ICPack200HelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ITypes;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IClob;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IBlob;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_INClob;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IArray;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IStruct;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IDate;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ITime;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IWrapper;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IParameterMetaData;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IRowId;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ITimestamp;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IRef;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISQLStruct;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISQLXML;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISQLInput;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISQLOutput;
}
}
EXTERN const _ELASTOS InterfaceID EIID_ISQLData;
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IStatement;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISQLWarning;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IResultSetMetaData;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IResultSet;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IDatabaseMetaData;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IPreparedStatement;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICallableStatement;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISavePoint;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ISQLPermission;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IConnection;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IDriver;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IDriverManagerHelper;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IDataTruncation;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_IDriverPropertyInfo;
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IStringEncoderHelper;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IAuthorizer;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IBlobR;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IBlobW;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IBlob;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICallback;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IBusyHandler;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ITableResult;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IFunctionContext;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IFunction;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ITrace;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IProfile;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IVm;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IStmt;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IBackup;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IProgressHandler;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IDatabase;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IDatabaseHelper;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IMockFunction;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IConstants;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IShell;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_IDBDump;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IJDBCConnection;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IDatabaseX;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IJDBCStatement;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IJDBCPreparedStatement;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IJDBCResultSetMetaData;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ITableResultX;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IJDBCDatabaseMetaData;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_IJDBCResultSet;
}
}
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICSQLWarningClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICTimeClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICSqlDateClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICTimestampClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICDriverPropertyInfoClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICDataTruncationClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICDriverManagerClassObject;
}
}
namespace Elastos {
namespace Sql {
EXTERN const _ELASTOS InterfaceID EIID_ICSQLPermissionClassObject;
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICTableResultClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICShellClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICDBDumpClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICVmClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICBlobClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICBlobRClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICBlobWClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICDatabaseClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICDatabaseHelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCDriverClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICBackupClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICFunctionContextClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICStmtClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICStringEncoderHelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICSinFuncClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICTestTraceClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICAuthorizerCallbackClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICTestBusyHandlerClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICTestProgressHandlerClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
EXTERN const _ELASTOS InterfaceID EIID_ICMockFunctionClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCConnectionClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCPreparedStatementClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCStatementClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCResultSetMetaDataClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICTableResultXClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCDatabaseMetaDataClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICJDBCResultSetClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
EXTERN const _ELASTOS InterfaceID EIID_ICDatabaseXClassObject;
}
}
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICPathClassLoaderClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICStringWrapperClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICBooleanClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICByteClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICChar32ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICChar16ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICChar8ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICInteger16ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICInteger32ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICInteger64ClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICFloatClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICDoubleClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICArrayOfClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICRandomClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICObjectContainerClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICBlockGuardClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICCloseGuardClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICCloseGuardHelperClassObject;
}
}
namespace Elastos {
namespace Core {
EXTERN const _ELASTOS InterfaceID EIID_ICSystemClassObject;
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS InterfaceID EIID_ICThreadClassObject;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
EXTERN const _ELASTOS InterfaceID EIID_ICThreadGroupClassObject;
}
}
}

namespace Elastos {
namespace Core {
interface ICharSequence;
}
}
namespace Elastos {
namespace Core {
interface IAppendable;
}
}
namespace Elastos {
namespace Core {
interface ICloneable;
}
}
namespace Elastos {
namespace Core {
interface IComparable;
}
}
namespace Elastos {
namespace Core {
interface IComparator;
}
}
namespace Elastos {
namespace Core {
interface IStringBuilder;
}
}
namespace Elastos {
namespace Core {
interface IStringBuffer;
}
}
namespace Elastos {
namespace Core {
interface IArrayOf;
}
}
namespace Elastos {
namespace Core {
interface INumber;
}
}
namespace Elastos {
namespace Core {
interface IBoolean;
}
}
namespace Elastos {
namespace Core {
interface IByte;
}
}
namespace Elastos {
namespace Core {
interface IChar32;
}
}
namespace Elastos {
namespace Core {
interface IChar16;
}
}
namespace Elastos {
namespace Core {
interface IChar8;
}
}
namespace Elastos {
namespace Core {
interface IInteger16;
}
}
namespace Elastos {
namespace Core {
interface IInteger32;
}
}
namespace Elastos {
namespace Core {
interface IInteger64;
}
}
namespace Elastos {
namespace Core {
interface IFloat;
}
}
namespace Elastos {
namespace Core {
interface IDouble;
}
}
namespace Elastos {
namespace Core {
interface IString;
}
}
namespace Elastos {
namespace Core {
interface IRunnable;
}
}
namespace Elastos {
namespace Core {
namespace Threading {
interface ISynchronize;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
interface IThreadUncaughtExceptionHandler;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
interface IThread;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
interface IThreadGroup;
}
}
}
namespace Elastos {
namespace Core {
interface IClassLoader;
}
}
namespace Elastos {
namespace Core {
interface IRandom;
}
}
namespace Elastos {
namespace Core {
interface IThrowable;
}
}
namespace Elastos {
namespace Core {
interface IStackTraceElement;
}
}
namespace Elastos {
namespace Core {
interface IBlockGuardPolicy;
}
}
namespace Elastos {
namespace Core {
interface IBlockGuard;
}
}
namespace Elastos {
namespace Core {
interface ICloseGuardReporter;
}
}
namespace Elastos {
namespace Core {
interface ICloseGuard;
}
}
namespace Elastos {
namespace Core {
interface ICloseGuardHelper;
}
}
namespace Elastos {
namespace Core {
interface IEnum;
}
}
namespace Elastos {
namespace Core {
interface ISystem;
}
}
namespace Elastos {
namespace Math {
interface IMathContext;
}
}
namespace Elastos {
namespace Math {
interface IMathContextHelper;
}
}
namespace Elastos {
namespace Math {
interface IBigDecimal;
}
}
namespace Elastos {
namespace Math {
interface IBigDecimalHelper;
}
}
namespace Elastos {
namespace Math {
interface IBigInteger;
}
}
namespace Elastos {
namespace Math {
interface IBigIntegerHelper;
}
}
namespace Elastos {
namespace Math {
interface ICBigDecimalClassObject;
}
}
namespace Elastos {
namespace Math {
interface ICBigDecimalHelperClassObject;
}
}
namespace Elastos {
namespace Math {
interface ICBigIntegerClassObject;
}
}
namespace Elastos {
namespace Math {
interface ICBigIntegerHelperClassObject;
}
}
namespace Elastos {
namespace Math {
interface ICMathContextClassObject;
}
}
namespace Elastos {
namespace Math {
interface ICMathContextHelperClassObject;
}
}
namespace Libcore {
namespace IO {
interface IOsConstants;
}
}
namespace Libcore {
namespace IO {
interface IOs;
}
}
namespace Libcore {
namespace IO {
interface IIoBridge;
}
}
namespace Libcore {
namespace IO {
interface ILibcore;
}
}
namespace Libcore {
namespace IO {
interface IStructAddrinfo;
}
}
namespace Libcore {
namespace IO {
interface IStructFlock;
}
}
namespace Libcore {
namespace IO {
interface IStructGroupReq;
}
}
namespace Libcore {
namespace IO {
interface IStructLinger;
}
}
namespace Libcore {
namespace IO {
interface IStructPasswd;
}
}
namespace Libcore {
namespace IO {
interface IStructPollfd;
}
}
namespace Libcore {
namespace IO {
interface IStructStat;
}
}
namespace Libcore {
namespace IO {
interface IStructStatFs;
}
}
namespace Libcore {
namespace IO {
interface IStructTimeval;
}
}
namespace Libcore {
namespace IO {
interface IStructTimevalHelper;
}
}
namespace Libcore {
namespace IO {
interface IStructUtsname;
}
}
namespace Libcore {
namespace IO {
interface ISocketTagger;
}
}
namespace Libcore {
namespace IO {
interface ISocketTaggerHelper;
}
}
namespace Libcore {
namespace IO {
interface IBase64;
}
}
namespace Libcore {
namespace IO {
interface ICStructAddrinfoClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICOsConstantsClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICPosixClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICIoBridgeClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICLibcoreClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructLingerClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructPasswdClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructPollfdClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructStatClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructStatFsClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructTimevalClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructUtsnameClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICStructGroupReqClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICSocketTaggerHelperClassObject;
}
}
namespace Libcore {
namespace IO {
interface ICBase64ClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICharacterIterator;
}
}
namespace Elastos {
namespace Text {
interface ICollationKey;
}
}
namespace Elastos {
namespace Text {
interface IStringCharacterIterator;
}
}
namespace Elastos {
namespace Text {
interface IDecimalFormatSymbols;
}
}
namespace Elastos {
namespace Text {
interface IDecimalFormatSymbolsHelper;
}
}
namespace Elastos {
namespace Text {
interface IFieldPosition;
}
}
namespace Elastos {
namespace Text {
interface IParsePosition;
}
}
namespace Elastos {
namespace Text {
interface IAttributedCharacterIteratorAttribute;
}
}
namespace Elastos {
namespace Text {
interface IAttributedCharacterIterator;
}
}
namespace Elastos {
namespace Text {
interface IAttributedString;
}
}
namespace Elastos {
namespace Text {
interface ICAttributedCharacterIteratorAttributeClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDecimalFormatSymbolsClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDecimalFormatSymbolsHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICFieldPositionClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICParsePositionClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICStringCharacterIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICAttributedStringClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICollationKeyICU;
}
}
namespace Libcore {
namespace ICU {
interface ILocale;
}
}
namespace Libcore {
namespace ICU {
interface ILocaleHelper;
}
}
namespace Libcore {
namespace ICU {
interface ILocaleData;
}
}
namespace Libcore {
namespace ICU {
interface ILocaleDataHelper;
}
}
namespace Libcore {
namespace ICU {
interface IICUHelper;
}
}
namespace Libcore {
namespace ICU {
interface IRuleBasedCollatorICU;
}
}
namespace Libcore {
namespace ICU {
interface ITimeZones;
}
}
namespace Libcore {
namespace ICU {
interface ICollationElementIteratorICU;
}
}
namespace Libcore {
namespace ICU {
interface ICollationElementIteratorICUHelper;
}
}
namespace Libcore {
namespace ICU {
interface INativeDecimalFormat;
}
}
namespace Libcore {
namespace ICU {
interface INativeBreakIterator;
}
}
namespace Libcore {
namespace ICU {
interface INativeBreakIteratorHelper;
}
}
namespace Libcore {
namespace ICU {
interface INativeCollationHelper;
}
}
namespace Libcore {
namespace ICU {
interface INativeIDNHelper;
}
}
namespace Libcore {
namespace ICU {
interface INativePluralRules;
}
}
namespace Libcore {
namespace ICU {
interface INativePluralRulesHelper;
}
}
namespace Libcore {
namespace ICU {
interface INativeNormalizerHelper;
}
}
namespace Libcore {
namespace ICU {
interface ICLocaleClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICLocaleHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICLocaleDataHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICICUHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICCollationElementIteratorICUHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICCollationKeyICUClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICLocaleDataClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativeBreakIteratorHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativeCollationHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativeDecimalFormatClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativeIDNHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativeNormalizerHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativePluralRulesClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICNativePluralRulesHelperClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICRuleBasedCollatorICUClassObject;
}
}
namespace Libcore {
namespace ICU {
interface ICTimeZonesClassObject;
}
}
namespace Libcore {
namespace Utility {
interface IBasicLruCache;
}
}
namespace Libcore {
namespace Utility {
interface ICollectionUtils;
}
}
namespace Libcore {
namespace Utility {
interface ICBasicLruCacheClassObject;
}
}
namespace Libcore {
namespace Utility {
interface ICCollectionUtilsClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICloseable;
}
}
namespace Elastos {
namespace IO {
interface IFlushable;
}
}
namespace Elastos {
namespace IO {
interface IInputStream;
}
}
namespace Elastos {
namespace IO {
interface IFilterInputStream;
}
}
namespace Elastos {
namespace IO {
interface IBufferedInputStream;
}
}
namespace Elastos {
namespace IO {
interface IOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IFilterOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IBufferedOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IReadable;
}
}
namespace Elastos {
namespace IO {
interface IReader;
}
}
namespace Elastos {
namespace IO {
interface IBufferedReader;
}
}
namespace Elastos {
namespace IO {
interface IWriter;
}
}
namespace Elastos {
namespace IO {
interface IBufferedWriter;
}
}
namespace Elastos {
namespace IO {
interface IByteArrayInputStream;
}
}
namespace Elastos {
namespace IO {
interface IByteArrayOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IBufferIterator;
}
}
namespace Elastos {
namespace IO {
interface IHeapBufferIterator;
}
}
namespace Elastos {
namespace IO {
interface ICharArrayReader;
}
}
namespace Elastos {
namespace IO {
interface ICharArrayWriter;
}
}
namespace Elastos {
namespace IO {
interface IDataInput;
}
}
namespace Elastos {
namespace IO {
interface IDataInputStream;
}
}
namespace Elastos {
namespace IO {
interface IDataInputStreamHelper;
}
}
namespace Elastos {
namespace IO {
interface IDataOutput;
}
}
namespace Elastos {
namespace IO {
interface IDataOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IFile;
}
}
namespace Elastos {
namespace IO {
interface IFileHelper;
}
}
namespace Elastos {
namespace IO {
interface IFileDescriptor;
}
}
namespace Elastos {
namespace IO {
interface IFileDescriptorHelper;
}
}
namespace Elastos {
namespace IO {
interface IFileFilter;
}
}
namespace Elastos {
namespace IO {
interface IFileInputStream;
}
}
namespace Elastos {
namespace IO {
interface IFileOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IPermission;
}
}
namespace Elastos {
namespace IO {
interface IPermissionCollection;
}
}
namespace Elastos {
namespace IO {
interface IFilePermission;
}
}
namespace Elastos {
namespace IO {
interface IInputStreamReader;
}
}
namespace Elastos {
namespace IO {
interface IFileReader;
}
}
namespace Elastos {
namespace IO {
interface IOutputStreamWriter;
}
}
namespace Elastos {
namespace IO {
interface IFileWriter;
}
}
namespace Elastos {
namespace IO {
interface IFilenameFilter;
}
}
namespace Elastos {
namespace IO {
interface IFilterReader;
}
}
namespace Elastos {
namespace IO {
interface IFilterWriter;
}
}
namespace Elastos {
namespace IO {
interface ILineNumberInputStream;
}
}
namespace Elastos {
namespace IO {
interface ILineNumberReader;
}
}
namespace Elastos {
namespace IO {
interface IObjectInput;
}
}
namespace Elastos {
namespace IO {
interface IObjectInputStream;
}
}
namespace Elastos {
namespace IO {
interface IObjectInputStreamGetField;
}
}
namespace Elastos {
namespace IO {
interface IObjectInputValidation;
}
}
namespace Elastos {
namespace IO {
interface IObjectOutput;
}
}
namespace Elastos {
namespace IO {
interface IObjectOutputStream;
}
}
namespace Elastos {
namespace IO {
interface IObjectOutputStreamPutField;
}
}
namespace Elastos {
namespace IO {
interface ISerializable;
}
}
namespace Elastos {
namespace IO {
interface IObjectStreamClass;
}
}
namespace Elastos {
namespace IO {
interface IObjectStreamClassHelper;
}
}
namespace Elastos {
namespace IO {
interface IObjectStreamField;
}
}
namespace Elastos {
namespace IO {
interface IPrintStream;
}
}
namespace Elastos {
namespace IO {
interface IPrintWriter;
}
}
namespace Elastos {
namespace IO {
interface IPushbackInputStream;
}
}
namespace Elastos {
namespace IO {
interface IPushbackReader;
}
}
namespace Elastos {
namespace IO {
interface IRandomAccessFile;
}
}
namespace Elastos {
namespace IO {
interface ISequenceInputStream;
}
}
namespace Elastos {
namespace IO {
interface IStreamTokenizer;
}
}
namespace Elastos {
namespace IO {
interface IStringBufferInputStream;
}
}
namespace Elastos {
namespace IO {
interface IStringReader;
}
}
namespace Elastos {
namespace IO {
interface IStringWriter;
}
}
namespace Elastos {
namespace IO {
interface IStreams;
}
}
namespace Elastos {
namespace IO {
interface IMemory;
}
}
namespace Elastos {
namespace IO {
interface IByteOrderHelper;
}
}
namespace Elastos {
namespace IO {
interface IBuffer;
}
}
namespace Elastos {
namespace IO {
interface IByteBuffer;
}
}
namespace Elastos {
namespace IO {
interface IByteBufferHelper;
}
}
namespace Elastos {
namespace IO {
interface ICharBuffer;
}
}
namespace Elastos {
namespace IO {
interface ICharBufferHelper;
}
}
namespace Elastos {
namespace IO {
interface IDoubleBuffer;
}
}
namespace Elastos {
namespace IO {
interface IDoubleBufferHelper;
}
}
namespace Elastos {
namespace IO {
interface IFloatBuffer;
}
}
namespace Elastos {
namespace IO {
interface IFloatBufferHelper;
}
}
namespace Elastos {
namespace IO {
interface IInt16Buffer;
}
}
namespace Elastos {
namespace IO {
interface IInt16BufferHelper;
}
}
namespace Elastos {
namespace IO {
interface IInt32Buffer;
}
}
namespace Elastos {
namespace IO {
interface IInt32BufferHelper;
}
}
namespace Elastos {
namespace IO {
interface IInt64Buffer;
}
}
namespace Elastos {
namespace IO {
interface IInt64BufferHelper;
}
}
namespace Elastos {
namespace IO {
interface IIoUtils;
}
}
namespace Elastos {
namespace IO {
interface IUnsafeByteSequence;
}
}
namespace Elastos {
namespace IO {
interface IMappedByteBuffer;
}
}
namespace Elastos {
namespace IO {
interface INIOAccessHelper;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IReadableByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IWritableByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IChannels;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IScatteringByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IGatheringByteChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IInterruptibleChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IFileChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface IAbstractInterruptibleChannel;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISelectableChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISelectionKey;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISelector;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISocketChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISocketChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IServerSocketChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IServerSocketChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface IAbstractSelectableChannel;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IDatagramChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IDatagramChannelHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISinkChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ISourceChannel;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IPipe;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IPipeHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface IFileLock;
}
}
}
namespace Elastos {
namespace IO {
interface IFileDescriptorChannel;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface ISelectorProvider;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface ISelectorProviderHelper;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface IAbstractSelector;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface IAbstractSelectionKey;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICharset;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICharsetHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICoderResult;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICoderResultHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICharsetDecoder;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICharsetEncoder;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICodingErrorAction;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICodingErrorActionHelper;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICharsets;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface IModifiedUtf8;
}
}
}
namespace Elastos {
namespace IO {
interface INativeConverterHelper;
}
}
namespace Elastos {
namespace IO {
namespace Charset {
namespace Spi {
interface ICharsetProvider;
}
}
}
}
namespace Elastos {
namespace IO {
interface ISelectorImpl;
}
}
namespace Elastos {
namespace IO {
interface ISelectionKeyImpl;
}
}
namespace Elastos {
namespace IO {
interface IPipeImpl;
}
}
namespace Elastos {
namespace IO {
interface IFileChannelImpl;
}
}
namespace Elastos {
namespace IO {
interface ICByteOrderHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICBufferedInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICBufferedOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICBufferedReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICBufferedWriterClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICByteArrayInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICByteArrayOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICCharArrayReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICCharArrayWriterClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICCharBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICDataInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICDataInputStreamHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICDataOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileDescriptorClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileDescriptorHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFilePermissionClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFileWriterClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFilterInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFilterOutputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICInputStreamReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICLineNumberInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICLineNumberReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICOutputStreamWriterClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICPrintStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICPrintWriterClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICPushbackInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICPushbackReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICRandomAccessFileClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICSequenceInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICStringBufferInputStreamClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICStringReaderClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICStringWriterClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICByteBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICDoubleBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICHeapBufferIteratorClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICStreamsClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICMemoryClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICIoUtilsClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICUnsafeByteSequenceClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICFloatBufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICInt16BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICInt32BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICInt64BufferHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICNativeConverterHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICNIOAccessHelperClassObject;
}
}
namespace Elastos {
namespace IO {
interface ICSelectorImplClassObject;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ICChannelsClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICCodingErrorActionClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICCharsetHelperClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICCharsetsClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICCoderResultClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICCoderResultHelperClassObject;
}
}
}
namespace Elastos {
namespace IO {
namespace Charset {
interface ICModifiedUtf8ClassObject;
}
}
}
namespace Elastos {
namespace IO {
interface ICSelectorProviderImplClassObject;
}
}
namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
interface ICSelectorProviderHelperClassObject;
}
}
}
}
namespace Elastos {
namespace IO {
namespace Channels {
interface ICDatagramChannelHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
interface IBitSet;
}
}
namespace Elastos {
namespace Utility {
interface IBitSetHelper;
}
}
namespace Elastos {
namespace Utility {
interface IDate;
}
}
namespace Elastos {
namespace Utility {
interface IDateHelper;
}
}
namespace Elastos {
namespace Utility {
interface ICalendar;
}
}
namespace Elastos {
namespace Utility {
interface ICalendarHelper;
}
}
namespace Elastos {
namespace Utility {
interface IIterable;
}
}
namespace Elastos {
namespace Utility {
interface ICollection;
}
}
namespace Elastos {
namespace Utility {
interface IList;
}
}
namespace Elastos {
namespace Utility {
interface IMapEntry;
}
}
namespace Elastos {
namespace Utility {
interface IMap;
}
}
namespace Elastos {
namespace Utility {
interface ILinkedList;
}
}
namespace Elastos {
namespace Utility {
interface IDictionary;
}
}
namespace Elastos {
namespace Utility {
interface IProperties;
}
}
namespace Elastos {
namespace Utility {
interface IEnumeration;
}
}
namespace Elastos {
namespace Utility {
interface IGregorianCalendar;
}
}
namespace Elastos {
namespace Utility {
interface IIterator;
}
}
namespace Elastos {
namespace Utility {
interface IListIterator;
}
}
namespace Elastos {
namespace Utility {
interface IObjectStringMap;
}
}
namespace Elastos {
namespace Utility {
interface IObjectInt32Map;
}
}
namespace Elastos {
namespace Utility {
interface IObjectMap;
}
}
namespace Elastos {
namespace Utility {
interface IQueue;
}
}
namespace Elastos {
namespace Utility {
interface IDeque;
}
}
namespace Elastos {
namespace Utility {
interface IRandomAccess;
}
}
namespace Elastos {
namespace Utility {
interface ITimeZone;
}
}
namespace Elastos {
namespace Utility {
interface ITimeZoneHelper;
}
}
namespace Elastos {
namespace Utility {
interface IZoneInfo;
}
}
namespace Elastos {
namespace Utility {
interface ISimpleTimeZone;
}
}
namespace Elastos {
namespace Utility {
interface ITimerTask;
}
}
namespace Elastos {
namespace Utility {
interface ITimer;
}
}
namespace Elastos {
namespace Utility {
interface ICurrency;
}
}
namespace Elastos {
namespace Utility {
interface ICurrencyHelper;
}
}
namespace Elastos {
namespace Utility {
interface IUUID;
}
}
namespace Elastos {
namespace Utility {
interface IUUIDHelper;
}
}
namespace Elastos {
namespace Utility {
interface IZoneInfoDB;
}
}
namespace Elastos {
namespace Utility {
interface ITimeZoneGetter;
}
}
namespace Elastos {
namespace Utility {
interface ITimeZoneGetterHelper;
}
}
namespace Elastos {
namespace Utility {
interface IArrayList;
}
}
namespace Elastos {
namespace Utility {
interface IFormattableFlags;
}
}
namespace Elastos {
namespace Utility {
interface IFormatter;
}
}
namespace Elastos {
namespace Utility {
interface IFormattable;
}
}
namespace Elastos {
namespace Utility {
interface IArrayDeque;
}
}
namespace Elastos {
namespace Utility {
interface IComparableTimSortHelper;
}
}
namespace Elastos {
namespace Utility {
interface IDualPivotQuicksortHelper;
}
}
namespace Elastos {
namespace Utility {
interface IEventListener;
}
}
namespace Elastos {
namespace Utility {
interface IEventListenerProxy;
}
}
namespace Elastos {
namespace Utility {
interface IEventObject;
}
}
namespace Elastos {
namespace Utility {
interface IResourceBundle;
}
}
namespace Elastos {
namespace Utility {
interface IResourceBundleControl;
}
}
namespace Elastos {
namespace Utility {
interface IResourceBundleHelper;
}
}
namespace Elastos {
namespace Utility {
interface IListResourceBundle;
}
}
namespace Elastos {
namespace Utility {
interface ISortedMap;
}
}
namespace Elastos {
namespace Utility {
interface INavigableMap;
}
}
namespace Elastos {
namespace Utility {
interface ISet;
}
}
namespace Elastos {
namespace Utility {
interface ISortedSet;
}
}
namespace Elastos {
namespace Utility {
interface INavigableSet;
}
}
namespace Elastos {
namespace Utility {
interface IObserver;
}
}
namespace Elastos {
namespace Utility {
interface IObservable;
}
}
namespace Elastos {
namespace Utility {
interface IPriorityQueue;
}
}
namespace Elastos {
namespace Utility {
interface IPropertyResourceBundle;
}
}
namespace Elastos {
namespace Utility {
interface IScanner;
}
}
namespace Elastos {
namespace Utility {
interface IServiceLoader;
}
}
namespace Elastos {
namespace Utility {
interface IServiceLoaderHelper;
}
}
namespace Elastos {
namespace Utility {
interface IVector;
}
}
namespace Elastos {
namespace Utility {
interface IArrays;
}
}
namespace Elastos {
namespace Utility {
interface IStack;
}
}
namespace Elastos {
namespace Utility {
interface IStringTokenizer;
}
}
namespace Elastos {
namespace Utility {
interface IUnsafeArrayList;
}
}
namespace Elastos {
namespace Utility {
interface ICollections;
}
}
namespace Elastos {
namespace Utility {
interface IEnumMap;
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface IMatchResult;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface IMatcher;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface IMatcherHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface ISplitter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface IPattern;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface IPatternHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILevel;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILevelHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IErrorManager;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IFilter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILogFormatter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILogHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILogger;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IErrorManagerHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILoggingMXBean;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILogManager;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILogManagerHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ILogRecord;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IStreamHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IConsoleHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IMemoryHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ISimpleFormatter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface ISocketHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Logging {
interface IXMLFormatter;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface INodeChangeEvent;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface INodeChangeListener;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IPreferenceChangeEvent;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IPreferenceChangeListener;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IPreferences;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IPreferencesHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IPreferencesFactory;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IXMLParserHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IAbstractPreferences;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IFilePreferencesFactoryImpl;
}
}
}
namespace Elastos {
namespace Utility {
namespace Prefs {
interface IFilePreferencesImpl;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
interface ILocaleServiceProvider;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
interface ICurrencyNameProvider;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
interface ILocaleNameProvider;
}
}
}
namespace Elastos {
namespace Utility {
namespace Spi {
interface ITimeZoneNameProvider;
}
}
}
namespace Elastos {
namespace Utility {
interface ICBitSetClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICBitSetHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICObjectStringMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICObjectInt32MapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICObjectMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICZoneInfoDBClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICUUIDClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICUUIDHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICDateClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICDateHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICGregorianCalendarClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICCalendarHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICTimeZoneHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICSimpleTimeZoneClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICZoneInfoClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICTimerClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICPropertiesClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICTimeZoneGetterHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICLinkedListClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICArrayListClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICArrayDequeClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICVectorClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICArraysClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICCollectionsClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICFormatterClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICComparableTimSortHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICCurrencyHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICHashSetClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICHashTableClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICIdentityHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICTreeMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICTreeSetClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICWeakHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICLinkedHashMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICLinkedHashSetClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICEnumMapClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICDualPivotQuicksortHelperClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICStackClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICStringTokenizerClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICScannerClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICPropertyResourceBundleClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICPriorityQueueClassObject;
}
}
namespace Elastos {
namespace Utility {
interface ICObservableClassObject;
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface ICMatcherClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface ICMatcherHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface ICSplitterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Regex {
interface ICPatternHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
interface IAuthenticator;
}
}
namespace Elastos {
namespace Net {
interface IAuthenticatorHelper;
}
}
namespace Elastos {
namespace Net {
interface ICacheRequest;
}
}
namespace Elastos {
namespace Net {
interface ICacheResponse;
}
}
namespace Elastos {
namespace Net {
interface IContentHandler;
}
}
namespace Elastos {
namespace Net {
interface IContentHandlerFactory;
}
}
namespace Elastos {
namespace Net {
interface ICookieHandler;
}
}
namespace Elastos {
namespace Net {
interface ICookieHandlerHelper;
}
}
namespace Elastos {
namespace Net {
interface IURLStreamHandler;
}
}
namespace Elastos {
namespace Net {
interface IURLStreamHandlerFactory;
}
}
namespace Elastos {
namespace Net {
interface IURI;
}
}
namespace Elastos {
namespace Net {
interface IURIHelper;
}
}
namespace Elastos {
namespace Net {
interface IURL;
}
}
namespace Elastos {
namespace Net {
interface ICookieManager;
}
}
namespace Elastos {
namespace Net {
interface ICookiePolicy;
}
}
namespace Elastos {
namespace Net {
interface ICookiePolicyHelper;
}
}
namespace Elastos {
namespace Net {
interface ICookieStore;
}
}
namespace Elastos {
namespace Net {
interface IDatagramPacket;
}
}
namespace Elastos {
namespace Net {
interface IDatagramSocket;
}
}
namespace Elastos {
namespace Net {
interface IDatagramSocketHelper;
}
}
namespace Elastos {
namespace Net {
interface ISocketOptions;
}
}
namespace Elastos {
namespace Net {
interface IDatagramSocketImpl;
}
}
namespace Elastos {
namespace Net {
interface IDatagramSocketImplFactory;
}
}
namespace Elastos {
namespace Net {
interface IResponseCache;
}
}
namespace Elastos {
namespace Net {
interface IResponseCacheHelper;
}
}
namespace Elastos {
namespace Net {
interface IURLConnection;
}
}
namespace Elastos {
namespace Net {
interface IURLConnectionHelper;
}
}
namespace Elastos {
namespace Net {
interface IHttpURLConnection;
}
}
namespace Elastos {
namespace Net {
interface IHttpURLConnectionHelper;
}
}
namespace Elastos {
namespace Net {
interface IExtendedResponseCache;
}
}
namespace Elastos {
namespace Net {
interface IFileNameMap;
}
}
namespace Elastos {
namespace Net {
interface IMimeUtils;
}
}
namespace Elastos {
namespace Net {
interface IHttpCookie;
}
}
namespace Elastos {
namespace Net {
interface IIDNHelper;
}
}
namespace Elastos {
namespace Net {
interface IInetAddress;
}
}
namespace Elastos {
namespace Net {
interface IInetAddressHelper;
}
}
namespace Elastos {
namespace Net {
interface IInet4Address;
}
}
namespace Elastos {
namespace Net {
interface IInet4AddressHelper;
}
}
namespace Elastos {
namespace Net {
interface IInet6Address;
}
}
namespace Elastos {
namespace Net {
interface IInet6AddressHelper;
}
}
namespace Elastos {
namespace Net {
interface ISocketAddress;
}
}
namespace Elastos {
namespace Net {
interface IInetSocketAddress;
}
}
namespace Elastos {
namespace Net {
interface IInetSocketAddressHelper;
}
}
namespace Elastos {
namespace Net {
interface IInterfaceAddress;
}
}
namespace Elastos {
namespace Net {
interface IMulticastSocket;
}
}
namespace Elastos {
namespace Net {
interface INetworkInterface;
}
}
namespace Elastos {
namespace Net {
interface INetworkInterfaceHelper;
}
}
namespace Elastos {
namespace Net {
interface IPasswordAuthentication;
}
}
namespace Elastos {
namespace Net {
interface IPlainDatagramSocketImpl;
}
}
namespace Elastos {
namespace Net {
interface ISocketImpl;
}
}
namespace Elastos {
namespace Net {
interface IPlainSocketImpl;
}
}
namespace Elastos {
namespace Net {
interface IPlainServerSocketImpl;
}
}
namespace Elastos {
namespace Net {
interface IProxy;
}
}
namespace Elastos {
namespace Net {
interface IProxyHelper;
}
}
namespace Elastos {
namespace Net {
interface IProxySelector;
}
}
namespace Elastos {
namespace Net {
interface IProxySelectorHelper;
}
}
namespace Elastos {
namespace Net {
interface ISecureCacheResponse;
}
}
namespace Elastos {
namespace Net {
interface IServerSocket;
}
}
namespace Elastos {
namespace Net {
interface IServerSocketHelper;
}
}
namespace Elastos {
namespace Net {
interface ISocket;
}
}
namespace Elastos {
namespace Net {
interface ISocketHelper;
}
}
namespace Elastos {
namespace Net {
interface ISocketImplFactory;
}
}
namespace Elastos {
namespace Net {
interface ISocketInputStream;
}
}
namespace Elastos {
namespace Net {
interface ISocketOutputStream;
}
}
namespace Elastos {
namespace Net {
interface ISocks4Message;
}
}
namespace Elastos {
namespace Net {
interface IURLEncoder;
}
}
namespace Elastos {
namespace Net {
interface IURLDecoder;
}
}
namespace Elastos {
namespace Net {
interface IUriCodecHelper;
}
}
namespace Elastos {
namespace Net {
interface ISocketChannel;
}
}
namespace Elastos {
namespace Net {
interface IServerSocketChannel;
}
}
namespace Elastos {
namespace Net {
interface IRawSocket;
}
}
namespace Elastos {
namespace Net {
interface IJarURLConnection;
}
}
namespace Elastos {
namespace Net {
interface INetPermission;
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IAbstractHttpInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IAbstractHttpOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IChallenge;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IChunkedInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IChunkedOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IFixedLengthInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IFixedLengthOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IRawHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IRawHeadersHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICacheControlHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHeaderParserHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpConnectionAddress;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpConnectionHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpConnectionPool;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpDate;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IResponseHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IRequestHeaders;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpResponseCache;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpsHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpEngine;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IHttpURLConnectionImpl;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IRetryableOutputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface IUnknownLengthHttpInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IFileHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IFileURLConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IFtpHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IFtpURLConnection;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IFtpURLInputStream;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IJarHandler;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IJarURLConnectionImpl;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IJarURLConnectionImplHelper;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface IUrlUtilsHelper;
}
}
}
namespace Elastosx {
namespace Net {
interface ISocketFactory;
}
}
namespace Elastosx {
namespace Net {
interface ISocketFactoryHelper;
}
}
namespace Elastosx {
namespace Net {
interface IServerSocketFactory;
}
}
namespace Elastosx {
namespace Net {
interface IServerSocketFactoryHelper;
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IKeyManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IManagerFactoryParameters;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ITrustManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLSession;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLSessionContext;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLEngineResult;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLEngine;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLParameters;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IHandshakeCompletedListener;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IHandshakeCompletedEvent;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLSocket;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IX509TrustManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLContextSpi;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLSocketFactory;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLSocketFactoryHelper;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLServerSocketFactory;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLServerSocketFactoryHelper;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IX509KeyManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IX509ExtendedKeyManager;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface IKeyManagerFactorySpi;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ISSLServerSocket;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ITrustManagerFactorySpi;
}
}
}
namespace Elastos {
namespace Net {
interface ICCookieManagerClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICCookiePolicyHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICDatagramPacketClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICDatagramSocketClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICHttpCookieClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInetAddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInet4AddressClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInet4AddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInet6AddressClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInet6AddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInetSocketAddressClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInetSocketAddressHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICPasswordAuthenticationClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICProxyClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICURIClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICURLClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICURLEncoderClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICURLDecoderClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICNetworkInterfaceHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICMimeUtilsClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICProxyHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICCookieHandlerHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICUriCodecHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICIDNHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICSocketClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICSocketHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICServerSocketClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICServerSocketHelperClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICPlainSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICPlainServerSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICSocketInputStreamClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICSocketOutputStreamClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICMulticastSocketClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICRawSocketClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICPlainDatagramSocketImplClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICSocks4MessageClassObject;
}
}
namespace Elastos {
namespace Net {
interface ICInetAddressClassObject;
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICAbstractHttpInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICChallengeClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICChunkedInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICChunkedOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICFixedLengthInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICFixedLengthOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICHeaderParserHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICHttpDateClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICHttpHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICHttpResponseCacheClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICHttpsHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICHttpEngineClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICRawHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICRawHeadersHelperClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICRequestHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICResponseHeadersClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICRetryableOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Http {
interface ICUnknownLengthHttpInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface ICFileHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface ICFileURLConnectionClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface ICFtpHandlerClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface ICFtpURLInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Net {
namespace Url {
interface ICUrlUtilsHelperClassObject;
}
}
}
namespace Elastos {
namespace Text {
interface IAnnotation;
}
}
namespace Elastos {
namespace Text {
interface IFormatField;
}
}
namespace Elastos {
namespace Text {
interface IFormat;
}
}
namespace Elastos {
namespace Text {
interface IDateFormatField;
}
}
namespace Elastos {
namespace Text {
interface IDateFormatFieldHelper;
}
}
namespace Elastos {
namespace Text {
interface IDateFormat;
}
}
namespace Elastos {
namespace Text {
interface IDateFormatHelper;
}
}
namespace Elastos {
namespace Text {
interface IDateFormatSymbols;
}
}
namespace Elastos {
namespace Text {
interface IDateFormatSymbolsHelper;
}
}
namespace Elastos {
namespace Text {
interface INumberFormatField;
}
}
namespace Elastos {
namespace Text {
interface INumberFormat;
}
}
namespace Elastos {
namespace Text {
interface INumberFormatHelper;
}
}
namespace Elastos {
namespace Text {
interface IMessageFormatField;
}
}
namespace Elastos {
namespace Text {
interface IMessageFormat;
}
}
namespace Elastos {
namespace Text {
interface IChoiceFormat;
}
}
namespace Elastos {
namespace Text {
interface IChoiceFormatHelper;
}
}
namespace Elastos {
namespace Text {
interface IDecimalFormat;
}
}
namespace Elastos {
namespace Text {
interface ISimpleDateFormat;
}
}
namespace Elastos {
namespace Text {
interface IBreakIterator;
}
}
namespace Elastos {
namespace Text {
interface IBreakIteratorHelper;
}
}
namespace Elastos {
namespace Text {
interface ICollator;
}
}
namespace Elastos {
namespace Text {
interface ICollatorHelper;
}
}
namespace Elastos {
namespace Text {
interface ICollationElementIterator;
}
}
namespace Elastos {
namespace Text {
interface ICollationElementIteratorHelper;
}
}
namespace Elastos {
namespace Text {
interface IRuleBasedCollator;
}
}
namespace Elastos {
namespace Text {
interface INormalizer;
}
}
namespace Elastos {
namespace Text {
interface INormalizerHelper;
}
}
namespace Elastos {
namespace Text {
interface IBidi;
}
}
namespace Elastos {
namespace Text {
interface IBidiHelper;
}
}
namespace Elastos {
namespace Text {
interface IRuleBasedBreakIterator;
}
}
namespace Elastos {
namespace Text {
namespace Spi {
interface IBreakIteratorProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
interface ICollatorProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
interface IDateFormatProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
interface IDateFormatSymbolsProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
interface IDecimalFormatSymbolsProvider;
}
}
}
namespace Elastos {
namespace Text {
namespace Spi {
interface INumberFormatProvider;
}
}
}
namespace Elastos {
namespace Text {
interface ICAnnotationClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDateFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDateFormatFieldHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDateFormatSymbolsClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDateFormatSymbolsHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICBreakIteratorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICRuleBasedBreakIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICNumberFormatFieldClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICNumberFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICMessageFormatClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICMessageFormatFieldClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICChoiceFormatClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICChoiceFormatHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICDecimalFormatClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICSimpleDateFormatClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICCollatorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICCollationElementIteratorClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICCollationElementIteratorHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICRuleBasedCollatorClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICNormalizerHelperClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICBidiClassObject;
}
}
namespace Elastos {
namespace Text {
interface ICBidiHelperClassObject;
}
}
namespace Elastos {
namespace Security {
interface IKey;
}
}
namespace Elastos {
namespace Security {
interface IPublicKey;
}
}
namespace Elastos {
namespace Security {
interface IPrivateKey;
}
}
namespace Elastos {
namespace Security {
interface IPrincipal;
}
}
namespace Elastos {
namespace Security {
interface IMessageDigestSpi;
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
interface ICertificate;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
interface IX509Certificate;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
interface IX509CertificateHelper;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
interface IX500Principal;
}
}
}
}
namespace Elastosx {
namespace Crypto {
interface ISecretKey;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
interface ICallback;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
interface ICallbackHandler;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface IDestroyable;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
interface IOwner;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
interface IAcl;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
interface IAclEntry;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
interface IGroup;
}
}
}
namespace Elastos {
namespace Security {
namespace Acl {
interface IPermission;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertificate;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IX509Certificate;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICRL;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICRLSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPath;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathValidatorResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathBuilderResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathBuilderSpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathBuilder;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathBuilderHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathValidator;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathValidatorHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertPathValidatorSpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertStore;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertStoreHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertStoreSpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertificateFactory;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertificateFactoryHelper;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICertificateFactorySpi;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICollectionCertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ILDAPCertStoreParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPKIXParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPKIXBuilderParameters;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPolicyNode;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ITrustAnchor;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPKIXCertPathValidatorResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPKIXCertPathBuilderResult;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPKIXCertPathChecker;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IPolicyQualifierInfo;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IX509CRL;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IX509Extension;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IX509CRLEntry;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IX509CRLSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface IX509CertSelector;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IRSAOtherPrimeInfo;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IDSAKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IDSAKeyPairGenerator;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IDSAParams;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IDSAPrivateKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IDSAPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IECKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IECPrivateKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IECPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IRSAKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IRSAPrivateKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IRSAMultiPrimePrivateCrtKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IRSAPrivateCrtKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Interfaces {
interface IRSAPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IAlgorithmParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IDSAPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IDSAPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECField;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECFieldF2m;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECFieldFp;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECGenParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECPoint;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IECPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IEllipticCurve;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IEncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IMGF1ParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IPKCS8EncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IPSSParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IPublicKey;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IRSAKeyGenParameterSpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IRSAPrivateKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IRSAMultiPrimePrivateCrtKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IRSAPrivateCrtKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IRSAPublicKeySpec;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface IX509EncodedKeySpec;
}
}
}
namespace Elastos {
namespace Security {
interface IAccessControlContext;
}
}
namespace Elastos {
namespace Security {
interface IAccessController;
}
}
namespace Elastos {
namespace Security {
interface IAlgorithmParameterGenerator;
}
}
namespace Elastos {
namespace Security {
interface IAlgorithmParameterGeneratorHelper;
}
}
namespace Elastos {
namespace Security {
interface IAlgorithmParameters;
}
}
namespace Elastos {
namespace Security {
interface IAlgorithmParametersHelper;
}
}
namespace Elastos {
namespace Security {
interface IService;
}
}
namespace Elastos {
namespace Security {
interface IProvider;
}
}
namespace Elastos {
namespace Security {
interface IAuthProvider;
}
}
namespace Elastos {
namespace Security {
interface ICertificate;
}
}
namespace Elastos {
namespace Security {
interface ITimestamp;
}
}
namespace Elastos {
namespace Security {
interface ICodeSigner;
}
}
namespace Elastos {
namespace Security {
interface ICodeSource;
}
}
namespace Elastos {
namespace Security {
interface IDigestInputStream;
}
}
namespace Elastos {
namespace Security {
interface IDigestOutputStream;
}
}
namespace Elastos {
namespace Security {
interface IDomainCombiner;
}
}
namespace Elastos {
namespace Security {
interface IGuard;
}
}
namespace Elastos {
namespace Security {
interface IGuardedObject;
}
}
namespace Elastos {
namespace Security {
interface IIdentity;
}
}
namespace Elastos {
namespace Security {
interface IIdentityScope;
}
}
namespace Elastos {
namespace Security {
interface IIdentityScopeHelper;
}
}
namespace Elastos {
namespace Security {
interface IKeyFactory;
}
}
namespace Elastos {
namespace Security {
interface IKeyFactoryHelper;
}
}
namespace Elastos {
namespace Security {
interface IKeyFactorySpi;
}
}
namespace Elastos {
namespace Security {
interface IKeyPair;
}
}
namespace Elastos {
namespace Security {
interface IKeyPairGenerator;
}
}
namespace Elastos {
namespace Security {
interface IKeyPairGeneratorHelper;
}
}
namespace Elastos {
namespace Security {
interface IKeyPairGeneratorSpi;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreBuilder;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreBuilderHelper;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreEntry;
}
}
namespace Elastos {
namespace Security {
interface IKeyStorePrivateKeyEntry;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreSecretKeyEntry;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreTrustedCertificateEntry;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreLoadStoreParameter;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreProtectionParameter;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreCallbackHandlerProtection;
}
}
namespace Elastos {
namespace Security {
interface IKeyStorePasswordProtection;
}
}
namespace Elastos {
namespace Security {
interface IKeyStore;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreHelper;
}
}
namespace Elastos {
namespace Security {
interface IKeyStoreSpi;
}
}
namespace Elastos {
namespace Security {
interface IMessageDigest;
}
}
namespace Elastos {
namespace Security {
interface IMessageDigestHelper;
}
}
namespace Elastos {
namespace Security {
interface IPermission;
}
}
namespace Elastos {
namespace Security {
interface IPermissionCollection;
}
}
namespace Elastos {
namespace Security {
interface IPolicyParameters;
}
}
namespace Elastos {
namespace Security {
interface IPolicy;
}
}
namespace Elastos {
namespace Security {
interface IPolicyHelper;
}
}
namespace Elastos {
namespace Security {
interface IPrivilegedAction;
}
}
namespace Elastos {
namespace Security {
interface IPrivilegedExceptionAction;
}
}
namespace Elastos {
namespace Security {
interface IProtectionDomain;
}
}
namespace Elastos {
namespace Security {
interface ISecureRandom;
}
}
namespace Elastos {
namespace Security {
interface ISecureRandomSpi;
}
}
namespace Elastos {
namespace Security {
interface ISecurity;
}
}
namespace Elastos {
namespace Security {
interface ISignature;
}
}
namespace Elastos {
namespace Security {
interface ISignatureHelper;
}
}
namespace Elastos {
namespace Security {
interface ISignedObject;
}
}
namespace Elastos {
namespace Security {
interface ISigner;
}
}
namespace Elastosx {
namespace Crypto {
namespace Spec {
interface IIvParameterSpec;
}
}
}
namespace Elastosx {
namespace Crypto {
interface ICipherSpi;
}
}
namespace Elastos {
namespace Security {
interface IUnresolvedPermission;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
interface IPasswordCallback;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface IPrivateCredentialPermission;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ISubject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ISubjectHelper;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ISubjectDomainCombiner;
}
}
}
namespace Elastos {
namespace Security {
interface ICAccessControllerClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICAccessControlContextClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICCodeSignerClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStorePasswordProtectionClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStoreCallbackHandlerProtectionClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStorePrivateKeyEntryClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStoreSecretKeyEntryClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStoreTrustedCertificateEntryClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStoreHelperClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICMessageDigestHelperClassObject;
}
}
namespace Elastos {
namespace Security {
interface ICKeyStoreBuilderHelperClassObject;
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICCertPathBuilderHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICCertPathValidatorHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICCertStoreHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICCertificateFactoryClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICCertificateFactoryHelperClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICCollectionCertStoreParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICLDAPCertStoreParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICPKIXBuilderParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICPKIXCertPathBuilderResultClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICPKIXCertPathValidatorResultClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICPKIXParametersClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICPolicyQualifierInfoClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICTrustAnchorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICX509CRLSelectorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Cert {
interface ICX509CertSelectorClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICDSAParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICDSAPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICDSAPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECFieldF2mClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECFieldFpClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECGenParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECPointClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICECPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICEllipticCurveClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICMGF1ParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICPKCS8EncodedKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICPSSParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICRSAKeyGenParameterSpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICRSAMultiPrimePrivateCrtKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICRSAOtherPrimeInfoClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICRSAPrivateCrtKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICRSAPrivateKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICRSAPublicKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
namespace Spec {
interface ICX509EncodedKeySpecClassObject;
}
}
}
namespace Elastos {
namespace Security {
interface ICSecurityClassObject;
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
interface ICPasswordCallbackClassObject;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
interface ICX500PrincipalClassObject;
}
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ICPrivateCredentialPermissionClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ICAuthPermissionClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ICSubjectClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ICSubjectHelperClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Auth {
interface ICSubjectDomainCombinerClassObject;
}
}
}
namespace Elastosx {
namespace Security {
namespace Cert {
interface ICX509CertificateHelperClassObject;
}
}
}
namespace Elastosx {
namespace Net {
namespace Ssl {
interface ICSSLParametersClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicBoolean;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicInteger32;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicInteger32Array;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicInteger32FieldUpdater;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicInteger64;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicInteger64Array;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicInteger64FieldUpdater;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicMarkableReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicReferenceArray;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicReferenceFieldUpdater;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IAtomicStampedReference;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface IFencesHelper;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface ILockSupport;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface IAbstractQueuedInteger64Synchronizer;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface IAbstractQueuedSynchronizer;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface IAbstractQueuedSynchronizerHelper;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface ICondition;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface ILock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface IReadWriteLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface IReentrantLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface IReentrantReadWriteLock;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICallable;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICompletionService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICountDownLatch;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IExecutor;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IExecutors;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IExecutorService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IScheduledExecutorService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IRejectedExecutionHandler;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IRunnableFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IThreadFactory;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ITimeUnit;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ITimeUnitHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IArrayBlockingQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IBlockingDeque;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IConcurrentLinkedQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICopyOnWriteArrayList;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICopyOnWriteArrayListHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICyclicBarrier;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IDelayed;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IDelayQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IAbstractExecutorService;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IScheduledFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IExchanger;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinPoolManagedBlocker;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinPool;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinPoolForkJoinWorkerThreadFactory;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinPoolHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinWorkerThread;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinTask;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IForkJoinTaskHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IPhaser;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IRunnableScheduledFuture;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ISemaphore;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ISynchronousQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IThreadPoolExecutor;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IThreadLocalRandom;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IThreadLocalRandomHelper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ITransferQueue;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IConcurrentMap;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface IConcurrentHashMap;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICCountDownLatchClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICCyclicBarrierClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICExecutorCompletionServiceClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICExecutorsClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICFutureTaskClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICLinkedBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICThreadPoolExecutorClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICTimeUnitHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICArrayBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICConcurrentLinkedDequeClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICConcurrentLinkedQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICConcurrentSkipListMapClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICConcurrentSkipListSetClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICDelayQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICExchangerClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICForkJoinWorkerThreadClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICForkJoinPoolClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICForkJoinTaskHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICLinkedBlockingDequeClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICLinkedTransferQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICPhaserClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICPriorityBlockingQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICScheduledThreadPoolExecutorClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICSynchronousQueueClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICThreadLocalRandomClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICThreadLocalRandomHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICCopyOnWriteArrayListClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICCopyOnWriteArrayListHelperClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICCopyOnWriteArraySetClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICConcurrentHashMapClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicBooleanClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicInteger32ClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicInteger32ArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicInteger64ClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicInteger64ArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicMarkableReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicReferenceArrayClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICAtomicStampedReferenceClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
interface ICFencesHelperClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface ICLockSupportClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface ICReentrantLockClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
interface ICReentrantReadWriteLockClassObject;
}
}
}
}
namespace Elastos {
namespace Utility {
namespace Concurrent {
interface ICSemaphoreClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IZipConstants;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IChecksum;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IAdler32;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICRC32;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IInflater;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IDeflater;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IZipEntry;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IInflaterInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IInflaterOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IDeflaterInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IDeflaterOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IZipInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IZipOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICheckedInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICheckedOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IGZIPInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IGZIPOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface IZipFile;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICAdler32ClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICCRC32ClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICInflaterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICDeflaterClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICInflaterInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICInflaterOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICDeflaterInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICDeflaterOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICCheckedInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICCheckedOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICGZIPInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICGZIPOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICZipInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICZipOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICZipEntryClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Zip {
interface ICZipFileClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IName;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IAttributes;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IJarEntry;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IManifest;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IJarFile;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IJarInputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IJarOutputStream;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IPacker;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IUnpacker;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface IPack200Helper;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICNameClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICAttributesClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICJarEntryClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICJarFileClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICJarInputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICJarOutputStreamClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICManifestClassObject;
}
}
}
namespace Elastos {
namespace Utility {
namespace Jar {
interface ICPack200HelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
interface ITypes;
}
}
namespace Elastos {
namespace Sql {
interface IClob;
}
}
namespace Elastos {
namespace Sql {
interface IBlob;
}
}
namespace Elastos {
namespace Sql {
interface INClob;
}
}
namespace Elastos {
namespace Sql {
interface IArray;
}
}
namespace Elastos {
namespace Sql {
interface IStruct;
}
}
namespace Elastos {
namespace Sql {
interface IDate;
}
}
namespace Elastos {
namespace Sql {
interface ITime;
}
}
namespace Elastos {
namespace Sql {
interface IWrapper;
}
}
namespace Elastos {
namespace Sql {
interface IParameterMetaData;
}
}
namespace Elastos {
namespace Sql {
interface IRowId;
}
}
namespace Elastos {
namespace Sql {
interface ITimestamp;
}
}
namespace Elastos {
namespace Sql {
interface IRef;
}
}
namespace Elastos {
namespace Sql {
interface ISQLStruct;
}
}
namespace Elastos {
namespace Sql {
interface ISQLXML;
}
}
namespace Elastos {
namespace Sql {
interface ISQLInput;
}
}
namespace Elastos {
namespace Sql {
interface ISQLOutput;
}
}
interface ISQLData;
namespace Elastos {
namespace Sql {
interface IStatement;
}
}
namespace Elastos {
namespace Sql {
interface ISQLWarning;
}
}
namespace Elastos {
namespace Sql {
interface IResultSetMetaData;
}
}
namespace Elastos {
namespace Sql {
interface IResultSet;
}
}
namespace Elastos {
namespace Sql {
interface IDatabaseMetaData;
}
}
namespace Elastos {
namespace Sql {
interface IPreparedStatement;
}
}
namespace Elastos {
namespace Sql {
interface ICallableStatement;
}
}
namespace Elastos {
namespace Sql {
interface ISavePoint;
}
}
namespace Elastos {
namespace Sql {
interface ISQLPermission;
}
}
namespace Elastos {
namespace Sql {
interface IConnection;
}
}
namespace Elastos {
namespace Sql {
interface IDriver;
}
}
namespace Elastos {
namespace Sql {
interface IDriverManagerHelper;
}
}
namespace Elastos {
namespace Sql {
interface IDataTruncation;
}
}
namespace Elastos {
namespace Sql {
interface IDriverPropertyInfo;
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IStringEncoderHelper;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IAuthorizer;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IBlobR;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IBlobW;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IBlob;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICallback;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IBusyHandler;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ITableResult;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IFunctionContext;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IFunction;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ITrace;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IProfile;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IVm;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IStmt;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IBackup;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IProgressHandler;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IDatabase;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IDatabaseHelper;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IMockFunction;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IConstants;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IShell;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface IDBDump;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IJDBCConnection;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IDatabaseX;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IJDBCStatement;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IJDBCPreparedStatement;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IJDBCResultSetMetaData;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ITableResultX;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IJDBCDatabaseMetaData;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface IJDBCResultSet;
}
}
}
}
namespace Elastos {
namespace Sql {
interface ICSQLWarningClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICTimeClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICSqlDateClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICTimestampClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICDriverPropertyInfoClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICDataTruncationClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICDriverManagerClassObject;
}
}
namespace Elastos {
namespace Sql {
interface ICSQLPermissionClassObject;
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICTableResultClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICShellClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICDBDumpClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICVmClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICBlobClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICBlobRClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICBlobWClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICDatabaseClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICDatabaseHelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICJDBCDriverClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICBackupClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICFunctionContextClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICStmtClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICStringEncoderHelperClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICSinFuncClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICTestTraceClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICAuthorizerCallbackClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICTestBusyHandlerClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICTestProgressHandlerClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
interface ICMockFunctionClassObject;
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICJDBCConnectionClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICJDBCPreparedStatementClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICJDBCStatementClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICJDBCResultSetMetaDataClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICTableResultXClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICJDBCDatabaseMetaDataClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICJDBCResultSetClassObject;
}
}
}
}
namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
interface ICDatabaseXClassObject;
}
}
}
}
namespace Elastos {
namespace Core {
interface ICPathClassLoaderClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICStringWrapperClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICBooleanClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICByteClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICChar32ClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICChar16ClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICChar8ClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICInteger16ClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICInteger32ClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICInteger64ClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICFloatClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICDoubleClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICArrayOfClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICRandomClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICObjectContainerClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICBlockGuardClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICCloseGuardClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICCloseGuardHelperClassObject;
}
}
namespace Elastos {
namespace Core {
interface ICSystemClassObject;
}
}
namespace Elastos {
namespace Core {
namespace Threading {
interface ICThreadClassObject;
}
}
}
namespace Elastos {
namespace Core {
namespace Threading {
interface ICThreadGroupClassObject;
}
}
}

#ifndef E_OUT_OF_MEMORY_ERROR
#define E_OUT_OF_MEMORY_ERROR 0xa1010000
#endif

#ifndef E_ASSERTION_ERROR
#define E_ASSERTION_ERROR 0xa1020000
#endif

#ifndef E_INTERNAL_ERROR
#define E_INTERNAL_ERROR 0xa1030000
#endif

#ifndef E_ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION
#define E_ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION 0xa0010000
#endif

#ifndef E_ILLEGAL_ARGUMENT_EXCEPTION
#define E_ILLEGAL_ARGUMENT_EXCEPTION 0xa0020000
#endif

#ifndef E_INDEX_OUT_OF_BOUNDS_EXCEPTION
#define E_INDEX_OUT_OF_BOUNDS_EXCEPTION 0xa0030000
#endif

#ifndef E_NULL_POINTER_EXCEPTION
#define E_NULL_POINTER_EXCEPTION 0xa0040000
#endif

#ifndef E_RUNTIME_EXCEPTION
#define E_RUNTIME_EXCEPTION 0xa0050000
#endif

#ifndef E_ILLEGAL_STATE_EXCEPTION
#define E_ILLEGAL_STATE_EXCEPTION 0xa0060000
#endif

#ifndef E_ILLEGAL_THREAD_STATE_EXCEPTION
#define E_ILLEGAL_THREAD_STATE_EXCEPTION 0xa0070000
#endif

#ifndef E_UNSUPPORTED_OPERATION_EXCEPTION
#define E_UNSUPPORTED_OPERATION_EXCEPTION 0xa0080000
#endif

#ifndef E_SECURITY_EXCEPTION
#define E_SECURITY_EXCEPTION 0xa0090000
#endif

#ifndef E_STRING_INDEX_OUT_OF_BOUNDS_EXCEPTION
#define E_STRING_INDEX_OUT_OF_BOUNDS_EXCEPTION 0xa00a0000
#endif

#ifndef E_NO_SUCH_METHOD_EXCEPTION
#define E_NO_SUCH_METHOD_EXCEPTION 0xa00b0000
#endif

#ifndef E_ILLEGAL_MONITOR_STATE_EXCEPTION
#define E_ILLEGAL_MONITOR_STATE_EXCEPTION 0xa00c0000
#endif

#ifndef E_INTERRUPTED_EXCEPTION
#define E_INTERRUPTED_EXCEPTION 0xa00d0000
#endif

#ifndef E_ARITHMETIC_EXCEPTION
#define E_ARITHMETIC_EXCEPTION 0xa00e0000
#endif

#ifndef E_NOT_FOUND_EXCEPTION
#define E_NOT_FOUND_EXCEPTION 0xa0100000
#endif

#ifndef E_SUPER_NOT_CALLED_EXCEPTION
#define E_SUPER_NOT_CALLED_EXCEPTION 0xa0110000
#endif

#ifndef E_CLASS_NOT_FOUND_EXCEPTION
#define E_CLASS_NOT_FOUND_EXCEPTION 0xa0120000
#endif

#ifndef E_NEGATIVE_ARRAY_SIZE_EXCEPTION
#define E_NEGATIVE_ARRAY_SIZE_EXCEPTION 0xa0130000
#endif

#ifndef E_NUMBER_FORMAT_EXCEPTION
#define E_NUMBER_FORMAT_EXCEPTION 0xa0140000
#endif

#ifndef E_PATTERN_SYNTAX_EXCEPTION
#define E_PATTERN_SYNTAX_EXCEPTION 0xa0150000
#endif

#ifndef E_CLONE_NOT_SUPPORTED_EXCEPTION
#define E_CLONE_NOT_SUPPORTED_EXCEPTION 0xa0160000
#endif

#ifndef E_LIBCORE_IO_EXCEPTION
#define E_LIBCORE_IO_EXCEPTION 0xaa010000
#endif

#ifndef E_LIBCORE_FILE_NOT_FOUND_EXCEPTION
#define E_LIBCORE_FILE_NOT_FOUND_EXCEPTION 0xaa020000
#endif

#ifndef E_LIBCORE_SOCKET_EXCEPTION
#define E_LIBCORE_SOCKET_EXCEPTION 0xaa030000
#endif

#ifndef E_LIBCORE_CONNECT_EXCEPTION
#define E_LIBCORE_CONNECT_EXCEPTION 0xaa070000
#endif

#ifndef E_LIBCORE_UNSUPPORTED_OPERATION_EXCEPTION
#define E_LIBCORE_UNSUPPORTED_OPERATION_EXCEPTION 0xaa090000
#endif

#ifndef E_UNKNOWN_HOST_EXCEPTION
#define E_UNKNOWN_HOST_EXCEPTION 0xaa0a0000
#endif

#ifndef E_NO_SUCH_ELEMENT_EXCEPTION
#define E_NO_SUCH_ELEMENT_EXCEPTION 0xab000000
#endif

#ifndef E_IO_ERROR
#define E_IO_ERROR 0xa3010000
#endif

#ifndef E_CODER_MALFUNCTION_ERROR
#define E_CODER_MALFUNCTION_ERROR 0xa3020000
#endif

#ifndef E_IO_EXCEPTION
#define E_IO_EXCEPTION 0xa2010000
#endif

#ifndef E_EOF_EXCEPTION
#define E_EOF_EXCEPTION 0xa2020000
#endif

#ifndef E_FILE_NOT_FOUND_EXCEPTION
#define E_FILE_NOT_FOUND_EXCEPTION 0xa2030000
#endif

#ifndef E_SYNC_FAILED_EXCEPTION
#define E_SYNC_FAILED_EXCEPTION 0xa2040000
#endif

#ifndef E_ALREADY_CONNECTED_EXCEPTION
#define E_ALREADY_CONNECTED_EXCEPTION 0xa2050000
#endif

#ifndef E_ASYNCHRONOUS_CLOSE_EXCEPTION
#define E_ASYNCHRONOUS_CLOSE_EXCEPTION 0xa2060000
#endif

#ifndef E_CANCELLED_KEY_EXCEPTION
#define E_CANCELLED_KEY_EXCEPTION 0xa2070000
#endif

#ifndef E_CLOSED_BY_INTERRUPT_EXCEPTION
#define E_CLOSED_BY_INTERRUPT_EXCEPTION 0xa2080000
#endif

#ifndef E_CLOSED_CHANNEL_EXCEPTION
#define E_CLOSED_CHANNEL_EXCEPTION 0xa2090000
#endif

#ifndef E_CLOSED_SELECTOR_EXCEPTION
#define E_CLOSED_SELECTOR_EXCEPTION 0xa20a0000
#endif

#ifndef E_CONNECTION_PENDING_EXCEPTION
#define E_CONNECTION_PENDING_EXCEPTION 0xa20b0000
#endif

#ifndef E_FILE_LOCK_INTERRUPTION_EXCEPTION
#define E_FILE_LOCK_INTERRUPTION_EXCEPTION 0xa20c0000
#endif

#ifndef E_ILLEGAL_BLOCKING_MODE_EXCEPTION
#define E_ILLEGAL_BLOCKING_MODE_EXCEPTION 0xa20d0000
#endif

#ifndef E_ILLEGAL_SELECTOR_EXCEPTION
#define E_ILLEGAL_SELECTOR_EXCEPTION 0xa20e0000
#endif

#ifndef E_NO_CONNECTION_PENDING_EXCEPTION
#define E_NO_CONNECTION_PENDING_EXCEPTION 0xa2100000
#endif

#ifndef E_NON_READABLE_CHANNEL_EXCEPTION
#define E_NON_READABLE_CHANNEL_EXCEPTION 0xa2110000
#endif

#ifndef E_NON_WRITABLE_CHANNEL_EXCEPTION
#define E_NON_WRITABLE_CHANNEL_EXCEPTION 0xa2120000
#endif

#ifndef E_NOT_YET_BOUND_EXCEPTION
#define E_NOT_YET_BOUND_EXCEPTION 0xa2130000
#endif

#ifndef E_NOT_YET_CONNECTED_EXCEPTION
#define E_NOT_YET_CONNECTED_EXCEPTION 0xa2140000
#endif

#ifndef E_OVER_LAPPING_FILE_LOCK_EXCEPTION
#define E_OVER_LAPPING_FILE_LOCK_EXCEPTION 0xa2150000
#endif

#ifndef E_UNRESOLVED_ADDRESS_EXCEPTION
#define E_UNRESOLVED_ADDRESS_EXCEPTION 0xa2160000
#endif

#ifndef E_UNSUPPORTED_ADDRESS_TYPE_EXCEPTION
#define E_UNSUPPORTED_ADDRESS_TYPE_EXCEPTION 0xa2170000
#endif

#ifndef E_BUFFER_UNDER_FLOW_EXCEPTION
#define E_BUFFER_UNDER_FLOW_EXCEPTION 0xa2180000
#endif

#ifndef E_BUFFER_OVER_FLOW_EXCEPTION
#define E_BUFFER_OVER_FLOW_EXCEPTION 0xa2190000
#endif

#ifndef E_INVALID_MARK_EXCEPTION
#define E_INVALID_MARK_EXCEPTION 0xa21a0000
#endif

#ifndef E_READ_ONLY_BUFFER_EXCEPTION
#define E_READ_ONLY_BUFFER_EXCEPTION 0xa21b0000
#endif

#ifndef E_UNSUPPORTED_ENCODING_EXCEPTION
#define E_UNSUPPORTED_ENCODING_EXCEPTION 0xa21c0000
#endif

#ifndef E_INVALID_OBJECT_EXCEPTION
#define E_INVALID_OBJECT_EXCEPTION 0xa21d0000
#endif

#ifndef E_ILLEGAL_CHARSET_NAME_EXCEPTION
#define E_ILLEGAL_CHARSET_NAME_EXCEPTION 0xa21e0000
#endif

#ifndef E_UNSUPPORTED_CHARSET_EXCEPTION
#define E_UNSUPPORTED_CHARSET_EXCEPTION 0xa21f0000
#endif

#ifndef E_CHARACTER_CODING_EXCEPTION
#define E_CHARACTER_CODING_EXCEPTION 0xa2200000
#endif

#ifndef E_UNMAPPABLE_CHARACTER_EXCEPTION
#define E_UNMAPPABLE_CHARACTER_EXCEPTION 0xa2210000
#endif

#ifndef E_MALFORMED_INPUT_EXCEPTION
#define E_MALFORMED_INPUT_EXCEPTION 0xa2220000
#endif

#ifndef E_UTF_DATA_FORMAT_EXCEPTION
#define E_UTF_DATA_FORMAT_EXCEPTION 0xa2230000
#endif

#ifndef E_CONCURRENT_MODIFICATION_EXCEPTION
#define E_CONCURRENT_MODIFICATION_EXCEPTION 0xa7000000
#endif

#ifndef E_FORMATTER_CLOSED_EXCEPTION
#define E_FORMATTER_CLOSED_EXCEPTION 0xa7000001
#endif

#ifndef E_MISSING_FORMAT_ARGUMENT_EXCEPTION
#define E_MISSING_FORMAT_ARGUMENT_EXCEPTION 0xa7000002
#endif

#ifndef E_ILLEGAL_FORMAT_CONVERSION_EXCEPTION
#define E_ILLEGAL_FORMAT_CONVERSION_EXCEPTION 0xa7000003
#endif

#ifndef E_ILLEGAL_FORMAT_FLAGS_EXCEPTION
#define E_ILLEGAL_FORMAT_FLAGS_EXCEPTION 0xa7000004
#endif

#ifndef E_UNKNOWN_FORMAT_CONVERSION_EXCEPTION
#define E_UNKNOWN_FORMAT_CONVERSION_EXCEPTION 0xa7000005
#endif

#ifndef E_FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION
#define E_FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION 0xa7000006
#endif

#ifndef E_MISSING_FORMAT_WIDTH_EXCEPTION
#define E_MISSING_FORMAT_WIDTH_EXCEPTION 0xa7000007
#endif

#ifndef E_ILLEGAL_FORMAT_PRECISION_EXCEPTION
#define E_ILLEGAL_FORMAT_PRECISION_EXCEPTION 0xa7000008
#endif

#ifndef E_ILLEGAL_FORMAT_WIDTH_EXCEPTION
#define E_ILLEGAL_FORMAT_WIDTH_EXCEPTION 0xa7000009
#endif

#ifndef E_EMPTY_STACK_EXCEPTION
#define E_EMPTY_STACK_EXCEPTION 0xa700000a
#endif

#ifndef E_INPUT_MISMATCH_EXCEPTION
#define E_INPUT_MISMATCH_EXCEPTION 0xa700000b
#endif

#ifndef E_MISSING_RESOURCE_EXCEPTION
#define E_MISSING_RESOURCE_EXCEPTION 0xa700000c
#endif

#ifndef E_BROKEN_BARRIER_EXCEPTION
#define E_BROKEN_BARRIER_EXCEPTION 0xa700000d
#endif

#ifndef E_BIND_EXCEPTION
#define E_BIND_EXCEPTION 0xab010000
#endif

#ifndef E_CONNNECT_EXCEPTION
#define E_CONNNECT_EXCEPTION 0xab020000
#endif

#ifndef E_HTTP_RETRY_EXCEPTION
#define E_HTTP_RETRY_EXCEPTION 0xab030000
#endif

#ifndef E_MALFORMED_URL_EXCEPTION
#define E_MALFORMED_URL_EXCEPTION 0xab040000
#endif

#ifndef E_NO_ROUTE_TO_HOST_EXCEPTION
#define E_NO_ROUTE_TO_HOST_EXCEPTION 0xab050000
#endif

#ifndef E_PORT_UNREACHABLE_EXCEPTION
#define E_PORT_UNREACHABLE_EXCEPTION 0xab060000
#endif

#ifndef E_PROTOCOL_EXCEPTION
#define E_PROTOCOL_EXCEPTION 0xab070000
#endif

#ifndef E_SOCKET_EXCEPTION
#define E_SOCKET_EXCEPTION 0xab080000
#endif

#ifndef E_SOCKET_TIMEOUT_EXCEPTION
#define E_SOCKET_TIMEOUT_EXCEPTION 0xab090000
#endif

#ifndef E_UNKNOWN_SERVICE_EXCEPTION
#define E_UNKNOWN_SERVICE_EXCEPTION 0xab0b0000
#endif

#ifndef E_URI_SYNTAX_EXCEPTION
#define E_URI_SYNTAX_EXCEPTION 0xab0c0000
#endif

#ifndef E_SOCKET_CLOSE_EXCEPTION
#define E_SOCKET_CLOSE_EXCEPTION 0xab0d0000
#endif

#ifndef E_MALFORMED_REPLY_EXCEPTION
#define E_MALFORMED_REPLY_EXCEPTION 0xab0e0000
#endif

#ifndef E_INVALID_SOCKET_EXCEPTION
#define E_INVALID_SOCKET_EXCEPTION 0xab0f0000
#endif

#ifndef E_ASSERTION_ERROR_EXCEPTION
#define E_ASSERTION_ERROR_EXCEPTION 0xab0f0001
#endif

#ifndef E_ILLEGAL_ACCESS_ERROR_EXCEPTION
#define E_ILLEGAL_ACCESS_ERROR_EXCEPTION 0xab0f0002
#endif

#ifndef E_PARSE_EXCEPTION
#define E_PARSE_EXCEPTION 0xad010000
#endif

#ifndef ISimpleDateFormat_PATTERN_CHARS
#define ISimpleDateFormat_PATTERN_CHARS "GyMdkHmsSEDFwWahKzZLc"
#endif

#ifndef E_ACL_NOT_FOUND_EXCEPTION
#define E_ACL_NOT_FOUND_EXCEPTION 0xac010000
#endif

#ifndef E_LAST_OWNER_EXCEPTION
#define E_LAST_OWNER_EXCEPTION 0xac020000
#endif

#ifndef E_NOT_OWNER_EXCEPTION
#define E_NOT_OWNER_EXCEPTION 0xac030000
#endif

#ifndef E_CERTIFICATE_ENCODING_EXCEPTION
#define E_CERTIFICATE_ENCODING_EXCEPTION 0xac040000
#endif

#ifndef E_CERTIFICATE_EXCEPTION
#define E_CERTIFICATE_EXCEPTION 0xac050000
#endif

#ifndef E_CERTIFICATE_EXPIRED_EXCEPTION
#define E_CERTIFICATE_EXPIRED_EXCEPTION 0xac060000
#endif

#ifndef E_CERTIFICATE_NOT_YET_VALID_EXCEPTION
#define E_CERTIFICATE_NOT_YET_VALID_EXCEPTION 0xac070000
#endif

#ifndef E_CERTIFICATE_PARSING_EXCEPTION
#define E_CERTIFICATE_PARSING_EXCEPTION 0xac080000
#endif

#ifndef E_CERT_PATH_BUILDER_EXCEPTION
#define E_CERT_PATH_BUILDER_EXCEPTION 0xac090000
#endif

#ifndef E_CERT_PATH_VALIDATOR_EXCEPTION
#define E_CERT_PATH_VALIDATOR_EXCEPTION 0xac0a0000
#endif

#ifndef E_CERT_STORE_EXCEPTION
#define E_CERT_STORE_EXCEPTION 0xac0b0000
#endif

#ifndef E_CRL_EXCEPTION
#define E_CRL_EXCEPTION 0xac0c0000
#endif

#ifndef E_NOT_SERIALIZABLE_EXCEPTION
#define E_NOT_SERIALIZABLE_EXCEPTION 0xac0d0000
#endif

#ifndef E_INVALID_KEY_SPEC_EXCEPTION
#define E_INVALID_KEY_SPEC_EXCEPTION 0xac0e0000
#endif

#ifndef E_INVALID_PARAMETER_SPEC_EXCEPTION
#define E_INVALID_PARAMETER_SPEC_EXCEPTION 0xac0f0000
#endif

#ifndef E_ACCESS_CONTROL_EXCEPTION
#define E_ACCESS_CONTROL_EXCEPTION 0xac100000
#endif

#ifndef E_DIGEST_EXCEPTION
#define E_DIGEST_EXCEPTION 0xac110000
#endif

#ifndef E_GENERAL_SECURITY_EXCEPTION
#define E_GENERAL_SECURITY_EXCEPTION 0xac120000
#endif

#ifndef E_INVALID_ALGORITHM_PARAMETER_EXCEPTION
#define E_INVALID_ALGORITHM_PARAMETER_EXCEPTION 0xac130000
#endif

#ifndef E_INVALID_KEY_EXCEPTION
#define E_INVALID_KEY_EXCEPTION 0xac140000
#endif

#ifndef E_INVALID_PARAMETER_EXCEPTION
#define E_INVALID_PARAMETER_EXCEPTION 0xac150000
#endif

#ifndef E_KEY_EXCEPTION
#define E_KEY_EXCEPTION 0xac160000
#endif

#ifndef E_KEY_MANAGEMENT_EXCEPTION
#define E_KEY_MANAGEMENT_EXCEPTION 0xac170000
#endif

#ifndef E_KEY_STORE_EXCEPTION
#define E_KEY_STORE_EXCEPTION 0xac180000
#endif

#ifndef E_NO_SUCH_ALGORITHM_EXCEPTION
#define E_NO_SUCH_ALGORITHM_EXCEPTION 0xac190000
#endif

#ifndef E_NO_SUCH_PROVIDER_EXCEPTION
#define E_NO_SUCH_PROVIDER_EXCEPTION 0xac1a0000
#endif

#ifndef E_PRIVILEGED_ACTION_EXCEPTION
#define E_PRIVILEGED_ACTION_EXCEPTION 0xac1b0000
#endif

#ifndef E_UNRECOVERABLE_ENTRY_EXCEPTION
#define E_UNRECOVERABLE_ENTRY_EXCEPTION 0xac1c0000
#endif

#ifndef E_UNSUPPORTED_CALLBACK_EXCEPTION
#define E_UNSUPPORTED_CALLBACK_EXCEPTION 0xad010000
#endif

#ifndef E_LOGIN_EXCEPTION
#define E_LOGIN_EXCEPTION 0xad020000
#endif

#ifndef E_DESTROY_FAILED_EXCEPTION
#define E_DESTROY_FAILED_EXCEPTION 0xad030000
#endif

#ifndef E_CANCELLATION_EXCEPTION
#define E_CANCELLATION_EXCEPTION 0xa6010000
#endif

#ifndef E_EXECUTION_EXCEPTION
#define E_EXECUTION_EXCEPTION 0xa6020000
#endif

#ifndef E_TIMEOUT_EXCEPTION
#define E_TIMEOUT_EXCEPTION 0xa6030000
#endif

#ifndef E_REJECTED_EXECUTION_EXCEPTION
#define E_REJECTED_EXECUTION_EXCEPTION 0xa6040000
#endif

#ifndef E_ZIP_ERROR
#define E_ZIP_ERROR 0xa5010000
#endif

#ifndef E_DATA_FORMAT_EXCEPTION
#define E_DATA_FORMAT_EXCEPTION 0xa4010000
#endif

#ifndef E_ZIP_EXCEPTION
#define E_ZIP_EXCEPTION 0xa4020000
#endif

#ifndef E_SQL_EXCEPTION
#define E_SQL_EXCEPTION 0xa8010000
#endif

#ifndef E_SQL_FEATURE_NOT_SUPPORTED_EXCEPTION
#define E_SQL_FEATURE_NOT_SUPPORTED_EXCEPTION 0xa8010001
#endif

#ifndef E_SQL_CLINETINFO_EXCEPTION
#define E_SQL_CLINETINFO_EXCEPTION 0xa8010002
#endif

#ifndef E_SQL_DATA_EXCEPTION
#define E_SQL_DATA_EXCEPTION 0xa8010003
#endif

#ifndef E_SQL_INTEGRITY_CONSTRAINT_VIOLATION_EXCEPTION
#define E_SQL_INTEGRITY_CONSTRAINT_VIOLATION_EXCEPTION 0xa8010004
#endif

#ifndef E_SQL_INVALID_AUTHORIZATION_SPEC_EXCEPTION
#define E_SQL_INVALID_AUTHORIZATION_SPEC_EXCEPTION 0xa8010005
#endif

#ifndef E_SQL_NON_TRANSIENT_CONNECTION_EXCEPTION
#define E_SQL_NON_TRANSIENT_CONNECTION_EXCEPTION 0xa8010006
#endif

#ifndef E_SQL_NON_TRANSIENT_EXCEPTION
#define E_SQL_NON_TRANSIENT_EXCEPTION 0xa8010007
#endif

#ifndef E_SQL_RECOVERABLE_EXCEPTION
#define E_SQL_RECOVERABLE_EXCEPTION 0xa8010008
#endif

#ifndef E_SQL_SYNTAX_ERROR_EXCEPTION
#define E_SQL_SYNTAX_ERROR_EXCEPTION 0xa8010009
#endif

#ifndef E_SQL_TIMEOUT_EXCEPTION
#define E_SQL_TIMEOUT_EXCEPTION 0xa801000a
#endif

#ifndef E_SQL_TRANSACTION_ROLLBACK_EXCEPTION
#define E_SQL_TRANSACTION_ROLLBACK_EXCEPTION 0xa801000b
#endif

#ifndef E_SQL_TRANSIENT_CONNECTION_EXCEPTION
#define E_SQL_TRANSIENT_CONNECTION_EXCEPTION 0xa801000c
#endif

#ifndef E_SQL_TRANSIENT_EXCEPTION
#define E_SQL_TRANSIENT_EXCEPTION 0xa801000d
#endif

#ifndef E_SQL_ILLEGAL_ARGUMENT_EXCEPTION
#define E_SQL_ILLEGAL_ARGUMENT_EXCEPTION 0xa801000e
#endif

#ifndef E_SQL_NUMBER_FORMAT_EXCEPTION
#define E_SQL_NUMBER_FORMAT_EXCEPTION 0xa801000f
#endif

#ifndef E_SQL_SECURITY_EXCEPTION
#define E_SQL_SECURITY_EXCEPTION 0xa8010010
#endif

#ifndef E_SQL_NULL_POINTER_EXCEPTION
#define E_SQL_NULL_POINTER_EXCEPTION 0xa8010011
#endif

#ifndef E_BATCH_UPDATE_EXCEPTION
#define E_BATCH_UPDATE_EXCEPTION 0xa8020000
#endif

#ifndef E_SQL_SQLITE_JDBC_EXCEPTION
#define E_SQL_SQLITE_JDBC_EXCEPTION 0xa8030000
#endif

#ifndef E_SQL_SQLITE_JDBC_BATCHUPDATE_EXCEPTION
#define E_SQL_SQLITE_JDBC_BATCHUPDATE_EXCEPTION 0xa8030001
#endif

#ifndef E_SQL_SQLITE_THROWEX_EXCEPTION
#define E_SQL_SQLITE_THROWEX_EXCEPTION 0xa8040001
#endif


#ifndef __ENUM_Elastos_Core_Threading_ThreadState__
#define __ENUM_Elastos_Core_Threading_ThreadState__
namespace Elastos {
namespace Core {
namespace Threading {
enum {
    ThreadState_NEW = 0,
    ThreadState_RUNNABLE = 1,
    ThreadState_BLOCKED = 2,
    ThreadState_WAITING = 3,
    ThreadState_TIMED_WAITING = 4,
    ThreadState_TERMINATED = 5,
};
typedef _ELASTOS Int32 ThreadState;
}
}
}

#endif //__ENUM_Elastos_Core_Threading_ThreadState__


#ifndef __ENUM_Elastos_Math_RoundingMode__
#define __ENUM_Elastos_Math_RoundingMode__
namespace Elastos {
namespace Math {
enum {
    RoundingMode_UP = 0,
    RoundingMode_DOWN = 1,
    RoundingMode_CEILING = 2,
    RoundingMode_FLOOR = 3,
    RoundingMode_HALF_UP = 4,
    RoundingMode_HALF_DOWN = 5,
    RoundingMode_HALF_EVEN = 6,
    RoundingMode_UNNECESSARY = 7,
};
typedef _ELASTOS Int32 RoundingMode;
}
}

#endif //__ENUM_Elastos_Math_RoundingMode__


#ifndef __ENUM_Libcore_ICU_DateFormat__
#define __ENUM_Libcore_ICU_DateFormat__
namespace Libcore {
namespace ICU {
enum {
    DateFormat_FULL = 0,
    DateFormat_LONG = 1,
    DateFormat_MEDIUM = 2,
    DateFormat_SHORT = 3,
};
typedef _ELASTOS Int32 DateFormat;
}
}

#endif //__ENUM_Libcore_ICU_DateFormat__


#ifndef __ENUM_Libcore_ICU_Form__
#define __ENUM_Libcore_ICU_Form__
namespace Libcore {
namespace ICU {
enum {
    Form_NFD = 0,
    Form_NFC = 1,
    Form_NFKD = 2,
    Form_NFKC = 3,
};
typedef _ELASTOS Int32 Form;
}
}

#endif //__ENUM_Libcore_ICU_Form__


#ifndef __ENUM_Elastos_IO_ByteOrder__
#define __ENUM_Elastos_IO_ByteOrder__
namespace Elastos {
namespace IO {
enum {
    ByteOrder_BIG_ENDIAN = 0,
    ByteOrder_LITTLE_ENDIAN = 1,
};
typedef _ELASTOS Int32 ByteOrder;
}
}

#endif //__ENUM_Elastos_IO_ByteOrder__


#ifndef __ENUM_Elastos_IO_Channels_FileChannelMapMode__
#define __ENUM_Elastos_IO_Channels_FileChannelMapMode__
namespace Elastos {
namespace IO {
namespace Channels {
enum {
    FileChannelMapMode_READ_ONLY = 0,
    FileChannelMapMode_READ_WRITE = 1,
    FileChannelMapMode_PRIVATE = 2,
};
typedef _ELASTOS Int32 FileChannelMapMode;
}
}
}

#endif //__ENUM_Elastos_IO_Channels_FileChannelMapMode__


#ifndef __ENUM_AuthenticatorRequestorType__
#define __ENUM_AuthenticatorRequestorType__
enum {
    AuthenticatorRequestorType_PROXY = 0,
    AuthenticatorRequestorType_SERVER = 1,
};
typedef _ELASTOS Int32 AuthenticatorRequestorType;

#endif //__ENUM_AuthenticatorRequestorType__


#ifndef __ENUM_Elastos_Net_CookiePolicyKind__
#define __ENUM_Elastos_Net_CookiePolicyKind__
namespace Elastos {
namespace Net {
enum {
    CookiePolicyKind_ACCEPT_ALL = 0,
    CookiePolicyKind_ACCEPT_NONE = 1,
    CookiePolicyKind_ACCEPT_ORIGINAL_SERVER = 2,
};
typedef _ELASTOS Int32 CookiePolicyKind;
}
}

#endif //__ENUM_Elastos_Net_CookiePolicyKind__


#ifndef __ENUM_Elastos_Net_ResponseSource__
#define __ENUM_Elastos_Net_ResponseSource__
namespace Elastos {
namespace Net {
enum {
    CACHE = 0,
    CONDITIONAL_CACHE = 1,
    NETWORK = 2,
};
typedef _ELASTOS Int32 ResponseSource;
}
}

#endif //__ENUM_Elastos_Net_ResponseSource__


#ifndef __ENUM_Elastos_Net_ProxyType__
#define __ENUM_Elastos_Net_ProxyType__
namespace Elastos {
namespace Net {
enum {
    ProxyType_DIRECT = 0,
    ProxyType_HTTP = 1,
    ProxyType_SOCKS = 2,
};
typedef _ELASTOS Int32 ProxyType;
}
}

#endif //__ENUM_Elastos_Net_ProxyType__


#ifndef __ENUM_Elastosx_Net_Ssl_SSLEngineResult_HandshakeStatus__
#define __ENUM_Elastosx_Net_Ssl_SSLEngineResult_HandshakeStatus__
namespace Elastosx {
namespace Net {
namespace Ssl {
enum {
    NOT_HANDSHAKING = 0,
    FINISHED = 1,
    NEED_TASK = 2,
    NEED_WRAP = 3,
    NEED_UNWRAP = 4,
};
typedef _ELASTOS Int32 SSLEngineResult_HandshakeStatus;
}
}
}

#endif //__ENUM_Elastosx_Net_Ssl_SSLEngineResult_HandshakeStatus__


#ifndef __ENUM_Elastosx_Net_Ssl_SSLEngineResult_Status__
#define __ENUM_Elastosx_Net_Ssl_SSLEngineResult_Status__
namespace Elastosx {
namespace Net {
namespace Ssl {
enum {
    BUFFER_OVERFLOW = 0,
    BUFFER_UNDERFLOW = 1,
    CLOSED = 2,
    OK = 3,
};
typedef _ELASTOS Int32 SSLEngineResult_Status;
}
}
}

#endif //__ENUM_Elastosx_Net_Ssl_SSLEngineResult_Status__


#ifndef __ENUM_Elastos_Text_NormalizerForm__
#define __ENUM_Elastos_Text_NormalizerForm__
namespace Elastos {
namespace Text {
enum {
    NormalizerForm_NFD = 0,
    NormalizerForm_NFC = 1,
    NormalizerForm_NFKD = 2,
    NormalizerForm_NFKC = 3,
};
typedef _ELASTOS Int32 NormalizerForm;
}
}

#endif //__ENUM_Elastos_Text_NormalizerForm__


#ifndef __ENUM_Elastos_Security_KeyRepType__
#define __ENUM_Elastos_Security_KeyRepType__
namespace Elastos {
namespace Security {
enum {
    KeyRepType_SECRET = 0,
    KeyRepType_PUBLIC = 1,
    KeyRepType_PRIVATE = 2,
};
typedef _ELASTOS Int32 KeyRepType;
}
}

#endif //__ENUM_Elastos_Security_KeyRepType__


#ifndef __ENUM_Elastos_Sql_RowIdLifeTime__
#define __ENUM_Elastos_Sql_RowIdLifeTime__
namespace Elastos {
namespace Sql {
enum {
    RowIdLifeTime_UNSUPPORTED = 0,
    RowIdLifeTime_VALID_OTHER = 1,
    RowIdLifeTime_VALID_SESSION = 2,
    RowIdLifeTime_VALID_TRANSACTION = 3,
    RowIdLifeTime_VALID_FOREVER = 4,
};
typedef _ELASTOS Int32 RowIdLifeTime;
}
}

#endif //__ENUM_Elastos_Sql_RowIdLifeTime__

typedef _ELASTOS PVoid LocalPtr;

#ifdef __ELASTOS_CORE_USER_TYPE_H__
#include "Elastos.Core_user_type.h"
#endif

#ifdef __cplusplus
#include <_Elastos.Core.h>

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Math {
class CBigDecimal
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithI32Value(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithI64Value(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Double Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithI64SmallValueScale(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithI32SmallValueScale(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSVal(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBuf(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBufOffsetLength(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithVal(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValScale(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Math::IMathContext * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValScaleMc(pParam0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Math::IMathContext * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBufOffsetLengthMc(Param0, Param1, Param2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBufMc(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStrValMc(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Double Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDValMc(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBigIntegerValMc(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInt32ValMc(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigDecimalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigDecimal, RGM_SAME_DOMAIN, 
                EIID_ICBigDecimalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInt64ValMc(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Double Param0,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Double Param0,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Double Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Double Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Math::IMathContext * pParam2,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Math::IMathContext * pParam2,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Math::IMathContext * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Math::IMathContext * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Math::IMathContext * pParam3,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::Math::IMathContext * pParam3,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Math::IMathContext * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::Math::IMathContext * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Double Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Double Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Double Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Double Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigDecimal = Elastos::Math::IBigDecimal::Probe(__pNewObj);
        if (*__ppIBigDecimal) (*__ppIBigDecimal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ Elastos::Math::IBigDecimal** __ppIBigDecimal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIBigDecimal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ Elastos::Math::IMathContext * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ Elastos::Math::IMathContext * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Math {
class CBigDecimalHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Math::IBigDecimalHelper** ppIBigDecimalHelper)
    {

        return _CObject_CreateInstance(ECLSID_CBigDecimalHelper, pRegime, Elastos::Math::EIID_IBigDecimalHelper, (IInterface**)ppIBigDecimalHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Math::IBigDecimalHelper** __ppIBigDecimalHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBigDecimalHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Math::IBigDecimalHelper** ppIBigDecimalHelper)
    {
        return _CObject_CreateInstance(ECLSID_CBigDecimalHelper, RGM_SAME_DOMAIN, Elastos::Math::EIID_IBigDecimalHelper, (PInterface*)ppIBigDecimalHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Math {
class CBigInteger
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigIntegerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigInteger, RGM_SAME_DOMAIN, 
                EIID_ICBigIntegerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSignValue(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigIntegerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigInteger, RGM_SAME_DOMAIN, 
                EIID_ICBigIntegerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSignNumberLengthDigits(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigIntegerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigInteger, RGM_SAME_DOMAIN, 
                EIID_ICBigIntegerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigIntegerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigInteger, RGM_SAME_DOMAIN, 
                EIID_ICBigIntegerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValueRadix(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigIntegerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigInteger, RGM_SAME_DOMAIN, 
                EIID_ICBigIntegerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSignumMagnitude(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBigIntegerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBigInteger, RGM_SAME_DOMAIN, 
                EIID_ICBigIntegerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithArrValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Math::IBigInteger** ppIBigInteger)
    {

        return _CObject_CreateInstance(ECLSID_CBigInteger, pRegime, Elastos::Math::EIID_IBigInteger, (IInterface**)ppIBigInteger);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBigInteger);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Math::IBigInteger** ppIBigInteger)
    {
        return _CObject_CreateInstance(ECLSID_CBigInteger, RGM_SAME_DOMAIN, Elastos::Math::EIID_IBigInteger, (PInterface*)ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CBigInteger, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CBigInteger, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigInteger = Elastos::Math::IBigInteger::Probe(__pNewObj);
        if (*__ppIBigInteger) (*__ppIBigInteger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param2,/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigInteger = Elastos::Math::IBigInteger::Probe(__pNewObj);
        if (*__ppIBigInteger) (*__ppIBigInteger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param2,
/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigInteger = Elastos::Math::IBigInteger::Probe(__pNewObj);
        if (*__ppIBigInteger) (*__ppIBigInteger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigInteger = Elastos::Math::IBigInteger::Probe(__pNewObj);
        if (*__ppIBigInteger) (*__ppIBigInteger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigInteger = Elastos::Math::IBigInteger::Probe(__pNewObj);
        if (*__ppIBigInteger) (*__ppIBigInteger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,
/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBigInteger = Elastos::Math::IBigInteger::Probe(__pNewObj);
        if (*__ppIBigInteger) (*__ppIBigInteger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,
/* [out] */ Elastos::Math::IBigInteger** __ppIBigInteger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBigInteger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Math {
class CBigIntegerHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Math::IBigIntegerHelper** ppIBigIntegerHelper)
    {

        return _CObject_CreateInstance(ECLSID_CBigIntegerHelper, pRegime, Elastos::Math::EIID_IBigIntegerHelper, (IInterface**)ppIBigIntegerHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Math::IBigIntegerHelper** __ppIBigIntegerHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBigIntegerHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Math::IBigIntegerHelper** ppIBigIntegerHelper)
    {
        return _CObject_CreateInstance(ECLSID_CBigIntegerHelper, RGM_SAME_DOMAIN, Elastos::Math::EIID_IBigIntegerHelper, (PInterface*)ppIBigIntegerHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Math {
class CMathContext
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMathContextClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMathContext, RGM_SAME_DOMAIN, 
                EIID_ICMathContextClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPrecision(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::RoundingMode Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMathContextClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMathContext, RGM_SAME_DOMAIN, 
                EIID_ICMathContextClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPrecisionRoundingMode(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Math::IMathContext** __ppIMathContext)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMathContext = Elastos::Math::IMathContext::Probe(__pNewObj);
        if (*__ppIMathContext) (*__ppIMathContext)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Math::IMathContext** __ppIMathContext)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMathContext);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::RoundingMode Param1,/* [out] */ Elastos::Math::IMathContext** __ppIMathContext)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMathContext = Elastos::Math::IMathContext::Probe(__pNewObj);
        if (*__ppIMathContext) (*__ppIMathContext)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::RoundingMode Param1,
/* [out] */ Elastos::Math::IMathContext** __ppIMathContext)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIMathContext);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::RoundingMode Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::RoundingMode Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Math {
class CMathContextHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Math::IMathContextHelper** ppIMathContextHelper)
    {

        return _CObject_CreateInstance(ECLSID_CMathContextHelper, pRegime, Elastos::Math::EIID_IMathContextHelper, (IInterface**)ppIMathContextHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Math::IMathContextHelper** __ppIMathContextHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIMathContextHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Math::IMathContextHelper** ppIMathContextHelper)
    {
        return _CObject_CreateInstance(ECLSID_CMathContextHelper, RGM_SAME_DOMAIN, Elastos::Math::EIID_IMathContextHelper, (PInterface*)ppIMathContextHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructAddrinfo
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::IStructAddrinfo** ppIStructAddrinfo)
    {

        return _CObject_CreateInstance(ECLSID_CStructAddrinfo, pRegime, Libcore::IO::EIID_IStructAddrinfo, (IInterface**)ppIStructAddrinfo);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::IStructAddrinfo** __ppIStructAddrinfo)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIStructAddrinfo);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::IO::IStructAddrinfo** ppIStructAddrinfo)
    {
        return _CObject_CreateInstance(ECLSID_CStructAddrinfo, RGM_SAME_DOMAIN, Libcore::IO::EIID_IStructAddrinfo, (PInterface*)ppIStructAddrinfo);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CStructAddrinfo, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CStructAddrinfo, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class COsConstants
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::IOsConstants** ppIOsConstants)
    {

        return _CObject_CreateInstance(ECLSID_COsConstants, pRegime, Libcore::IO::EIID_IOsConstants, (IInterface**)ppIOsConstants);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::IOsConstants** __ppIOsConstants)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIOsConstants);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::IO::IOsConstants** ppIOsConstants)
    {
        return _CObject_CreateInstance(ECLSID_COsConstants, RGM_SAME_DOMAIN, Libcore::IO::EIID_IOsConstants, (PInterface*)ppIOsConstants);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CPosix
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::IOs** ppIOs)
    {

        return _CObject_CreateInstance(ECLSID_CPosix, pRegime, Libcore::IO::EIID_IOs, (IInterface**)ppIOs);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::IOs** __ppIOs)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIOs);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::IO::IOs** ppIOs)
    {
        return _CObject_CreateInstance(ECLSID_CPosix, RGM_SAME_DOMAIN, Libcore::IO::EIID_IOs, (PInterface*)ppIOs);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPosix, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPosix, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CIoBridge
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::IIoBridge** ppIIoBridge)
    {

        return _CObject_CreateInstance(ECLSID_CIoBridge, pRegime, Libcore::IO::EIID_IIoBridge, (IInterface**)ppIIoBridge);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::IIoBridge** __ppIIoBridge)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIIoBridge);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::IO::IIoBridge** ppIIoBridge)
    {
        return _CObject_CreateInstance(ECLSID_CIoBridge, RGM_SAME_DOMAIN, Libcore::IO::EIID_IIoBridge, (PInterface*)ppIIoBridge);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CLibcore
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::ILibcore** ppILibcore)
    {

        return _CObject_CreateInstance(ECLSID_CLibcore, pRegime, Libcore::IO::EIID_ILibcore, (IInterface**)ppILibcore);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::ILibcore** __ppILibcore)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppILibcore);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::IO::ILibcore** ppILibcore)
    {
        return _CObject_CreateInstance(ECLSID_CLibcore, RGM_SAME_DOMAIN, Libcore::IO::EIID_ILibcore, (PInterface*)ppILibcore);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructLinger
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructLingerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructLinger, RGM_SAME_DOMAIN, 
                EIID_ICStructLingerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOnoffLinger(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Libcore::IO::IStructLinger** __ppIStructLinger)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructLinger = Libcore::IO::IStructLinger::Probe(__pNewObj);
        if (*__ppIStructLinger) (*__ppIStructLinger)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Libcore::IO::IStructLinger** __ppIStructLinger)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIStructLinger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructPasswd
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructPasswdClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructPasswd, RGM_SAME_DOMAIN, 
                EIID_ICStructPasswdClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameUidGidDirShell(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ Libcore::IO::IStructPasswd** __ppIStructPasswd)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructPasswd = Libcore::IO::IStructPasswd::Probe(__pNewObj);
        if (*__ppIStructPasswd) (*__ppIStructPasswd)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ Libcore::IO::IStructPasswd** __ppIStructPasswd)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIStructPasswd);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructPollfd
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::IStructPollfd** ppIStructPollfd)
    {

        return _CObject_CreateInstance(ECLSID_CStructPollfd, pRegime, Libcore::IO::EIID_IStructPollfd, (IInterface**)ppIStructPollfd);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::IStructPollfd** __ppIStructPollfd)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIStructPollfd);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::IO::IStructPollfd** ppIStructPollfd)
    {
        return _CObject_CreateInstance(ECLSID_CStructPollfd, RGM_SAME_DOMAIN, Libcore::IO::EIID_IStructPollfd, (PInterface*)ppIStructPollfd);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CStructPollfd, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CStructPollfd, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructStat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int64 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int64 Param6,/* [in] */ _ELASTOS Int64 Param7,/* [in] */ _ELASTOS Int64 Param8,/* [in] */ _ELASTOS Int64 Param9,/* [in] */ _ELASTOS Int64 Param10,/* [in] */ _ELASTOS Int64 Param11,/* [in] */ _ELASTOS Int64 Param12,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructStatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructStat, RGM_SAME_DOMAIN, 
                EIID_ICStructStatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDevInoModeNlinkUidGidRdevSizeAtimeMtimeCtimeBlksizeBlocks(Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int64 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int64 Param6,/* [in] */ _ELASTOS Int64 Param7,/* [in] */ _ELASTOS Int64 Param8,/* [in] */ _ELASTOS Int64 Param9,/* [in] */ _ELASTOS Int64 Param10,/* [in] */ _ELASTOS Int64 Param11,/* [in] */ _ELASTOS Int64 Param12,/* [out] */ Libcore::IO::IStructStat** __ppIStructStat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructStat = Libcore::IO::IStructStat::Probe(__pNewObj);
        if (*__ppIStructStat) (*__ppIStructStat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int64 Param6,
/* [in] */ _ELASTOS Int64 Param7,
/* [in] */ _ELASTOS Int64 Param8,
/* [in] */ _ELASTOS Int64 Param9,
/* [in] */ _ELASTOS Int64 Param10,
/* [in] */ _ELASTOS Int64 Param11,
/* [in] */ _ELASTOS Int64 Param12,
/* [out] */ Libcore::IO::IStructStat** __ppIStructStat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, __ppIStructStat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int64 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int64 Param6,/* [in] */ _ELASTOS Int64 Param7,/* [in] */ _ELASTOS Int64 Param8,/* [in] */ _ELASTOS Int64 Param9,/* [in] */ _ELASTOS Int64 Param10,/* [in] */ _ELASTOS Int64 Param11,/* [in] */ _ELASTOS Int64 Param12,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int64 Param6,
/* [in] */ _ELASTOS Int64 Param7,
/* [in] */ _ELASTOS Int64 Param8,
/* [in] */ _ELASTOS Int64 Param9,
/* [in] */ _ELASTOS Int64 Param10,
/* [in] */ _ELASTOS Int64 Param11,
/* [in] */ _ELASTOS Int64 Param12,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructStatFs
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ _ELASTOS Int64 Param3,/* [in] */ _ELASTOS Int64 Param4,/* [in] */ _ELASTOS Int64 Param5,/* [in] */ _ELASTOS Int64 Param6,/* [in] */ _ELASTOS Int64 Param7,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructStatFsClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructStatFs, RGM_SAME_DOMAIN, 
                EIID_ICStructStatFsClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBsizeBlocksBfreeBavailFilesFfreeNamemaxFrsize(Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ _ELASTOS Int64 Param3,/* [in] */ _ELASTOS Int64 Param4,/* [in] */ _ELASTOS Int64 Param5,/* [in] */ _ELASTOS Int64 Param6,/* [in] */ _ELASTOS Int64 Param7,/* [out] */ Libcore::IO::IStructStatFs** __ppIStructStatFs)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructStatFs = Libcore::IO::IStructStatFs::Probe(__pNewObj);
        if (*__ppIStructStatFs) (*__ppIStructStatFs)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [in] */ _ELASTOS Int64 Param4,
/* [in] */ _ELASTOS Int64 Param5,
/* [in] */ _ELASTOS Int64 Param6,
/* [in] */ _ELASTOS Int64 Param7,
/* [out] */ Libcore::IO::IStructStatFs** __ppIStructStatFs)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, __ppIStructStatFs);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ _ELASTOS Int64 Param3,/* [in] */ _ELASTOS Int64 Param4,/* [in] */ _ELASTOS Int64 Param5,/* [in] */ _ELASTOS Int64 Param6,/* [in] */ _ELASTOS Int64 Param7,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [in] */ _ELASTOS Int64 Param4,
/* [in] */ _ELASTOS Int64 Param5,
/* [in] */ _ELASTOS Int64 Param6,
/* [in] */ _ELASTOS Int64 Param7,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructTimeval
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructTimevalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructTimeval, RGM_SAME_DOMAIN, 
                EIID_ICStructTimevalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSecUsec(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ Libcore::IO::IStructTimeval** __ppIStructTimeval)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructTimeval = Libcore::IO::IStructTimeval::Probe(__pNewObj);
        if (*__ppIStructTimeval) (*__ppIStructTimeval)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ Libcore::IO::IStructTimeval** __ppIStructTimeval)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIStructTimeval);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructUtsname
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructUtsnameClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructUtsname, RGM_SAME_DOMAIN, 
                EIID_ICStructUtsnameClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSysnameNodenameReleaseVerMachine(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ Libcore::IO::IStructUtsname** __ppIStructUtsname)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructUtsname = Libcore::IO::IStructUtsname::Probe(__pNewObj);
        if (*__ppIStructUtsname) (*__ppIStructUtsname)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ Libcore::IO::IStructUtsname** __ppIStructUtsname)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIStructUtsname);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CStructGroupReq
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Net::IInetAddress * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStructGroupReqClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStructGroupReq, RGM_SAME_DOMAIN, 
                EIID_ICStructGroupReqClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithGr_interfaceGr_group(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Net::IInetAddress * pParam1,/* [out] */ Libcore::IO::IStructGroupReq** __ppIStructGroupReq)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStructGroupReq = Libcore::IO::IStructGroupReq::Probe(__pNewObj);
        if (*__ppIStructGroupReq) (*__ppIStructGroupReq)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Net::IInetAddress * pParam1,
/* [out] */ Libcore::IO::IStructGroupReq** __ppIStructGroupReq)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIStructGroupReq);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Net::IInetAddress * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Net::IInetAddress * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CSocketTaggerHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::ISocketTaggerHelper** ppISocketTaggerHelper)
    {

        return _CObject_CreateInstance(ECLSID_CSocketTaggerHelper, pRegime, Libcore::IO::EIID_ISocketTaggerHelper, (IInterface**)ppISocketTaggerHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::ISocketTaggerHelper** __ppISocketTaggerHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppISocketTaggerHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::IO::ISocketTaggerHelper** ppISocketTaggerHelper)
    {
        return _CObject_CreateInstance(ECLSID_CSocketTaggerHelper, RGM_SAME_DOMAIN, Libcore::IO::EIID_ISocketTaggerHelper, (PInterface*)ppISocketTaggerHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace IO {
class CBase64
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::IO::IBase64** ppIBase64)
    {

        return _CObject_CreateInstance(ECLSID_CBase64, pRegime, Libcore::IO::EIID_IBase64, (IInterface**)ppIBase64);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::IO::IBase64** __ppIBase64)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBase64);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::IO::IBase64** ppIBase64)
    {
        return _CObject_CreateInstance(ECLSID_CBase64, RGM_SAME_DOMAIN, Libcore::IO::EIID_IBase64, (PInterface*)ppIBase64);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CAttributedCharacterIteratorAttribute
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributedCharacterIteratorAttributeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributedCharacterIteratorAttribute, RGM_SAME_DOMAIN, 
                EIID_ICAttributedCharacterIteratorAttributeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IAttributedCharacterIteratorAttribute** __ppIAttributedCharacterIteratorAttribute)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributedCharacterIteratorAttribute = Elastos::Text::IAttributedCharacterIteratorAttribute::Probe(__pNewObj);
        if (*__ppIAttributedCharacterIteratorAttribute) (*__ppIAttributedCharacterIteratorAttribute)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IAttributedCharacterIteratorAttribute** __ppIAttributedCharacterIteratorAttribute)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAttributedCharacterIteratorAttribute);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDecimalFormatSymbols
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDecimalFormatSymbolsClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDecimalFormatSymbols, RGM_SAME_DOMAIN, 
                EIID_ICDecimalFormatSymbolsClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLocale(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDecimalFormatSymbols** ppIDecimalFormatSymbols)
    {

        return _CObject_CreateInstance(ECLSID_CDecimalFormatSymbols, pRegime, Elastos::Text::EIID_IDecimalFormatSymbols, (IInterface**)ppIDecimalFormatSymbols);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDecimalFormatSymbols** __ppIDecimalFormatSymbols)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDecimalFormatSymbols);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Text::IDecimalFormatSymbols** ppIDecimalFormatSymbols)
    {
        return _CObject_CreateInstance(ECLSID_CDecimalFormatSymbols, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDecimalFormatSymbols, (PInterface*)ppIDecimalFormatSymbols);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDecimalFormatSymbols, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDecimalFormatSymbols, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::Text::IDecimalFormatSymbols** __ppIDecimalFormatSymbols)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDecimalFormatSymbols = Elastos::Text::IDecimalFormatSymbols::Probe(__pNewObj);
        if (*__ppIDecimalFormatSymbols) (*__ppIDecimalFormatSymbols)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::Text::IDecimalFormatSymbols** __ppIDecimalFormatSymbols)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDecimalFormatSymbols);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDecimalFormatSymbolsHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDecimalFormatSymbolsHelper** ppIDecimalFormatSymbolsHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDecimalFormatSymbolsHelper, pRegime, Elastos::Text::EIID_IDecimalFormatSymbolsHelper, (IInterface**)ppIDecimalFormatSymbolsHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDecimalFormatSymbolsHelper** __ppIDecimalFormatSymbolsHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDecimalFormatSymbolsHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IDecimalFormatSymbolsHelper** ppIDecimalFormatSymbolsHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDecimalFormatSymbolsHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDecimalFormatSymbolsHelper, (PInterface*)ppIDecimalFormatSymbolsHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CFieldPosition
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFieldPositionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFieldPosition, RGM_SAME_DOMAIN, 
                EIID_ICFieldPositionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithField(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFieldPositionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFieldPosition, RGM_SAME_DOMAIN, 
                EIID_ICFieldPositionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAttribute(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFieldPositionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFieldPosition, RGM_SAME_DOMAIN, 
                EIID_ICFieldPositionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAttributeField(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Text::IFieldPosition** __ppIFieldPosition)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFieldPosition = Elastos::Text::IFieldPosition::Probe(__pNewObj);
        if (*__ppIFieldPosition) (*__ppIFieldPosition)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Text::IFieldPosition** __ppIFieldPosition)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFieldPosition);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,/* [out] */ Elastos::Text::IFieldPosition** __ppIFieldPosition)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFieldPosition = Elastos::Text::IFieldPosition::Probe(__pNewObj);
        if (*__ppIFieldPosition) (*__ppIFieldPosition)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,
/* [out] */ Elastos::Text::IFieldPosition** __ppIFieldPosition)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFieldPosition);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Text::IFieldPosition** __ppIFieldPosition)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFieldPosition = Elastos::Text::IFieldPosition::Probe(__pNewObj);
        if (*__ppIFieldPosition) (*__ppIFieldPosition)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Text::IFieldPosition** __ppIFieldPosition)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFieldPosition);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIteratorAttribute * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CParsePosition
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICParsePositionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CParsePosition, RGM_SAME_DOMAIN, 
                EIID_ICParsePositionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIndex(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Text::IParsePosition** __ppIParsePosition)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIParsePosition = Elastos::Text::IParsePosition::Probe(__pNewObj);
        if (*__ppIParsePosition) (*__ppIParsePosition)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Text::IParsePosition** __ppIParsePosition)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIParsePosition);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CStringCharacterIterator
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringCharacterIteratorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringCharacterIterator, RGM_SAME_DOMAIN, 
                EIID_ICStringCharacterIteratorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringCharacterIteratorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringCharacterIterator, RGM_SAME_DOMAIN, 
                EIID_ICStringCharacterIteratorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValueLocation(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringCharacterIteratorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringCharacterIterator, RGM_SAME_DOMAIN, 
                EIID_ICStringCharacterIteratorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValueStartEndLocation(Param0, Param1, Param2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IStringCharacterIterator** __ppIStringCharacterIterator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringCharacterIterator = Elastos::Text::IStringCharacterIterator::Probe(__pNewObj);
        if (*__ppIStringCharacterIterator) (*__ppIStringCharacterIterator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IStringCharacterIterator** __ppIStringCharacterIterator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIStringCharacterIterator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Text::IStringCharacterIterator** __ppIStringCharacterIterator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringCharacterIterator = Elastos::Text::IStringCharacterIterator::Probe(__pNewObj);
        if (*__ppIStringCharacterIterator) (*__ppIStringCharacterIterator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Text::IStringCharacterIterator** __ppIStringCharacterIterator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIStringCharacterIterator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Text::IStringCharacterIterator** __ppIStringCharacterIterator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringCharacterIterator = Elastos::Text::IStringCharacterIterator::Probe(__pNewObj);
        if (*__ppIStringCharacterIterator) (*__ppIStringCharacterIterator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Text::IStringCharacterIterator** __ppIStringCharacterIterator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, __ppIStringCharacterIterator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CAttributedString
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributedStringClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributedString, RGM_SAME_DOMAIN, 
                EIID_ICAttributedStringClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIterator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributedStringClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributedString, RGM_SAME_DOMAIN, 
                EIID_ICAttributedStringClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIteratorStartEnd(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS ArrayOf<Elastos::Text::IAttributedCharacterIteratorAttribute *> * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributedStringClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributedString, RGM_SAME_DOMAIN, 
                EIID_ICAttributedStringClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIteratorStartEndAttributes(pParam0, Param1, Param2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributedStringClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributedString, RGM_SAME_DOMAIN, 
                EIID_ICAttributedStringClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributedString = Elastos::Text::IAttributedString::Probe(__pNewObj);
        if (*__ppIAttributedString) (*__ppIAttributedString)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAttributedString);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributedString = Elastos::Text::IAttributedString::Probe(__pNewObj);
        if (*__ppIAttributedString) (*__ppIAttributedString)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIAttributedString);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS ArrayOf<Elastos::Text::IAttributedCharacterIteratorAttribute *> * pParam3,/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributedString = Elastos::Text::IAttributedString::Probe(__pNewObj);
        if (*__ppIAttributedString) (*__ppIAttributedString)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS ArrayOf<Elastos::Text::IAttributedCharacterIteratorAttribute *> * pParam3,
/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, pParam3, __ppIAttributedString);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS ArrayOf<Elastos::Text::IAttributedCharacterIteratorAttribute *> * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS ArrayOf<Elastos::Text::IAttributedCharacterIteratorAttribute *> * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, pParam3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributedString = Elastos::Text::IAttributedString::Probe(__pNewObj);
        if (*__ppIAttributedString) (*__ppIAttributedString)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IAttributedString** __ppIAttributedString)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAttributedString);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CLocale
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLocaleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLocale, RGM_SAME_DOMAIN, 
                EIID_ICLocaleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUnusedLowerCaseLanguageCodeUpperCaseCountryCode(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLocaleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLocale, RGM_SAME_DOMAIN, 
                EIID_ICLocaleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLanguage(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLocaleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLocale, RGM_SAME_DOMAIN, 
                EIID_ICLocaleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLanguageCountry(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLocaleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLocale, RGM_SAME_DOMAIN, 
                EIID_ICLocaleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLanguageCountryVariant(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::ILocale** ppILocale)
    {

        return _CObject_CreateInstance(ECLSID_CLocale, pRegime, Libcore::ICU::EIID_ILocale, (IInterface**)ppILocale);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppILocale);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::ICU::ILocale** ppILocale)
    {
        return _CObject_CreateInstance(ECLSID_CLocale, RGM_SAME_DOMAIN, Libcore::ICU::EIID_ILocale, (PInterface*)ppILocale);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLocale, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLocale, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILocale = Libcore::ICU::ILocale::Probe(__pNewObj);
        if (*__ppILocale) (*__ppILocale)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppILocale);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILocale = Libcore::ICU::ILocale::Probe(__pNewObj);
        if (*__ppILocale) (*__ppILocale)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppILocale);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILocale = Libcore::ICU::ILocale::Probe(__pNewObj);
        if (*__ppILocale) (*__ppILocale)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppILocale);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILocale = Libcore::ICU::ILocale::Probe(__pNewObj);
        if (*__ppILocale) (*__ppILocale)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Libcore::ICU::ILocale** __ppILocale)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppILocale);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CLocaleHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::ILocaleHelper** ppILocaleHelper)
    {

        return _CObject_CreateInstance(ECLSID_CLocaleHelper, pRegime, Libcore::ICU::EIID_ILocaleHelper, (IInterface**)ppILocaleHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::ILocaleHelper** __ppILocaleHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppILocaleHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::ILocaleHelper** ppILocaleHelper)
    {
        return _CObject_CreateInstance(ECLSID_CLocaleHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_ILocaleHelper, (PInterface*)ppILocaleHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CLocaleDataHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::ILocaleDataHelper** ppILocaleDataHelper)
    {

        return _CObject_CreateInstance(ECLSID_CLocaleDataHelper, pRegime, Libcore::ICU::EIID_ILocaleDataHelper, (IInterface**)ppILocaleDataHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::ILocaleDataHelper** __ppILocaleDataHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppILocaleDataHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::ILocaleDataHelper** ppILocaleDataHelper)
    {
        return _CObject_CreateInstance(ECLSID_CLocaleDataHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_ILocaleDataHelper, (PInterface*)ppILocaleDataHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CICUHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::IICUHelper** ppIICUHelper)
    {

        return _CObject_CreateInstance(ECLSID_CICUHelper, pRegime, Libcore::ICU::EIID_IICUHelper, (IInterface**)ppIICUHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::IICUHelper** __ppIICUHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIICUHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::IICUHelper** ppIICUHelper)
    {
        return _CObject_CreateInstance(ECLSID_CICUHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_IICUHelper, (PInterface*)ppIICUHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CCollationElementIteratorICUHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::ICollationElementIteratorICUHelper** ppICollationElementIteratorICUHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCollationElementIteratorICUHelper, pRegime, Libcore::ICU::EIID_ICollationElementIteratorICUHelper, (IInterface**)ppICollationElementIteratorICUHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::ICollationElementIteratorICUHelper** __ppICollationElementIteratorICUHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICollationElementIteratorICUHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::ICollationElementIteratorICUHelper** ppICollationElementIteratorICUHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCollationElementIteratorICUHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_ICollationElementIteratorICUHelper, (PInterface*)ppICollationElementIteratorICUHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CCollationKeyICU
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCollationKeyICUClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCollationKeyICU, RGM_SAME_DOMAIN, 
                EIID_ICCollationKeyICUClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSourceBytes(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,/* [out] */ Libcore::ICU::ICollationKeyICU** __ppICollationKeyICU)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICollationKeyICU = Libcore::ICU::ICollationKeyICU::Probe(__pNewObj);
        if (*__ppICollationKeyICU) (*__ppICollationKeyICU)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,
/* [out] */ Libcore::ICU::ICollationKeyICU** __ppICollationKeyICU)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICollationKeyICU);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CLocaleData
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::ILocaleData** ppILocaleData)
    {

        return _CObject_CreateInstance(ECLSID_CLocaleData, pRegime, Libcore::ICU::EIID_ILocaleData, (IInterface**)ppILocaleData);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::ILocaleData** __ppILocaleData)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppILocaleData);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::ICU::ILocaleData** ppILocaleData)
    {
        return _CObject_CreateInstance(ECLSID_CLocaleData, RGM_SAME_DOMAIN, Libcore::ICU::EIID_ILocaleData, (PInterface*)ppILocaleData);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLocaleData, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLocaleData, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativeBreakIteratorHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::INativeBreakIteratorHelper** ppINativeBreakIteratorHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNativeBreakIteratorHelper, pRegime, Libcore::ICU::EIID_INativeBreakIteratorHelper, (IInterface**)ppINativeBreakIteratorHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::INativeBreakIteratorHelper** __ppINativeBreakIteratorHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINativeBreakIteratorHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::INativeBreakIteratorHelper** ppINativeBreakIteratorHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNativeBreakIteratorHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_INativeBreakIteratorHelper, (PInterface*)ppINativeBreakIteratorHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativeCollationHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::INativeCollationHelper** ppINativeCollationHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNativeCollationHelper, pRegime, Libcore::ICU::EIID_INativeCollationHelper, (IInterface**)ppINativeCollationHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::INativeCollationHelper** __ppINativeCollationHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINativeCollationHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::INativeCollationHelper** ppINativeCollationHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNativeCollationHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_INativeCollationHelper, (PInterface*)ppINativeCollationHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativeDecimalFormat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICNativeDecimalFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CNativeDecimalFormat, RGM_SAME_DOMAIN, 
                EIID_ICNativeDecimalFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPatternDfs(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocaleData * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICNativeDecimalFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CNativeDecimalFormat, RGM_SAME_DOMAIN, 
                EIID_ICNativeDecimalFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPatternData(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,/* [out] */ Libcore::ICU::INativeDecimalFormat** __ppINativeDecimalFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINativeDecimalFormat = Libcore::ICU::INativeDecimalFormat::Probe(__pNewObj);
        if (*__ppINativeDecimalFormat) (*__ppINativeDecimalFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,
/* [out] */ Libcore::ICU::INativeDecimalFormat** __ppINativeDecimalFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppINativeDecimalFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocaleData * pParam1,/* [out] */ Libcore::ICU::INativeDecimalFormat** __ppINativeDecimalFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINativeDecimalFormat = Libcore::ICU::INativeDecimalFormat::Probe(__pNewObj);
        if (*__ppINativeDecimalFormat) (*__ppINativeDecimalFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocaleData * pParam1,
/* [out] */ Libcore::ICU::INativeDecimalFormat** __ppINativeDecimalFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppINativeDecimalFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocaleData * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocaleData * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativeIDNHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::INativeIDNHelper** ppINativeIDNHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNativeIDNHelper, pRegime, Libcore::ICU::EIID_INativeIDNHelper, (IInterface**)ppINativeIDNHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::INativeIDNHelper** __ppINativeIDNHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINativeIDNHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::INativeIDNHelper** ppINativeIDNHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNativeIDNHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_INativeIDNHelper, (PInterface*)ppINativeIDNHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativeNormalizerHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::INativeNormalizerHelper** ppINativeNormalizerHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNativeNormalizerHelper, pRegime, Libcore::ICU::EIID_INativeNormalizerHelper, (IInterface**)ppINativeNormalizerHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::INativeNormalizerHelper** __ppINativeNormalizerHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINativeNormalizerHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::INativeNormalizerHelper** ppINativeNormalizerHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNativeNormalizerHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_INativeNormalizerHelper, (PInterface*)ppINativeNormalizerHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativePluralRules
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::INativePluralRules** ppINativePluralRules)
    {

        return _CObject_CreateInstance(ECLSID_CNativePluralRules, pRegime, Libcore::ICU::EIID_INativePluralRules, (IInterface**)ppINativePluralRules);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::INativePluralRules** __ppINativePluralRules)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppINativePluralRules);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::ICU::INativePluralRules** ppINativePluralRules)
    {
        return _CObject_CreateInstance(ECLSID_CNativePluralRules, RGM_SAME_DOMAIN, Libcore::ICU::EIID_INativePluralRules, (PInterface*)ppINativePluralRules);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CNativePluralRules, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CNativePluralRules, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CNativePluralRulesHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::INativePluralRulesHelper** ppINativePluralRulesHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNativePluralRulesHelper, pRegime, Libcore::ICU::EIID_INativePluralRulesHelper, (IInterface**)ppINativePluralRulesHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::INativePluralRulesHelper** __ppINativePluralRulesHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINativePluralRulesHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::INativePluralRulesHelper** ppINativePluralRulesHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNativePluralRulesHelper, RGM_SAME_DOMAIN, Libcore::ICU::EIID_INativePluralRulesHelper, (PInterface*)ppINativePluralRulesHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CRuleBasedCollatorICU
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRuleBasedCollatorICUClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRuleBasedCollatorICU, RGM_SAME_DOMAIN, 
                EIID_ICRuleBasedCollatorICUClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRules(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRuleBasedCollatorICUClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRuleBasedCollatorICU, RGM_SAME_DOMAIN, 
                EIID_ICRuleBasedCollatorICUClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLocale(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Libcore::ICU::IRuleBasedCollatorICU** __ppIRuleBasedCollatorICU)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRuleBasedCollatorICU = Libcore::ICU::IRuleBasedCollatorICU::Probe(__pNewObj);
        if (*__ppIRuleBasedCollatorICU) (*__ppIRuleBasedCollatorICU)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Libcore::ICU::IRuleBasedCollatorICU** __ppIRuleBasedCollatorICU)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRuleBasedCollatorICU);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Libcore::ICU::IRuleBasedCollatorICU** __ppIRuleBasedCollatorICU)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRuleBasedCollatorICU = Libcore::ICU::IRuleBasedCollatorICU::Probe(__pNewObj);
        if (*__ppIRuleBasedCollatorICU) (*__ppIRuleBasedCollatorICU)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Libcore::ICU::IRuleBasedCollatorICU** __ppIRuleBasedCollatorICU)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRuleBasedCollatorICU);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace ICU {
class CTimeZones
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::ICU::ITimeZones** ppITimeZones)
    {

        return _CObject_CreateInstance(ECLSID_CTimeZones, pRegime, Libcore::ICU::EIID_ITimeZones, (IInterface**)ppITimeZones);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::ICU::ITimeZones** __ppITimeZones)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppITimeZones);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::ICU::ITimeZones** ppITimeZones)
    {
        return _CObject_CreateInstance(ECLSID_CTimeZones, RGM_SAME_DOMAIN, Libcore::ICU::EIID_ITimeZones, (PInterface*)ppITimeZones);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace Utility {
class CBasicLruCache
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBasicLruCacheClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBasicLruCache, RGM_SAME_DOMAIN, 
                EIID_ICBasicLruCacheClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMaxSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::Utility::IBasicLruCache** ppIBasicLruCache)
    {

        return _CObject_CreateInstance(ECLSID_CBasicLruCache, pRegime, Libcore::Utility::EIID_IBasicLruCache, (IInterface**)ppIBasicLruCache);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::Utility::IBasicLruCache** __ppIBasicLruCache)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBasicLruCache);
    }

    static _ELASTOS ECode New(/* [out] */ Libcore::Utility::IBasicLruCache** ppIBasicLruCache)
    {
        return _CObject_CreateInstance(ECLSID_CBasicLruCache, RGM_SAME_DOMAIN, Libcore::Utility::EIID_IBasicLruCache, (PInterface*)ppIBasicLruCache);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CBasicLruCache, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CBasicLruCache, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Libcore::Utility::IBasicLruCache** __ppIBasicLruCache)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBasicLruCache = Libcore::Utility::IBasicLruCache::Probe(__pNewObj);
        if (*__ppIBasicLruCache) (*__ppIBasicLruCache)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Libcore::Utility::IBasicLruCache** __ppIBasicLruCache)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBasicLruCache);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Libcore {
namespace Utility {
class CCollectionUtils
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Libcore::Utility::ICollectionUtils** ppICollectionUtils)
    {

        return _CObject_CreateInstance(ECLSID_CCollectionUtils, pRegime, Libcore::Utility::EIID_ICollectionUtils, (IInterface**)ppICollectionUtils);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Libcore::Utility::ICollectionUtils** __ppICollectionUtils)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICollectionUtils);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Libcore::Utility::ICollectionUtils** ppICollectionUtils)
    {
        return _CObject_CreateInstance(ECLSID_CCollectionUtils, RGM_SAME_DOMAIN, Libcore::Utility::EIID_ICollectionUtils, (PInterface*)ppICollectionUtils);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CByteOrderHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IByteOrderHelper** ppIByteOrderHelper)
    {

        return _CObject_CreateInstance(ECLSID_CByteOrderHelper, pRegime, Elastos::IO::EIID_IByteOrderHelper, (IInterface**)ppIByteOrderHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IByteOrderHelper** __ppIByteOrderHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIByteOrderHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IByteOrderHelper** ppIByteOrderHelper)
    {
        return _CObject_CreateInstance(ECLSID_CByteOrderHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IByteOrderHelper, (PInterface*)ppIByteOrderHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CBufferedInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedInputStream, RGM_SAME_DOMAIN, 
                EIID_ICBufferedInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedInputStream, RGM_SAME_DOMAIN, 
                EIID_ICBufferedInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::IBufferedInputStream** __ppIBufferedInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedInputStream = Elastos::IO::IBufferedInputStream::Probe(__pNewObj);
        if (*__ppIBufferedInputStream) (*__ppIBufferedInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::IBufferedInputStream** __ppIBufferedInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBufferedInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IBufferedInputStream** __ppIBufferedInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedInputStream = Elastos::IO::IBufferedInputStream::Probe(__pNewObj);
        if (*__ppIBufferedInputStream) (*__ppIBufferedInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IBufferedInputStream** __ppIBufferedInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIBufferedInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CBufferedOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICBufferedOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICBufferedOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IBufferedOutputStream** __ppIBufferedOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedOutputStream = Elastos::IO::IBufferedOutputStream::Probe(__pNewObj);
        if (*__ppIBufferedOutputStream) (*__ppIBufferedOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IBufferedOutputStream** __ppIBufferedOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBufferedOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IBufferedOutputStream** __ppIBufferedOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedOutputStream = Elastos::IO::IBufferedOutputStream::Probe(__pNewObj);
        if (*__ppIBufferedOutputStream) (*__ppIBufferedOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IBufferedOutputStream** __ppIBufferedOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIBufferedOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CBufferedReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedReader, RGM_SAME_DOMAIN, 
                EIID_ICBufferedReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRin(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedReader, RGM_SAME_DOMAIN, 
                EIID_ICBufferedReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRinSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::IO::IBufferedReader** __ppIBufferedReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedReader = Elastos::IO::IBufferedReader::Probe(__pNewObj);
        if (*__ppIBufferedReader) (*__ppIBufferedReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::IO::IBufferedReader** __ppIBufferedReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBufferedReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IBufferedReader** __ppIBufferedReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedReader = Elastos::IO::IBufferedReader::Probe(__pNewObj);
        if (*__ppIBufferedReader) (*__ppIBufferedReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IBufferedReader** __ppIBufferedReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIBufferedReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CBufferedWriter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedWriter, RGM_SAME_DOMAIN, 
                EIID_ICBufferedWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithWout(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBufferedWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBufferedWriter, RGM_SAME_DOMAIN, 
                EIID_ICBufferedWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithWoutSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ Elastos::IO::IBufferedWriter** __ppIBufferedWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedWriter = Elastos::IO::IBufferedWriter::Probe(__pNewObj);
        if (*__ppIBufferedWriter) (*__ppIBufferedWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ Elastos::IO::IBufferedWriter** __ppIBufferedWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBufferedWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IBufferedWriter** __ppIBufferedWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBufferedWriter = Elastos::IO::IBufferedWriter::Probe(__pNewObj);
        if (*__ppIBufferedWriter) (*__ppIBufferedWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IBufferedWriter** __ppIBufferedWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIBufferedWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CByteArrayInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICByteArrayInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CByteArrayInputStream, RGM_SAME_DOMAIN, 
                EIID_ICByteArrayInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBuffer(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICByteArrayInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CByteArrayInputStream, RGM_SAME_DOMAIN, 
                EIID_ICByteArrayInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBufferOffsetLength(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ Elastos::IO::IByteArrayInputStream** __ppIByteArrayInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIByteArrayInputStream = Elastos::IO::IByteArrayInputStream::Probe(__pNewObj);
        if (*__ppIByteArrayInputStream) (*__ppIByteArrayInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ Elastos::IO::IByteArrayInputStream** __ppIByteArrayInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIByteArrayInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::IByteArrayInputStream** __ppIByteArrayInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIByteArrayInputStream = Elastos::IO::IByteArrayInputStream::Probe(__pNewObj);
        if (*__ppIByteArrayInputStream) (*__ppIByteArrayInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::IByteArrayInputStream** __ppIByteArrayInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIByteArrayInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CByteArrayOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICByteArrayOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CByteArrayOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICByteArrayOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IByteArrayOutputStream** ppIByteArrayOutputStream)
    {

        return _CObject_CreateInstance(ECLSID_CByteArrayOutputStream, pRegime, Elastos::IO::EIID_IByteArrayOutputStream, (IInterface**)ppIByteArrayOutputStream);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IByteArrayOutputStream** __ppIByteArrayOutputStream)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIByteArrayOutputStream);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IByteArrayOutputStream** ppIByteArrayOutputStream)
    {
        return _CObject_CreateInstance(ECLSID_CByteArrayOutputStream, RGM_SAME_DOMAIN, Elastos::IO::EIID_IByteArrayOutputStream, (PInterface*)ppIByteArrayOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {

        return _CObject_CreateInstance(ECLSID_CByteArrayOutputStream, pRegime, Elastos::IO::EIID_IFlushable, (IInterface**)ppIFlushable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFlushable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {
        return _CObject_CreateInstance(ECLSID_CByteArrayOutputStream, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFlushable, (PInterface*)ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CByteArrayOutputStream, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CByteArrayOutputStream, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IByteArrayOutputStream** __ppIByteArrayOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIByteArrayOutputStream = Elastos::IO::IByteArrayOutputStream::Probe(__pNewObj);
        if (*__ppIByteArrayOutputStream) (*__ppIByteArrayOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IByteArrayOutputStream** __ppIByteArrayOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIByteArrayOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CCharArrayReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCharArrayReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCharArrayReader, RGM_SAME_DOMAIN, 
                EIID_ICCharArrayReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBuf(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCharArrayReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCharArrayReader, RGM_SAME_DOMAIN, 
                EIID_ICCharArrayReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBufOffsetLength(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ Elastos::IO::ICharArrayReader** __ppICharArrayReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICharArrayReader = Elastos::IO::ICharArrayReader::Probe(__pNewObj);
        if (*__ppICharArrayReader) (*__ppICharArrayReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ Elastos::IO::ICharArrayReader** __ppICharArrayReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICharArrayReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::ICharArrayReader** __ppICharArrayReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICharArrayReader = Elastos::IO::ICharArrayReader::Probe(__pNewObj);
        if (*__ppICharArrayReader) (*__ppICharArrayReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::ICharArrayReader** __ppICharArrayReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppICharArrayReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CCharArrayWriter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCharArrayWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCharArrayWriter, RGM_SAME_DOMAIN, 
                EIID_ICCharArrayWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ICharArrayWriter** ppICharArrayWriter)
    {

        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, pRegime, Elastos::IO::EIID_ICharArrayWriter, (IInterface**)ppICharArrayWriter);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ICharArrayWriter** __ppICharArrayWriter)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICharArrayWriter);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ICharArrayWriter** ppICharArrayWriter)
    {
        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, RGM_SAME_DOMAIN, Elastos::IO::EIID_ICharArrayWriter, (PInterface*)ppICharArrayWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ICloseable** ppICloseable)
    {

        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, pRegime, Elastos::IO::EIID_ICloseable, (IInterface**)ppICloseable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloseable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ICloseable** ppICloseable)
    {
        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, RGM_SAME_DOMAIN, Elastos::IO::EIID_ICloseable, (PInterface*)ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {

        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, pRegime, Elastos::IO::EIID_IFlushable, (IInterface**)ppIFlushable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFlushable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {
        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFlushable, (PInterface*)ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCharArrayWriter, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ICharArrayWriter** __ppICharArrayWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICharArrayWriter = Elastos::IO::ICharArrayWriter::Probe(__pNewObj);
        if (*__ppICharArrayWriter) (*__ppICharArrayWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ICharArrayWriter** __ppICharArrayWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICharArrayWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CCharBufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ICharBufferHelper** ppICharBufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCharBufferHelper, pRegime, Elastos::IO::EIID_ICharBufferHelper, (IInterface**)ppICharBufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ICharBufferHelper** __ppICharBufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICharBufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::ICharBufferHelper** ppICharBufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCharBufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_ICharBufferHelper, (PInterface*)ppICharBufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CDataInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDataInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDataInputStream, RGM_SAME_DOMAIN, 
                EIID_ICDataInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::IDataInput** __ppIDataInput)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataInput = Elastos::IO::IDataInput::Probe(__pNewObj);
        if (*__ppIDataInput) (*__ppIDataInput)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::IDataInput** __ppIDataInput)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDataInput);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::IDataInputStream** __ppIDataInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataInputStream = Elastos::IO::IDataInputStream::Probe(__pNewObj);
        if (*__ppIDataInputStream) (*__ppIDataInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::IDataInputStream** __ppIDataInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDataInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CDataInputStreamHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IDataInputStreamHelper** ppIDataInputStreamHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDataInputStreamHelper, pRegime, Elastos::IO::EIID_IDataInputStreamHelper, (IInterface**)ppIDataInputStreamHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IDataInputStreamHelper** __ppIDataInputStreamHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDataInputStreamHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IDataInputStreamHelper** ppIDataInputStreamHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDataInputStreamHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IDataInputStreamHelper, (PInterface*)ppIDataInputStreamHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CDataOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDataOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDataOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICDataOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IDataOutput** __ppIDataOutput)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataOutput = Elastos::IO::IDataOutput::Probe(__pNewObj);
        if (*__ppIDataOutput) (*__ppIDataOutput)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IDataOutput** __ppIDataOutput)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDataOutput);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IDataOutputStream** __ppIDataOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataOutputStream = Elastos::IO::IDataOutputStream::Probe(__pNewObj);
        if (*__ppIDataOutputStream) (*__ppIDataOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IDataOutputStream** __ppIDataOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDataOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFile
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFile, RGM_SAME_DOMAIN, 
                EIID_ICFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDirName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFile, RGM_SAME_DOMAIN, 
                EIID_ICFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPath(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFile, RGM_SAME_DOMAIN, 
                EIID_ICFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDirPathName(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFile, RGM_SAME_DOMAIN, 
                EIID_ICFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUrii(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFile = Elastos::IO::IFile::Probe(__pNewObj);
        if (*__ppIFile) (*__ppIFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFile = Elastos::IO::IFile::Probe(__pNewObj);
        if (*__ppIFile) (*__ppIFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFile = Elastos::IO::IFile::Probe(__pNewObj);
        if (*__ppIFile) (*__ppIFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFile = Elastos::IO::IFile::Probe(__pNewObj);
        if (*__ppIFile) (*__ppIFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [out] */ Elastos::IO::IFile** __ppIFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFileHelper** ppIFileHelper)
    {

        return _CObject_CreateInstance(ECLSID_CFileHelper, pRegime, Elastos::IO::EIID_IFileHelper, (IInterface**)ppIFileHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFileHelper** __ppIFileHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIFileHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IFileHelper** ppIFileHelper)
    {
        return _CObject_CreateInstance(ECLSID_CFileHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFileHelper, (PInterface*)ppIFileHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileDescriptor
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFileDescriptor** ppIFileDescriptor)
    {

        return _CObject_CreateInstance(ECLSID_CFileDescriptor, pRegime, Elastos::IO::EIID_IFileDescriptor, (IInterface**)ppIFileDescriptor);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFileDescriptor** __ppIFileDescriptor)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFileDescriptor);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IFileDescriptor** ppIFileDescriptor)
    {
        return _CObject_CreateInstance(ECLSID_CFileDescriptor, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFileDescriptor, (PInterface*)ppIFileDescriptor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CFileDescriptor, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CFileDescriptor, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileDescriptorHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFileDescriptorHelper** ppIFileDescriptorHelper)
    {

        return _CObject_CreateInstance(ECLSID_CFileDescriptorHelper, pRegime, Elastos::IO::EIID_IFileDescriptorHelper, (IInterface**)ppIFileDescriptorHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFileDescriptorHelper** __ppIFileDescriptorHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIFileDescriptorHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IFileDescriptorHelper** ppIFileDescriptorHelper)
    {
        return _CObject_CreateInstance(ECLSID_CFileDescriptorHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFileDescriptorHelper, (PInterface*)ppIFileDescriptorHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileInputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileInputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFd(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileInputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPath(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFileInputStream** __ppIFileInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileInputStream = Elastos::IO::IFileInputStream::Probe(__pNewObj);
        if (*__ppIFileInputStream) (*__ppIFileInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFileInputStream** __ppIFileInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::IFileInputStream** __ppIFileInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileInputStream = Elastos::IO::IFileInputStream::Probe(__pNewObj);
        if (*__ppIFileInputStream) (*__ppIFileInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::IFileInputStream** __ppIFileInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFileInputStream** __ppIFileInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileInputStream = Elastos::IO::IFileInputStream::Probe(__pNewObj);
        if (*__ppIFileInputStream) (*__ppIFileInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFileInputStream** __ppIFileInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFileInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileAppend(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFd(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPath(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFileOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPathAppend(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileOutputStream = Elastos::IO::IFileOutputStream::Probe(__pNewObj);
        if (*__ppIFileOutputStream) (*__ppIFileOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileOutputStream = Elastos::IO::IFileOutputStream::Probe(__pNewObj);
        if (*__ppIFileOutputStream) (*__ppIFileOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFileOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileOutputStream = Elastos::IO::IFileOutputStream::Probe(__pNewObj);
        if (*__ppIFileOutputStream) (*__ppIFileOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileOutputStream = Elastos::IO::IFileOutputStream::Probe(__pNewObj);
        if (*__ppIFileOutputStream) (*__ppIFileOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFileOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileOutputStream = Elastos::IO::IFileOutputStream::Probe(__pNewObj);
        if (*__ppIFileOutputStream) (*__ppIFileOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFileOutputStream** __ppIFileOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFileOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFilePermission
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFilePermissionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFilePermission, RGM_SAME_DOMAIN, 
                EIID_ICFilePermissionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPathActions(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFilePermission** __ppIFilePermission)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFilePermission = Elastos::IO::IFilePermission::Probe(__pNewObj);
        if (*__ppIFilePermission) (*__ppIFilePermission)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFilePermission** __ppIFilePermission)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFilePermission);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileReader, RGM_SAME_DOMAIN, 
                EIID_ICFileReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileReader, RGM_SAME_DOMAIN, 
                EIID_ICFileReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFd(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileReader, RGM_SAME_DOMAIN, 
                EIID_ICFileReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilename(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFileReader** __ppIFileReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileReader = Elastos::IO::IFileReader::Probe(__pNewObj);
        if (*__ppIFileReader) (*__ppIFileReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFileReader** __ppIFileReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::IFileReader** __ppIFileReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileReader = Elastos::IO::IFileReader::Probe(__pNewObj);
        if (*__ppIFileReader) (*__ppIFileReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::IFileReader** __ppIFileReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFileReader** __ppIFileReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileReader = Elastos::IO::IFileReader::Probe(__pNewObj);
        if (*__ppIFileReader) (*__ppIFileReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFileReader** __ppIFileReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFileReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFileWriter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileWriter, RGM_SAME_DOMAIN, 
                EIID_ICFileWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileWriter, RGM_SAME_DOMAIN, 
                EIID_ICFileWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileAppend(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileWriter, RGM_SAME_DOMAIN, 
                EIID_ICFileWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFd(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileWriter, RGM_SAME_DOMAIN, 
                EIID_ICFileWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilename(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileWriter, RGM_SAME_DOMAIN, 
                EIID_ICFileWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilenameAppend(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileWriter = Elastos::IO::IFileWriter::Probe(__pNewObj);
        if (*__ppIFileWriter) (*__ppIFileWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileWriter = Elastos::IO::IFileWriter::Probe(__pNewObj);
        if (*__ppIFileWriter) (*__ppIFileWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFileWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileWriter = Elastos::IO::IFileWriter::Probe(__pNewObj);
        if (*__ppIFileWriter) (*__ppIFileWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileWriter = Elastos::IO::IFileWriter::Probe(__pNewObj);
        if (*__ppIFileWriter) (*__ppIFileWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFileWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileWriter = Elastos::IO::IFileWriter::Probe(__pNewObj);
        if (*__ppIFileWriter) (*__ppIFileWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFileWriter** __ppIFileWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFileWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFilterInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFilterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFilterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICFilterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::IFilterInputStream** __ppIFilterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFilterInputStream = Elastos::IO::IFilterInputStream::Probe(__pNewObj);
        if (*__ppIFilterInputStream) (*__ppIFilterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::IFilterInputStream** __ppIFilterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFilterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFilterOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFilterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFilterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFilterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFilterOutputStream** __ppIFilterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFilterOutputStream = Elastos::IO::IFilterOutputStream::Probe(__pNewObj);
        if (*__ppIFilterOutputStream) (*__ppIFilterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFilterOutputStream** __ppIFilterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFilterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CInputStreamReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInputStreamReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInputStreamReader, RGM_SAME_DOMAIN, 
                EIID_ICInputStreamReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInputStreamReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInputStreamReader, RGM_SAME_DOMAIN, 
                EIID_ICInputStreamReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsCharsetName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::IInputStreamReader** __ppIInputStreamReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInputStreamReader = Elastos::IO::IInputStreamReader::Probe(__pNewObj);
        if (*__ppIInputStreamReader) (*__ppIInputStreamReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::IInputStreamReader** __ppIInputStreamReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIInputStreamReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IInputStreamReader** __ppIInputStreamReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInputStreamReader = Elastos::IO::IInputStreamReader::Probe(__pNewObj);
        if (*__ppIInputStreamReader) (*__ppIInputStreamReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IInputStreamReader** __ppIInputStreamReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIInputStreamReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CLineNumberInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLineNumberInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLineNumberInputStream, RGM_SAME_DOMAIN, 
                EIID_ICLineNumberInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::ILineNumberInputStream** __ppILineNumberInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILineNumberInputStream = Elastos::IO::ILineNumberInputStream::Probe(__pNewObj);
        if (*__ppILineNumberInputStream) (*__ppILineNumberInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::ILineNumberInputStream** __ppILineNumberInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppILineNumberInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CLineNumberReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLineNumberReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLineNumberReader, RGM_SAME_DOMAIN, 
                EIID_ICLineNumberReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIr(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLineNumberReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLineNumberReader, RGM_SAME_DOMAIN, 
                EIID_ICLineNumberReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIrSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::IO::ILineNumberReader** __ppILineNumberReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILineNumberReader = Elastos::IO::ILineNumberReader::Probe(__pNewObj);
        if (*__ppILineNumberReader) (*__ppILineNumberReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::IO::ILineNumberReader** __ppILineNumberReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppILineNumberReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::ILineNumberReader** __ppILineNumberReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILineNumberReader = Elastos::IO::ILineNumberReader::Probe(__pNewObj);
        if (*__ppILineNumberReader) (*__ppILineNumberReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::ILineNumberReader** __ppILineNumberReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppILineNumberReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class COutputStreamWriter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICOutputStreamWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_COutputStreamWriter, RGM_SAME_DOMAIN, 
                EIID_ICOutputStreamWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICOutputStreamWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_COutputStreamWriter, RGM_SAME_DOMAIN, 
                EIID_ICOutputStreamWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsEnc(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IOutputStreamWriter** __ppIOutputStreamWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIOutputStreamWriter = Elastos::IO::IOutputStreamWriter::Probe(__pNewObj);
        if (*__ppIOutputStreamWriter) (*__ppIOutputStreamWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IOutputStreamWriter** __ppIOutputStreamWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIOutputStreamWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IOutputStreamWriter** __ppIOutputStreamWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIOutputStreamWriter = Elastos::IO::IOutputStreamWriter::Probe(__pNewObj);
        if (*__ppIOutputStreamWriter) (*__ppIOutputStreamWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IOutputStreamWriter** __ppIOutputStreamWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIOutputStreamWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CPrintStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOuts(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOutsAutoflush(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOutsAutoflushEnc(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileCsn(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintStream, RGM_SAME_DOMAIN, 
                EIID_ICPrintStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileNameCsn(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintStream = Elastos::IO::IPrintStream::Probe(__pNewObj);
        if (*__ppIPrintStream) (*__ppIPrintStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IPrintStream** __ppIPrintStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIPrintStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAppendable = Elastos::Core::IAppendable::Probe(__pNewObj);
        if (*__ppIAppendable) (*__ppIAppendable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::IAppendable** __ppIAppendable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIAppendable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CPrintWriter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOuts(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOutsAutoflush(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithWr(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithWrAutoflush(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileCsn(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrintWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrintWriter, RGM_SAME_DOMAIN, 
                EIID_ICPrintWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileNameCsn(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IWriter * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IWriter * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrintWriter = Elastos::IO::IPrintWriter::Probe(__pNewObj);
        if (*__ppIPrintWriter) (*__ppIPrintWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IPrintWriter** __ppIPrintWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIPrintWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CPushbackInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPushbackInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPushbackInputStream, RGM_SAME_DOMAIN, 
                EIID_ICPushbackInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPushbackInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPushbackInputStream, RGM_SAME_DOMAIN, 
                EIID_ICPushbackInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::IO::IPushbackInputStream** __ppIPushbackInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPushbackInputStream = Elastos::IO::IPushbackInputStream::Probe(__pNewObj);
        if (*__ppIPushbackInputStream) (*__ppIPushbackInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::IO::IPushbackInputStream** __ppIPushbackInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPushbackInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IPushbackInputStream** __ppIPushbackInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPushbackInputStream = Elastos::IO::IPushbackInputStream::Probe(__pNewObj);
        if (*__ppIPushbackInputStream) (*__ppIPushbackInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IPushbackInputStream** __ppIPushbackInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPushbackInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CPushbackReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPushbackReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPushbackReader, RGM_SAME_DOMAIN, 
                EIID_ICPushbackReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIr(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPushbackReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPushbackReader, RGM_SAME_DOMAIN, 
                EIID_ICPushbackReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIrSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::IO::IPushbackReader** __ppIPushbackReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPushbackReader = Elastos::IO::IPushbackReader::Probe(__pNewObj);
        if (*__ppIPushbackReader) (*__ppIPushbackReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::IO::IPushbackReader** __ppIPushbackReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPushbackReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IPushbackReader** __ppIPushbackReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPushbackReader = Elastos::IO::IPushbackReader::Probe(__pNewObj);
        if (*__ppIPushbackReader) (*__ppIPushbackReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IPushbackReader** __ppIPushbackReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPushbackReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CRandomAccessFile
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRandomAccessFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRandomAccessFile, RGM_SAME_DOMAIN, 
                EIID_ICRandomAccessFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPFileMode(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRandomAccessFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRandomAccessFile, RGM_SAME_DOMAIN, 
                EIID_ICRandomAccessFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileNameMode(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IRandomAccessFile** __ppIRandomAccessFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccessFile = Elastos::IO::IRandomAccessFile::Probe(__pNewObj);
        if (*__ppIRandomAccessFile) (*__ppIRandomAccessFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IRandomAccessFile** __ppIRandomAccessFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIRandomAccessFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IDataInput** __ppIDataInput)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataInput = Elastos::IO::IDataInput::Probe(__pNewObj);
        if (*__ppIDataInput) (*__ppIDataInput)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IDataInput** __ppIDataInput)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIDataInput);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IDataOutput** __ppIDataOutput)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataOutput = Elastos::IO::IDataOutput::Probe(__pNewObj);
        if (*__ppIDataOutput) (*__ppIDataOutput)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IDataOutput** __ppIDataOutput)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIDataOutput);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IRandomAccessFile** __ppIRandomAccessFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccessFile = Elastos::IO::IRandomAccessFile::Probe(__pNewObj);
        if (*__ppIRandomAccessFile) (*__ppIRandomAccessFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IRandomAccessFile** __ppIRandomAccessFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIRandomAccessFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IDataInput** __ppIDataInput)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataInput = Elastos::IO::IDataInput::Probe(__pNewObj);
        if (*__ppIDataInput) (*__ppIDataInput)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IDataInput** __ppIDataInput)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIDataInput);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IDataOutput** __ppIDataOutput)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataOutput = Elastos::IO::IDataOutput::Probe(__pNewObj);
        if (*__ppIDataOutput) (*__ppIDataOutput)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IDataOutput** __ppIDataOutput)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIDataOutput);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CSequenceInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::IO::IInputStream * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSequenceInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSequenceInputStream, RGM_SAME_DOMAIN, 
                EIID_ICSequenceInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithS1S2(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ IObjectEnumerator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSequenceInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSequenceInputStream, RGM_SAME_DOMAIN, 
                EIID_ICSequenceInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithE(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::IO::IInputStream * pParam1,/* [out] */ Elastos::IO::ISequenceInputStream** __ppISequenceInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISequenceInputStream = Elastos::IO::ISequenceInputStream::Probe(__pNewObj);
        if (*__ppISequenceInputStream) (*__ppISequenceInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::IO::IInputStream * pParam1,
/* [out] */ Elastos::IO::ISequenceInputStream** __ppISequenceInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppISequenceInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::IO::IInputStream * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::IO::IInputStream * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IObjectEnumerator * pParam0,/* [out] */ Elastos::IO::ISequenceInputStream** __ppISequenceInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISequenceInputStream = Elastos::IO::ISequenceInputStream::Probe(__pNewObj);
        if (*__ppISequenceInputStream) (*__ppISequenceInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IObjectEnumerator * pParam0,
/* [out] */ Elastos::IO::ISequenceInputStream** __ppISequenceInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISequenceInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IObjectEnumerator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IObjectEnumerator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CStringBufferInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringBufferInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringBufferInputStream, RGM_SAME_DOMAIN, 
                EIID_ICStringBufferInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStr(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IStringBufferInputStream** __ppIStringBufferInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringBufferInputStream = Elastos::IO::IStringBufferInputStream::Probe(__pNewObj);
        if (*__ppIStringBufferInputStream) (*__ppIStringBufferInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IStringBufferInputStream** __ppIStringBufferInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIStringBufferInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CStringReader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringReaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringReader, RGM_SAME_DOMAIN, 
                EIID_ICStringReaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStr(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IStringReader** __ppIStringReader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringReader = Elastos::IO::IStringReader::Probe(__pNewObj);
        if (*__ppIStringReader) (*__ppIStringReader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IStringReader** __ppIStringReader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIStringReader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CStringWriter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringWriterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringWriter, RGM_SAME_DOMAIN, 
                EIID_ICStringWriterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IStringWriter** ppIStringWriter)
    {

        return _CObject_CreateInstance(ECLSID_CStringWriter, pRegime, Elastos::IO::EIID_IStringWriter, (IInterface**)ppIStringWriter);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IStringWriter** __ppIStringWriter)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIStringWriter);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IStringWriter** ppIStringWriter)
    {
        return _CObject_CreateInstance(ECLSID_CStringWriter, RGM_SAME_DOMAIN, Elastos::IO::EIID_IStringWriter, (PInterface*)ppIStringWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ICloseable** ppICloseable)
    {

        return _CObject_CreateInstance(ECLSID_CStringWriter, pRegime, Elastos::IO::EIID_ICloseable, (IInterface**)ppICloseable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloseable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ICloseable** ppICloseable)
    {
        return _CObject_CreateInstance(ECLSID_CStringWriter, RGM_SAME_DOMAIN, Elastos::IO::EIID_ICloseable, (PInterface*)ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {

        return _CObject_CreateInstance(ECLSID_CStringWriter, pRegime, Elastos::IO::EIID_IFlushable, (IInterface**)ppIFlushable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFlushable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {
        return _CObject_CreateInstance(ECLSID_CStringWriter, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFlushable, (PInterface*)ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CStringWriter, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CStringWriter, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IStringWriter** __ppIStringWriter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringWriter = Elastos::IO::IStringWriter::Probe(__pNewObj);
        if (*__ppIStringWriter) (*__ppIStringWriter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IStringWriter** __ppIStringWriter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIStringWriter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CByteBufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IByteBufferHelper** ppIByteBufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CByteBufferHelper, pRegime, Elastos::IO::EIID_IByteBufferHelper, (IInterface**)ppIByteBufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IByteBufferHelper** __ppIByteBufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIByteBufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IByteBufferHelper** ppIByteBufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CByteBufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IByteBufferHelper, (PInterface*)ppIByteBufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CDoubleBufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IDoubleBufferHelper** ppIDoubleBufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDoubleBufferHelper, pRegime, Elastos::IO::EIID_IDoubleBufferHelper, (IInterface**)ppIDoubleBufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IDoubleBufferHelper** __ppIDoubleBufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDoubleBufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IDoubleBufferHelper** ppIDoubleBufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDoubleBufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IDoubleBufferHelper, (PInterface*)ppIDoubleBufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CHeapBufferIterator
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::IO::ByteOrder Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHeapBufferIteratorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHeapBufferIterator, RGM_SAME_DOMAIN, 
                EIID_ICHeapBufferIteratorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBufferOffsetByteCountOrder(pParam0, Param1, Param2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::IO::ByteOrder Param3,/* [out] */ Elastos::IO::IHeapBufferIterator** __ppIHeapBufferIterator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIHeapBufferIterator = Elastos::IO::IHeapBufferIterator::Probe(__pNewObj);
        if (*__ppIHeapBufferIterator) (*__ppIHeapBufferIterator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::IO::ByteOrder Param3,
/* [out] */ Elastos::IO::IHeapBufferIterator** __ppIHeapBufferIterator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, Param3, __ppIHeapBufferIterator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::IO::ByteOrder Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::IO::ByteOrder Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, Param3, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CStreams
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IStreams** ppIStreams)
    {

        return _CObject_CreateInstance(ECLSID_CStreams, pRegime, Elastos::IO::EIID_IStreams, (IInterface**)ppIStreams);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IStreams** __ppIStreams)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIStreams);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IStreams** ppIStreams)
    {
        return _CObject_CreateInstance(ECLSID_CStreams, RGM_SAME_DOMAIN, Elastos::IO::EIID_IStreams, (PInterface*)ppIStreams);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CMemory
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IMemory** ppIMemory)
    {

        return _CObject_CreateInstance(ECLSID_CMemory, pRegime, Elastos::IO::EIID_IMemory, (IInterface**)ppIMemory);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IMemory** __ppIMemory)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIMemory);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IMemory** ppIMemory)
    {
        return _CObject_CreateInstance(ECLSID_CMemory, RGM_SAME_DOMAIN, Elastos::IO::EIID_IMemory, (PInterface*)ppIMemory);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CIoUtils
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IIoUtils** ppIIoUtils)
    {

        return _CObject_CreateInstance(ECLSID_CIoUtils, pRegime, Elastos::IO::EIID_IIoUtils, (IInterface**)ppIIoUtils);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IIoUtils** __ppIIoUtils)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIIoUtils);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IIoUtils** ppIIoUtils)
    {
        return _CObject_CreateInstance(ECLSID_CIoUtils, RGM_SAME_DOMAIN, Elastos::IO::EIID_IIoUtils, (PInterface*)ppIIoUtils);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CUnsafeByteSequence
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICUnsafeByteSequenceClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CUnsafeByteSequence, RGM_SAME_DOMAIN, 
                EIID_ICUnsafeByteSequenceClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IUnsafeByteSequence** __ppIUnsafeByteSequence)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIUnsafeByteSequence = Elastos::IO::IUnsafeByteSequence::Probe(__pNewObj);
        if (*__ppIUnsafeByteSequence) (*__ppIUnsafeByteSequence)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IUnsafeByteSequence** __ppIUnsafeByteSequence)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIUnsafeByteSequence);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CFloatBufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFloatBufferHelper** ppIFloatBufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CFloatBufferHelper, pRegime, Elastos::IO::EIID_IFloatBufferHelper, (IInterface**)ppIFloatBufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFloatBufferHelper** __ppIFloatBufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIFloatBufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IFloatBufferHelper** ppIFloatBufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CFloatBufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFloatBufferHelper, (PInterface*)ppIFloatBufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CInt16BufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IInt16BufferHelper** ppIInt16BufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInt16BufferHelper, pRegime, Elastos::IO::EIID_IInt16BufferHelper, (IInterface**)ppIInt16BufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IInt16BufferHelper** __ppIInt16BufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInt16BufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IInt16BufferHelper** ppIInt16BufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInt16BufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IInt16BufferHelper, (PInterface*)ppIInt16BufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CInt32BufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IInt32BufferHelper** ppIInt32BufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInt32BufferHelper, pRegime, Elastos::IO::EIID_IInt32BufferHelper, (IInterface**)ppIInt32BufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IInt32BufferHelper** __ppIInt32BufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInt32BufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IInt32BufferHelper** ppIInt32BufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInt32BufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IInt32BufferHelper, (PInterface*)ppIInt32BufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CInt64BufferHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IInt64BufferHelper** ppIInt64BufferHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInt64BufferHelper, pRegime, Elastos::IO::EIID_IInt64BufferHelper, (IInterface**)ppIInt64BufferHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IInt64BufferHelper** __ppIInt64BufferHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInt64BufferHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::IInt64BufferHelper** ppIInt64BufferHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInt64BufferHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_IInt64BufferHelper, (PInterface*)ppIInt64BufferHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CNativeConverterHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::INativeConverterHelper** ppINativeConverterHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNativeConverterHelper, pRegime, Elastos::IO::EIID_INativeConverterHelper, (IInterface**)ppINativeConverterHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::INativeConverterHelper** __ppINativeConverterHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINativeConverterHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::INativeConverterHelper** ppINativeConverterHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNativeConverterHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_INativeConverterHelper, (PInterface*)ppINativeConverterHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CNIOAccessHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::INIOAccessHelper** ppINIOAccessHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNIOAccessHelper, pRegime, Elastos::IO::EIID_INIOAccessHelper, (IInterface**)ppINIOAccessHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::INIOAccessHelper** __ppINIOAccessHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINIOAccessHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::INIOAccessHelper** ppINIOAccessHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNIOAccessHelper, RGM_SAME_DOMAIN, Elastos::IO::EIID_INIOAccessHelper, (PInterface*)ppINIOAccessHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CSelectorImpl
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::Channels::Spi::ISelectorProvider * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSelectorImplClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSelectorImpl, RGM_SAME_DOMAIN, 
                EIID_ICSelectorImplClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSelectorProvider(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISelectorImpl** ppISelectorImpl)
    {

        return _CObject_CreateInstance(ECLSID_CSelectorImpl, pRegime, Elastos::IO::EIID_ISelectorImpl, (IInterface**)ppISelectorImpl);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISelectorImpl** __ppISelectorImpl)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISelectorImpl);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISelectorImpl** ppISelectorImpl)
    {
        return _CObject_CreateInstance(ECLSID_CSelectorImpl, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISelectorImpl, (PInterface*)ppISelectorImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSelectorImpl, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSelectorImpl, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::Channels::Spi::ISelectorProvider * pParam0,/* [out] */ Elastos::IO::ISelectorImpl** __ppISelectorImpl)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISelectorImpl = Elastos::IO::ISelectorImpl::Probe(__pNewObj);
        if (*__ppISelectorImpl) (*__ppISelectorImpl)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::Channels::Spi::ISelectorProvider * pParam0,
/* [out] */ Elastos::IO::ISelectorImpl** __ppISelectorImpl)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISelectorImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::Channels::Spi::ISelectorProvider * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::Channels::Spi::ISelectorProvider * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Channels {
class CChannels
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Channels::IChannels** ppIChannels)
    {

        return _CObject_CreateInstance(ECLSID_CChannels, pRegime, Elastos::IO::Channels::EIID_IChannels, (IInterface**)ppIChannels);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Channels::IChannels** __ppIChannels)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIChannels);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::Channels::IChannels** ppIChannels)
    {
        return _CObject_CreateInstance(ECLSID_CChannels, RGM_SAME_DOMAIN, Elastos::IO::Channels::EIID_IChannels, (PInterface*)ppIChannels);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CChannels, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CChannels, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Charset {
class CCodingErrorAction
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Charset::ICodingErrorAction** ppICodingErrorAction)
    {

        return _CObject_CreateInstance(ECLSID_CCodingErrorAction, pRegime, Elastos::IO::Charset::EIID_ICodingErrorAction, (IInterface**)ppICodingErrorAction);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Charset::ICodingErrorAction** __ppICodingErrorAction)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICodingErrorAction);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::Charset::ICodingErrorAction** ppICodingErrorAction)
    {
        return _CObject_CreateInstance(ECLSID_CCodingErrorAction, RGM_SAME_DOMAIN, Elastos::IO::Charset::EIID_ICodingErrorAction, (PInterface*)ppICodingErrorAction);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCodingErrorAction, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCodingErrorAction, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Charset {
class CCharsetHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Charset::ICharsetHelper** ppICharsetHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCharsetHelper, pRegime, Elastos::IO::Charset::EIID_ICharsetHelper, (IInterface**)ppICharsetHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Charset::ICharsetHelper** __ppICharsetHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICharsetHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::Charset::ICharsetHelper** ppICharsetHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCharsetHelper, RGM_SAME_DOMAIN, Elastos::IO::Charset::EIID_ICharsetHelper, (PInterface*)ppICharsetHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Charset {
class CCharsets
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Charset::ICharsets** ppICharsets)
    {

        return _CObject_CreateInstance(ECLSID_CCharsets, pRegime, Elastos::IO::Charset::EIID_ICharsets, (IInterface**)ppICharsets);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Charset::ICharsets** __ppICharsets)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICharsets);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::Charset::ICharsets** ppICharsets)
    {
        return _CObject_CreateInstance(ECLSID_CCharsets, RGM_SAME_DOMAIN, Elastos::IO::Charset::EIID_ICharsets, (PInterface*)ppICharsets);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Charset {
class CCoderResult
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Charset::ICoderResult** ppICoderResult)
    {

        return _CObject_CreateInstance(ECLSID_CCoderResult, pRegime, Elastos::IO::Charset::EIID_ICoderResult, (IInterface**)ppICoderResult);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Charset::ICoderResult** __ppICoderResult)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICoderResult);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::Charset::ICoderResult** ppICoderResult)
    {
        return _CObject_CreateInstance(ECLSID_CCoderResult, RGM_SAME_DOMAIN, Elastos::IO::Charset::EIID_ICoderResult, (PInterface*)ppICoderResult);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCoderResult, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCoderResult, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Charset {
class CCoderResultHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Charset::ICoderResultHelper** ppICoderResultHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCoderResultHelper, pRegime, Elastos::IO::Charset::EIID_ICoderResultHelper, (IInterface**)ppICoderResultHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Charset::ICoderResultHelper** __ppICoderResultHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICoderResultHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::Charset::ICoderResultHelper** ppICoderResultHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCoderResultHelper, RGM_SAME_DOMAIN, Elastos::IO::Charset::EIID_ICoderResultHelper, (PInterface*)ppICoderResultHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Charset {
class CModifiedUtf8
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Charset::IModifiedUtf8** ppIModifiedUtf8)
    {

        return _CObject_CreateInstance(ECLSID_CModifiedUtf8, pRegime, Elastos::IO::Charset::EIID_IModifiedUtf8, (IInterface**)ppIModifiedUtf8);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Charset::IModifiedUtf8** __ppIModifiedUtf8)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIModifiedUtf8);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::Charset::IModifiedUtf8** ppIModifiedUtf8)
    {
        return _CObject_CreateInstance(ECLSID_CModifiedUtf8, RGM_SAME_DOMAIN, Elastos::IO::Charset::EIID_IModifiedUtf8, (PInterface*)ppIModifiedUtf8);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
class CSelectorProviderImpl
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Channels::Spi::ISelectorProvider** ppISelectorProvider)
    {

        return _CObject_CreateInstance(ECLSID_CSelectorProviderImpl, pRegime, Elastos::IO::Channels::Spi::EIID_ISelectorProvider, (IInterface**)ppISelectorProvider);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Channels::Spi::ISelectorProvider** __ppISelectorProvider)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISelectorProvider);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::Channels::Spi::ISelectorProvider** ppISelectorProvider)
    {
        return _CObject_CreateInstance(ECLSID_CSelectorProviderImpl, RGM_SAME_DOMAIN, Elastos::IO::Channels::Spi::EIID_ISelectorProvider, (PInterface*)ppISelectorProvider);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSelectorProviderImpl, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSelectorProviderImpl, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Channels {
namespace Spi {
class CSelectorProviderHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Channels::Spi::ISelectorProviderHelper** ppISelectorProviderHelper)
    {

        return _CObject_CreateInstance(ECLSID_CSelectorProviderHelper, pRegime, Elastos::IO::Channels::Spi::EIID_ISelectorProviderHelper, (IInterface**)ppISelectorProviderHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Channels::Spi::ISelectorProviderHelper** __ppISelectorProviderHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppISelectorProviderHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::Channels::Spi::ISelectorProviderHelper** ppISelectorProviderHelper)
    {
        return _CObject_CreateInstance(ECLSID_CSelectorProviderHelper, RGM_SAME_DOMAIN, Elastos::IO::Channels::Spi::EIID_ISelectorProviderHelper, (PInterface*)ppISelectorProviderHelper);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace IO {
namespace Channels {
class CDatagramChannelHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::Channels::IDatagramChannelHelper** ppIDatagramChannelHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDatagramChannelHelper, pRegime, Elastos::IO::Channels::EIID_IDatagramChannelHelper, (IInterface**)ppIDatagramChannelHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::Channels::IDatagramChannelHelper** __ppIDatagramChannelHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDatagramChannelHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::IO::Channels::IDatagramChannelHelper** ppIDatagramChannelHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDatagramChannelHelper, RGM_SAME_DOMAIN, Elastos::IO::Channels::EIID_IDatagramChannelHelper, (PInterface*)ppIDatagramChannelHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CBitSet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBitSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBitSet, RGM_SAME_DOMAIN, 
                EIID_ICBitSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBitCount(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBitSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBitSet, RGM_SAME_DOMAIN, 
                EIID_ICBitSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBits(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IBitSet** ppIBitSet)
    {

        return _CObject_CreateInstance(ECLSID_CBitSet, pRegime, Elastos::Utility::EIID_IBitSet, (IInterface**)ppIBitSet);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IBitSet** __ppIBitSet)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBitSet);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IBitSet** ppIBitSet)
    {
        return _CObject_CreateInstance(ECLSID_CBitSet, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IBitSet, (PInterface*)ppIBitSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CBitSet, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CBitSet, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CBitSet, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CBitSet, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CBitSet, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CBitSet, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IBitSet** __ppIBitSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBitSet = Elastos::Utility::IBitSet::Probe(__pNewObj);
        if (*__ppIBitSet) (*__ppIBitSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IBitSet** __ppIBitSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBitSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,/* [out] */ Elastos::Utility::IBitSet** __ppIBitSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBitSet = Elastos::Utility::IBitSet::Probe(__pNewObj);
        if (*__ppIBitSet) (*__ppIBitSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,
/* [out] */ Elastos::Utility::IBitSet** __ppIBitSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBitSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int64> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CBitSetHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IBitSetHelper** ppIBitSetHelper)
    {

        return _CObject_CreateInstance(ECLSID_CBitSetHelper, pRegime, Elastos::Utility::EIID_IBitSetHelper, (IInterface**)ppIBitSetHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IBitSetHelper** __ppIBitSetHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBitSetHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IBitSetHelper** ppIBitSetHelper)
    {
        return _CObject_CreateInstance(ECLSID_CBitSetHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IBitSetHelper, (PInterface*)ppIBitSetHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CObjectStringMap
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IObjectStringMap** ppIObjectStringMap)
    {

        return _CObject_CreateInstance(ECLSID_CObjectStringMap, pRegime, Elastos::Utility::EIID_IObjectStringMap, (IInterface**)ppIObjectStringMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IObjectStringMap** __ppIObjectStringMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIObjectStringMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IObjectStringMap** ppIObjectStringMap)
    {
        return _CObject_CreateInstance(ECLSID_CObjectStringMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IObjectStringMap, (PInterface*)ppIObjectStringMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CObjectStringMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CObjectStringMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CObjectInt32Map
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IObjectInt32Map** ppIObjectInt32Map)
    {

        return _CObject_CreateInstance(ECLSID_CObjectInt32Map, pRegime, Elastos::Utility::EIID_IObjectInt32Map, (IInterface**)ppIObjectInt32Map);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IObjectInt32Map** __ppIObjectInt32Map)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIObjectInt32Map);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IObjectInt32Map** ppIObjectInt32Map)
    {
        return _CObject_CreateInstance(ECLSID_CObjectInt32Map, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IObjectInt32Map, (PInterface*)ppIObjectInt32Map);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CObjectInt32Map, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CObjectInt32Map, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CObjectMap
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IObjectMap** ppIObjectMap)
    {

        return _CObject_CreateInstance(ECLSID_CObjectMap, pRegime, Elastos::Utility::EIID_IObjectMap, (IInterface**)ppIObjectMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IObjectMap** __ppIObjectMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIObjectMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IObjectMap** ppIObjectMap)
    {
        return _CObject_CreateInstance(ECLSID_CObjectMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IObjectMap, (PInterface*)ppIObjectMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CObjectMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CObjectMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CZoneInfoDB
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IZoneInfoDB** ppIZoneInfoDB)
    {

        return _CObject_CreateInstance(ECLSID_CZoneInfoDB, pRegime, Elastos::Utility::EIID_IZoneInfoDB, (IInterface**)ppIZoneInfoDB);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IZoneInfoDB** __ppIZoneInfoDB)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIZoneInfoDB);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IZoneInfoDB** ppIZoneInfoDB)
    {
        return _CObject_CreateInstance(ECLSID_CZoneInfoDB, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IZoneInfoDB, (PInterface*)ppIZoneInfoDB);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CUUID
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICUUIDClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CUUID, RGM_SAME_DOMAIN, 
                EIID_ICUUIDClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMostSigBitsLeastSigBits(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ Elastos::Utility::IUUID** __ppIUUID)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIUUID = Elastos::Utility::IUUID::Probe(__pNewObj);
        if (*__ppIUUID) (*__ppIUUID)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ Elastos::Utility::IUUID** __ppIUUID)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIUUID);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CUUIDHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IUUIDHelper** ppIUUIDHelper)
    {

        return _CObject_CreateInstance(ECLSID_CUUIDHelper, pRegime, Elastos::Utility::EIID_IUUIDHelper, (IInterface**)ppIUUIDHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IUUIDHelper** __ppIUUIDHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIUUIDHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IUUIDHelper** ppIUUIDHelper)
    {
        return _CObject_CreateInstance(ECLSID_CUUIDHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IUUIDHelper, (PInterface*)ppIUUIDHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CDate
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDate, RGM_SAME_DOMAIN, 
                EIID_ICDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYearMonthDay(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDate, RGM_SAME_DOMAIN, 
                EIID_ICDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYearMonthDayHourMinute(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDate, RGM_SAME_DOMAIN, 
                EIID_ICDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYearMonthDayHourMinuteSecond(Param0, Param1, Param2, Param3, Param4, Param5, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDate, RGM_SAME_DOMAIN, 
                EIID_ICDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMilliseconds(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDate, RGM_SAME_DOMAIN, 
                EIID_ICDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithString(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IDate** ppIDate)
    {

        return _CObject_CreateInstance(ECLSID_CDate, pRegime, Elastos::Utility::EIID_IDate, (IInterface**)ppIDate);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDate);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IDate** ppIDate)
    {
        return _CObject_CreateInstance(ECLSID_CDate, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IDate, (PInterface*)ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CDate, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CDate, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CDate, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CDate, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::IComparable** ppIComparable)
    {

        return _CObject_CreateInstance(ECLSID_CDate, pRegime, Elastos::Core::EIID_IComparable, (IInterface**)ppIComparable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIComparable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::IComparable** ppIComparable)
    {
        return _CObject_CreateInstance(ECLSID_CDate, RGM_SAME_DOMAIN, Elastos::Core::EIID_IComparable, (PInterface*)ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDate, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDate, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Utility::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Utility::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Utility::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Utility::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Utility::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CDateHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IDateHelper** ppIDateHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDateHelper, pRegime, Elastos::Utility::EIID_IDateHelper, (IInterface**)ppIDateHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IDateHelper** __ppIDateHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDateHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IDateHelper** ppIDateHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDateHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IDateHelper, (PInterface*)ppIDateHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CGregorianCalendar
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYearMonthDay(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYearMonthDayHourMinute(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYearMonthDayHourMinuteSecond(Param0, Param1, Param2, Param3, Param4, Param5, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMilliseconds(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLocale(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTimeZone(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTimeZoneLocale(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGregorianCalendarClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, 
                EIID_ICGregorianCalendarClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIgnored(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IGregorianCalendar** ppIGregorianCalendar)
    {

        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, pRegime, Elastos::Utility::EIID_IGregorianCalendar, (IInterface**)ppIGregorianCalendar);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IGregorianCalendar** ppIGregorianCalendar)
    {
        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IGregorianCalendar, (PInterface*)ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::IComparable** ppIComparable)
    {

        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, pRegime, Elastos::Core::EIID_IComparable, (IInterface**)ppIComparable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIComparable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::IComparable** ppIComparable)
    {
        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, Elastos::Core::EIID_IComparable, (PInterface*)ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CGregorianCalendar, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ITimeZone * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ITimeZone * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGregorianCalendar = Elastos::Utility::IGregorianCalendar::Probe(__pNewObj);
        if (*__ppIGregorianCalendar) (*__ppIGregorianCalendar)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::IGregorianCalendar** __ppIGregorianCalendar)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIGregorianCalendar);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CCalendarHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ICalendarHelper** ppICalendarHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCalendarHelper, pRegime, Elastos::Utility::EIID_ICalendarHelper, (IInterface**)ppICalendarHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ICalendarHelper** __ppICalendarHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICalendarHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::ICalendarHelper** ppICalendarHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCalendarHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ICalendarHelper, (PInterface*)ppICalendarHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CTimeZoneHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ITimeZoneHelper** ppITimeZoneHelper)
    {

        return _CObject_CreateInstance(ECLSID_CTimeZoneHelper, pRegime, Elastos::Utility::EIID_ITimeZoneHelper, (IInterface**)ppITimeZoneHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ITimeZoneHelper** __ppITimeZoneHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppITimeZoneHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::ITimeZoneHelper** ppITimeZoneHelper)
    {
        return _CObject_CreateInstance(ECLSID_CTimeZoneHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ITimeZoneHelper, (PInterface*)ppITimeZoneHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CSimpleTimeZone
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleTimeZoneClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleTimeZone, RGM_SAME_DOMAIN, 
                EIID_ICSimpleTimeZoneClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOffsetName(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleTimeZoneClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleTimeZone, RGM_SAME_DOMAIN, 
                EIID_ICSimpleTimeZoneClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOffsetNameStartMonthStartDayStartDayOfWeekStartTimeEndMonthEndDayEndDayOfWeekEndTime(Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleTimeZoneClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleTimeZone, RGM_SAME_DOMAIN, 
                EIID_ICSimpleTimeZoneClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOffsetNameStartMonthStartDayStartDayOfWeekStartTimeEndMonthEndDayEndDayOfWeekEndTimeDaylightSavings(Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [in] */ _ELASTOS Int32 Param11,/* [in] */ _ELASTOS Int32 Param12,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleTimeZoneClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleTimeZone, RGM_SAME_DOMAIN, 
                EIID_ICSimpleTimeZoneClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOffsetNameStartMonthStartDayStartDayOfWeekStartTimeStartTimeModeEndMonthEndDayEndDayOfWeekEndTimeEndTimeModeDaylightSavings(Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleTimeZone = Elastos::Utility::ISimpleTimeZone::Probe(__pNewObj);
        if (*__ppISimpleTimeZone) (*__ppISimpleTimeZone)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISimpleTimeZone);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleTimeZone = Elastos::Utility::ISimpleTimeZone::Probe(__pNewObj);
        if (*__ppISimpleTimeZone) (*__ppISimpleTimeZone)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, __ppISimpleTimeZone);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleTimeZone = Elastos::Utility::ISimpleTimeZone::Probe(__pNewObj);
        if (*__ppISimpleTimeZone) (*__ppISimpleTimeZone)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, __ppISimpleTimeZone);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [in] */ _ELASTOS Int32 Param11,/* [in] */ _ELASTOS Int32 Param12,/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleTimeZone = Elastos::Utility::ISimpleTimeZone::Probe(__pNewObj);
        if (*__ppISimpleTimeZone) (*__ppISimpleTimeZone)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [in] */ _ELASTOS Int32 Param11,
/* [in] */ _ELASTOS Int32 Param12,
/* [out] */ Elastos::Utility::ISimpleTimeZone** __ppISimpleTimeZone)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, __ppISimpleTimeZone);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [in] */ _ELASTOS Int32 Param11,/* [in] */ _ELASTOS Int32 Param12,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [in] */ _ELASTOS Int32 Param11,
/* [in] */ _ELASTOS Int32 Param12,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [in] */ _ELASTOS Int32 Param11,/* [in] */ _ELASTOS Int32 Param12,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [in] */ _ELASTOS Int32 Param11,
/* [in] */ _ELASTOS Int32 Param12,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [in] */ _ELASTOS Int32 Param7,/* [in] */ _ELASTOS Int32 Param8,/* [in] */ _ELASTOS Int32 Param9,/* [in] */ _ELASTOS Int32 Param10,/* [in] */ _ELASTOS Int32 Param11,/* [in] */ _ELASTOS Int32 Param12,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [in] */ _ELASTOS Int32 Param7,
/* [in] */ _ELASTOS Int32 Param8,
/* [in] */ _ELASTOS Int32 Param9,
/* [in] */ _ELASTOS Int32 Param10,
/* [in] */ _ELASTOS Int32 Param11,
/* [in] */ _ELASTOS Int32 Param12,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, Param9, Param10, Param11, Param12, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CZoneInfo
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZoneInfoClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZoneInfo, RGM_SAME_DOMAIN, 
                EIID_ICZoneInfoClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameTransitionsTypeGmtoffIsdst(Param0, pParam1, pParam2, pParam3, pParam4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,/* [out] */ Elastos::Utility::IZoneInfo** __ppIZoneInfo)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZoneInfo = Elastos::Utility::IZoneInfo::Probe(__pNewObj);
        if (*__ppIZoneInfo) (*__ppIZoneInfo)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,
/* [out] */ Elastos::Utility::IZoneInfo** __ppIZoneInfo)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, pParam3, pParam4, __ppIZoneInfo);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, pParam3, pParam4, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, pParam3, pParam4, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam3,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, pParam3, pParam4, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CTimer
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTimer, RGM_SAME_DOMAIN, 
                EIID_ICTimerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameIsDaemon(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTimer, RGM_SAME_DOMAIN, 
                EIID_ICTimerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTimer, RGM_SAME_DOMAIN, 
                EIID_ICTimerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsDaemon(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ITimer** ppITimer)
    {

        return _CObject_CreateInstance(ECLSID_CTimer, pRegime, Elastos::Utility::EIID_ITimer, (IInterface**)ppITimer);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppITimer);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::ITimer** ppITimer)
    {
        return _CObject_CreateInstance(ECLSID_CTimer, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ITimer, (PInterface*)ppITimer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTimer, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTimer, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITimer = Elastos::Utility::ITimer::Probe(__pNewObj);
        if (*__ppITimer) (*__ppITimer)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppITimer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITimer = Elastos::Utility::ITimer::Probe(__pNewObj);
        if (*__ppITimer) (*__ppITimer)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppITimer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITimer = Elastos::Utility::ITimer::Probe(__pNewObj);
        if (*__ppITimer) (*__ppITimer)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::ITimer** __ppITimer)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppITimer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CProperties
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IProperties * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPropertiesClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CProperties, RGM_SAME_DOMAIN, 
                EIID_ICPropertiesClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithProperties(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IProperties** ppIProperties)
    {

        return _CObject_CreateInstance(ECLSID_CProperties, pRegime, Elastos::Utility::EIID_IProperties, (IInterface**)ppIProperties);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IProperties** __ppIProperties)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIProperties);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IProperties** ppIProperties)
    {
        return _CObject_CreateInstance(ECLSID_CProperties, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IProperties, (PInterface*)ppIProperties);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CProperties, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CProperties, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CProperties, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CProperties, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CProperties, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CProperties, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CProperties, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CProperties, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IProperties * pParam0,/* [out] */ Elastos::Utility::IProperties** __ppIProperties)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIProperties = Elastos::Utility::IProperties::Probe(__pNewObj);
        if (*__ppIProperties) (*__ppIProperties)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IProperties * pParam0,
/* [out] */ Elastos::Utility::IProperties** __ppIProperties)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIProperties);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IProperties * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IProperties * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IProperties * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IProperties * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IProperties * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IProperties * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IProperties * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IProperties * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CTimeZoneGetterHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ITimeZoneGetterHelper** ppITimeZoneGetterHelper)
    {

        return _CObject_CreateInstance(ECLSID_CTimeZoneGetterHelper, pRegime, Elastos::Utility::EIID_ITimeZoneGetterHelper, (IInterface**)ppITimeZoneGetterHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ITimeZoneGetterHelper** __ppITimeZoneGetterHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppITimeZoneGetterHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::ITimeZoneGetterHelper** ppITimeZoneGetterHelper)
    {
        return _CObject_CreateInstance(ECLSID_CTimeZoneGetterHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ITimeZoneGetterHelper, (PInterface*)ppITimeZoneGetterHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CLinkedList
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedListClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedList, RGM_SAME_DOMAIN, 
                EIID_ICLinkedListClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ILinkedList** ppILinkedList)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedList, pRegime, Elastos::Utility::EIID_ILinkedList, (IInterface**)ppILinkedList);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ILinkedList** __ppILinkedList)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppILinkedList);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::ILinkedList** ppILinkedList)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedList, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ILinkedList, (PInterface*)ppILinkedList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedList, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedList, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedList, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedList, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::ILinkedList** __ppILinkedList)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILinkedList = Elastos::Utility::ILinkedList::Probe(__pNewObj);
        if (*__ppILinkedList) (*__ppILinkedList)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::ILinkedList** __ppILinkedList)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppILinkedList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CArrayList
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayListClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayList, RGM_SAME_DOMAIN, 
                EIID_ICArrayListClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayListClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayList, RGM_SAME_DOMAIN, 
                EIID_ICArrayListClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IArrayList** ppIArrayList)
    {

        return _CObject_CreateInstance(ECLSID_CArrayList, pRegime, Elastos::Utility::EIID_IArrayList, (IInterface**)ppIArrayList);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IArrayList** __ppIArrayList)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIArrayList);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IArrayList** ppIArrayList)
    {
        return _CObject_CreateInstance(ECLSID_CArrayList, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IArrayList, (PInterface*)ppIArrayList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CArrayList, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CArrayList, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CArrayList, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CArrayList, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IRandomAccess** ppIRandomAccess)
    {

        return _CObject_CreateInstance(ECLSID_CArrayList, pRegime, Elastos::Utility::EIID_IRandomAccess, (IInterface**)ppIRandomAccess);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIRandomAccess);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IRandomAccess** ppIRandomAccess)
    {
        return _CObject_CreateInstance(ECLSID_CArrayList, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IRandomAccess, (PInterface*)ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CArrayList, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CArrayList, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IArrayList** __ppIArrayList)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayList = Elastos::Utility::IArrayList::Probe(__pNewObj);
        if (*__ppIArrayList) (*__ppIArrayList)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IArrayList** __ppIArrayList)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIArrayList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccess = Elastos::Utility::IRandomAccess::Probe(__pNewObj);
        if (*__ppIRandomAccess) (*__ppIRandomAccess)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IArrayList** __ppIArrayList)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayList = Elastos::Utility::IArrayList::Probe(__pNewObj);
        if (*__ppIArrayList) (*__ppIArrayList)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IArrayList** __ppIArrayList)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIArrayList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccess = Elastos::Utility::IRandomAccess::Probe(__pNewObj);
        if (*__ppIRandomAccess) (*__ppIRandomAccess)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CArrayDeque
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayDequeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, 
                EIID_ICArrayDequeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNumElements(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayDequeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, 
                EIID_ICArrayDequeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IArrayDeque** ppIArrayDeque)
    {

        return _CObject_CreateInstance(ECLSID_CArrayDeque, pRegime, Elastos::Utility::EIID_IArrayDeque, (IInterface**)ppIArrayDeque);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IArrayDeque** __ppIArrayDeque)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIArrayDeque);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IArrayDeque** ppIArrayDeque)
    {
        return _CObject_CreateInstance(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IArrayDeque, (PInterface*)ppIArrayDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IDeque** ppIDeque)
    {

        return _CObject_CreateInstance(ECLSID_CArrayDeque, pRegime, Elastos::Utility::EIID_IDeque, (IInterface**)ppIDeque);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDeque);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IDeque** ppIDeque)
    {
        return _CObject_CreateInstance(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IDeque, (PInterface*)ppIDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CArrayDeque, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CArrayDeque, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CArrayDeque, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CArrayDeque, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IArrayDeque** __ppIArrayDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayDeque = Elastos::Utility::IArrayDeque::Probe(__pNewObj);
        if (*__ppIArrayDeque) (*__ppIArrayDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IArrayDeque** __ppIArrayDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIArrayDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeque = Elastos::Utility::IDeque::Probe(__pNewObj);
        if (*__ppIDeque) (*__ppIDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IArrayDeque** __ppIArrayDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayDeque = Elastos::Utility::IArrayDeque::Probe(__pNewObj);
        if (*__ppIArrayDeque) (*__ppIArrayDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IArrayDeque** __ppIArrayDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIArrayDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeque = Elastos::Utility::IDeque::Probe(__pNewObj);
        if (*__ppIDeque) (*__ppIDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CVector
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICVectorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CVector, RGM_SAME_DOMAIN, 
                EIID_ICVectorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICVectorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CVector, RGM_SAME_DOMAIN, 
                EIID_ICVectorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityCapacityIncrement(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICVectorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CVector, RGM_SAME_DOMAIN, 
                EIID_ICVectorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IVector** ppIVector)
    {

        return _CObject_CreateInstance(ECLSID_CVector, pRegime, Elastos::Utility::EIID_IVector, (IInterface**)ppIVector);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIVector);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IVector** ppIVector)
    {
        return _CObject_CreateInstance(ECLSID_CVector, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IVector, (PInterface*)ppIVector);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CVector, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CVector, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CVector, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CVector, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IRandomAccess** ppIRandomAccess)
    {

        return _CObject_CreateInstance(ECLSID_CVector, pRegime, Elastos::Utility::EIID_IRandomAccess, (IInterface**)ppIRandomAccess);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIRandomAccess);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IRandomAccess** ppIRandomAccess)
    {
        return _CObject_CreateInstance(ECLSID_CVector, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IRandomAccess, (PInterface*)ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CVector, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CVector, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIVector = Elastos::Utility::IVector::Probe(__pNewObj);
        if (*__ppIVector) (*__ppIVector)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIVector);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccess = Elastos::Utility::IRandomAccess::Probe(__pNewObj);
        if (*__ppIRandomAccess) (*__ppIRandomAccess)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIVector = Elastos::Utility::IVector::Probe(__pNewObj);
        if (*__ppIVector) (*__ppIVector)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIVector);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccess = Elastos::Utility::IRandomAccess::Probe(__pNewObj);
        if (*__ppIRandomAccess) (*__ppIRandomAccess)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIVector = Elastos::Utility::IVector::Probe(__pNewObj);
        if (*__ppIVector) (*__ppIVector)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IVector** __ppIVector)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIVector);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandomAccess = Elastos::Utility::IRandomAccess::Probe(__pNewObj);
        if (*__ppIRandomAccess) (*__ppIRandomAccess)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IRandomAccess** __ppIRandomAccess)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRandomAccess);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CArrays
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IArrays** ppIArrays)
    {

        return _CObject_CreateInstance(ECLSID_CArrays, pRegime, Elastos::Utility::EIID_IArrays, (IInterface**)ppIArrays);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IArrays** __ppIArrays)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIArrays);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IArrays** ppIArrays)
    {
        return _CObject_CreateInstance(ECLSID_CArrays, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IArrays, (PInterface*)ppIArrays);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CCollections
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ICollections** ppICollections)
    {

        return _CObject_CreateInstance(ECLSID_CCollections, pRegime, Elastos::Utility::EIID_ICollections, (IInterface**)ppICollections);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ICollections** __ppICollections)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICollections);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::ICollections** ppICollections)
    {
        return _CObject_CreateInstance(ECLSID_CCollections, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ICollections, (PInterface*)ppICollections);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CFormatter
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithA(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithL(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAL(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileNameCsn(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileNameCsnL(Param0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileCsn(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileCsnL(pParam0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsCsn(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsCsnL(pParam0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFormatterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFormatter, RGM_SAME_DOMAIN, 
                EIID_ICFormatterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IFormatter** ppIFormatter)
    {

        return _CObject_CreateInstance(ECLSID_CFormatter, pRegime, Elastos::Utility::EIID_IFormatter, (IInterface**)ppIFormatter);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFormatter);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IFormatter** ppIFormatter)
    {
        return _CObject_CreateInstance(ECLSID_CFormatter, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IFormatter, (PInterface*)ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ICloseable** ppICloseable)
    {

        return _CObject_CreateInstance(ECLSID_CFormatter, pRegime, Elastos::IO::EIID_ICloseable, (IInterface**)ppICloseable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloseable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ICloseable** ppICloseable)
    {
        return _CObject_CreateInstance(ECLSID_CFormatter, RGM_SAME_DOMAIN, Elastos::IO::EIID_ICloseable, (PInterface*)ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {

        return _CObject_CreateInstance(ECLSID_CFormatter, pRegime, Elastos::IO::EIID_IFlushable, (IInterface**)ppIFlushable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFlushable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {
        return _CObject_CreateInstance(ECLSID_CFormatter, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFlushable, (PInterface*)ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CFormatter, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CFormatter, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IAppendable * pParam0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IAppendable * pParam0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Libcore::ICU::ILocale * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Libcore::ICU::ILocale * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFormatter = Elastos::Utility::IFormatter::Probe(__pNewObj);
        if (*__ppIFormatter) (*__ppIFormatter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintStream * pParam0,
/* [out] */ Elastos::Utility::IFormatter** __ppIFormatter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFormatter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloseable = Elastos::IO::ICloseable::Probe(__pNewObj);
        if (*__ppICloseable) (*__ppICloseable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintStream * pParam0,
/* [out] */ Elastos::IO::ICloseable** __ppICloseable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloseable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CComparableTimSortHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IComparableTimSortHelper** ppIComparableTimSortHelper)
    {

        return _CObject_CreateInstance(ECLSID_CComparableTimSortHelper, pRegime, Elastos::Utility::EIID_IComparableTimSortHelper, (IInterface**)ppIComparableTimSortHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IComparableTimSortHelper** __ppIComparableTimSortHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIComparableTimSortHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IComparableTimSortHelper** ppIComparableTimSortHelper)
    {
        return _CObject_CreateInstance(ECLSID_CComparableTimSortHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IComparableTimSortHelper, (PInterface*)ppIComparableTimSortHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CCurrencyHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ICurrencyHelper** ppICurrencyHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCurrencyHelper, pRegime, Elastos::Utility::EIID_ICurrencyHelper, (IInterface**)ppICurrencyHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ICurrencyHelper** __ppICurrencyHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICurrencyHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::ICurrencyHelper** ppICurrencyHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCurrencyHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ICurrencyHelper, (PInterface*)ppICurrencyHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CHashMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashMap, RGM_SAME_DOMAIN, 
                EIID_ICHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashMap, RGM_SAME_DOMAIN, 
                EIID_ICHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashMap, RGM_SAME_DOMAIN, 
                EIID_ICHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CHashMap, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CHashMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CHashMap, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CHashMap, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CHashMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CHashMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CHashMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CHashMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CHashSet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashSet, RGM_SAME_DOMAIN, 
                EIID_ICHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashSet, RGM_SAME_DOMAIN, 
                EIID_ICHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashSet, RGM_SAME_DOMAIN, 
                EIID_ICHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashSet, RGM_SAME_DOMAIN, 
                EIID_ICHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBackingMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ISet** ppISet)
    {

        return _CObject_CreateInstance(ECLSID_CHashSet, pRegime, Elastos::Utility::EIID_ISet, (IInterface**)ppISet);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISet);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::ISet** ppISet)
    {
        return _CObject_CreateInstance(ECLSID_CHashSet, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ISet, (PInterface*)ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CHashSet, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CHashSet, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CHashSet, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CHashSet, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CHashSet, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CHashSet, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CHashTable
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashTableClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashTable, RGM_SAME_DOMAIN, 
                EIID_ICHashTableClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashTableClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashTable, RGM_SAME_DOMAIN, 
                EIID_ICHashTableClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHashTableClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHashTable, RGM_SAME_DOMAIN, 
                EIID_ICHashTableClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IDictionary** ppIDictionary)
    {

        return _CObject_CreateInstance(ECLSID_CHashTable, pRegime, Elastos::Utility::EIID_IDictionary, (IInterface**)ppIDictionary);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDictionary);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IDictionary** ppIDictionary)
    {
        return _CObject_CreateInstance(ECLSID_CHashTable, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IDictionary, (PInterface*)ppIDictionary);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CHashTable, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CHashTable, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CHashTable, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CHashTable, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CHashTable, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CHashTable, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CHashTable, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CHashTable, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDictionary = Elastos::Utility::IDictionary::Probe(__pNewObj);
        if (*__ppIDictionary) (*__ppIDictionary)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDictionary);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDictionary = Elastos::Utility::IDictionary::Probe(__pNewObj);
        if (*__ppIDictionary) (*__ppIDictionary)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIDictionary);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDictionary = Elastos::Utility::IDictionary::Probe(__pNewObj);
        if (*__ppIDictionary) (*__ppIDictionary)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IDictionary** __ppIDictionary)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDictionary);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CIdentityHashMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICIdentityHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CIdentityHashMap, RGM_SAME_DOMAIN, 
                EIID_ICIdentityHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMaxSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICIdentityHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CIdentityHashMap, RGM_SAME_DOMAIN, 
                EIID_ICIdentityHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CIdentityHashMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CTreeMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeMap, RGM_SAME_DOMAIN, 
                EIID_ICTreeMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCopyFrommap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeMap, RGM_SAME_DOMAIN, 
                EIID_ICTreeMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithComparator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeMap, RGM_SAME_DOMAIN, 
                EIID_ICTreeMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCopyFrom(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::INavigableMap** ppINavigableMap)
    {

        return _CObject_CreateInstance(ECLSID_CTreeMap, pRegime, Elastos::Utility::EIID_INavigableMap, (IInterface**)ppINavigableMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppINavigableMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::INavigableMap** ppINavigableMap)
    {
        return _CObject_CreateInstance(ECLSID_CTreeMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_INavigableMap, (PInterface*)ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CTreeMap, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CTreeMap, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CTreeMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CTreeMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTreeMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTreeMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableMap = Elastos::Utility::INavigableMap::Probe(__pNewObj);
        if (*__ppINavigableMap) (*__ppINavigableMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableMap = Elastos::Utility::INavigableMap::Probe(__pNewObj);
        if (*__ppINavigableMap) (*__ppINavigableMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableMap = Elastos::Utility::INavigableMap::Probe(__pNewObj);
        if (*__ppINavigableMap) (*__ppINavigableMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CTreeSet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeSet, RGM_SAME_DOMAIN, 
                EIID_ICTreeSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNavmap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeSet, RGM_SAME_DOMAIN, 
                EIID_ICTreeSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeSet, RGM_SAME_DOMAIN, 
                EIID_ICTreeSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithComparator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTreeSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTreeSet, RGM_SAME_DOMAIN, 
                EIID_ICTreeSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSet(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::INavigableSet** ppINavigableSet)
    {

        return _CObject_CreateInstance(ECLSID_CTreeSet, pRegime, Elastos::Utility::EIID_INavigableSet, (IInterface**)ppINavigableSet);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppINavigableSet);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::INavigableSet** ppINavigableSet)
    {
        return _CObject_CreateInstance(ECLSID_CTreeSet, RGM_SAME_DOMAIN, Elastos::Utility::EIID_INavigableSet, (PInterface*)ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CTreeSet, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CTreeSet, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CTreeSet, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CTreeSet, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTreeSet, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTreeSet, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CWeakHashMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICWeakHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CWeakHashMap, RGM_SAME_DOMAIN, 
                EIID_ICWeakHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICWeakHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CWeakHashMap, RGM_SAME_DOMAIN, 
                EIID_ICWeakHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICWeakHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CWeakHashMap, RGM_SAME_DOMAIN, 
                EIID_ICWeakHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CWeakHashMap, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CWeakHashMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CWeakHashMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CWeakHashMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CLinkedHashMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacityLoadFactorAccessOrder(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CLinkedHashSet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedHashSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, 
                EIID_ICLinkedHashSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ISet** ppISet)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, pRegime, Elastos::Utility::EIID_ISet, (IInterface**)ppISet);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISet);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::ISet** ppISet)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ISet, (PInterface*)ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedHashSet, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CEnumMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICEnumMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CEnumMap, RGM_SAME_DOMAIN, 
                EIID_ICEnumMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithKeyType(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IEnumMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICEnumMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CEnumMap, RGM_SAME_DOMAIN, 
                EIID_ICEnumMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithEnummap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICEnumMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CEnumMap, RGM_SAME_DOMAIN, 
                EIID_ICEnumMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IEnumMap** ppIEnumMap)
    {

        return _CObject_CreateInstance(ECLSID_CEnumMap, pRegime, Elastos::Utility::EIID_IEnumMap, (IInterface**)ppIEnumMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIEnumMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IEnumMap** ppIEnumMap)
    {
        return _CObject_CreateInstance(ECLSID_CEnumMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IEnumMap, (PInterface*)ppIEnumMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CEnumMap, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CEnumMap, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CEnumMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CEnumMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CEnumMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CEnumMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIEnumMap = Elastos::Utility::IEnumMap::Probe(__pNewObj);
        if (*__ppIEnumMap) (*__ppIEnumMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS InterfaceID & Param0,
/* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIEnumMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS InterfaceID & Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS InterfaceID & Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS InterfaceID & Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IEnumMap * pParam0,/* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIEnumMap = Elastos::Utility::IEnumMap::Probe(__pNewObj);
        if (*__ppIEnumMap) (*__ppIEnumMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IEnumMap * pParam0,
/* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIEnumMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IEnumMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IEnumMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IEnumMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IEnumMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IEnumMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IEnumMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIEnumMap = Elastos::Utility::IEnumMap::Probe(__pNewObj);
        if (*__ppIEnumMap) (*__ppIEnumMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::IEnumMap** __ppIEnumMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIEnumMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CDualPivotQuicksortHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IDualPivotQuicksortHelper** ppIDualPivotQuicksortHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDualPivotQuicksortHelper, pRegime, Elastos::Utility::EIID_IDualPivotQuicksortHelper, (IInterface**)ppIDualPivotQuicksortHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IDualPivotQuicksortHelper** __ppIDualPivotQuicksortHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDualPivotQuicksortHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::IDualPivotQuicksortHelper** ppIDualPivotQuicksortHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDualPivotQuicksortHelper, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IDualPivotQuicksortHelper, (PInterface*)ppIDualPivotQuicksortHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CStack
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IStack** ppIStack)
    {

        return _CObject_CreateInstance(ECLSID_CStack, pRegime, Elastos::Utility::EIID_IStack, (IInterface**)ppIStack);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IStack** __ppIStack)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIStack);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IStack** ppIStack)
    {
        return _CObject_CreateInstance(ECLSID_CStack, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IStack, (PInterface*)ppIStack);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CStack, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CStack, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CStringTokenizer
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringTokenizerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringTokenizer, RGM_SAME_DOMAIN, 
                EIID_ICStringTokenizerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithString(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringTokenizerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringTokenizer, RGM_SAME_DOMAIN, 
                EIID_ICStringTokenizerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStringDelimiters(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringTokenizerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringTokenizer, RGM_SAME_DOMAIN, 
                EIID_ICStringTokenizerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStringDelimitersReturnDelimiters(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::IStringTokenizer** __ppIStringTokenizer)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringTokenizer = Elastos::Utility::IStringTokenizer::Probe(__pNewObj);
        if (*__ppIStringTokenizer) (*__ppIStringTokenizer)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::IStringTokenizer** __ppIStringTokenizer)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIStringTokenizer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IStringTokenizer** __ppIStringTokenizer)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringTokenizer = Elastos::Utility::IStringTokenizer::Probe(__pNewObj);
        if (*__ppIStringTokenizer) (*__ppIStringTokenizer)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IStringTokenizer** __ppIStringTokenizer)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIStringTokenizer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::Utility::IStringTokenizer** __ppIStringTokenizer)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIStringTokenizer = Elastos::Utility::IStringTokenizer::Probe(__pNewObj);
        if (*__ppIStringTokenizer) (*__ppIStringTokenizer)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::Utility::IStringTokenizer** __ppIStringTokenizer)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIStringTokenizer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CScanner
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilesrc(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilesrcCharsetName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStrsrc(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInputsrc(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInputsrcCharsetName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReadable * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithReadsrc(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRbcsrc(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScannerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScanner, RGM_SAME_DOMAIN, 
                EIID_ICScannerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRbcsrcCharsetName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReadable * pParam0,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReadable * pParam0,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReadable * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReadable * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScanner = Elastos::Utility::IScanner::Probe(__pNewObj);
        if (*__ppIScanner) (*__ppIScanner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Utility::IScanner** __ppIScanner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIScanner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::Channels::IReadableByteChannel * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CPropertyResourceBundle
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPropertyResourceBundleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPropertyResourceBundle, RGM_SAME_DOMAIN, 
                EIID_ICPropertyResourceBundleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStream(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPropertyResourceBundleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPropertyResourceBundle, RGM_SAME_DOMAIN, 
                EIID_ICPropertyResourceBundleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithReader(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IPropertyResourceBundle** ppIPropertyResourceBundle)
    {

        return _CObject_CreateInstance(ECLSID_CPropertyResourceBundle, pRegime, Elastos::Utility::EIID_IPropertyResourceBundle, (IInterface**)ppIPropertyResourceBundle);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IPropertyResourceBundle** __ppIPropertyResourceBundle)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPropertyResourceBundle);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IPropertyResourceBundle** ppIPropertyResourceBundle)
    {
        return _CObject_CreateInstance(ECLSID_CPropertyResourceBundle, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IPropertyResourceBundle, (PInterface*)ppIPropertyResourceBundle);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPropertyResourceBundle, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPropertyResourceBundle, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::IPropertyResourceBundle** __ppIPropertyResourceBundle)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPropertyResourceBundle = Elastos::Utility::IPropertyResourceBundle::Probe(__pNewObj);
        if (*__ppIPropertyResourceBundle) (*__ppIPropertyResourceBundle)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::IPropertyResourceBundle** __ppIPropertyResourceBundle)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPropertyResourceBundle);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ Elastos::Utility::IPropertyResourceBundle** __ppIPropertyResourceBundle)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPropertyResourceBundle = Elastos::Utility::IPropertyResourceBundle::Probe(__pNewObj);
        if (*__ppIPropertyResourceBundle) (*__ppIPropertyResourceBundle)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ Elastos::Utility::IPropertyResourceBundle** __ppIPropertyResourceBundle)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPropertyResourceBundle);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IReader * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IReader * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CPriorityQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacityComparator(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IPriorityQueue * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPc(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSc(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IPriorityQueue** ppIPriorityQueue)
    {

        return _CObject_CreateInstance(ECLSID_CPriorityQueue, pRegime, Elastos::Utility::EIID_IPriorityQueue, (IInterface**)ppIPriorityQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPriorityQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IPriorityQueue** ppIPriorityQueue)
    {
        return _CObject_CreateInstance(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IPriorityQueue, (PInterface*)ppIPriorityQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPriorityQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPriorityQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPriorityQueue = Elastos::Utility::IPriorityQueue::Probe(__pNewObj);
        if (*__ppIPriorityQueue) (*__ppIPriorityQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIPriorityQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPriorityQueue = Elastos::Utility::IPriorityQueue::Probe(__pNewObj);
        if (*__ppIPriorityQueue) (*__ppIPriorityQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IComparator * pParam1,
/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIPriorityQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IComparator * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPriorityQueue = Elastos::Utility::IPriorityQueue::Probe(__pNewObj);
        if (*__ppIPriorityQueue) (*__ppIPriorityQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPriorityQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IPriorityQueue * pParam0,/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPriorityQueue = Elastos::Utility::IPriorityQueue::Probe(__pNewObj);
        if (*__ppIPriorityQueue) (*__ppIPriorityQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IPriorityQueue * pParam0,
/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPriorityQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IPriorityQueue * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IPriorityQueue * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPriorityQueue = Elastos::Utility::IPriorityQueue::Probe(__pNewObj);
        if (*__ppIPriorityQueue) (*__ppIPriorityQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::Utility::IPriorityQueue** __ppIPriorityQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPriorityQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
class CObservable
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IObservable** ppIObservable)
    {

        return _CObject_CreateInstance(ECLSID_CObservable, pRegime, Elastos::Utility::EIID_IObservable, (IInterface**)ppIObservable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IObservable** __ppIObservable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIObservable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IObservable** ppIObservable)
    {
        return _CObject_CreateInstance(ECLSID_CObservable, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IObservable, (PInterface*)ppIObservable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CObservable, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CObservable, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Regex {
class CMatcher
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Regex::IPattern * pParam0,/* [in] */ Elastos::Core::ICharSequence * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMatcherClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMatcher, RGM_SAME_DOMAIN, 
                EIID_ICMatcherClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPatternInputSeq(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Regex::IPattern * pParam0,/* [in] */ Elastos::Core::ICharSequence * pParam1,/* [out] */ Elastos::Utility::Regex::IMatcher** __ppIMatcher)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMatcher = Elastos::Utility::Regex::IMatcher::Probe(__pNewObj);
        if (*__ppIMatcher) (*__ppIMatcher)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Regex::IPattern * pParam0,
/* [in] */ Elastos::Core::ICharSequence * pParam1,
/* [out] */ Elastos::Utility::Regex::IMatcher** __ppIMatcher)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIMatcher);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Regex::IPattern * pParam0,/* [in] */ Elastos::Core::ICharSequence * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Regex::IPattern * pParam0,
/* [in] */ Elastos::Core::ICharSequence * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Regex {
class CMatcherHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Regex::IMatcherHelper** ppIMatcherHelper)
    {

        return _CObject_CreateInstance(ECLSID_CMatcherHelper, pRegime, Elastos::Utility::Regex::EIID_IMatcherHelper, (IInterface**)ppIMatcherHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Regex::IMatcherHelper** __ppIMatcherHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIMatcherHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Regex::IMatcherHelper** ppIMatcherHelper)
    {
        return _CObject_CreateInstance(ECLSID_CMatcherHelper, RGM_SAME_DOMAIN, Elastos::Utility::Regex::EIID_IMatcherHelper, (PInterface*)ppIMatcherHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Regex {
class CSplitter
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Regex::ISplitter** ppISplitter)
    {

        return _CObject_CreateInstance(ECLSID_CSplitter, pRegime, Elastos::Utility::Regex::EIID_ISplitter, (IInterface**)ppISplitter);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Regex::ISplitter** __ppISplitter)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppISplitter);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Regex::ISplitter** ppISplitter)
    {
        return _CObject_CreateInstance(ECLSID_CSplitter, RGM_SAME_DOMAIN, Elastos::Utility::Regex::EIID_ISplitter, (PInterface*)ppISplitter);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Regex {
class CPatternHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Regex::IPatternHelper** ppIPatternHelper)
    {

        return _CObject_CreateInstance(ECLSID_CPatternHelper, pRegime, Elastos::Utility::Regex::EIID_IPatternHelper, (IInterface**)ppIPatternHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Regex::IPatternHelper** __ppIPatternHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIPatternHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Regex::IPatternHelper** ppIPatternHelper)
    {
        return _CObject_CreateInstance(ECLSID_CPatternHelper, RGM_SAME_DOMAIN, Elastos::Utility::Regex::EIID_IPatternHelper, (PInterface*)ppIPatternHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CCookieManager
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::ICookieStore * pParam0,/* [in] */ Elastos::Net::ICookiePolicy * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCookieManagerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCookieManager, RGM_SAME_DOMAIN, 
                EIID_ICCookieManagerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStoreCookiePolicy(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::ICookieManager** ppICookieManager)
    {

        return _CObject_CreateInstance(ECLSID_CCookieManager, pRegime, Elastos::Net::EIID_ICookieManager, (IInterface**)ppICookieManager);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::ICookieManager** __ppICookieManager)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICookieManager);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::ICookieManager** ppICookieManager)
    {
        return _CObject_CreateInstance(ECLSID_CCookieManager, RGM_SAME_DOMAIN, Elastos::Net::EIID_ICookieManager, (PInterface*)ppICookieManager);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCookieManager, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCookieManager, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ICookieStore * pParam0,/* [in] */ Elastos::Net::ICookiePolicy * pParam1,/* [out] */ Elastos::Net::ICookieManager** __ppICookieManager)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICookieManager = Elastos::Net::ICookieManager::Probe(__pNewObj);
        if (*__ppICookieManager) (*__ppICookieManager)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ICookieStore * pParam0,
/* [in] */ Elastos::Net::ICookiePolicy * pParam1,
/* [out] */ Elastos::Net::ICookieManager** __ppICookieManager)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICookieManager);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ICookieStore * pParam0,/* [in] */ Elastos::Net::ICookiePolicy * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ICookieStore * pParam0,
/* [in] */ Elastos::Net::ICookiePolicy * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CCookiePolicyHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::ICookiePolicyHelper** ppICookiePolicyHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCookiePolicyHelper, pRegime, Elastos::Net::EIID_ICookiePolicyHelper, (IInterface**)ppICookiePolicyHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::ICookiePolicyHelper** __ppICookiePolicyHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICookiePolicyHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::ICookiePolicyHelper** ppICookiePolicyHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCookiePolicyHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_ICookiePolicyHelper, (PInterface*)ppICookiePolicyHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CDatagramPacket
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramPacketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramPacket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramPacketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDataLength(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramPacketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramPacket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramPacketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDataOffsetLength(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Net::IInetAddress * pParam3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramPacketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramPacket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramPacketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDataOffsetLengthHostAPort(pParam0, Param1, Param2, pParam3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramPacketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramPacket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramPacketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDataLengthHostPort(pParam0, Param1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::ISocketAddress * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramPacketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramPacket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramPacketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDataLengthSockAddr(pParam0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Net::ISocketAddress * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramPacketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramPacket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramPacketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDataOffsetLengthSockAddr(pParam0, Param1, Param2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramPacket = Elastos::Net::IDatagramPacket::Probe(__pNewObj);
        if (*__ppIDatagramPacket) (*__ppIDatagramPacket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIDatagramPacket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramPacket = Elastos::Net::IDatagramPacket::Probe(__pNewObj);
        if (*__ppIDatagramPacket) (*__ppIDatagramPacket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIDatagramPacket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Net::IInetAddress * pParam3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, pParam3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramPacket = Elastos::Net::IDatagramPacket::Probe(__pNewObj);
        if (*__ppIDatagramPacket) (*__ppIDatagramPacket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::Net::IInetAddress * pParam3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, pParam3, Param4, __ppIDatagramPacket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Net::IInetAddress * pParam3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, pParam3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::Net::IInetAddress * pParam3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, pParam3, Param4, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramPacket = Elastos::Net::IDatagramPacket::Probe(__pNewObj);
        if (*__ppIDatagramPacket) (*__ppIDatagramPacket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, __ppIDatagramPacket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::ISocketAddress * pParam2,/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramPacket = Elastos::Net::IDatagramPacket::Probe(__pNewObj);
        if (*__ppIDatagramPacket) (*__ppIDatagramPacket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::ISocketAddress * pParam2,
/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIDatagramPacket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::ISocketAddress * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::ISocketAddress * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Net::ISocketAddress * pParam3,/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramPacket = Elastos::Net::IDatagramPacket::Probe(__pNewObj);
        if (*__ppIDatagramPacket) (*__ppIDatagramPacket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::Net::ISocketAddress * pParam3,
/* [out] */ Elastos::Net::IDatagramPacket** __ppIDatagramPacket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, pParam3, __ppIDatagramPacket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ Elastos::Net::ISocketAddress * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ Elastos::Net::ISocketAddress * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, pParam3, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CDatagramSocket
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramSocket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAPort(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Net::IInetAddress * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramSocket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAportAddr(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::ISocketAddress * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDatagramSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDatagramSocket, RGM_SAME_DOMAIN, 
                EIID_ICDatagramSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLocalAddr(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IDatagramSocket** ppIDatagramSocket)
    {

        return _CObject_CreateInstance(ECLSID_CDatagramSocket, pRegime, Elastos::Net::EIID_IDatagramSocket, (IInterface**)ppIDatagramSocket);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDatagramSocket);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IDatagramSocket** ppIDatagramSocket)
    {
        return _CObject_CreateInstance(ECLSID_CDatagramSocket, RGM_SAME_DOMAIN, Elastos::Net::EIID_IDatagramSocket, (PInterface*)ppIDatagramSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDatagramSocket, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDatagramSocket, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramSocket = Elastos::Net::IDatagramSocket::Probe(__pNewObj);
        if (*__ppIDatagramSocket) (*__ppIDatagramSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDatagramSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Net::IInetAddress * pParam1,/* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramSocket = Elastos::Net::IDatagramSocket::Probe(__pNewObj);
        if (*__ppIDatagramSocket) (*__ppIDatagramSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Net::IInetAddress * pParam1,
/* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIDatagramSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Net::IInetAddress * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Net::IInetAddress * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketAddress * pParam0,/* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramSocket = Elastos::Net::IDatagramSocket::Probe(__pNewObj);
        if (*__ppIDatagramSocket) (*__ppIDatagramSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketAddress * pParam0,
/* [out] */ Elastos::Net::IDatagramSocket** __ppIDatagramSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDatagramSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketAddress * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketAddress * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CHttpCookie
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHttpCookieClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHttpCookie, RGM_SAME_DOMAIN, 
                EIID_ICHttpCookieClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameValue(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Net::IHttpCookie** __ppIHttpCookie)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIHttpCookie = Elastos::Net::IHttpCookie::Probe(__pNewObj);
        if (*__ppIHttpCookie) (*__ppIHttpCookie)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Net::IHttpCookie** __ppIHttpCookie)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIHttpCookie);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInetAddressHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IInetAddressHelper** ppIInetAddressHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInetAddressHelper, pRegime, Elastos::Net::EIID_IInetAddressHelper, (IInterface**)ppIInetAddressHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IInetAddressHelper** __ppIInetAddressHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInetAddressHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IInetAddressHelper** ppIInetAddressHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInetAddressHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IInetAddressHelper, (PInterface*)ppIInetAddressHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInet4Address
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInet4AddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInet4Address, RGM_SAME_DOMAIN, 
                EIID_ICInet4AddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAddressName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Net::IInet4Address** __ppIInet4Address)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInet4Address = Elastos::Net::IInet4Address::Probe(__pNewObj);
        if (*__ppIInet4Address) (*__ppIInet4Address)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Net::IInet4Address** __ppIInet4Address)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIInet4Address);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInet4AddressHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IInet4AddressHelper** ppIInet4AddressHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInet4AddressHelper, pRegime, Elastos::Net::EIID_IInet4AddressHelper, (IInterface**)ppIInet4AddressHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IInet4AddressHelper** __ppIInet4AddressHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInet4AddressHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IInet4AddressHelper** ppIInet4AddressHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInet4AddressHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IInet4AddressHelper, (PInterface*)ppIInet4AddressHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInet6Address
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInet6AddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInet6Address, RGM_SAME_DOMAIN, 
                EIID_ICInet6AddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAddressNameScopeId(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Net::IInet6Address** __ppIInet6Address)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInet6Address = Elastos::Net::IInet6Address::Probe(__pNewObj);
        if (*__ppIInet6Address) (*__ppIInet6Address)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Net::IInet6Address** __ppIInet6Address)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIInet6Address);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInet6AddressHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IInet6AddressHelper** ppIInet6AddressHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInet6AddressHelper, pRegime, Elastos::Net::EIID_IInet6AddressHelper, (IInterface**)ppIInet6AddressHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IInet6AddressHelper** __ppIInet6AddressHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInet6AddressHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IInet6AddressHelper** ppIInet6AddressHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInet6AddressHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IInet6AddressHelper, (PInterface*)ppIInet6AddressHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInetSocketAddress
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInetSocketAddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInetSocketAddress, RGM_SAME_DOMAIN, 
                EIID_ICInetSocketAddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPort(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInetSocketAddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInetSocketAddress, RGM_SAME_DOMAIN, 
                EIID_ICInetSocketAddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAddressPort(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInetSocketAddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInetSocketAddress, RGM_SAME_DOMAIN, 
                EIID_ICInetSocketAddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithHostPort(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInetSocketAddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInetSocketAddress, RGM_SAME_DOMAIN, 
                EIID_ICInetSocketAddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithHostnamePortNeedResolved(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IInetSocketAddress** ppIInetSocketAddress)
    {

        return _CObject_CreateInstance(ECLSID_CInetSocketAddress, pRegime, Elastos::Net::EIID_IInetSocketAddress, (IInterface**)ppIInetSocketAddress);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIInetSocketAddress);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IInetSocketAddress** ppIInetSocketAddress)
    {
        return _CObject_CreateInstance(ECLSID_CInetSocketAddress, RGM_SAME_DOMAIN, Elastos::Net::EIID_IInetSocketAddress, (PInterface*)ppIInetSocketAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CInetSocketAddress, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CInetSocketAddress, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInetSocketAddress = Elastos::Net::IInetSocketAddress::Probe(__pNewObj);
        if (*__ppIInetSocketAddress) (*__ppIInetSocketAddress)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIInetSocketAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInetSocketAddress = Elastos::Net::IInetSocketAddress::Probe(__pNewObj);
        if (*__ppIInetSocketAddress) (*__ppIInetSocketAddress)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIInetSocketAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInetSocketAddress = Elastos::Net::IInetSocketAddress::Probe(__pNewObj);
        if (*__ppIInetSocketAddress) (*__ppIInetSocketAddress)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIInetSocketAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInetSocketAddress = Elastos::Net::IInetSocketAddress::Probe(__pNewObj);
        if (*__ppIInetSocketAddress) (*__ppIInetSocketAddress)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::Net::IInetSocketAddress** __ppIInetSocketAddress)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIInetSocketAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInetSocketAddressHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IInetSocketAddressHelper** ppIInetSocketAddressHelper)
    {

        return _CObject_CreateInstance(ECLSID_CInetSocketAddressHelper, pRegime, Elastos::Net::EIID_IInetSocketAddressHelper, (IInterface**)ppIInetSocketAddressHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IInetSocketAddressHelper** __ppIInetSocketAddressHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIInetSocketAddressHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IInetSocketAddressHelper** ppIInetSocketAddressHelper)
    {
        return _CObject_CreateInstance(ECLSID_CInetSocketAddressHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IInetSocketAddressHelper, (PInterface*)ppIInetSocketAddressHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CPasswordAuthentication
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPasswordAuthenticationClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPasswordAuthentication, RGM_SAME_DOMAIN, 
                EIID_ICPasswordAuthenticationClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUserNamePassword(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param1,/* [out] */ Elastos::Net::IPasswordAuthentication** __ppIPasswordAuthentication)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPasswordAuthentication = Elastos::Net::IPasswordAuthentication::Probe(__pNewObj);
        if (*__ppIPasswordAuthentication) (*__ppIPasswordAuthentication)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param1,
/* [out] */ Elastos::Net::IPasswordAuthentication** __ppIPasswordAuthentication)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIPasswordAuthentication);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Char32> & Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CProxy
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::ProxyType Param0,/* [in] */ Elastos::Net::ISocketAddress * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICProxyClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CProxy, RGM_SAME_DOMAIN, 
                EIID_ICProxyClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTypeSa(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IProxy** ppIProxy)
    {

        return _CObject_CreateInstance(ECLSID_CProxy, pRegime, Elastos::Net::EIID_IProxy, (IInterface**)ppIProxy);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IProxy** __ppIProxy)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIProxy);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IProxy** ppIProxy)
    {
        return _CObject_CreateInstance(ECLSID_CProxy, RGM_SAME_DOMAIN, Elastos::Net::EIID_IProxy, (PInterface*)ppIProxy);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CProxy, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CProxy, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ProxyType Param0,/* [in] */ Elastos::Net::ISocketAddress * pParam1,/* [out] */ Elastos::Net::IProxy** __ppIProxy)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIProxy = Elastos::Net::IProxy::Probe(__pNewObj);
        if (*__ppIProxy) (*__ppIProxy)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ProxyType Param0,
/* [in] */ Elastos::Net::ISocketAddress * pParam1,
/* [out] */ Elastos::Net::IProxy** __ppIProxy)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIProxy);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ProxyType Param0,/* [in] */ Elastos::Net::ISocketAddress * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ProxyType Param0,
/* [in] */ Elastos::Net::ISocketAddress * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CURI
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURIClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURI, RGM_SAME_DOMAIN, 
                EIID_ICURIClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUri(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURIClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURI, RGM_SAME_DOMAIN, 
                EIID_ICURIClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSchemeSspFrag(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ const _ELASTOS String& Param4,/* [in] */ const _ELASTOS String& Param5,/* [in] */ const _ELASTOS String& Param6,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURIClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURI, RGM_SAME_DOMAIN, 
                EIID_ICURIClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSchemeUserInfoHostPortPathQueryFragment(Param0, Param1, Param2, Param3, Param4, Param5, Param6, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURIClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURI, RGM_SAME_DOMAIN, 
                EIID_ICURIClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSchemeHostPathFragment(Param0, Param1, Param2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURIClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURI, RGM_SAME_DOMAIN, 
                EIID_ICURIClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSchemeAuthorityPathQueryFragment(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IURI** ppIURI)
    {

        return _CObject_CreateInstance(ECLSID_CURI, pRegime, Elastos::Net::EIID_IURI, (IInterface**)ppIURI);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIURI);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IURI** ppIURI)
    {
        return _CObject_CreateInstance(ECLSID_CURI, RGM_SAME_DOMAIN, Elastos::Net::EIID_IURI, (PInterface*)ppIURI);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CURI, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CURI, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURI = Elastos::Net::IURI::Probe(__pNewObj);
        if (*__ppIURI) (*__ppIURI)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIURI);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURI = Elastos::Net::IURI::Probe(__pNewObj);
        if (*__ppIURI) (*__ppIURI)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIURI);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ const _ELASTOS String& Param4,/* [in] */ const _ELASTOS String& Param5,/* [in] */ const _ELASTOS String& Param6,/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURI = Elastos::Net::IURI::Probe(__pNewObj);
        if (*__ppIURI) (*__ppIURI)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [in] */ const _ELASTOS String& Param5,
/* [in] */ const _ELASTOS String& Param6,
/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, __ppIURI);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ const _ELASTOS String& Param4,/* [in] */ const _ELASTOS String& Param5,/* [in] */ const _ELASTOS String& Param6,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [in] */ const _ELASTOS String& Param5,
/* [in] */ const _ELASTOS String& Param6,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURI = Elastos::Net::IURI::Probe(__pNewObj);
        if (*__ppIURI) (*__ppIURI)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, __ppIURI);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURI = Elastos::Net::IURI::Probe(__pNewObj);
        if (*__ppIURI) (*__ppIURI)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ Elastos::Net::IURI** __ppIURI)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIURI);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CURL
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURLClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURL, RGM_SAME_DOMAIN, 
                EIID_ICURLClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSpec(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURLClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURL, RGM_SAME_DOMAIN, 
                EIID_ICURLClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithContextSpec(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Net::IURLStreamHandler * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURLClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURL, RGM_SAME_DOMAIN, 
                EIID_ICURLClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithContextSpecHandler(pParam0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURLClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURL, RGM_SAME_DOMAIN, 
                EIID_ICURLClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithProtocolHostFile(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURLClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURL, RGM_SAME_DOMAIN, 
                EIID_ICURLClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithProtocolHostPortFile(Param0, Param1, Param2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ Elastos::Net::IURLStreamHandler * pParam4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICURLClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CURL, RGM_SAME_DOMAIN, 
                EIID_ICURLClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithProtocolHostPortFileHandler(Param0, Param1, Param2, Param3, pParam4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURL = Elastos::Net::IURL::Probe(__pNewObj);
        if (*__ppIURL) (*__ppIURL)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIURL);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURL = Elastos::Net::IURL::Probe(__pNewObj);
        if (*__ppIURL) (*__ppIURL)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURL * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIURL);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURL * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Net::IURLStreamHandler * pParam2,/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURL = Elastos::Net::IURL::Probe(__pNewObj);
        if (*__ppIURL) (*__ppIURL)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURL * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Elastos::Net::IURLStreamHandler * pParam2,
/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIURL);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Net::IURLStreamHandler * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURL * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Elastos::Net::IURLStreamHandler * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURL = Elastos::Net::IURL::Probe(__pNewObj);
        if (*__ppIURL) (*__ppIURL)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIURL);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURL = Elastos::Net::IURL::Probe(__pNewObj);
        if (*__ppIURL) (*__ppIURL)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, __ppIURL);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ Elastos::Net::IURLStreamHandler * pParam4,/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIURL = Elastos::Net::IURL::Probe(__pNewObj);
        if (*__ppIURL) (*__ppIURL)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ Elastos::Net::IURLStreamHandler * pParam4,
/* [out] */ Elastos::Net::IURL** __ppIURL)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, pParam4, __ppIURL);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ Elastos::Net::IURLStreamHandler * pParam4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ Elastos::Net::IURLStreamHandler * pParam4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, pParam4, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CURLEncoder
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IURLEncoder** ppIURLEncoder)
    {

        return _CObject_CreateInstance(ECLSID_CURLEncoder, pRegime, Elastos::Net::EIID_IURLEncoder, (IInterface**)ppIURLEncoder);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IURLEncoder** __ppIURLEncoder)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIURLEncoder);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IURLEncoder** ppIURLEncoder)
    {
        return _CObject_CreateInstance(ECLSID_CURLEncoder, RGM_SAME_DOMAIN, Elastos::Net::EIID_IURLEncoder, (PInterface*)ppIURLEncoder);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CURLDecoder
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IURLDecoder** ppIURLDecoder)
    {

        return _CObject_CreateInstance(ECLSID_CURLDecoder, pRegime, Elastos::Net::EIID_IURLDecoder, (IInterface**)ppIURLDecoder);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IURLDecoder** __ppIURLDecoder)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIURLDecoder);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IURLDecoder** ppIURLDecoder)
    {
        return _CObject_CreateInstance(ECLSID_CURLDecoder, RGM_SAME_DOMAIN, Elastos::Net::EIID_IURLDecoder, (PInterface*)ppIURLDecoder);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CNetworkInterfaceHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::INetworkInterfaceHelper** ppINetworkInterfaceHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNetworkInterfaceHelper, pRegime, Elastos::Net::EIID_INetworkInterfaceHelper, (IInterface**)ppINetworkInterfaceHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::INetworkInterfaceHelper** __ppINetworkInterfaceHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINetworkInterfaceHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::INetworkInterfaceHelper** ppINetworkInterfaceHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNetworkInterfaceHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_INetworkInterfaceHelper, (PInterface*)ppINetworkInterfaceHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CMimeUtils
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IMimeUtils** ppIMimeUtils)
    {

        return _CObject_CreateInstance(ECLSID_CMimeUtils, pRegime, Elastos::Net::EIID_IMimeUtils, (IInterface**)ppIMimeUtils);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IMimeUtils** __ppIMimeUtils)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIMimeUtils);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IMimeUtils** ppIMimeUtils)
    {
        return _CObject_CreateInstance(ECLSID_CMimeUtils, RGM_SAME_DOMAIN, Elastos::Net::EIID_IMimeUtils, (PInterface*)ppIMimeUtils);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CProxyHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IProxyHelper** ppIProxyHelper)
    {

        return _CObject_CreateInstance(ECLSID_CProxyHelper, pRegime, Elastos::Net::EIID_IProxyHelper, (IInterface**)ppIProxyHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IProxyHelper** __ppIProxyHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIProxyHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IProxyHelper** ppIProxyHelper)
    {
        return _CObject_CreateInstance(ECLSID_CProxyHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IProxyHelper, (PInterface*)ppIProxyHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CCookieHandlerHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::ICookieHandlerHelper** ppICookieHandlerHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCookieHandlerHelper, pRegime, Elastos::Net::EIID_ICookieHandlerHelper, (IInterface**)ppICookieHandlerHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::ICookieHandlerHelper** __ppICookieHandlerHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICookieHandlerHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::ICookieHandlerHelper** ppICookieHandlerHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCookieHandlerHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_ICookieHandlerHelper, (PInterface*)ppICookieHandlerHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CUriCodecHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IUriCodecHelper** ppIUriCodecHelper)
    {

        return _CObject_CreateInstance(ECLSID_CUriCodecHelper, pRegime, Elastos::Net::EIID_IUriCodecHelper, (IInterface**)ppIUriCodecHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IUriCodecHelper** __ppIUriCodecHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIUriCodecHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IUriCodecHelper** ppIUriCodecHelper)
    {
        return _CObject_CreateInstance(ECLSID_CUriCodecHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IUriCodecHelper, (PInterface*)ppIUriCodecHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CIDNHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IIDNHelper** ppIIDNHelper)
    {

        return _CObject_CreateInstance(ECLSID_CIDNHelper, pRegime, Elastos::Net::EIID_IIDNHelper, (IInterface**)ppIIDNHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IIDNHelper** __ppIIDNHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIIDNHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IIDNHelper** ppIIDNHelper)
    {
        return _CObject_CreateInstance(ECLSID_CIDNHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IIDNHelper, (PInterface*)ppIIDNHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CSocket
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IProxy * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithProxy(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDstNameDstPort(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDstNameDstPortLocalAddressLocalPort(Param0, Param1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithHostNamePortStreaming(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDstAddressDstPort(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDstAddressDstPortLocalAddressLocalPort(pParam0, Param1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocket, RGM_SAME_DOMAIN, 
                EIID_ICSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAddrPortStreaming(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::ISocket** ppISocket)
    {

        return _CObject_CreateInstance(ECLSID_CSocket, pRegime, Elastos::Net::EIID_ISocket, (IInterface**)ppISocket);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISocket);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::ISocket** ppISocket)
    {
        return _CObject_CreateInstance(ECLSID_CSocket, RGM_SAME_DOMAIN, Elastos::Net::EIID_ISocket, (PInterface*)ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSocket, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSocket, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IProxy * pParam0,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IProxy * pParam0,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IProxy * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IProxy * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, Param3, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, Param3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocket = Elastos::Net::ISocket::Probe(__pNewObj);
        if (*__ppISocket) (*__ppISocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ Elastos::Net::ISocket** __ppISocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppISocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IInetAddress * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Boolean Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IInetAddress * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CSocketHelper
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::ISocketHelper** ppISocketHelper)
    {

        return _CObject_CreateInstance(ECLSID_CSocketHelper, pRegime, Elastos::Net::EIID_ISocketHelper, (IInterface**)ppISocketHelper);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::ISocketHelper** __ppISocketHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISocketHelper);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::ISocketHelper** ppISocketHelper)
    {
        return _CObject_CreateInstance(ECLSID_CSocketHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_ISocketHelper, (PInterface*)ppISocketHelper);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSocketHelper, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSocketHelper, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CServerSocket
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICServerSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CServerSocket, RGM_SAME_DOMAIN, 
                EIID_ICServerSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPort(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICServerSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CServerSocket, RGM_SAME_DOMAIN, 
                EIID_ICServerSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPortBacklog(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICServerSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CServerSocket, RGM_SAME_DOMAIN, 
                EIID_ICServerSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPortBacklogLocalAddress(Param0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IServerSocket** ppIServerSocket)
    {

        return _CObject_CreateInstance(ECLSID_CServerSocket, pRegime, Elastos::Net::EIID_IServerSocket, (IInterface**)ppIServerSocket);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIServerSocket);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IServerSocket** ppIServerSocket)
    {
        return _CObject_CreateInstance(ECLSID_CServerSocket, RGM_SAME_DOMAIN, Elastos::Net::EIID_IServerSocket, (PInterface*)ppIServerSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CServerSocket, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CServerSocket, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIServerSocket = Elastos::Net::IServerSocket::Probe(__pNewObj);
        if (*__ppIServerSocket) (*__ppIServerSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIServerSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIServerSocket = Elastos::Net::IServerSocket::Probe(__pNewObj);
        if (*__ppIServerSocket) (*__ppIServerSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIServerSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIServerSocket = Elastos::Net::IServerSocket::Probe(__pNewObj);
        if (*__ppIServerSocket) (*__ppIServerSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [out] */ Elastos::Net::IServerSocket** __ppIServerSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIServerSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CServerSocketHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IServerSocketHelper** ppIServerSocketHelper)
    {

        return _CObject_CreateInstance(ECLSID_CServerSocketHelper, pRegime, Elastos::Net::EIID_IServerSocketHelper, (IInterface**)ppIServerSocketHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IServerSocketHelper** __ppIServerSocketHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIServerSocketHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::IServerSocketHelper** ppIServerSocketHelper)
    {
        return _CObject_CreateInstance(ECLSID_CServerSocketHelper, RGM_SAME_DOMAIN, Elastos::Net::EIID_IServerSocketHelper, (PInterface*)ppIServerSocketHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CPlainSocketImpl
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPlainSocketImplClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPlainSocketImpl, RGM_SAME_DOMAIN, 
                EIID_ICPlainSocketImplClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPFd(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IProxy * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPlainSocketImplClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPlainSocketImpl, RGM_SAME_DOMAIN, 
                EIID_ICPlainSocketImplClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPProxy(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPlainSocketImplClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPlainSocketImpl, RGM_SAME_DOMAIN, 
                EIID_ICPlainSocketImplClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPFdLocalportPAddrPort(pParam0, Param1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IPlainSocketImpl** ppIPlainSocketImpl)
    {

        return _CObject_CreateInstance(ECLSID_CPlainSocketImpl, pRegime, Elastos::Net::EIID_IPlainSocketImpl, (IInterface**)ppIPlainSocketImpl);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPlainSocketImpl);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IPlainSocketImpl** ppIPlainSocketImpl)
    {
        return _CObject_CreateInstance(ECLSID_CPlainSocketImpl, RGM_SAME_DOMAIN, Elastos::Net::EIID_IPlainSocketImpl, (PInterface*)ppIPlainSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPlainSocketImpl, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPlainSocketImpl, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPlainSocketImpl = Elastos::Net::IPlainSocketImpl::Probe(__pNewObj);
        if (*__ppIPlainSocketImpl) (*__ppIPlainSocketImpl)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPlainSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IProxy * pParam0,/* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPlainSocketImpl = Elastos::Net::IPlainSocketImpl::Probe(__pNewObj);
        if (*__ppIPlainSocketImpl) (*__ppIPlainSocketImpl)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IProxy * pParam0,
/* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPlainSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IProxy * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IProxy * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPlainSocketImpl = Elastos::Net::IPlainSocketImpl::Probe(__pNewObj);
        if (*__ppIPlainSocketImpl) (*__ppIPlainSocketImpl)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Net::IPlainSocketImpl** __ppIPlainSocketImpl)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, __ppIPlainSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ Elastos::Net::IInetAddress * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ Elastos::Net::IInetAddress * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CPlainServerSocketImpl
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPlainServerSocketImplClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPlainServerSocketImpl, RGM_SAME_DOMAIN, 
                EIID_ICPlainServerSocketImplClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPFd(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IPlainServerSocketImpl** ppIPlainServerSocketImpl)
    {

        return _CObject_CreateInstance(ECLSID_CPlainServerSocketImpl, pRegime, Elastos::Net::EIID_IPlainServerSocketImpl, (IInterface**)ppIPlainServerSocketImpl);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IPlainServerSocketImpl** __ppIPlainServerSocketImpl)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPlainServerSocketImpl);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IPlainServerSocketImpl** ppIPlainServerSocketImpl)
    {
        return _CObject_CreateInstance(ECLSID_CPlainServerSocketImpl, RGM_SAME_DOMAIN, Elastos::Net::EIID_IPlainServerSocketImpl, (PInterface*)ppIPlainServerSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPlainServerSocketImpl, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPlainServerSocketImpl, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ Elastos::Net::IPlainServerSocketImpl** __ppIPlainServerSocketImpl)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPlainServerSocketImpl = Elastos::Net::IPlainServerSocketImpl::Probe(__pNewObj);
        if (*__ppIPlainServerSocketImpl) (*__ppIPlainServerSocketImpl)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ Elastos::Net::IPlainServerSocketImpl** __ppIPlainServerSocketImpl)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPlainServerSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CSocketInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocketInputStream, RGM_SAME_DOMAIN, 
                EIID_ICSocketInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPImpl(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ Elastos::Net::ISocketInputStream** __ppISocketInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocketInputStream = Elastos::Net::ISocketInputStream::Probe(__pNewObj);
        if (*__ppISocketInputStream) (*__ppISocketInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketImpl * pParam0,
/* [out] */ Elastos::Net::ISocketInputStream** __ppISocketInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISocketInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketImpl * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CSocketOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSocketOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSocketOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICSocketOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPImpl(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ Elastos::Net::ISocketOutputStream** __ppISocketOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISocketOutputStream = Elastos::Net::ISocketOutputStream::Probe(__pNewObj);
        if (*__ppISocketOutputStream) (*__ppISocketOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketImpl * pParam0,
/* [out] */ Elastos::Net::ISocketOutputStream** __ppISocketOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISocketOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketImpl * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketImpl * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketImpl * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CMulticastSocket
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMulticastSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMulticastSocket, RGM_SAME_DOMAIN, 
                EIID_ICMulticastSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAPort(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::ISocketAddress * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMulticastSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMulticastSocket, RGM_SAME_DOMAIN, 
                EIID_ICMulticastSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLocalAddr(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IMulticastSocket** ppIMulticastSocket)
    {

        return _CObject_CreateInstance(ECLSID_CMulticastSocket, pRegime, Elastos::Net::EIID_IMulticastSocket, (IInterface**)ppIMulticastSocket);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IMulticastSocket** __ppIMulticastSocket)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMulticastSocket);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IMulticastSocket** ppIMulticastSocket)
    {
        return _CObject_CreateInstance(ECLSID_CMulticastSocket, RGM_SAME_DOMAIN, Elastos::Net::EIID_IMulticastSocket, (PInterface*)ppIMulticastSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CMulticastSocket, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CMulticastSocket, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Net::IMulticastSocket** __ppIMulticastSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMulticastSocket = Elastos::Net::IMulticastSocket::Probe(__pNewObj);
        if (*__ppIMulticastSocket) (*__ppIMulticastSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Net::IMulticastSocket** __ppIMulticastSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMulticastSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketAddress * pParam0,/* [out] */ Elastos::Net::IMulticastSocket** __ppIMulticastSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMulticastSocket = Elastos::Net::IMulticastSocket::Probe(__pNewObj);
        if (*__ppIMulticastSocket) (*__ppIMulticastSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketAddress * pParam0,
/* [out] */ Elastos::Net::IMulticastSocket** __ppIMulticastSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMulticastSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::ISocketAddress * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::ISocketAddress * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CRawSocket
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int16 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRawSocketClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRawSocket, RGM_SAME_DOMAIN, 
                EIID_ICRawSocketClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInterfaceNameProtocolType(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int16 Param1,/* [out] */ Elastos::Net::IRawSocket** __ppIRawSocket)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRawSocket = Elastos::Net::IRawSocket::Probe(__pNewObj);
        if (*__ppIRawSocket) (*__ppIRawSocket)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int16 Param1,
/* [out] */ Elastos::Net::IRawSocket** __ppIRawSocket)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIRawSocket);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int16 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int16 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CPlainDatagramSocketImpl
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPlainDatagramSocketImplClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPlainDatagramSocketImpl, RGM_SAME_DOMAIN, 
                EIID_ICPlainDatagramSocketImplClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFdLocalPort(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IDatagramSocketImpl** ppIDatagramSocketImpl)
    {

        return _CObject_CreateInstance(ECLSID_CPlainDatagramSocketImpl, pRegime, Elastos::Net::EIID_IDatagramSocketImpl, (IInterface**)ppIDatagramSocketImpl);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IDatagramSocketImpl** __ppIDatagramSocketImpl)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDatagramSocketImpl);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IDatagramSocketImpl** ppIDatagramSocketImpl)
    {
        return _CObject_CreateInstance(ECLSID_CPlainDatagramSocketImpl, RGM_SAME_DOMAIN, Elastos::Net::EIID_IDatagramSocketImpl, (PInterface*)ppIDatagramSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPlainDatagramSocketImpl, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPlainDatagramSocketImpl, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::IDatagramSocketImpl** __ppIDatagramSocketImpl)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDatagramSocketImpl = Elastos::Net::IDatagramSocketImpl::Probe(__pNewObj);
        if (*__ppIDatagramSocketImpl) (*__ppIDatagramSocketImpl)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::IDatagramSocketImpl** __ppIDatagramSocketImpl)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIDatagramSocketImpl);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFileDescriptor * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFileDescriptor * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CSocks4Message
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::ISocks4Message** ppISocks4Message)
    {

        return _CObject_CreateInstance(ECLSID_CSocks4Message, pRegime, Elastos::Net::EIID_ISocks4Message, (IInterface**)ppISocks4Message);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::ISocks4Message** __ppISocks4Message)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISocks4Message);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::ISocks4Message** ppISocks4Message)
    {
        return _CObject_CreateInstance(ECLSID_CSocks4Message, RGM_SAME_DOMAIN, Elastos::Net::EIID_ISocks4Message, (PInterface*)ppISocks4Message);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSocks4Message, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSocks4Message, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
class CInetAddress
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInetAddressClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInetAddress, RGM_SAME_DOMAIN, 
                EIID_ICInetAddressClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFamilyIpaddressHostName(Param0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::IInetAddress** ppIInetAddress)
    {

        return _CObject_CreateInstance(ECLSID_CInetAddress, pRegime, Elastos::Net::EIID_IInetAddress, (IInterface**)ppIInetAddress);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::IInetAddress** __ppIInetAddress)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIInetAddress);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::IInetAddress** ppIInetAddress)
    {
        return _CObject_CreateInstance(ECLSID_CInetAddress, RGM_SAME_DOMAIN, Elastos::Net::EIID_IInetAddress, (PInterface*)ppIInetAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CInetAddress, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CInetAddress, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Net::IInetAddress** __ppIInetAddress)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInetAddress = Elastos::Net::IInetAddress::Probe(__pNewObj);
        if (*__ppIInetAddress) (*__ppIInetAddress)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Net::IInetAddress** __ppIInetAddress)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, Param2, __ppIInetAddress);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CAbstractHttpInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam1,/* [in] */ Elastos::Net::ICacheRequest * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAbstractHttpInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAbstractHttpInputStream, RGM_SAME_DOMAIN, 
                EIID_ICAbstractHttpInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInstHttpEngineCacheRequest(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam1,/* [in] */ Elastos::Net::ICacheRequest * pParam2,/* [out] */ Elastos::Net::Http::IAbstractHttpInputStream** __ppIAbstractHttpInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAbstractHttpInputStream = Elastos::Net::Http::IAbstractHttpInputStream::Probe(__pNewObj);
        if (*__ppIAbstractHttpInputStream) (*__ppIAbstractHttpInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam1,
/* [in] */ Elastos::Net::ICacheRequest * pParam2,
/* [out] */ Elastos::Net::Http::IAbstractHttpInputStream** __ppIAbstractHttpInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIAbstractHttpInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam1,/* [in] */ Elastos::Net::ICacheRequest * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam1,
/* [in] */ Elastos::Net::ICacheRequest * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CChallenge
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChallengeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChallenge, RGM_SAME_DOMAIN, 
                EIID_ICChallengeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSchemeRealm(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Net::Http::IChallenge** __ppIChallenge)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChallenge = Elastos::Net::Http::IChallenge::Probe(__pNewObj);
        if (*__ppIChallenge) (*__ppIChallenge)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Net::Http::IChallenge** __ppIChallenge)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIChallenge);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CChunkedInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChunkedInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChunkedInputStream, RGM_SAME_DOMAIN, 
                EIID_ICChunkedInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsCacheRequestHttpEngine(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [out] */ Elastos::Net::Http::IChunkedInputStream** __ppIChunkedInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChunkedInputStream = Elastos::Net::Http::IChunkedInputStream::Probe(__pNewObj);
        if (*__ppIChunkedInputStream) (*__ppIChunkedInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ICacheRequest * pParam1,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,
/* [out] */ Elastos::Net::Http::IChunkedInputStream** __ppIChunkedInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIChunkedInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ICacheRequest * pParam1,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CChunkedOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChunkedOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChunkedOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICChunkedOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSocketOutMaxChunkLength(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::Http::IChunkedOutputStream** __ppIChunkedOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChunkedOutputStream = Elastos::Net::Http::IChunkedOutputStream::Probe(__pNewObj);
        if (*__ppIChunkedOutputStream) (*__ppIChunkedOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::Http::IChunkedOutputStream** __ppIChunkedOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIChunkedOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CFixedLengthInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFixedLengthInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFixedLengthInputStream, RGM_SAME_DOMAIN, 
                EIID_ICFixedLengthInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsCacheRequestHttpEngineLength(pParam0, pParam1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Net::Http::IFixedLengthInputStream** __ppIFixedLengthInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFixedLengthInputStream = Elastos::Net::Http::IFixedLengthInputStream::Probe(__pNewObj);
        if (*__ppIFixedLengthInputStream) (*__ppIFixedLengthInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ICacheRequest * pParam1,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Net::Http::IFixedLengthInputStream** __ppIFixedLengthInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, Param3, __ppIFixedLengthInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ICacheRequest * pParam1,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, Param3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CFixedLengthOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFixedLengthOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFixedLengthOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICFixedLengthOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSocketOutBytesRemaining(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Net::Http::IFixedLengthOutputStream** __ppIFixedLengthOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFixedLengthOutputStream = Elastos::Net::Http::IFixedLengthOutputStream::Probe(__pNewObj);
        if (*__ppIFixedLengthOutputStream) (*__ppIFixedLengthOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Net::Http::IFixedLengthOutputStream** __ppIFixedLengthOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFixedLengthOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CHeaderParserHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IHeaderParserHelper** ppIHeaderParserHelper)
    {

        return _CObject_CreateInstance(ECLSID_CHeaderParserHelper, pRegime, Elastos::Net::Http::EIID_IHeaderParserHelper, (IInterface**)ppIHeaderParserHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IHeaderParserHelper** __ppIHeaderParserHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIHeaderParserHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::Http::IHeaderParserHelper** ppIHeaderParserHelper)
    {
        return _CObject_CreateInstance(ECLSID_CHeaderParserHelper, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IHeaderParserHelper, (PInterface*)ppIHeaderParserHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CHttpDate
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IHttpDate** ppIHttpDate)
    {

        return _CObject_CreateInstance(ECLSID_CHttpDate, pRegime, Elastos::Net::Http::EIID_IHttpDate, (IInterface**)ppIHttpDate);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IHttpDate** __ppIHttpDate)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIHttpDate);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::Http::IHttpDate** ppIHttpDate)
    {
        return _CObject_CreateInstance(ECLSID_CHttpDate, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IHttpDate, (PInterface*)ppIHttpDate);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CHttpHandler
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IHttpHandler** ppIHttpHandler)
    {

        return _CObject_CreateInstance(ECLSID_CHttpHandler, pRegime, Elastos::Net::Http::EIID_IHttpHandler, (IInterface**)ppIHttpHandler);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IHttpHandler** __ppIHttpHandler)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIHttpHandler);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Http::IHttpHandler** ppIHttpHandler)
    {
        return _CObject_CreateInstance(ECLSID_CHttpHandler, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IHttpHandler, (PInterface*)ppIHttpHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CHttpHandler, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CHttpHandler, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CHttpResponseCache
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHttpResponseCacheClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHttpResponseCache, RGM_SAME_DOMAIN, 
                EIID_ICHttpResponseCacheClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithDirectoryMaxSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ Elastos::Net::Http::IHttpResponseCache** __ppIHttpResponseCache)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIHttpResponseCache = Elastos::Net::Http::IHttpResponseCache::Probe(__pNewObj);
        if (*__ppIHttpResponseCache) (*__ppIHttpResponseCache)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ Elastos::Net::Http::IHttpResponseCache** __ppIHttpResponseCache)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIHttpResponseCache);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ Elastos::Net::IExtendedResponseCache** __ppIExtendedResponseCache)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIExtendedResponseCache = Elastos::Net::IExtendedResponseCache::Probe(__pNewObj);
        if (*__ppIExtendedResponseCache) (*__ppIExtendedResponseCache)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ Elastos::Net::IExtendedResponseCache** __ppIExtendedResponseCache)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIExtendedResponseCache);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int64 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Int64 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CHttpsHandler
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IHttpsHandler** ppIHttpsHandler)
    {

        return _CObject_CreateInstance(ECLSID_CHttpsHandler, pRegime, Elastos::Net::Http::EIID_IHttpsHandler, (IInterface**)ppIHttpsHandler);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IHttpsHandler** __ppIHttpsHandler)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIHttpsHandler);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Http::IHttpsHandler** ppIHttpsHandler)
    {
        return _CObject_CreateInstance(ECLSID_CHttpsHandler, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IHttpsHandler, (PInterface*)ppIHttpsHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CHttpsHandler, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CHttpsHandler, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CHttpEngine
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::Http::IHttpURLConnectionImpl * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam2,/* [in] */ Elastos::Net::Http::IHttpConnection * pParam3,/* [in] */ Elastos::Net::Http::IRetryableOutputStream * pParam4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICHttpEngineClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CHttpEngine, RGM_SAME_DOMAIN, 
                EIID_ICHttpEngineClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPolicyMethodRequestHeadersConnectionRequestBodyOut(pParam0, Param1, pParam2, pParam3, pParam4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::Http::IHttpURLConnectionImpl * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam2,/* [in] */ Elastos::Net::Http::IHttpConnection * pParam3,/* [in] */ Elastos::Net::Http::IRetryableOutputStream * pParam4,/* [out] */ Elastos::Net::Http::IHttpEngine** __ppIHttpEngine)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIHttpEngine = Elastos::Net::Http::IHttpEngine::Probe(__pNewObj);
        if (*__ppIHttpEngine) (*__ppIHttpEngine)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::Http::IHttpURLConnectionImpl * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Elastos::Net::Http::IRawHeaders * pParam2,
/* [in] */ Elastos::Net::Http::IHttpConnection * pParam3,
/* [in] */ Elastos::Net::Http::IRetryableOutputStream * pParam4,
/* [out] */ Elastos::Net::Http::IHttpEngine** __ppIHttpEngine)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, pParam3, pParam4, __ppIHttpEngine);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::Http::IHttpURLConnectionImpl * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam2,/* [in] */ Elastos::Net::Http::IHttpConnection * pParam3,/* [in] */ Elastos::Net::Http::IRetryableOutputStream * pParam4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::Http::IHttpURLConnectionImpl * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Elastos::Net::Http::IRawHeaders * pParam2,
/* [in] */ Elastos::Net::Http::IHttpConnection * pParam3,
/* [in] */ Elastos::Net::Http::IRetryableOutputStream * pParam4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, pParam3, pParam4, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CRawHeaders
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRawHeadersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRawHeaders, RGM_SAME_DOMAIN, 
                EIID_ICRawHeadersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCopyFrom(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IRawHeaders** ppIRawHeaders)
    {

        return _CObject_CreateInstance(ECLSID_CRawHeaders, pRegime, Elastos::Net::Http::EIID_IRawHeaders, (IInterface**)ppIRawHeaders);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IRawHeaders** __ppIRawHeaders)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIRawHeaders);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Http::IRawHeaders** ppIRawHeaders)
    {
        return _CObject_CreateInstance(ECLSID_CRawHeaders, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IRawHeaders, (PInterface*)ppIRawHeaders);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CRawHeaders, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CRawHeaders, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam0,/* [out] */ Elastos::Net::Http::IRawHeaders** __ppIRawHeaders)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRawHeaders = Elastos::Net::Http::IRawHeaders::Probe(__pNewObj);
        if (*__ppIRawHeaders) (*__ppIRawHeaders)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::Http::IRawHeaders * pParam0,
/* [out] */ Elastos::Net::Http::IRawHeaders** __ppIRawHeaders)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRawHeaders);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::Http::IRawHeaders * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CRawHeadersHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IRawHeadersHelper** ppIRawHeadersHelper)
    {

        return _CObject_CreateInstance(ECLSID_CRawHeadersHelper, pRegime, Elastos::Net::Http::EIID_IRawHeadersHelper, (IInterface**)ppIRawHeadersHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IRawHeadersHelper** __ppIRawHeadersHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIRawHeadersHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Net::Http::IRawHeadersHelper** ppIRawHeadersHelper)
    {
        return _CObject_CreateInstance(ECLSID_CRawHeadersHelper, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IRawHeadersHelper, (PInterface*)ppIRawHeadersHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CRequestHeaders
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRequestHeadersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRequestHeaders, RGM_SAME_DOMAIN, 
                EIID_ICRequestHeadersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUriHeaders(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,/* [out] */ Elastos::Net::Http::IRequestHeaders** __ppIRequestHeaders)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRequestHeaders = Elastos::Net::Http::IRequestHeaders::Probe(__pNewObj);
        if (*__ppIRequestHeaders) (*__ppIRequestHeaders)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,
/* [out] */ Elastos::Net::Http::IRequestHeaders** __ppIRequestHeaders)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIRequestHeaders);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CResponseHeaders
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICResponseHeadersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CResponseHeaders, RGM_SAME_DOMAIN, 
                EIID_ICResponseHeadersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUriHeaders(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,/* [out] */ Elastos::Net::Http::IResponseHeaders** __ppIResponseHeaders)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIResponseHeaders = Elastos::Net::Http::IResponseHeaders::Probe(__pNewObj);
        if (*__ppIResponseHeaders) (*__ppIResponseHeaders)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,
/* [out] */ Elastos::Net::Http::IResponseHeaders** __ppIResponseHeaders)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIResponseHeaders);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURI * pParam0,/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURI * pParam0,
/* [in] */ Elastos::Net::Http::IRawHeaders * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CRetryableOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRetryableOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRetryableOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICRetryableOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLimi(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Http::IRetryableOutputStream** ppIRetryableOutputStream)
    {

        return _CObject_CreateInstance(ECLSID_CRetryableOutputStream, pRegime, Elastos::Net::Http::EIID_IRetryableOutputStream, (IInterface**)ppIRetryableOutputStream);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Http::IRetryableOutputStream** __ppIRetryableOutputStream)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIRetryableOutputStream);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Http::IRetryableOutputStream** ppIRetryableOutputStream)
    {
        return _CObject_CreateInstance(ECLSID_CRetryableOutputStream, RGM_SAME_DOMAIN, Elastos::Net::Http::EIID_IRetryableOutputStream, (PInterface*)ppIRetryableOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {

        return _CObject_CreateInstance(ECLSID_CRetryableOutputStream, pRegime, Elastos::IO::EIID_IFlushable, (IInterface**)ppIFlushable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFlushable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::IFlushable** ppIFlushable)
    {
        return _CObject_CreateInstance(ECLSID_CRetryableOutputStream, RGM_SAME_DOMAIN, Elastos::IO::EIID_IFlushable, (PInterface*)ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CRetryableOutputStream, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CRetryableOutputStream, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Net::Http::IRetryableOutputStream** __ppIRetryableOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRetryableOutputStream = Elastos::Net::Http::IRetryableOutputStream::Probe(__pNewObj);
        if (*__ppIRetryableOutputStream) (*__ppIRetryableOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Net::Http::IRetryableOutputStream** __ppIRetryableOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRetryableOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Http {
class CUnknownLengthHttpInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICUnknownLengthHttpInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CUnknownLengthHttpInputStream, RGM_SAME_DOMAIN, 
                EIID_ICUnknownLengthHttpInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsCacheRequestHttpEngine(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [out] */ Elastos::Net::Http::IUnknownLengthHttpInputStream** __ppIUnknownLengthHttpInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIUnknownLengthHttpInputStream = Elastos::Net::Http::IUnknownLengthHttpInputStream::Probe(__pNewObj);
        if (*__ppIUnknownLengthHttpInputStream) (*__ppIUnknownLengthHttpInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ICacheRequest * pParam1,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,
/* [out] */ Elastos::Net::Http::IUnknownLengthHttpInputStream** __ppIUnknownLengthHttpInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIUnknownLengthHttpInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ICacheRequest * pParam1,/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ICacheRequest * pParam1,
/* [in] */ Elastos::Net::Http::IHttpEngine * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Url {
class CFileHandler
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Url::IFileHandler** ppIFileHandler)
    {

        return _CObject_CreateInstance(ECLSID_CFileHandler, pRegime, Elastos::Net::Url::EIID_IFileHandler, (IInterface**)ppIFileHandler);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Url::IFileHandler** __ppIFileHandler)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFileHandler);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Url::IFileHandler** ppIFileHandler)
    {
        return _CObject_CreateInstance(ECLSID_CFileHandler, RGM_SAME_DOMAIN, Elastos::Net::Url::EIID_IFileHandler, (PInterface*)ppIFileHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CFileHandler, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CFileHandler, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Url {
class CFileURLConnection
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFileURLConnectionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFileURLConnection, RGM_SAME_DOMAIN, 
                EIID_ICFileURLConnectionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUrl(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [out] */ Elastos::Net::Url::IFileURLConnection** __ppIFileURLConnection)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFileURLConnection = Elastos::Net::Url::IFileURLConnection::Probe(__pNewObj);
        if (*__ppIFileURLConnection) (*__ppIFileURLConnection)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURL * pParam0,
/* [out] */ Elastos::Net::Url::IFileURLConnection** __ppIFileURLConnection)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFileURLConnection);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Net::IURL * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Net::IURL * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Url {
class CFtpHandler
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Url::IFtpHandler** ppIFtpHandler)
    {

        return _CObject_CreateInstance(ECLSID_CFtpHandler, pRegime, Elastos::Net::Url::EIID_IFtpHandler, (IInterface**)ppIFtpHandler);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Url::IFtpHandler** __ppIFtpHandler)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFtpHandler);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Url::IFtpHandler** ppIFtpHandler)
    {
        return _CObject_CreateInstance(ECLSID_CFtpHandler, RGM_SAME_DOMAIN, Elastos::Net::Url::EIID_IFtpHandler, (PInterface*)ppIFtpHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CFtpHandler, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CFtpHandler, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Url {
class CFtpURLInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ISocket * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFtpURLInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFtpURLInputStream, RGM_SAME_DOMAIN, 
                EIID_ICFtpURLInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsControlSocket(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ISocket * pParam1,/* [out] */ Elastos::Net::Url::IFtpURLInputStream** __ppIFtpURLInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFtpURLInputStream = Elastos::Net::Url::IFtpURLInputStream::Probe(__pNewObj);
        if (*__ppIFtpURLInputStream) (*__ppIFtpURLInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ISocket * pParam1,
/* [out] */ Elastos::Net::Url::IFtpURLInputStream** __ppIFtpURLInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFtpURLInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Net::ISocket * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Net::ISocket * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Net {
namespace Url {
class CUrlUtilsHelper
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Net::Url::IUrlUtilsHelper** ppIUrlUtilsHelper)
    {

        return _CObject_CreateInstance(ECLSID_CUrlUtilsHelper, pRegime, Elastos::Net::Url::EIID_IUrlUtilsHelper, (IInterface**)ppIUrlUtilsHelper);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Net::Url::IUrlUtilsHelper** __ppIUrlUtilsHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIUrlUtilsHelper);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Net::Url::IUrlUtilsHelper** ppIUrlUtilsHelper)
    {
        return _CObject_CreateInstance(ECLSID_CUrlUtilsHelper, RGM_SAME_DOMAIN, Elastos::Net::Url::EIID_IUrlUtilsHelper, (PInterface*)ppIUrlUtilsHelper);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CUrlUtilsHelper, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CUrlUtilsHelper, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CAnnotation
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAnnotationClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAnnotation, RGM_SAME_DOMAIN, 
                EIID_ICAnnotationClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAttribute(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ Elastos::Text::IAnnotation** __ppIAnnotation)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAnnotation = Elastos::Text::IAnnotation::Probe(__pNewObj);
        if (*__ppIAnnotation) (*__ppIAnnotation)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [out] */ Elastos::Text::IAnnotation** __ppIAnnotation)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAnnotation);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDateFormatHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDateFormatHelper** ppIDateFormatHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDateFormatHelper, pRegime, Elastos::Text::EIID_IDateFormatHelper, (IInterface**)ppIDateFormatHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDateFormatHelper** __ppIDateFormatHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDateFormatHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IDateFormatHelper** ppIDateFormatHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDateFormatHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDateFormatHelper, (PInterface*)ppIDateFormatHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDateFormatFieldHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDateFormatFieldHelper** ppIDateFormatFieldHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDateFormatFieldHelper, pRegime, Elastos::Text::EIID_IDateFormatFieldHelper, (IInterface**)ppIDateFormatFieldHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDateFormatFieldHelper** __ppIDateFormatFieldHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDateFormatFieldHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IDateFormatFieldHelper** ppIDateFormatFieldHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDateFormatFieldHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDateFormatFieldHelper, (PInterface*)ppIDateFormatFieldHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDateFormatSymbols
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDateFormatSymbolsClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDateFormatSymbols, RGM_SAME_DOMAIN, 
                EIID_ICDateFormatSymbolsClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLocale(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDateFormatSymbols** ppIDateFormatSymbols)
    {

        return _CObject_CreateInstance(ECLSID_CDateFormatSymbols, pRegime, Elastos::Text::EIID_IDateFormatSymbols, (IInterface**)ppIDateFormatSymbols);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDateFormatSymbols** __ppIDateFormatSymbols)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDateFormatSymbols);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Text::IDateFormatSymbols** ppIDateFormatSymbols)
    {
        return _CObject_CreateInstance(ECLSID_CDateFormatSymbols, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDateFormatSymbols, (PInterface*)ppIDateFormatSymbols);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDateFormatSymbols, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDateFormatSymbols, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ Elastos::Text::IDateFormatSymbols** __ppIDateFormatSymbols)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDateFormatSymbols = Elastos::Text::IDateFormatSymbols::Probe(__pNewObj);
        if (*__ppIDateFormatSymbols) (*__ppIDateFormatSymbols)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ Elastos::Text::IDateFormatSymbols** __ppIDateFormatSymbols)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDateFormatSymbols);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ILocale * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ILocale * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDateFormatSymbolsHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDateFormatSymbolsHelper** ppIDateFormatSymbolsHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDateFormatSymbolsHelper, pRegime, Elastos::Text::EIID_IDateFormatSymbolsHelper, (IInterface**)ppIDateFormatSymbolsHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDateFormatSymbolsHelper** __ppIDateFormatSymbolsHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDateFormatSymbolsHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IDateFormatSymbolsHelper** ppIDateFormatSymbolsHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDateFormatSymbolsHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDateFormatSymbolsHelper, (PInterface*)ppIDateFormatSymbolsHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CBreakIteratorHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IBreakIteratorHelper** ppIBreakIteratorHelper)
    {

        return _CObject_CreateInstance(ECLSID_CBreakIteratorHelper, pRegime, Elastos::Text::EIID_IBreakIteratorHelper, (IInterface**)ppIBreakIteratorHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IBreakIteratorHelper** __ppIBreakIteratorHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBreakIteratorHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IBreakIteratorHelper** ppIBreakIteratorHelper)
    {
        return _CObject_CreateInstance(ECLSID_CBreakIteratorHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IBreakIteratorHelper, (PInterface*)ppIBreakIteratorHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CRuleBasedBreakIterator
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::INativeBreakIterator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRuleBasedBreakIteratorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRuleBasedBreakIterator, RGM_SAME_DOMAIN, 
                EIID_ICRuleBasedBreakIteratorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIterator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::INativeBreakIterator * pParam0,/* [out] */ Elastos::Text::IRuleBasedBreakIterator** __ppIRuleBasedBreakIterator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRuleBasedBreakIterator = Elastos::Text::IRuleBasedBreakIterator::Probe(__pNewObj);
        if (*__ppIRuleBasedBreakIterator) (*__ppIRuleBasedBreakIterator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::INativeBreakIterator * pParam0,
/* [out] */ Elastos::Text::IRuleBasedBreakIterator** __ppIRuleBasedBreakIterator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRuleBasedBreakIterator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::INativeBreakIterator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::INativeBreakIterator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CNumberFormatField
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICNumberFormatFieldClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CNumberFormatField, RGM_SAME_DOMAIN, 
                EIID_ICNumberFormatFieldClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFieldName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::INumberFormatField** __ppINumberFormatField)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINumberFormatField = Elastos::Text::INumberFormatField::Probe(__pNewObj);
        if (*__ppINumberFormatField) (*__ppINumberFormatField)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::INumberFormatField** __ppINumberFormatField)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppINumberFormatField);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CNumberFormatHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::INumberFormatHelper** ppINumberFormatHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNumberFormatHelper, pRegime, Elastos::Text::EIID_INumberFormatHelper, (IInterface**)ppINumberFormatHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::INumberFormatHelper** __ppINumberFormatHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINumberFormatHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::INumberFormatHelper** ppINumberFormatHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNumberFormatHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_INumberFormatHelper, (PInterface*)ppINumberFormatHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CMessageFormat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMessageFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMessageFormat, RGM_SAME_DOMAIN, 
                EIID_ICMessageFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTemLocale(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMessageFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMessageFormat, RGM_SAME_DOMAIN, 
                EIID_ICMessageFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTem(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Text::IMessageFormat** __ppIMessageFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMessageFormat = Elastos::Text::IMessageFormat::Probe(__pNewObj);
        if (*__ppIMessageFormat) (*__ppIMessageFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Text::IMessageFormat** __ppIMessageFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIMessageFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IMessageFormat** __ppIMessageFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMessageFormat = Elastos::Text::IMessageFormat::Probe(__pNewObj);
        if (*__ppIMessageFormat) (*__ppIMessageFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IMessageFormat** __ppIMessageFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMessageFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CMessageFormatField
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMessageFormatFieldClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMessageFormatField, RGM_SAME_DOMAIN, 
                EIID_ICMessageFormatFieldClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IMessageFormatField** __ppIMessageFormatField)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMessageFormatField = Elastos::Text::IMessageFormatField::Probe(__pNewObj);
        if (*__ppIMessageFormatField) (*__ppIMessageFormatField)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IMessageFormatField** __ppIMessageFormatField)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMessageFormatField);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CChoiceFormat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Double> & Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChoiceFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChoiceFormat, RGM_SAME_DOMAIN, 
                EIID_ICChoiceFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLimitsFormats(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChoiceFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChoiceFormat, RGM_SAME_DOMAIN, 
                EIID_ICChoiceFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTem(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Double> & Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,/* [out] */ Elastos::Text::IChoiceFormat** __ppIChoiceFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChoiceFormat = Elastos::Text::IChoiceFormat::Probe(__pNewObj);
        if (*__ppIChoiceFormat) (*__ppIChoiceFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Double> & Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,
/* [out] */ Elastos::Text::IChoiceFormat** __ppIChoiceFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIChoiceFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Double> & Param0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Double> & Param0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IChoiceFormat** __ppIChoiceFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChoiceFormat = Elastos::Text::IChoiceFormat::Probe(__pNewObj);
        if (*__ppIChoiceFormat) (*__ppIChoiceFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IChoiceFormat** __ppIChoiceFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIChoiceFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CChoiceFormatHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IChoiceFormatHelper** ppIChoiceFormatHelper)
    {

        return _CObject_CreateInstance(ECLSID_CChoiceFormatHelper, pRegime, Elastos::Text::EIID_IChoiceFormatHelper, (IInterface**)ppIChoiceFormatHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IChoiceFormatHelper** __ppIChoiceFormatHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIChoiceFormatHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IChoiceFormatHelper** ppIChoiceFormatHelper)
    {
        return _CObject_CreateInstance(ECLSID_CChoiceFormatHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IChoiceFormatHelper, (PInterface*)ppIChoiceFormatHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CDecimalFormat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDecimalFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDecimalFormat, RGM_SAME_DOMAIN, 
                EIID_ICDecimalFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPattern(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDecimalFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDecimalFormat, RGM_SAME_DOMAIN, 
                EIID_ICDecimalFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPatternValue(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDecimalFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDecimalFormat, RGM_SAME_DOMAIN, 
                EIID_ICDecimalFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPatternLocale(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IDecimalFormat** ppIDecimalFormat)
    {

        return _CObject_CreateInstance(ECLSID_CDecimalFormat, pRegime, Elastos::Text::EIID_IDecimalFormat, (IInterface**)ppIDecimalFormat);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDecimalFormat);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Text::IDecimalFormat** ppIDecimalFormat)
    {
        return _CObject_CreateInstance(ECLSID_CDecimalFormat, RGM_SAME_DOMAIN, Elastos::Text::EIID_IDecimalFormat, (PInterface*)ppIDecimalFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDecimalFormat, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDecimalFormat, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDecimalFormat = Elastos::Text::IDecimalFormat::Probe(__pNewObj);
        if (*__ppIDecimalFormat) (*__ppIDecimalFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDecimalFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,/* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDecimalFormat = Elastos::Text::IDecimalFormat::Probe(__pNewObj);
        if (*__ppIDecimalFormat) (*__ppIDecimalFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,
/* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIDecimalFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Text::IDecimalFormatSymbols * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDecimalFormat = Elastos::Text::IDecimalFormat::Probe(__pNewObj);
        if (*__ppIDecimalFormat) (*__ppIDecimalFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Text::IDecimalFormat** __ppIDecimalFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIDecimalFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CSimpleDateFormat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleDateFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleDateFormat, RGM_SAME_DOMAIN, 
                EIID_ICSimpleDateFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPattern(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDateFormatSymbols * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleDateFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleDateFormat, RGM_SAME_DOMAIN, 
                EIID_ICSimpleDateFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTempValue(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSimpleDateFormatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSimpleDateFormat, RGM_SAME_DOMAIN, 
                EIID_ICSimpleDateFormatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTempLocale(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::ISimpleDateFormat** ppISimpleDateFormat)
    {

        return _CObject_CreateInstance(ECLSID_CSimpleDateFormat, pRegime, Elastos::Text::EIID_ISimpleDateFormat, (IInterface**)ppISimpleDateFormat);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISimpleDateFormat);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Text::ISimpleDateFormat** ppISimpleDateFormat)
    {
        return _CObject_CreateInstance(ECLSID_CSimpleDateFormat, RGM_SAME_DOMAIN, Elastos::Text::EIID_ISimpleDateFormat, (PInterface*)ppISimpleDateFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSimpleDateFormat, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSimpleDateFormat, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleDateFormat = Elastos::Text::ISimpleDateFormat::Probe(__pNewObj);
        if (*__ppISimpleDateFormat) (*__ppISimpleDateFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISimpleDateFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDateFormatSymbols * pParam1,/* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleDateFormat = Elastos::Text::ISimpleDateFormat::Probe(__pNewObj);
        if (*__ppISimpleDateFormat) (*__ppISimpleDateFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Text::IDateFormatSymbols * pParam1,
/* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppISimpleDateFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Text::IDateFormatSymbols * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Text::IDateFormatSymbols * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISimpleDateFormat = Elastos::Text::ISimpleDateFormat::Probe(__pNewObj);
        if (*__ppISimpleDateFormat) (*__ppISimpleDateFormat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ Elastos::Text::ISimpleDateFormat** __ppISimpleDateFormat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppISimpleDateFormat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Libcore::ICU::ILocale * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Libcore::ICU::ILocale * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CCollatorHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::ICollatorHelper** ppICollatorHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCollatorHelper, pRegime, Elastos::Text::EIID_ICollatorHelper, (IInterface**)ppICollatorHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::ICollatorHelper** __ppICollatorHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICollatorHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::ICollatorHelper** ppICollatorHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCollatorHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_ICollatorHelper, (PInterface*)ppICollatorHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CCollationElementIterator
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::ICollationElementIteratorICU * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCollationElementIteratorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCollationElementIterator, RGM_SAME_DOMAIN, 
                EIID_ICCollationElementIteratorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIterator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ICollationElementIteratorICU * pParam0,/* [out] */ Elastos::Text::ICollationElementIterator** __ppICollationElementIterator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICollationElementIterator = Elastos::Text::ICollationElementIterator::Probe(__pNewObj);
        if (*__ppICollationElementIterator) (*__ppICollationElementIterator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ICollationElementIteratorICU * pParam0,
/* [out] */ Elastos::Text::ICollationElementIterator** __ppICollationElementIterator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICollationElementIterator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::ICollationElementIteratorICU * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::ICollationElementIteratorICU * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CCollationElementIteratorHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::ICollationElementIteratorHelper** ppICollationElementIteratorHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCollationElementIteratorHelper, pRegime, Elastos::Text::EIID_ICollationElementIteratorHelper, (IInterface**)ppICollationElementIteratorHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::ICollationElementIteratorHelper** __ppICollationElementIteratorHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICollationElementIteratorHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::ICollationElementIteratorHelper** ppICollationElementIteratorHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCollationElementIteratorHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_ICollationElementIteratorHelper, (PInterface*)ppICollationElementIteratorHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CRuleBasedCollator
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Libcore::ICU::IRuleBasedCollatorICU * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRuleBasedCollatorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRuleBasedCollator, RGM_SAME_DOMAIN, 
                EIID_ICRuleBasedCollatorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithWrapper(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRuleBasedCollatorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRuleBasedCollator, RGM_SAME_DOMAIN, 
                EIID_ICRuleBasedCollatorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRules(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::IRuleBasedCollatorICU * pParam0,/* [out] */ Elastos::Text::IRuleBasedCollator** __ppIRuleBasedCollator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRuleBasedCollator = Elastos::Text::IRuleBasedCollator::Probe(__pNewObj);
        if (*__ppIRuleBasedCollator) (*__ppIRuleBasedCollator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::IRuleBasedCollatorICU * pParam0,
/* [out] */ Elastos::Text::IRuleBasedCollator** __ppIRuleBasedCollator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRuleBasedCollator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Libcore::ICU::IRuleBasedCollatorICU * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Libcore::ICU::IRuleBasedCollatorICU * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Text::IRuleBasedCollator** __ppIRuleBasedCollator)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRuleBasedCollator = Elastos::Text::IRuleBasedCollator::Probe(__pNewObj);
        if (*__ppIRuleBasedCollator) (*__ppIRuleBasedCollator)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Text::IRuleBasedCollator** __ppIRuleBasedCollator)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRuleBasedCollator);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CNormalizerHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::INormalizerHelper** ppINormalizerHelper)
    {

        return _CObject_CreateInstance(ECLSID_CNormalizerHelper, pRegime, Elastos::Text::EIID_INormalizerHelper, (IInterface**)ppINormalizerHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::INormalizerHelper** __ppINormalizerHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppINormalizerHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::INormalizerHelper** ppINormalizerHelper)
    {
        return _CObject_CreateInstance(ECLSID_CNormalizerHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_INormalizerHelper, (PInterface*)ppINormalizerHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CBidi
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBidiClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBidi, RGM_SAME_DOMAIN, 
                EIID_ICBidiClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParagraph(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBidiClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBidi, RGM_SAME_DOMAIN, 
                EIID_ICBidiClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTextTextStartEmbeddingsEmbStartParagraphLengthFlags(pParam0, Param1, pParam2, Param3, Param4, Param5, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBidiClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBidi, RGM_SAME_DOMAIN, 
                EIID_ICBidiClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParagraphFlags(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBidiClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBidi, RGM_SAME_DOMAIN, 
                EIID_ICBidiClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPBidi(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBidi = Elastos::Text::IBidi::Probe(__pNewObj);
        if (*__ppIBidi) (*__ppIBidi)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBidi);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Text::IAttributedCharacterIterator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBidi = Elastos::Text::IBidi::Probe(__pNewObj);
        if (*__ppIBidi) (*__ppIBidi)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, Param4, Param5, __ppIBidi);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, pParam2, Param3, Param4, Param5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, pParam2, Param3, Param4, Param5, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBidi = Elastos::Text::IBidi::Probe(__pNewObj);
        if (*__ppIBidi) (*__ppIBidi)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIBidi);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBidi = Elastos::Text::IBidi::Probe(__pNewObj);
        if (*__ppIBidi) (*__ppIBidi)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Text::IBidi** __ppIBidi)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBidi);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Text {
class CBidiHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Text::IBidiHelper** ppIBidiHelper)
    {

        return _CObject_CreateInstance(ECLSID_CBidiHelper, pRegime, Elastos::Text::EIID_IBidiHelper, (IInterface**)ppIBidiHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Text::IBidiHelper** __ppIBidiHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBidiHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Text::IBidiHelper** ppIBidiHelper)
    {
        return _CObject_CreateInstance(ECLSID_CBidiHelper, RGM_SAME_DOMAIN, Elastos::Text::EIID_IBidiHelper, (PInterface*)ppIBidiHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CAccessController
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::IAccessController** ppIAccessController)
    {

        return _CObject_CreateInstance(ECLSID_CAccessController, pRegime, Elastos::Security::EIID_IAccessController, (IInterface**)ppIAccessController);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::IAccessController** __ppIAccessController)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIAccessController);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::IAccessController** ppIAccessController)
    {
        return _CObject_CreateInstance(ECLSID_CAccessController, RGM_SAME_DOMAIN, Elastos::Security::EIID_IAccessController, (PInterface*)ppIAccessController);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CAccessControlContext
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::IAccessControlContext * pParam0,/* [in] */ Elastos::Security::IDomainCombiner * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAccessControlContextClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAccessControlContext, RGM_SAME_DOMAIN, 
                EIID_ICAccessControlContextClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAccCombiner(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::IProtectionDomain *> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAccessControlContextClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAccessControlContext, RGM_SAME_DOMAIN, 
                EIID_ICAccessControlContextClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithContext(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IAccessControlContext * pParam0,/* [in] */ Elastos::Security::IDomainCombiner * pParam1,/* [out] */ Elastos::Security::IAccessControlContext** __ppIAccessControlContext)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAccessControlContext = Elastos::Security::IAccessControlContext::Probe(__pNewObj);
        if (*__ppIAccessControlContext) (*__ppIAccessControlContext)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IAccessControlContext * pParam0,
/* [in] */ Elastos::Security::IDomainCombiner * pParam1,
/* [out] */ Elastos::Security::IAccessControlContext** __ppIAccessControlContext)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIAccessControlContext);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IAccessControlContext * pParam0,/* [in] */ Elastos::Security::IDomainCombiner * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IAccessControlContext * pParam0,
/* [in] */ Elastos::Security::IDomainCombiner * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::IProtectionDomain *> * pParam0,/* [out] */ Elastos::Security::IAccessControlContext** __ppIAccessControlContext)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAccessControlContext = Elastos::Security::IAccessControlContext::Probe(__pNewObj);
        if (*__ppIAccessControlContext) (*__ppIAccessControlContext)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<Elastos::Security::IProtectionDomain *> * pParam0,
/* [out] */ Elastos::Security::IAccessControlContext** __ppIAccessControlContext)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAccessControlContext);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::IProtectionDomain *> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<Elastos::Security::IProtectionDomain *> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CCodeSigner
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::ITimestamp * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCodeSignerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCodeSigner, RGM_SAME_DOMAIN, 
                EIID_ICCodeSignerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSignerCertPathTimestamp(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::ICodeSigner** ppICodeSigner)
    {

        return _CObject_CreateInstance(ECLSID_CCodeSigner, pRegime, Elastos::Security::EIID_ICodeSigner, (IInterface**)ppICodeSigner);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::ICodeSigner** __ppICodeSigner)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICodeSigner);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::ICodeSigner** ppICodeSigner)
    {
        return _CObject_CreateInstance(ECLSID_CCodeSigner, RGM_SAME_DOMAIN, Elastos::Security::EIID_ICodeSigner, (PInterface*)ppICodeSigner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CCodeSigner, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CCodeSigner, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCodeSigner, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCodeSigner, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::ITimestamp * pParam1,/* [out] */ Elastos::Security::ICodeSigner** __ppICodeSigner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICodeSigner = Elastos::Security::ICodeSigner::Probe(__pNewObj);
        if (*__ppICodeSigner) (*__ppICodeSigner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,
/* [in] */ Elastos::Security::ITimestamp * pParam1,
/* [out] */ Elastos::Security::ICodeSigner** __ppICodeSigner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICodeSigner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::ITimestamp * pParam1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,
/* [in] */ Elastos::Security::ITimestamp * pParam1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::ITimestamp * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,
/* [in] */ Elastos::Security::ITimestamp * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStorePasswordProtection
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICKeyStorePasswordProtectionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CKeyStorePasswordProtection, RGM_SAME_DOMAIN, 
                EIID_ICKeyStorePasswordProtectionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPassword(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ Elastos::Security::IKeyStorePasswordProtection** __ppIKeyStorePasswordProtection)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIKeyStorePasswordProtection = Elastos::Security::IKeyStorePasswordProtection::Probe(__pNewObj);
        if (*__ppIKeyStorePasswordProtection) (*__ppIKeyStorePasswordProtection)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ Elastos::Security::IKeyStorePasswordProtection** __ppIKeyStorePasswordProtection)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIKeyStorePasswordProtection);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ Elastos::Security::IKeyStoreProtectionParameter** __ppIKeyStoreProtectionParameter)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIKeyStoreProtectionParameter = Elastos::Security::IKeyStoreProtectionParameter::Probe(__pNewObj);
        if (*__ppIKeyStoreProtectionParameter) (*__ppIKeyStoreProtectionParameter)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ Elastos::Security::IKeyStoreProtectionParameter** __ppIKeyStoreProtectionParameter)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIKeyStoreProtectionParameter);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ Elastosx::Security::Auth::IDestroyable** __ppIDestroyable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDestroyable = Elastosx::Security::Auth::IDestroyable::Probe(__pNewObj);
        if (*__ppIDestroyable) (*__ppIDestroyable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ Elastosx::Security::Auth::IDestroyable** __ppIDestroyable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDestroyable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Char32> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStoreCallbackHandlerProtection
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastosx::Security::Auth::Callback::ICallbackHandler * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICKeyStoreCallbackHandlerProtectionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CKeyStoreCallbackHandlerProtection, RGM_SAME_DOMAIN, 
                EIID_ICKeyStoreCallbackHandlerProtectionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithHandler(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Security::Auth::Callback::ICallbackHandler * pParam0,/* [out] */ Elastos::Security::IKeyStoreCallbackHandlerProtection** __ppIKeyStoreCallbackHandlerProtection)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIKeyStoreCallbackHandlerProtection = Elastos::Security::IKeyStoreCallbackHandlerProtection::Probe(__pNewObj);
        if (*__ppIKeyStoreCallbackHandlerProtection) (*__ppIKeyStoreCallbackHandlerProtection)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Security::Auth::Callback::ICallbackHandler * pParam0,
/* [out] */ Elastos::Security::IKeyStoreCallbackHandlerProtection** __ppIKeyStoreCallbackHandlerProtection)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIKeyStoreCallbackHandlerProtection);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Security::Auth::Callback::ICallbackHandler * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Security::Auth::Callback::ICallbackHandler * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStorePrivateKeyEntry
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::IPrivateKey * pParam0,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Cert::ICertificate *> * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICKeyStorePrivateKeyEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CKeyStorePrivateKeyEntry, RGM_SAME_DOMAIN, 
                EIID_ICKeyStorePrivateKeyEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPrivateKeyChain(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IPrivateKey * pParam0,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Cert::ICertificate *> * pParam1,/* [out] */ Elastos::Security::IKeyStorePrivateKeyEntry** __ppIKeyStorePrivateKeyEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIKeyStorePrivateKeyEntry = Elastos::Security::IKeyStorePrivateKeyEntry::Probe(__pNewObj);
        if (*__ppIKeyStorePrivateKeyEntry) (*__ppIKeyStorePrivateKeyEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IPrivateKey * pParam0,
/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Cert::ICertificate *> * pParam1,
/* [out] */ Elastos::Security::IKeyStorePrivateKeyEntry** __ppIKeyStorePrivateKeyEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIKeyStorePrivateKeyEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IPrivateKey * pParam0,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Cert::ICertificate *> * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IPrivateKey * pParam0,
/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Cert::ICertificate *> * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStoreSecretKeyEntry
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastosx::Crypto::ISecretKey * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICKeyStoreSecretKeyEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CKeyStoreSecretKeyEntry, RGM_SAME_DOMAIN, 
                EIID_ICKeyStoreSecretKeyEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSecretKey(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Crypto::ISecretKey * pParam0,/* [out] */ Elastos::Security::IKeyStoreSecretKeyEntry** __ppIKeyStoreSecretKeyEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIKeyStoreSecretKeyEntry = Elastos::Security::IKeyStoreSecretKeyEntry::Probe(__pNewObj);
        if (*__ppIKeyStoreSecretKeyEntry) (*__ppIKeyStoreSecretKeyEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Crypto::ISecretKey * pParam0,
/* [out] */ Elastos::Security::IKeyStoreSecretKeyEntry** __ppIKeyStoreSecretKeyEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIKeyStoreSecretKeyEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Crypto::ISecretKey * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Crypto::ISecretKey * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStoreTrustedCertificateEntry
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Cert::ICertificate * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICKeyStoreTrustedCertificateEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CKeyStoreTrustedCertificateEntry, RGM_SAME_DOMAIN, 
                EIID_ICKeyStoreTrustedCertificateEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTrustCertificate(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertificate * pParam0,/* [out] */ Elastos::Security::IKeyStoreTrustedCertificateEntry** __ppIKeyStoreTrustedCertificateEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIKeyStoreTrustedCertificateEntry = Elastos::Security::IKeyStoreTrustedCertificateEntry::Probe(__pNewObj);
        if (*__ppIKeyStoreTrustedCertificateEntry) (*__ppIKeyStoreTrustedCertificateEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertificate * pParam0,
/* [out] */ Elastos::Security::IKeyStoreTrustedCertificateEntry** __ppIKeyStoreTrustedCertificateEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIKeyStoreTrustedCertificateEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertificate * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertificate * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStoreHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::IKeyStoreHelper** ppIKeyStoreHelper)
    {

        return _CObject_CreateInstance(ECLSID_CKeyStoreHelper, pRegime, Elastos::Security::EIID_IKeyStoreHelper, (IInterface**)ppIKeyStoreHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::IKeyStoreHelper** __ppIKeyStoreHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIKeyStoreHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::IKeyStoreHelper** ppIKeyStoreHelper)
    {
        return _CObject_CreateInstance(ECLSID_CKeyStoreHelper, RGM_SAME_DOMAIN, Elastos::Security::EIID_IKeyStoreHelper, (PInterface*)ppIKeyStoreHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CMessageDigestHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::IMessageDigestHelper** ppIMessageDigestHelper)
    {

        return _CObject_CreateInstance(ECLSID_CMessageDigestHelper, pRegime, Elastos::Security::EIID_IMessageDigestHelper, (IInterface**)ppIMessageDigestHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::IMessageDigestHelper** __ppIMessageDigestHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIMessageDigestHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::IMessageDigestHelper** ppIMessageDigestHelper)
    {
        return _CObject_CreateInstance(ECLSID_CMessageDigestHelper, RGM_SAME_DOMAIN, Elastos::Security::EIID_IMessageDigestHelper, (PInterface*)ppIMessageDigestHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CKeyStoreBuilderHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::IKeyStoreBuilderHelper** ppIKeyStoreBuilderHelper)
    {

        return _CObject_CreateInstance(ECLSID_CKeyStoreBuilderHelper, pRegime, Elastos::Security::EIID_IKeyStoreBuilderHelper, (IInterface**)ppIKeyStoreBuilderHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::IKeyStoreBuilderHelper** __ppIKeyStoreBuilderHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIKeyStoreBuilderHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::IKeyStoreBuilderHelper** ppIKeyStoreBuilderHelper)
    {
        return _CObject_CreateInstance(ECLSID_CKeyStoreBuilderHelper, RGM_SAME_DOMAIN, Elastos::Security::EIID_IKeyStoreBuilderHelper, (PInterface*)ppIKeyStoreBuilderHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CCertPathBuilderHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ICertPathBuilderHelper** ppICertPathBuilderHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCertPathBuilderHelper, pRegime, Elastos::Security::Cert::EIID_ICertPathBuilderHelper, (IInterface**)ppICertPathBuilderHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ICertPathBuilderHelper** __ppICertPathBuilderHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICertPathBuilderHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::Cert::ICertPathBuilderHelper** ppICertPathBuilderHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCertPathBuilderHelper, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ICertPathBuilderHelper, (PInterface*)ppICertPathBuilderHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CCertPathValidatorHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ICertPathValidatorHelper** ppICertPathValidatorHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCertPathValidatorHelper, pRegime, Elastos::Security::Cert::EIID_ICertPathValidatorHelper, (IInterface**)ppICertPathValidatorHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ICertPathValidatorHelper** __ppICertPathValidatorHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICertPathValidatorHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::Cert::ICertPathValidatorHelper** ppICertPathValidatorHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCertPathValidatorHelper, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ICertPathValidatorHelper, (PInterface*)ppICertPathValidatorHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CCertStoreHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ICertStoreHelper** ppICertStoreHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCertStoreHelper, pRegime, Elastos::Security::Cert::EIID_ICertStoreHelper, (IInterface**)ppICertStoreHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ICertStoreHelper** __ppICertStoreHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICertStoreHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::Cert::ICertStoreHelper** ppICertStoreHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCertStoreHelper, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ICertStoreHelper, (PInterface*)ppICertStoreHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CCertificateFactory
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Cert::ICertificateFactorySpi * pParam0,/* [in] */ Elastos::Security::IProvider * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCertificateFactoryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCertificateFactory, RGM_SAME_DOMAIN, 
                EIID_ICCertificateFactoryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCertFacSpiProviderType(pParam0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ICertificateFactory** ppICertificateFactory)
    {

        return _CObject_CreateInstance(ECLSID_CCertificateFactory, pRegime, Elastos::Security::Cert::EIID_ICertificateFactory, (IInterface**)ppICertificateFactory);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ICertificateFactory** __ppICertificateFactory)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICertificateFactory);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::ICertificateFactory** ppICertificateFactory)
    {
        return _CObject_CreateInstance(ECLSID_CCertificateFactory, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ICertificateFactory, (PInterface*)ppICertificateFactory);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCertificateFactory, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCertificateFactory, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertificateFactorySpi * pParam0,/* [in] */ Elastos::Security::IProvider * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Security::Cert::ICertificateFactory** __ppICertificateFactory)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICertificateFactory = Elastos::Security::Cert::ICertificateFactory::Probe(__pNewObj);
        if (*__ppICertificateFactory) (*__ppICertificateFactory)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertificateFactorySpi * pParam0,
/* [in] */ Elastos::Security::IProvider * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Security::Cert::ICertificateFactory** __ppICertificateFactory)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppICertificateFactory);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertificateFactorySpi * pParam0,/* [in] */ Elastos::Security::IProvider * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertificateFactorySpi * pParam0,
/* [in] */ Elastos::Security::IProvider * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CCertificateFactoryHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ICertificateFactoryHelper** ppICertificateFactoryHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCertificateFactoryHelper, pRegime, Elastos::Security::Cert::EIID_ICertificateFactoryHelper, (IInterface**)ppICertificateFactoryHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ICertificateFactoryHelper** __ppICertificateFactoryHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICertificateFactoryHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::Cert::ICertificateFactoryHelper** ppICertificateFactoryHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCertificateFactoryHelper, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ICertificateFactoryHelper, (PInterface*)ppICertificateFactoryHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CCollectionCertStoreParameters
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCollectionCertStoreParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCollectionCertStoreParameters, RGM_SAME_DOMAIN, 
                EIID_ICCollectionCertStoreParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ICollectionCertStoreParameters** ppICollectionCertStoreParameters)
    {

        return _CObject_CreateInstance(ECLSID_CCollectionCertStoreParameters, pRegime, Elastos::Security::Cert::EIID_ICollectionCertStoreParameters, (IInterface**)ppICollectionCertStoreParameters);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ICollectionCertStoreParameters** __ppICollectionCertStoreParameters)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICollectionCertStoreParameters);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::ICollectionCertStoreParameters** ppICollectionCertStoreParameters)
    {
        return _CObject_CreateInstance(ECLSID_CCollectionCertStoreParameters, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ICollectionCertStoreParameters, (PInterface*)ppICollectionCertStoreParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCollectionCertStoreParameters, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCollectionCertStoreParameters, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Security::Cert::ICollectionCertStoreParameters** __ppICollectionCertStoreParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICollectionCertStoreParameters = Elastos::Security::Cert::ICollectionCertStoreParameters::Probe(__pNewObj);
        if (*__ppICollectionCertStoreParameters) (*__ppICollectionCertStoreParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Security::Cert::ICollectionCertStoreParameters** __ppICollectionCertStoreParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICollectionCertStoreParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CLDAPCertStoreParameters
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLDAPCertStoreParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLDAPCertStoreParameters, RGM_SAME_DOMAIN, 
                EIID_ICLDAPCertStoreParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithServerNamePort(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLDAPCertStoreParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLDAPCertStoreParameters, RGM_SAME_DOMAIN, 
                EIID_ICLDAPCertStoreParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithServerName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** ppILDAPCertStoreParameters)
    {

        return _CObject_CreateInstance(ECLSID_CLDAPCertStoreParameters, pRegime, Elastos::Security::Cert::EIID_ILDAPCertStoreParameters, (IInterface**)ppILDAPCertStoreParameters);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** __ppILDAPCertStoreParameters)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppILDAPCertStoreParameters);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** ppILDAPCertStoreParameters)
    {
        return _CObject_CreateInstance(ECLSID_CLDAPCertStoreParameters, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_ILDAPCertStoreParameters, (PInterface*)ppILDAPCertStoreParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLDAPCertStoreParameters, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLDAPCertStoreParameters, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** __ppILDAPCertStoreParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILDAPCertStoreParameters = Elastos::Security::Cert::ILDAPCertStoreParameters::Probe(__pNewObj);
        if (*__ppILDAPCertStoreParameters) (*__ppILDAPCertStoreParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** __ppILDAPCertStoreParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppILDAPCertStoreParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** __ppILDAPCertStoreParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppILDAPCertStoreParameters = Elastos::Security::Cert::ILDAPCertStoreParameters::Probe(__pNewObj);
        if (*__ppILDAPCertStoreParameters) (*__ppILDAPCertStoreParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Security::Cert::ILDAPCertStoreParameters** __ppILDAPCertStoreParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppILDAPCertStoreParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CPKIXBuilderParameters
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISet * pParam0,/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKIXBuilderParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKIXBuilderParameters, RGM_SAME_DOMAIN, 
                EIID_ICPKIXBuilderParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTrustAnchorsTargetConstraints(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::IKeyStore * pParam0,/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKIXBuilderParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKIXBuilderParameters, RGM_SAME_DOMAIN, 
                EIID_ICPKIXBuilderParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithKeyStoreTargetConstraints(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** ppIPKIXBuilderParameters)
    {

        return _CObject_CreateInstance(ECLSID_CPKIXBuilderParameters, pRegime, Elastos::Security::Cert::EIID_IPKIXBuilderParameters, (IInterface**)ppIPKIXBuilderParameters);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** __ppIPKIXBuilderParameters)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPKIXBuilderParameters);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** ppIPKIXBuilderParameters)
    {
        return _CObject_CreateInstance(ECLSID_CPKIXBuilderParameters, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_IPKIXBuilderParameters, (PInterface*)ppIPKIXBuilderParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPKIXBuilderParameters, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPKIXBuilderParameters, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISet * pParam0,/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,/* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** __ppIPKIXBuilderParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKIXBuilderParameters = Elastos::Security::Cert::IPKIXBuilderParameters::Probe(__pNewObj);
        if (*__ppIPKIXBuilderParameters) (*__ppIPKIXBuilderParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISet * pParam0,
/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,
/* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** __ppIPKIXBuilderParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIPKIXBuilderParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISet * pParam0,/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISet * pParam0,
/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IKeyStore * pParam0,/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,/* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** __ppIPKIXBuilderParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKIXBuilderParameters = Elastos::Security::Cert::IPKIXBuilderParameters::Probe(__pNewObj);
        if (*__ppIPKIXBuilderParameters) (*__ppIPKIXBuilderParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IKeyStore * pParam0,
/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,
/* [out] */ Elastos::Security::Cert::IPKIXBuilderParameters** __ppIPKIXBuilderParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIPKIXBuilderParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IKeyStore * pParam0,/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IKeyStore * pParam0,
/* [in] */ Elastos::Security::Cert::ICertSelector * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CPKIXCertPathBuilderResult
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam1,/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam2,/* [in] */ Elastos::Security::IPublicKey * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKIXCertPathBuilderResultClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKIXCertPathBuilderResult, RGM_SAME_DOMAIN, 
                EIID_ICPKIXCertPathBuilderResultClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCertPathTrustAnchorPolicyTreeSubjectPublicKey(pParam0, pParam1, pParam2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam1,/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam2,/* [in] */ Elastos::Security::IPublicKey * pParam3,/* [out] */ Elastos::Security::Cert::IPKIXCertPathBuilderResult** __ppIPKIXCertPathBuilderResult)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKIXCertPathBuilderResult = Elastos::Security::Cert::IPKIXCertPathBuilderResult::Probe(__pNewObj);
        if (*__ppIPKIXCertPathBuilderResult) (*__ppIPKIXCertPathBuilderResult)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,
/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam1,
/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam2,
/* [in] */ Elastos::Security::IPublicKey * pParam3,
/* [out] */ Elastos::Security::Cert::IPKIXCertPathBuilderResult** __ppIPKIXCertPathBuilderResult)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIPKIXCertPathBuilderResult);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam1,/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam2,/* [in] */ Elastos::Security::IPublicKey * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ICertPath * pParam0,
/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam1,
/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam2,
/* [in] */ Elastos::Security::IPublicKey * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CPKIXCertPathValidatorResult
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam0,/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam1,/* [in] */ Elastos::Security::IPublicKey * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKIXCertPathValidatorResultClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKIXCertPathValidatorResult, RGM_SAME_DOMAIN, 
                EIID_ICPKIXCertPathValidatorResultClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTrustAnchorPolicyTreeSubjectPublicKey(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam0,/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam1,/* [in] */ Elastos::Security::IPublicKey * pParam2,/* [out] */ Elastos::Security::Cert::IPKIXCertPathValidatorResult** __ppIPKIXCertPathValidatorResult)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKIXCertPathValidatorResult = Elastos::Security::Cert::IPKIXCertPathValidatorResult::Probe(__pNewObj);
        if (*__ppIPKIXCertPathValidatorResult) (*__ppIPKIXCertPathValidatorResult)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam0,
/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam1,
/* [in] */ Elastos::Security::IPublicKey * pParam2,
/* [out] */ Elastos::Security::Cert::IPKIXCertPathValidatorResult** __ppIPKIXCertPathValidatorResult)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIPKIXCertPathValidatorResult);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam0,/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam1,/* [in] */ Elastos::Security::IPublicKey * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::ITrustAnchor * pParam0,
/* [in] */ Elastos::Security::Cert::IPolicyNode * pParam1,
/* [in] */ Elastos::Security::IPublicKey * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CPKIXParameters
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISet * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKIXParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKIXParameters, RGM_SAME_DOMAIN, 
                EIID_ICPKIXParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTrustAnchors(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::IKeyStore * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKIXParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKIXParameters, RGM_SAME_DOMAIN, 
                EIID_ICPKIXParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithKeyStore(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::IPKIXParameters** ppIPKIXParameters)
    {

        return _CObject_CreateInstance(ECLSID_CPKIXParameters, pRegime, Elastos::Security::Cert::EIID_IPKIXParameters, (IInterface**)ppIPKIXParameters);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::IPKIXParameters** __ppIPKIXParameters)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPKIXParameters);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::IPKIXParameters** ppIPKIXParameters)
    {
        return _CObject_CreateInstance(ECLSID_CPKIXParameters, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_IPKIXParameters, (PInterface*)ppIPKIXParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPKIXParameters, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPKIXParameters, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISet * pParam0,/* [out] */ Elastos::Security::Cert::IPKIXParameters** __ppIPKIXParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKIXParameters = Elastos::Security::Cert::IPKIXParameters::Probe(__pNewObj);
        if (*__ppIPKIXParameters) (*__ppIPKIXParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISet * pParam0,
/* [out] */ Elastos::Security::Cert::IPKIXParameters** __ppIPKIXParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPKIXParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISet * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISet * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IKeyStore * pParam0,/* [out] */ Elastos::Security::Cert::IPKIXParameters** __ppIPKIXParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKIXParameters = Elastos::Security::Cert::IPKIXParameters::Probe(__pNewObj);
        if (*__ppIPKIXParameters) (*__ppIPKIXParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IKeyStore * pParam0,
/* [out] */ Elastos::Security::Cert::IPKIXParameters** __ppIPKIXParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPKIXParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::IKeyStore * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::IKeyStore * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CPolicyQualifierInfo
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPolicyQualifierInfoClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPolicyQualifierInfo, RGM_SAME_DOMAIN, 
                EIID_ICPolicyQualifierInfoClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithEncoded(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ Elastos::Security::Cert::IPolicyQualifierInfo** __ppIPolicyQualifierInfo)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPolicyQualifierInfo = Elastos::Security::Cert::IPolicyQualifierInfo::Probe(__pNewObj);
        if (*__ppIPolicyQualifierInfo) (*__ppIPolicyQualifierInfo)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ Elastos::Security::Cert::IPolicyQualifierInfo** __ppIPolicyQualifierInfo)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPolicyQualifierInfo);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CTrustAnchor
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Cert::IX509Certificate * pParam0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTrustAnchorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTrustAnchor, RGM_SAME_DOMAIN, 
                EIID_ICTrustAnchorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTrustedCertNameConstraints(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Security::IPublicKey * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTrustAnchorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTrustAnchor, RGM_SAME_DOMAIN, 
                EIID_ICTrustAnchorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCaNameCaPublicKeyNameConstraints(Param0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastosx::Security::Auth::X500::IX500Principal * pParam0,/* [in] */ Elastos::Security::IPublicKey * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTrustAnchorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTrustAnchor, RGM_SAME_DOMAIN, 
                EIID_ICTrustAnchorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCaPrincipalCaPublicKeyNameConstraints(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::IX509Certificate * pParam0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,/* [out] */ Elastos::Security::Cert::ITrustAnchor** __ppITrustAnchor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITrustAnchor = Elastos::Security::Cert::ITrustAnchor::Probe(__pNewObj);
        if (*__ppITrustAnchor) (*__ppITrustAnchor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::IX509Certificate * pParam0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,
/* [out] */ Elastos::Security::Cert::ITrustAnchor** __ppITrustAnchor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppITrustAnchor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Cert::IX509Certificate * pParam0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Cert::IX509Certificate * pParam0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Security::IPublicKey * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [out] */ Elastos::Security::Cert::ITrustAnchor** __ppITrustAnchor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITrustAnchor = Elastos::Security::Cert::ITrustAnchor::Probe(__pNewObj);
        if (*__ppITrustAnchor) (*__ppITrustAnchor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Security::IPublicKey * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [out] */ Elastos::Security::Cert::ITrustAnchor** __ppITrustAnchor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, __ppITrustAnchor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Security::IPublicKey * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Security::IPublicKey * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Security::Auth::X500::IX500Principal * pParam0,/* [in] */ Elastos::Security::IPublicKey * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [out] */ Elastos::Security::Cert::ITrustAnchor** __ppITrustAnchor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITrustAnchor = Elastos::Security::Cert::ITrustAnchor::Probe(__pNewObj);
        if (*__ppITrustAnchor) (*__ppITrustAnchor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Security::Auth::X500::IX500Principal * pParam0,
/* [in] */ Elastos::Security::IPublicKey * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [out] */ Elastos::Security::Cert::ITrustAnchor** __ppITrustAnchor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppITrustAnchor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Security::Auth::X500::IX500Principal * pParam0,/* [in] */ Elastos::Security::IPublicKey * pParam1,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Security::Auth::X500::IX500Principal * pParam0,
/* [in] */ Elastos::Security::IPublicKey * pParam1,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CX509CRLSelector
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::IX509CRLSelector** ppIX509CRLSelector)
    {

        return _CObject_CreateInstance(ECLSID_CX509CRLSelector, pRegime, Elastos::Security::Cert::EIID_IX509CRLSelector, (IInterface**)ppIX509CRLSelector);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::IX509CRLSelector** __ppIX509CRLSelector)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIX509CRLSelector);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::IX509CRLSelector** ppIX509CRLSelector)
    {
        return _CObject_CreateInstance(ECLSID_CX509CRLSelector, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_IX509CRLSelector, (PInterface*)ppIX509CRLSelector);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CX509CRLSelector, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CX509CRLSelector, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Cert {
class CX509CertSelector
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Cert::IX509CertSelector** ppIX509CertSelector)
    {

        return _CObject_CreateInstance(ECLSID_CX509CertSelector, pRegime, Elastos::Security::Cert::EIID_IX509CertSelector, (IInterface**)ppIX509CertSelector);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Cert::IX509CertSelector** __ppIX509CertSelector)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIX509CertSelector);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Cert::IX509CertSelector** ppIX509CertSelector)
    {
        return _CObject_CreateInstance(ECLSID_CX509CertSelector, RGM_SAME_DOMAIN, Elastos::Security::Cert::EIID_IX509CertSelector, (PInterface*)ppIX509CertSelector);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CX509CertSelector, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CX509CertSelector, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CDSAParameterSpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDSAParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDSAParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICDSAParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPQG(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ Elastos::Security::Spec::IAlgorithmParameterSpec** __ppIAlgorithmParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAlgorithmParameterSpec = Elastos::Security::Spec::IAlgorithmParameterSpec::Probe(__pNewObj);
        if (*__ppIAlgorithmParameterSpec) (*__ppIAlgorithmParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ Elastos::Security::Spec::IAlgorithmParameterSpec** __ppIAlgorithmParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIAlgorithmParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ Elastos::Security::Interfaces::IDSAParams** __ppIDSAParams)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDSAParams = Elastos::Security::Interfaces::IDSAParams::Probe(__pNewObj);
        if (*__ppIDSAParams) (*__ppIDSAParams)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ Elastos::Security::Interfaces::IDSAParams** __ppIDSAParams)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIDSAParams);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CDSAPrivateKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDSAPrivateKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDSAPrivateKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICDSAPrivateKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithXPQG(pParam0, pParam1, pParam2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [out] */ Elastos::Security::Spec::IDSAPrivateKeySpec** __ppIDSAPrivateKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDSAPrivateKeySpec = Elastos::Security::Spec::IDSAPrivateKeySpec::Probe(__pNewObj);
        if (*__ppIDSAPrivateKeySpec) (*__ppIDSAPrivateKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [out] */ Elastos::Security::Spec::IDSAPrivateKeySpec** __ppIDSAPrivateKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIDSAPrivateKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CDSAPublicKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDSAPublicKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDSAPublicKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICDSAPublicKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithYPQG(pParam0, pParam1, pParam2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [out] */ Elastos::Security::Spec::IDSAPublicKeySpec** __ppIDSAPublicKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDSAPublicKeySpec = Elastos::Security::Spec::IDSAPublicKeySpec::Probe(__pNewObj);
        if (*__ppIDSAPublicKeySpec) (*__ppIDSAPublicKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [out] */ Elastos::Security::Spec::IDSAPublicKeySpec** __ppIDSAPublicKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIDSAPublicKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECFieldF2m
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECFieldF2mClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECFieldF2m, RGM_SAME_DOMAIN, 
                EIID_ICECFieldF2mClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithM(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECFieldF2mClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECFieldF2m, RGM_SAME_DOMAIN, 
                EIID_ICECFieldF2mClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMRp(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECFieldF2mClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECFieldF2m, RGM_SAME_DOMAIN, 
                EIID_ICECFieldF2mClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMKs(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Security::Spec::IECFieldF2m** __ppIECFieldF2m)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECFieldF2m = Elastos::Security::Spec::IECFieldF2m::Probe(__pNewObj);
        if (*__ppIECFieldF2m) (*__ppIECFieldF2m)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Security::Spec::IECFieldF2m** __ppIECFieldF2m)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIECFieldF2m);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ Elastos::Security::Spec::IECFieldF2m** __ppIECFieldF2m)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECFieldF2m = Elastos::Security::Spec::IECFieldF2m::Probe(__pNewObj);
        if (*__ppIECFieldF2m) (*__ppIECFieldF2m)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ Elastos::Security::Spec::IECFieldF2m** __ppIECFieldF2m)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIECFieldF2m);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [out] */ Elastos::Security::Spec::IECFieldF2m** __ppIECFieldF2m)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECFieldF2m = Elastos::Security::Spec::IECFieldF2m::Probe(__pNewObj);
        if (*__ppIECFieldF2m) (*__ppIECFieldF2m)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,
/* [out] */ Elastos::Security::Spec::IECFieldF2m** __ppIECFieldF2m)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIECFieldF2m);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Int32> * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECFieldFp
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECFieldFpClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECFieldFp, RGM_SAME_DOMAIN, 
                EIID_ICECFieldFpClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithP(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [out] */ Elastos::Security::Spec::IECFieldFp** __ppIECFieldFp)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECFieldFp = Elastos::Security::Spec::IECFieldFp::Probe(__pNewObj);
        if (*__ppIECFieldFp) (*__ppIECFieldFp)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [out] */ Elastos::Security::Spec::IECFieldFp** __ppIECFieldFp)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIECFieldFp);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECGenParameterSpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECGenParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECGenParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICECGenParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Security::Spec::IECGenParameterSpec** __ppIECGenParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECGenParameterSpec = Elastos::Security::Spec::IECGenParameterSpec::Probe(__pNewObj);
        if (*__ppIECGenParameterSpec) (*__ppIECGenParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Security::Spec::IECGenParameterSpec** __ppIECGenParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIECGenParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECParameterSpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Spec::IEllipticCurve * pParam0,/* [in] */ Elastos::Security::Spec::IECPoint * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICECParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCurveGeneratorOrderCofactor(pParam0, pParam1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IEllipticCurve * pParam0,/* [in] */ Elastos::Security::Spec::IECPoint * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ Elastos::Security::Spec::IECParameterSpec** __ppIECParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECParameterSpec = Elastos::Security::Spec::IECParameterSpec::Probe(__pNewObj);
        if (*__ppIECParameterSpec) (*__ppIECParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IEllipticCurve * pParam0,
/* [in] */ Elastos::Security::Spec::IECPoint * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ Elastos::Security::Spec::IECParameterSpec** __ppIECParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, Param3, __ppIECParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IEllipticCurve * pParam0,/* [in] */ Elastos::Security::Spec::IECPoint * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IEllipticCurve * pParam0,
/* [in] */ Elastos::Security::Spec::IECPoint * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, Param3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECPoint
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECPointClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECPoint, RGM_SAME_DOMAIN, 
                EIID_ICECPointClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAffineXAffineY(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::Spec::IECPoint** ppIECPoint)
    {

        return _CObject_CreateInstance(ECLSID_CECPoint, pRegime, Elastos::Security::Spec::EIID_IECPoint, (IInterface**)ppIECPoint);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::Spec::IECPoint** __ppIECPoint)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIECPoint);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Security::Spec::IECPoint** ppIECPoint)
    {
        return _CObject_CreateInstance(ECLSID_CECPoint, RGM_SAME_DOMAIN, Elastos::Security::Spec::EIID_IECPoint, (PInterface*)ppIECPoint);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CECPoint, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CECPoint, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ Elastos::Security::Spec::IECPoint** __ppIECPoint)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECPoint = Elastos::Security::Spec::IECPoint::Probe(__pNewObj);
        if (*__ppIECPoint) (*__ppIECPoint)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ Elastos::Security::Spec::IECPoint** __ppIECPoint)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIECPoint);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECPrivateKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECPrivateKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECPrivateKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICECPrivateKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSParams(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,/* [out] */ Elastos::Security::Spec::IECPrivateKeySpec** __ppIECPrivateKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECPrivateKeySpec = Elastos::Security::Spec::IECPrivateKeySpec::Probe(__pNewObj);
        if (*__ppIECPrivateKeySpec) (*__ppIECPrivateKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,
/* [out] */ Elastos::Security::Spec::IECPrivateKeySpec** __ppIECPrivateKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIECPrivateKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CECPublicKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Spec::IECPoint * pParam0,/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICECPublicKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CECPublicKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICECPublicKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithWParams(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IECPoint * pParam0,/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,/* [out] */ Elastos::Security::Spec::IECPublicKeySpec** __ppIECPublicKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIECPublicKeySpec = Elastos::Security::Spec::IECPublicKeySpec::Probe(__pNewObj);
        if (*__ppIECPublicKeySpec) (*__ppIECPublicKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IECPoint * pParam0,
/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,
/* [out] */ Elastos::Security::Spec::IECPublicKeySpec** __ppIECPublicKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIECPublicKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IECPoint * pParam0,/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IECPoint * pParam0,
/* [in] */ Elastos::Security::Spec::IECParameterSpec * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CEllipticCurve
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Spec::IECField * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICEllipticCurveClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CEllipticCurve, RGM_SAME_DOMAIN, 
                EIID_ICEllipticCurveClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFieldABSeed(pParam0, pParam1, pParam2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Security::Spec::IECField * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICEllipticCurveClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CEllipticCurve, RGM_SAME_DOMAIN, 
                EIID_ICEllipticCurveClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFieldAB(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IECField * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam3,/* [out] */ Elastos::Security::Spec::IEllipticCurve** __ppIEllipticCurve)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIEllipticCurve = Elastos::Security::Spec::IEllipticCurve::Probe(__pNewObj);
        if (*__ppIEllipticCurve) (*__ppIEllipticCurve)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IECField * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam3,
/* [out] */ Elastos::Security::Spec::IEllipticCurve** __ppIEllipticCurve)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIEllipticCurve);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IECField * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IECField * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IECField * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ Elastos::Security::Spec::IEllipticCurve** __ppIEllipticCurve)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIEllipticCurve = Elastos::Security::Spec::IEllipticCurve::Probe(__pNewObj);
        if (*__ppIEllipticCurve) (*__ppIEllipticCurve)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IECField * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ Elastos::Security::Spec::IEllipticCurve** __ppIEllipticCurve)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIEllipticCurve);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Security::Spec::IECField * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Security::Spec::IECField * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CMGF1ParameterSpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICMGF1ParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CMGF1ParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICMGF1ParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMdName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Security::Spec::IMGF1ParameterSpec** __ppIMGF1ParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMGF1ParameterSpec = Elastos::Security::Spec::IMGF1ParameterSpec::Probe(__pNewObj);
        if (*__ppIMGF1ParameterSpec) (*__ppIMGF1ParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Security::Spec::IMGF1ParameterSpec** __ppIMGF1ParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMGF1ParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CPKCS8EncodedKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPKCS8EncodedKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPKCS8EncodedKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICPKCS8EncodedKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithEncodedKey(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ Elastos::Security::Spec::IPKCS8EncodedKeySpec** __ppIPKCS8EncodedKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPKCS8EncodedKeySpec = Elastos::Security::Spec::IPKCS8EncodedKeySpec::Probe(__pNewObj);
        if (*__ppIPKCS8EncodedKeySpec) (*__ppIPKCS8EncodedKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ Elastos::Security::Spec::IPKCS8EncodedKeySpec** __ppIPKCS8EncodedKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPKCS8EncodedKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CPSSParameterSpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPSSParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPSSParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICPSSParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSaltLen(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Security::Spec::IAlgorithmParameterSpec * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPSSParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPSSParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICPSSParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMdNameMgfNameMgfSpecSaltLenTrailerField(Param0, Param1, pParam2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Security::Spec::IPSSParameterSpec** __ppIPSSParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPSSParameterSpec = Elastos::Security::Spec::IPSSParameterSpec::Probe(__pNewObj);
        if (*__ppIPSSParameterSpec) (*__ppIPSSParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Security::Spec::IPSSParameterSpec** __ppIPSSParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIPSSParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Security::Spec::IAlgorithmParameterSpec * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Security::Spec::IPSSParameterSpec** __ppIPSSParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPSSParameterSpec = Elastos::Security::Spec::IPSSParameterSpec::Probe(__pNewObj);
        if (*__ppIPSSParameterSpec) (*__ppIPSSParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Elastos::Security::Spec::IAlgorithmParameterSpec * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Security::Spec::IPSSParameterSpec** __ppIPSSParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, Param3, Param4, __ppIPSSParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ Elastos::Security::Spec::IAlgorithmParameterSpec * pParam2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ Elastos::Security::Spec::IAlgorithmParameterSpec * pParam2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, Param3, Param4, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CRSAKeyGenParameterSpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRSAKeyGenParameterSpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRSAKeyGenParameterSpec, RGM_SAME_DOMAIN, 
                EIID_ICRSAKeyGenParameterSpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithKeysizePublicExponent(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ Elastos::Security::Spec::IRSAKeyGenParameterSpec** __ppIRSAKeyGenParameterSpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRSAKeyGenParameterSpec = Elastos::Security::Spec::IRSAKeyGenParameterSpec::Probe(__pNewObj);
        if (*__ppIRSAKeyGenParameterSpec) (*__ppIRSAKeyGenParameterSpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ Elastos::Security::Spec::IRSAKeyGenParameterSpec** __ppIRSAKeyGenParameterSpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIRSAKeyGenParameterSpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CRSAMultiPrimePrivateCrtKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [in] */ Elastos::Math::IBigInteger * pParam4,/* [in] */ Elastos::Math::IBigInteger * pParam5,/* [in] */ Elastos::Math::IBigInteger * pParam6,/* [in] */ Elastos::Math::IBigInteger * pParam7,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Spec::IRSAOtherPrimeInfo *> * pParam8,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRSAMultiPrimePrivateCrtKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRSAMultiPrimePrivateCrtKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICRSAMultiPrimePrivateCrtKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithModulusPublicExponentPrivateExponentPrimePPrimeQPrimeExponentPPrimeExponentQCrtCoefficientOtherPrimeInfo(pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, pParam8, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [in] */ Elastos::Math::IBigInteger * pParam4,/* [in] */ Elastos::Math::IBigInteger * pParam5,/* [in] */ Elastos::Math::IBigInteger * pParam6,/* [in] */ Elastos::Math::IBigInteger * pParam7,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Spec::IRSAOtherPrimeInfo *> * pParam8,/* [out] */ Elastos::Security::Spec::IRSAMultiPrimePrivateCrtKeySpec** __ppIRSAMultiPrimePrivateCrtKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, pParam8, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRSAMultiPrimePrivateCrtKeySpec = Elastos::Security::Spec::IRSAMultiPrimePrivateCrtKeySpec::Probe(__pNewObj);
        if (*__ppIRSAMultiPrimePrivateCrtKeySpec) (*__ppIRSAMultiPrimePrivateCrtKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [in] */ Elastos::Math::IBigInteger * pParam4,
/* [in] */ Elastos::Math::IBigInteger * pParam5,
/* [in] */ Elastos::Math::IBigInteger * pParam6,
/* [in] */ Elastos::Math::IBigInteger * pParam7,
/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Spec::IRSAOtherPrimeInfo *> * pParam8,
/* [out] */ Elastos::Security::Spec::IRSAMultiPrimePrivateCrtKeySpec** __ppIRSAMultiPrimePrivateCrtKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, pParam8, __ppIRSAMultiPrimePrivateCrtKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [in] */ Elastos::Math::IBigInteger * pParam4,/* [in] */ Elastos::Math::IBigInteger * pParam5,/* [in] */ Elastos::Math::IBigInteger * pParam6,/* [in] */ Elastos::Math::IBigInteger * pParam7,/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Spec::IRSAOtherPrimeInfo *> * pParam8,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, pParam8, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [in] */ Elastos::Math::IBigInteger * pParam4,
/* [in] */ Elastos::Math::IBigInteger * pParam5,
/* [in] */ Elastos::Math::IBigInteger * pParam6,
/* [in] */ Elastos::Math::IBigInteger * pParam7,
/* [in] */ _ELASTOS ArrayOf<Elastos::Security::Spec::IRSAOtherPrimeInfo *> * pParam8,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, pParam8, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CRSAOtherPrimeInfo
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRSAOtherPrimeInfoClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRSAOtherPrimeInfo, RGM_SAME_DOMAIN, 
                EIID_ICRSAOtherPrimeInfoClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPrimePrimeExponentCrtCoefficient(pParam0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ Elastos::Security::Spec::IRSAOtherPrimeInfo** __ppIRSAOtherPrimeInfo)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRSAOtherPrimeInfo = Elastos::Security::Spec::IRSAOtherPrimeInfo::Probe(__pNewObj);
        if (*__ppIRSAOtherPrimeInfo) (*__ppIRSAOtherPrimeInfo)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ Elastos::Security::Spec::IRSAOtherPrimeInfo** __ppIRSAOtherPrimeInfo)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIRSAOtherPrimeInfo);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CRSAPrivateCrtKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [in] */ Elastos::Math::IBigInteger * pParam4,/* [in] */ Elastos::Math::IBigInteger * pParam5,/* [in] */ Elastos::Math::IBigInteger * pParam6,/* [in] */ Elastos::Math::IBigInteger * pParam7,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRSAPrivateCrtKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRSAPrivateCrtKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICRSAPrivateCrtKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithModulusPublicExponentPrivateExponentPrimePPrimeQPrimeExponentPPrimeExponentQCrtCoefficient(pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [in] */ Elastos::Math::IBigInteger * pParam4,/* [in] */ Elastos::Math::IBigInteger * pParam5,/* [in] */ Elastos::Math::IBigInteger * pParam6,/* [in] */ Elastos::Math::IBigInteger * pParam7,/* [out] */ Elastos::Security::Spec::IRSAPrivateCrtKeySpec** __ppIRSAPrivateCrtKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRSAPrivateCrtKeySpec = Elastos::Security::Spec::IRSAPrivateCrtKeySpec::Probe(__pNewObj);
        if (*__ppIRSAPrivateCrtKeySpec) (*__ppIRSAPrivateCrtKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [in] */ Elastos::Math::IBigInteger * pParam4,
/* [in] */ Elastos::Math::IBigInteger * pParam5,
/* [in] */ Elastos::Math::IBigInteger * pParam6,
/* [in] */ Elastos::Math::IBigInteger * pParam7,
/* [out] */ Elastos::Security::Spec::IRSAPrivateCrtKeySpec** __ppIRSAPrivateCrtKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, __ppIRSAPrivateCrtKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [in] */ Elastos::Math::IBigInteger * pParam2,/* [in] */ Elastos::Math::IBigInteger * pParam3,/* [in] */ Elastos::Math::IBigInteger * pParam4,/* [in] */ Elastos::Math::IBigInteger * pParam5,/* [in] */ Elastos::Math::IBigInteger * pParam6,/* [in] */ Elastos::Math::IBigInteger * pParam7,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [in] */ Elastos::Math::IBigInteger * pParam2,
/* [in] */ Elastos::Math::IBigInteger * pParam3,
/* [in] */ Elastos::Math::IBigInteger * pParam4,
/* [in] */ Elastos::Math::IBigInteger * pParam5,
/* [in] */ Elastos::Math::IBigInteger * pParam6,
/* [in] */ Elastos::Math::IBigInteger * pParam7,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, pParam2, pParam3, pParam4, pParam5, pParam6, pParam7, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CRSAPrivateKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRSAPrivateKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRSAPrivateKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICRSAPrivateKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithModulusPrivateExponent(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ Elastos::Security::Spec::IRSAPrivateKeySpec** __ppIRSAPrivateKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRSAPrivateKeySpec = Elastos::Security::Spec::IRSAPrivateKeySpec::Probe(__pNewObj);
        if (*__ppIRSAPrivateKeySpec) (*__ppIRSAPrivateKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ Elastos::Security::Spec::IRSAPrivateKeySpec** __ppIRSAPrivateKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIRSAPrivateKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CRSAPublicKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRSAPublicKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRSAPublicKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICRSAPublicKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithModulusPublicExponent(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ Elastos::Security::Spec::IRSAPublicKeySpec** __ppIRSAPublicKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRSAPublicKeySpec = Elastos::Security::Spec::IRSAPublicKeySpec::Probe(__pNewObj);
        if (*__ppIRSAPublicKeySpec) (*__ppIRSAPublicKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ Elastos::Security::Spec::IRSAPublicKeySpec** __ppIRSAPublicKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIRSAPublicKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Math::IBigInteger * pParam0,/* [in] */ Elastos::Math::IBigInteger * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Math::IBigInteger * pParam0,
/* [in] */ Elastos::Math::IBigInteger * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
namespace Spec {
class CX509EncodedKeySpec
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICX509EncodedKeySpecClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CX509EncodedKeySpec, RGM_SAME_DOMAIN, 
                EIID_ICX509EncodedKeySpecClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithEncodedKey(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ Elastos::Security::Spec::IX509EncodedKeySpec** __ppIX509EncodedKeySpec)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIX509EncodedKeySpec = Elastos::Security::Spec::IX509EncodedKeySpec::Probe(__pNewObj);
        if (*__ppIX509EncodedKeySpec) (*__ppIX509EncodedKeySpec)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ Elastos::Security::Spec::IX509EncodedKeySpec** __ppIX509EncodedKeySpec)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIX509EncodedKeySpec);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Security {
class CSecurity
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Security::ISecurity** ppISecurity)
    {

        return _CObject_CreateInstance(ECLSID_CSecurity, pRegime, Elastos::Security::EIID_ISecurity, (IInterface**)ppISecurity);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Security::ISecurity** __ppISecurity)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppISecurity);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Security::ISecurity** ppISecurity)
    {
        return _CObject_CreateInstance(ECLSID_CSecurity, RGM_SAME_DOMAIN, Elastos::Security::EIID_ISecurity, (PInterface*)ppISecurity);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
namespace Callback {
class CPasswordCallback
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPasswordCallbackClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPasswordCallback, RGM_SAME_DOMAIN, 
                EIID_ICPasswordCallbackClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPromptEchoOn(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastosx::Security::Auth::Callback::IPasswordCallback** __ppIPasswordCallback)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPasswordCallback = Elastosx::Security::Auth::Callback::IPasswordCallback::Probe(__pNewObj);
        if (*__ppIPasswordCallback) (*__ppIPasswordCallback)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastosx::Security::Auth::Callback::IPasswordCallback** __ppIPasswordCallback)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIPasswordCallback);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
namespace X500 {
class CX500Principal
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICX500PrincipalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CX500Principal, RGM_SAME_DOMAIN, 
                EIID_ICX500PrincipalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICX500PrincipalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CX500Principal, RGM_SAME_DOMAIN, 
                EIID_ICX500PrincipalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICX500PrincipalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CX500Principal, RGM_SAME_DOMAIN, 
                EIID_ICX500PrincipalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameStr(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Utility::IMap * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICX500PrincipalClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CX500Principal, RGM_SAME_DOMAIN, 
                EIID_ICX500PrincipalClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameKeywordMap(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIX500Principal = Elastosx::Security::Auth::X500::IX500Principal::Probe(__pNewObj);
        if (*__ppIX500Principal) (*__ppIX500Principal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIX500Principal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS Byte> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIX500Principal = Elastosx::Security::Auth::X500::IX500Principal::Probe(__pNewObj);
        if (*__ppIX500Principal) (*__ppIX500Principal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIX500Principal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIX500Principal = Elastosx::Security::Auth::X500::IX500Principal::Probe(__pNewObj);
        if (*__ppIX500Principal) (*__ppIX500Principal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIX500Principal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Utility::IMap * pParam1,/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIX500Principal = Elastosx::Security::Auth::X500::IX500Principal::Probe(__pNewObj);
        if (*__ppIX500Principal) (*__ppIX500Principal)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Utility::IMap * pParam1,
/* [out] */ Elastosx::Security::Auth::X500::IX500Principal** __ppIX500Principal)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIX500Principal);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ Elastos::Utility::IMap * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ Elastos::Utility::IMap * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
class CPrivateCredentialPermission
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPrivateCredentialPermissionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPrivateCredentialPermission, RGM_SAME_DOMAIN, 
                EIID_ICPrivateCredentialPermissionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameAction(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastosx::Security::Auth::IPrivateCredentialPermission** __ppIPrivateCredentialPermission)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPrivateCredentialPermission = Elastosx::Security::Auth::IPrivateCredentialPermission::Probe(__pNewObj);
        if (*__ppIPrivateCredentialPermission) (*__ppIPrivateCredentialPermission)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastosx::Security::Auth::IPrivateCredentialPermission** __ppIPrivateCredentialPermission)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIPrivateCredentialPermission);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
class CAuthPermission
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAuthPermissionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAuthPermission, RGM_SAME_DOMAIN, 
                EIID_ICAuthPermissionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAuthPermissionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAuthPermission, RGM_SAME_DOMAIN, 
                EIID_ICAuthPermissionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameActions(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Security::IPermission** __ppIPermission)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPermission = Elastos::Security::IPermission::Probe(__pNewObj);
        if (*__ppIPermission) (*__ppIPermission)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Security::IPermission** __ppIPermission)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIPermission);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Security::IPermission** __ppIPermission)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPermission = Elastos::Security::IPermission::Probe(__pNewObj);
        if (*__ppIPermission) (*__ppIPermission)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Security::IPermission** __ppIPermission)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIPermission);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
class CSubject
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [in] */ Elastos::Utility::ISet * pParam1,/* [in] */ Elastos::Utility::ISet * pParam2,/* [in] */ Elastos::Utility::ISet * pParam3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSubjectClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSubject, RGM_SAME_DOMAIN, 
                EIID_ICSubjectClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithReadOnlySubjPrincipalsPubCredentialsPrivCredentials(Param0, pParam1, pParam2, pParam3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastosx::Security::Auth::ISubject** ppISubject)
    {

        return _CObject_CreateInstance(ECLSID_CSubject, pRegime, Elastosx::Security::Auth::EIID_ISubject, (IInterface**)ppISubject);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastosx::Security::Auth::ISubject** __ppISubject)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISubject);
    }

    static _ELASTOS ECode New(/* [out] */ Elastosx::Security::Auth::ISubject** ppISubject)
    {
        return _CObject_CreateInstance(ECLSID_CSubject, RGM_SAME_DOMAIN, Elastosx::Security::Auth::EIID_ISubject, (PInterface*)ppISubject);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSubject, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSubject, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [in] */ Elastos::Utility::ISet * pParam1,/* [in] */ Elastos::Utility::ISet * pParam2,/* [in] */ Elastos::Utility::ISet * pParam3,/* [out] */ Elastosx::Security::Auth::ISubject** __ppISubject)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISubject = Elastosx::Security::Auth::ISubject::Probe(__pNewObj);
        if (*__ppISubject) (*__ppISubject)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [in] */ Elastos::Utility::ISet * pParam1,
/* [in] */ Elastos::Utility::ISet * pParam2,
/* [in] */ Elastos::Utility::ISet * pParam3,
/* [out] */ Elastosx::Security::Auth::ISubject** __ppISubject)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, pParam3, __ppISubject);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [in] */ Elastos::Utility::ISet * pParam1,/* [in] */ Elastos::Utility::ISet * pParam2,/* [in] */ Elastos::Utility::ISet * pParam3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, pParam3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [in] */ Elastos::Utility::ISet * pParam1,
/* [in] */ Elastos::Utility::ISet * pParam2,
/* [in] */ Elastos::Utility::ISet * pParam3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, pParam3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
class CSubjectHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastosx::Security::Auth::ISubjectHelper** ppISubjectHelper)
    {

        return _CObject_CreateInstance(ECLSID_CSubjectHelper, pRegime, Elastosx::Security::Auth::EIID_ISubjectHelper, (IInterface**)ppISubjectHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastosx::Security::Auth::ISubjectHelper** __ppISubjectHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppISubjectHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastosx::Security::Auth::ISubjectHelper** ppISubjectHelper)
    {
        return _CObject_CreateInstance(ECLSID_CSubjectHelper, RGM_SAME_DOMAIN, Elastosx::Security::Auth::EIID_ISubjectHelper, (PInterface*)ppISubjectHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Auth {
class CSubjectDomainCombiner
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastosx::Security::Auth::ISubject * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSubjectDomainCombinerClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSubjectDomainCombiner, RGM_SAME_DOMAIN, 
                EIID_ICSubjectDomainCombinerClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSub(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Security::Auth::ISubject * pParam0,/* [out] */ Elastosx::Security::Auth::ISubjectDomainCombiner** __ppISubjectDomainCombiner)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISubjectDomainCombiner = Elastosx::Security::Auth::ISubjectDomainCombiner::Probe(__pNewObj);
        if (*__ppISubjectDomainCombiner) (*__ppISubjectDomainCombiner)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Security::Auth::ISubject * pParam0,
/* [out] */ Elastosx::Security::Auth::ISubjectDomainCombiner** __ppISubjectDomainCombiner)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISubjectDomainCombiner);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastosx::Security::Auth::ISubject * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastosx::Security::Auth::ISubject * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Security {
namespace Cert {
class CX509CertificateHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastosx::Security::Cert::IX509CertificateHelper** ppIX509CertificateHelper)
    {

        return _CObject_CreateInstance(ECLSID_CX509CertificateHelper, pRegime, Elastosx::Security::Cert::EIID_IX509CertificateHelper, (IInterface**)ppIX509CertificateHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastosx::Security::Cert::IX509CertificateHelper** __ppIX509CertificateHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIX509CertificateHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastosx::Security::Cert::IX509CertificateHelper** ppIX509CertificateHelper)
    {
        return _CObject_CreateInstance(ECLSID_CX509CertificateHelper, RGM_SAME_DOMAIN, Elastosx::Security::Cert::EIID_IX509CertificateHelper, (PInterface*)ppIX509CertificateHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastosx {
namespace Net {
namespace Ssl {
class CSSLParameters
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSSLParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSSLParameters, RGM_SAME_DOMAIN, 
                EIID_ICSSLParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCipherSuites(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSSLParametersClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSSLParameters, RGM_SAME_DOMAIN, 
                EIID_ICSSLParametersClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCipherSuitesProtocols(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastosx::Net::Ssl::ISSLParameters** ppISSLParameters)
    {

        return _CObject_CreateInstance(ECLSID_CSSLParameters, pRegime, Elastosx::Net::Ssl::EIID_ISSLParameters, (IInterface**)ppISSLParameters);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastosx::Net::Ssl::ISSLParameters** __ppISSLParameters)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISSLParameters);
    }

    static _ELASTOS ECode New(/* [out] */ Elastosx::Net::Ssl::ISSLParameters** ppISSLParameters)
    {
        return _CObject_CreateInstance(ECLSID_CSSLParameters, RGM_SAME_DOMAIN, Elastosx::Net::Ssl::EIID_ISSLParameters, (PInterface*)ppISSLParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSSLParameters, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSSLParameters, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,/* [out] */ Elastosx::Net::Ssl::ISSLParameters** __ppISSLParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISSLParameters = Elastosx::Net::Ssl::ISSLParameters::Probe(__pNewObj);
        if (*__ppISSLParameters) (*__ppISSLParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,
/* [out] */ Elastosx::Net::Ssl::ISSLParameters** __ppISSLParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISSLParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam1,/* [out] */ Elastosx::Net::Ssl::ISSLParameters** __ppISSLParameters)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISSLParameters = Elastosx::Net::Ssl::ISSLParameters::Probe(__pNewObj);
        if (*__ppISSLParameters) (*__ppISSLParameters)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam1,
/* [out] */ Elastosx::Net::Ssl::ISSLParameters** __ppISSLParameters)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppISSLParameters);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam0,
/* [in] */ _ELASTOS ArrayOf<_ELASTOS String> * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CCountDownLatch
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCountDownLatchClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCountDownLatch, RGM_SAME_DOMAIN, 
                EIID_ICCountDownLatchClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCount(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::ICountDownLatch** __ppICountDownLatch)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICountDownLatch = Elastos::Utility::Concurrent::ICountDownLatch::Probe(__pNewObj);
        if (*__ppICountDownLatch) (*__ppICountDownLatch)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::ICountDownLatch** __ppICountDownLatch)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICountDownLatch);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CCyclicBarrier
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCyclicBarrierClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCyclicBarrier, RGM_SAME_DOMAIN, 
                EIID_ICCyclicBarrierClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPartiesBarrierAction(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCyclicBarrierClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCyclicBarrier, RGM_SAME_DOMAIN, 
                EIID_ICCyclicBarrierClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParties(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ Elastos::Utility::Concurrent::ICyclicBarrier** __ppICyclicBarrier)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICyclicBarrier = Elastos::Utility::Concurrent::ICyclicBarrier::Probe(__pNewObj);
        if (*__ppICyclicBarrier) (*__ppICyclicBarrier)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [out] */ Elastos::Utility::Concurrent::ICyclicBarrier** __ppICyclicBarrier)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppICyclicBarrier);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::ICyclicBarrier** __ppICyclicBarrier)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICyclicBarrier = Elastos::Utility::Concurrent::ICyclicBarrier::Probe(__pNewObj);
        if (*__ppICyclicBarrier) (*__ppICyclicBarrier)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::ICyclicBarrier** __ppICyclicBarrier)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICyclicBarrier);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CExecutorCompletionService
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICExecutorCompletionServiceClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CExecutorCompletionService, RGM_SAME_DOMAIN, 
                EIID_ICExecutorCompletionServiceClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithExecutor(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICExecutorCompletionServiceClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CExecutorCompletionService, RGM_SAME_DOMAIN, 
                EIID_ICExecutorCompletionServiceClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithExecutorCompletionQueue(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,/* [out] */ Elastos::Utility::Concurrent::ICompletionService** __ppICompletionService)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICompletionService = Elastos::Utility::Concurrent::ICompletionService::Probe(__pNewObj);
        if (*__ppICompletionService) (*__ppICompletionService)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,
/* [out] */ Elastos::Utility::Concurrent::ICompletionService** __ppICompletionService)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICompletionService);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam1,/* [out] */ Elastos::Utility::Concurrent::ICompletionService** __ppICompletionService)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICompletionService = Elastos::Utility::Concurrent::ICompletionService::Probe(__pNewObj);
        if (*__ppICompletionService) (*__ppICompletionService)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam1,
/* [out] */ Elastos::Utility::Concurrent::ICompletionService** __ppICompletionService)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICompletionService);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IExecutor * pParam0,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CExecutors
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IExecutors** ppIExecutors)
    {

        return _CObject_CreateInstance(ECLSID_CExecutors, pRegime, Elastos::Utility::Concurrent::EIID_IExecutors, (IInterface**)ppIExecutors);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IExecutors** __ppIExecutors)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIExecutors);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::IExecutors** ppIExecutors)
    {
        return _CObject_CreateInstance(ECLSID_CExecutors, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IExecutors, (PInterface*)ppIExecutors);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CFutureTask
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFutureTaskClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFutureTask, RGM_SAME_DOMAIN, 
                EIID_ICFutureTaskClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCallable(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ IInterface * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFutureTaskClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFutureTask, RGM_SAME_DOMAIN, 
                EIID_ICFutureTaskClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRunnableResult(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,/* [out] */ Elastos::Utility::Concurrent::IRunnableFuture** __ppIRunnableFuture)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnableFuture = Elastos::Utility::Concurrent::IRunnableFuture::Probe(__pNewObj);
        if (*__ppIRunnableFuture) (*__ppIRunnableFuture)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IRunnableFuture** __ppIRunnableFuture)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRunnableFuture);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::ICallable * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ IInterface * pParam1,/* [out] */ Elastos::Utility::Concurrent::IRunnableFuture** __ppIRunnableFuture)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnableFuture = Elastos::Utility::Concurrent::IRunnableFuture::Probe(__pNewObj);
        if (*__ppIRunnableFuture) (*__ppIRunnableFuture)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [in] */ IInterface * pParam1,
/* [out] */ Elastos::Utility::Concurrent::IRunnableFuture** __ppIRunnableFuture)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIRunnableFuture);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ IInterface * pParam1,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [in] */ IInterface * pParam1,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ IInterface * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [in] */ IInterface * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CLinkedBlockingQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICLinkedBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICLinkedBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedBlockingQueue, pRegime, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (IInterface**)ppIBlockingQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBlockingQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedBlockingQueue, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (PInterface*)ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedBlockingQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedBlockingQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CThreadPoolExecutor
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeMaximumPoolSizeKeepAliveTimeUnitWorkQueue(Param0, Param1, Param2, pParam3, pParam4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeMaximumPoolSizeKeepAliveTimeUnitWorkQueueThreadFactory(Param0, Param1, Param2, pParam3, pParam4, pParam5, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam5,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeMaximumPoolSizeKeepAliveTimeUnitWorkQueueHandler(Param0, Param1, Param2, pParam3, pParam4, pParam5, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam6,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeMaximumPoolSizeKeepAliveTimeUnitWorkQueueThreadFactoryHandler(Param0, Param1, Param2, pParam3, pParam4, pParam5, pParam6, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThreadPoolExecutor = Elastos::Utility::Concurrent::IThreadPoolExecutor::Probe(__pNewObj);
        if (*__ppIThreadPoolExecutor) (*__ppIThreadPoolExecutor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, __ppIThreadPoolExecutor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, pParam5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThreadPoolExecutor = Elastos::Utility::Concurrent::IThreadPoolExecutor::Probe(__pNewObj);
        if (*__ppIThreadPoolExecutor) (*__ppIThreadPoolExecutor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,
/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, pParam5, __ppIThreadPoolExecutor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, pParam5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, pParam5, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam5,/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, pParam5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThreadPoolExecutor = Elastos::Utility::Concurrent::IThreadPoolExecutor::Probe(__pNewObj);
        if (*__ppIThreadPoolExecutor) (*__ppIThreadPoolExecutor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam5,
/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, pParam5, __ppIThreadPoolExecutor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam5,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, pParam5, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam5,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, pParam5, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam6,/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, pParam5, pParam6, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThreadPoolExecutor = Elastos::Utility::Concurrent::IThreadPoolExecutor::Probe(__pNewObj);
        if (*__ppIThreadPoolExecutor) (*__ppIThreadPoolExecutor)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam6,
/* [out] */ Elastos::Utility::Concurrent::IThreadPoolExecutor** __ppIThreadPoolExecutor)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, pParam5, pParam6, __ppIThreadPoolExecutor);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int64 Param2,/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam6,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, pParam3, pParam4, pParam5, pParam6, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int64 Param2,
/* [in] */ Elastos::Utility::Concurrent::ITimeUnit * pParam3,
/* [in] */ Elastos::Utility::Concurrent::IBlockingQueue * pParam4,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam5,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam6,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, pParam3, pParam4, pParam5, pParam6, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CTimeUnitHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::ITimeUnitHelper** ppITimeUnitHelper)
    {

        return _CObject_CreateInstance(ECLSID_CTimeUnitHelper, pRegime, Elastos::Utility::Concurrent::EIID_ITimeUnitHelper, (IInterface**)ppITimeUnitHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::ITimeUnitHelper** __ppITimeUnitHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppITimeUnitHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::ITimeUnitHelper** ppITimeUnitHelper)
    {
        return _CObject_CreateInstance(ECLSID_CTimeUnitHelper, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_ITimeUnitHelper, (PInterface*)ppITimeUnitHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CArrayBlockingQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICArrayBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICArrayBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityFair(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ Elastos::Utility::ICollection * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICArrayBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacityFairC(Param0, Param1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IArrayBlockingQueue** __ppIArrayBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayBlockingQueue = Elastos::Utility::Concurrent::IArrayBlockingQueue::Probe(__pNewObj);
        if (*__ppIArrayBlockingQueue) (*__ppIArrayBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IArrayBlockingQueue** __ppIArrayBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIArrayBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Concurrent::IArrayBlockingQueue** __ppIArrayBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayBlockingQueue = Elastos::Utility::Concurrent::IArrayBlockingQueue::Probe(__pNewObj);
        if (*__ppIArrayBlockingQueue) (*__ppIArrayBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Concurrent::IArrayBlockingQueue** __ppIArrayBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIArrayBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ Elastos::Utility::ICollection * pParam2,/* [out] */ Elastos::Utility::Concurrent::IArrayBlockingQueue** __ppIArrayBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayBlockingQueue = Elastos::Utility::Concurrent::IArrayBlockingQueue::Probe(__pNewObj);
        if (*__ppIArrayBlockingQueue) (*__ppIArrayBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ Elastos::Utility::ICollection * pParam2,
/* [out] */ Elastos::Utility::Concurrent::IArrayBlockingQueue** __ppIArrayBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIArrayBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ Elastos::Utility::ICollection * pParam2,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ Elastos::Utility::ICollection * pParam2,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ Elastos::Utility::ICollection * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ Elastos::Utility::ICollection * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CConcurrentLinkedDeque
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentLinkedDequeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentLinkedDeque, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentLinkedDequeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IDeque** ppIDeque)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedDeque, pRegime, Elastos::Utility::EIID_IDeque, (IInterface**)ppIDeque);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDeque);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IDeque** ppIDeque)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedDeque, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IDeque, (PInterface*)ppIDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedDeque, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedDeque, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedDeque, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedDeque, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeque = Elastos::Utility::IDeque::Probe(__pNewObj);
        if (*__ppIDeque) (*__ppIDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IDeque** __ppIDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CConcurrentLinkedQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentLinkedQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentLinkedQueue, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentLinkedQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IQueue** ppIQueue)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedQueue, pRegime, Elastos::Utility::EIID_IQueue, (IInterface**)ppIQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IQueue** __ppIQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IQueue** ppIQueue)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedQueue, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IQueue, (PInterface*)ppIQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedQueue, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedQueue, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentLinkedQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::IQueue** __ppIQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIQueue = Elastos::Utility::IQueue::Probe(__pNewObj);
        if (*__ppIQueue) (*__ppIQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::IQueue** __ppIQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CConcurrentSkipListMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithComparator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSortedMap(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::INavigableMap** ppINavigableMap)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, pRegime, Elastos::Utility::EIID_INavigableMap, (IInterface**)ppINavigableMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppINavigableMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::INavigableMap** ppINavigableMap)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, Elastos::Utility::EIID_INavigableMap, (PInterface*)ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** ppIConcurrentMap)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, pRegime, Elastos::Utility::Concurrent::EIID_IConcurrentMap, (IInterface**)ppIConcurrentMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIConcurrentMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** ppIConcurrentMap)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IConcurrentMap, (PInterface*)ppIConcurrentMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableMap = Elastos::Utility::INavigableMap::Probe(__pNewObj);
        if (*__ppINavigableMap) (*__ppINavigableMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentMap = Elastos::Utility::Concurrent::IConcurrentMap::Probe(__pNewObj);
        if (*__ppIConcurrentMap) (*__ppIConcurrentMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIConcurrentMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableMap = Elastos::Utility::INavigableMap::Probe(__pNewObj);
        if (*__ppINavigableMap) (*__ppINavigableMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentMap = Elastos::Utility::Concurrent::IConcurrentMap::Probe(__pNewObj);
        if (*__ppIConcurrentMap) (*__ppIConcurrentMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIConcurrentMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableMap = Elastos::Utility::INavigableMap::Probe(__pNewObj);
        if (*__ppINavigableMap) (*__ppINavigableMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::Utility::INavigableMap** __ppINavigableMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentMap = Elastos::Utility::Concurrent::IConcurrentMap::Probe(__pNewObj);
        if (*__ppIConcurrentMap) (*__ppIConcurrentMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentMap** __ppIConcurrentMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIConcurrentMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CConcurrentSkipListSet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithComparator(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithS(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentSkipListSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentSkipListSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithM(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::INavigableSet** ppINavigableSet)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, pRegime, Elastos::Utility::EIID_INavigableSet, (IInterface**)ppINavigableSet);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppINavigableSet);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::INavigableSet** ppINavigableSet)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, Elastos::Utility::EIID_INavigableSet, (PInterface*)ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentSkipListSet, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IComparator * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IComparator * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ISortedSet * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ISortedSet * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppINavigableSet = Elastos::Utility::INavigableSet::Probe(__pNewObj);
        if (*__ppINavigableSet) (*__ppINavigableSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ Elastos::Utility::INavigableSet** __ppINavigableSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppINavigableSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::INavigableMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::INavigableMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CDelayQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDelayQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDelayQueue, RGM_SAME_DOMAIN, 
                EIID_ICDelayQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {

        return _CObject_CreateInstance(ECLSID_CDelayQueue, pRegime, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (IInterface**)ppIBlockingQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBlockingQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {
        return _CObject_CreateInstance(ECLSID_CDelayQueue, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (PInterface*)ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDelayQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDelayQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CExchanger
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IExchanger** ppIExchanger)
    {

        return _CObject_CreateInstance(ECLSID_CExchanger, pRegime, Elastos::Utility::Concurrent::EIID_IExchanger, (IInterface**)ppIExchanger);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IExchanger** __ppIExchanger)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIExchanger);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IExchanger** ppIExchanger)
    {
        return _CObject_CreateInstance(ECLSID_CExchanger, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IExchanger, (PInterface*)ppIExchanger);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CExchanger, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CExchanger, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CForkJoinWorkerThread
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Concurrent::IForkJoinPool * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICForkJoinWorkerThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CForkJoinWorkerThread, RGM_SAME_DOMAIN, 
                EIID_ICForkJoinWorkerThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPool(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IForkJoinPool * pParam0,/* [out] */ Elastos::Utility::Concurrent::IForkJoinWorkerThread** __ppIForkJoinWorkerThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIForkJoinWorkerThread = Elastos::Utility::Concurrent::IForkJoinWorkerThread::Probe(__pNewObj);
        if (*__ppIForkJoinWorkerThread) (*__ppIForkJoinWorkerThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IForkJoinPool * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IForkJoinWorkerThread** __ppIForkJoinWorkerThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIForkJoinWorkerThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IForkJoinPool * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IForkJoinPool * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CForkJoinPool
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICForkJoinPoolClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CForkJoinPool, RGM_SAME_DOMAIN, 
                EIID_ICForkJoinPoolClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParallelism(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IForkJoinPoolForkJoinWorkerThreadFactory * pParam1,/* [in] */ Elastos::Core::Threading::IThreadUncaughtExceptionHandler * pParam2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICForkJoinPoolClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CForkJoinPool, RGM_SAME_DOMAIN, 
                EIID_ICForkJoinPoolClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParallelismFactoryHandlerAsyncMode(Param0, pParam1, pParam2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** ppIForkJoinPool)
    {

        return _CObject_CreateInstance(ECLSID_CForkJoinPool, pRegime, Elastos::Utility::Concurrent::EIID_IForkJoinPool, (IInterface**)ppIForkJoinPool);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** __ppIForkJoinPool)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIForkJoinPool);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** ppIForkJoinPool)
    {
        return _CObject_CreateInstance(ECLSID_CForkJoinPool, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IForkJoinPool, (PInterface*)ppIForkJoinPool);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CForkJoinPool, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CForkJoinPool, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** __ppIForkJoinPool)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIForkJoinPool = Elastos::Utility::Concurrent::IForkJoinPool::Probe(__pNewObj);
        if (*__ppIForkJoinPool) (*__ppIForkJoinPool)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** __ppIForkJoinPool)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIForkJoinPool);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IForkJoinPoolForkJoinWorkerThreadFactory * pParam1,/* [in] */ Elastos::Core::Threading::IThreadUncaughtExceptionHandler * pParam2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** __ppIForkJoinPool)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIForkJoinPool = Elastos::Utility::Concurrent::IForkJoinPool::Probe(__pNewObj);
        if (*__ppIForkJoinPool) (*__ppIForkJoinPool)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IForkJoinPoolForkJoinWorkerThreadFactory * pParam1,
/* [in] */ Elastos::Core::Threading::IThreadUncaughtExceptionHandler * pParam2,
/* [in] */ _ELASTOS Boolean Param3,
/* [out] */ Elastos::Utility::Concurrent::IForkJoinPool** __ppIForkJoinPool)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, Param3, __ppIForkJoinPool);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IForkJoinPoolForkJoinWorkerThreadFactory * pParam1,/* [in] */ Elastos::Core::Threading::IThreadUncaughtExceptionHandler * pParam2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IForkJoinPoolForkJoinWorkerThreadFactory * pParam1,
/* [in] */ Elastos::Core::Threading::IThreadUncaughtExceptionHandler * pParam2,
/* [in] */ _ELASTOS Boolean Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, Param3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CForkJoinTaskHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IForkJoinTaskHelper** ppIForkJoinTaskHelper)
    {

        return _CObject_CreateInstance(ECLSID_CForkJoinTaskHelper, pRegime, Elastos::Utility::Concurrent::EIID_IForkJoinTaskHelper, (IInterface**)ppIForkJoinTaskHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IForkJoinTaskHelper** __ppIForkJoinTaskHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIForkJoinTaskHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::IForkJoinTaskHelper** ppIForkJoinTaskHelper)
    {
        return _CObject_CreateInstance(ECLSID_CForkJoinTaskHelper, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IForkJoinTaskHelper, (PInterface*)ppIForkJoinTaskHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CLinkedBlockingDeque
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedBlockingDequeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedBlockingDeque, RGM_SAME_DOMAIN, 
                EIID_ICLinkedBlockingDequeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedBlockingDequeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedBlockingDeque, RGM_SAME_DOMAIN, 
                EIID_ICLinkedBlockingDequeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** ppIBlockingDeque)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedBlockingDeque, pRegime, Elastos::Utility::Concurrent::EIID_IBlockingDeque, (IInterface**)ppIBlockingDeque);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** __ppIBlockingDeque)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBlockingDeque);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** ppIBlockingDeque)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedBlockingDeque, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IBlockingDeque, (PInterface*)ppIBlockingDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedBlockingDeque, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedBlockingDeque, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedBlockingDeque, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedBlockingDeque, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** __ppIBlockingDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingDeque = Elastos::Utility::Concurrent::IBlockingDeque::Probe(__pNewObj);
        if (*__ppIBlockingDeque) (*__ppIBlockingDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** __ppIBlockingDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBlockingDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** __ppIBlockingDeque)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingDeque = Elastos::Utility::Concurrent::IBlockingDeque::Probe(__pNewObj);
        if (*__ppIBlockingDeque) (*__ppIBlockingDeque)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingDeque** __ppIBlockingDeque)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBlockingDeque);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CLinkedTransferQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICLinkedTransferQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CLinkedTransferQueue, RGM_SAME_DOMAIN, 
                EIID_ICLinkedTransferQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::ITransferQueue** ppITransferQueue)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedTransferQueue, pRegime, Elastos::Utility::Concurrent::EIID_ITransferQueue, (IInterface**)ppITransferQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::ITransferQueue** __ppITransferQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppITransferQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::ITransferQueue** ppITransferQueue)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedTransferQueue, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_ITransferQueue, (PInterface*)ppITransferQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedTransferQueue, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedTransferQueue, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CLinkedTransferQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CLinkedTransferQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::Concurrent::ITransferQueue** __ppITransferQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITransferQueue = Elastos::Utility::Concurrent::ITransferQueue::Probe(__pNewObj);
        if (*__ppITransferQueue) (*__ppITransferQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::Concurrent::ITransferQueue** __ppITransferQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppITransferQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CPhaser
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPhaserClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPhaser, RGM_SAME_DOMAIN, 
                EIID_ICPhaserClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParties(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPhaserClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPhaser, RGM_SAME_DOMAIN, 
                EIID_ICPhaserClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParent(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPhaserClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPhaser, RGM_SAME_DOMAIN, 
                EIID_ICPhaserClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParentParties(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IPhaser** ppIPhaser)
    {

        return _CObject_CreateInstance(ECLSID_CPhaser, pRegime, Elastos::Utility::Concurrent::EIID_IPhaser, (IInterface**)ppIPhaser);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIPhaser);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IPhaser** ppIPhaser)
    {
        return _CObject_CreateInstance(ECLSID_CPhaser, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IPhaser, (PInterface*)ppIPhaser);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPhaser, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPhaser, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPhaser = Elastos::Utility::Concurrent::IPhaser::Probe(__pNewObj);
        if (*__ppIPhaser) (*__ppIPhaser)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIPhaser);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,/* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPhaser = Elastos::Utility::Concurrent::IPhaser::Probe(__pNewObj);
        if (*__ppIPhaser) (*__ppIPhaser)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIPhaser);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPhaser = Elastos::Utility::Concurrent::IPhaser::Probe(__pNewObj);
        if (*__ppIPhaser) (*__ppIPhaser)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::Concurrent::IPhaser** __ppIPhaser)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPhaser);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Concurrent::IPhaser * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CPriorityBlockingQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParties(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacityComparator(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPriorityBlockingQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPriorityBlockingQueue, RGM_SAME_DOMAIN, 
                EIID_ICPriorityBlockingQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {

        return _CObject_CreateInstance(ECLSID_CPriorityBlockingQueue, pRegime, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (IInterface**)ppIBlockingQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBlockingQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {
        return _CObject_CreateInstance(ECLSID_CPriorityBlockingQueue, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (PInterface*)ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CPriorityBlockingQueue, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CPriorityBlockingQueue, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CPriorityBlockingQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CPriorityBlockingQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IComparator * pParam1,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IComparator * pParam1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Core::IComparator * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Core::IComparator * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CScheduledThreadPoolExecutor
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScheduledThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScheduledThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICScheduledThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScheduledThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScheduledThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICScheduledThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeThreadFactory(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScheduledThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScheduledThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICScheduledThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeHandler(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICScheduledThreadPoolExecutorClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CScheduledThreadPoolExecutor, RGM_SAME_DOMAIN, 
                EIID_ICScheduledThreadPoolExecutorClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCorePoolSizeThreadFactoryHandler(Param0, pParam1, pParam2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScheduledExecutorService = Elastos::Utility::Concurrent::IScheduledExecutorService::Probe(__pNewObj);
        if (*__ppIScheduledExecutorService) (*__ppIScheduledExecutorService)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIScheduledExecutorService);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScheduledExecutorService = Elastos::Utility::Concurrent::IScheduledExecutorService::Probe(__pNewObj);
        if (*__ppIScheduledExecutorService) (*__ppIScheduledExecutorService)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,
/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIScheduledExecutorService);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam1,/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScheduledExecutorService = Elastos::Utility::Concurrent::IScheduledExecutorService::Probe(__pNewObj);
        if (*__ppIScheduledExecutorService) (*__ppIScheduledExecutorService)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam1,
/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIScheduledExecutorService);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam2,/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIScheduledExecutorService = Elastos::Utility::Concurrent::IScheduledExecutorService::Probe(__pNewObj);
        if (*__ppIScheduledExecutorService) (*__ppIScheduledExecutorService)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam2,
/* [out] */ Elastos::Utility::Concurrent::IScheduledExecutorService** __ppIScheduledExecutorService)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, __ppIScheduledExecutorService);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, pParam2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ Elastos::Utility::Concurrent::IThreadFactory * pParam1,
/* [in] */ Elastos::Utility::Concurrent::IRejectedExecutionHandler * pParam2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, pParam2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CSynchronousQueue
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSynchronousQueueClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSynchronousQueue, RGM_SAME_DOMAIN, 
                EIID_ICSynchronousQueueClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFair(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {

        return _CObject_CreateInstance(ECLSID_CSynchronousQueue, pRegime, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (IInterface**)ppIBlockingQueue);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBlockingQueue);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** ppIBlockingQueue)
    {
        return _CObject_CreateInstance(ECLSID_CSynchronousQueue, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IBlockingQueue, (PInterface*)ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CSynchronousQueue, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CSynchronousQueue, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSynchronousQueue, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSynchronousQueue, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlockingQueue = Elastos::Utility::Concurrent::IBlockingQueue::Probe(__pNewObj);
        if (*__ppIBlockingQueue) (*__ppIBlockingQueue)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::Concurrent::IBlockingQueue** __ppIBlockingQueue)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBlockingQueue);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CThreadLocalRandom
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IThreadLocalRandom** ppIThreadLocalRandom)
    {

        return _CObject_CreateInstance(ECLSID_CThreadLocalRandom, pRegime, Elastos::Utility::Concurrent::EIID_IThreadLocalRandom, (IInterface**)ppIThreadLocalRandom);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IThreadLocalRandom** __ppIThreadLocalRandom)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIThreadLocalRandom);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IThreadLocalRandom** ppIThreadLocalRandom)
    {
        return _CObject_CreateInstance(ECLSID_CThreadLocalRandom, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IThreadLocalRandom, (PInterface*)ppIThreadLocalRandom);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CThreadLocalRandom, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CThreadLocalRandom, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CThreadLocalRandomHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IThreadLocalRandomHelper** ppIThreadLocalRandomHelper)
    {

        return _CObject_CreateInstance(ECLSID_CThreadLocalRandomHelper, pRegime, Elastos::Utility::Concurrent::EIID_IThreadLocalRandomHelper, (IInterface**)ppIThreadLocalRandomHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IThreadLocalRandomHelper** __ppIThreadLocalRandomHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIThreadLocalRandomHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::IThreadLocalRandomHelper** ppIThreadLocalRandomHelper)
    {
        return _CObject_CreateInstance(ECLSID_CThreadLocalRandomHelper, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IThreadLocalRandomHelper, (PInterface*)ppIThreadLocalRandomHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CCopyOnWriteArrayList
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCopyOnWriteArrayListClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCopyOnWriteArrayList, RGM_SAME_DOMAIN, 
                EIID_ICCopyOnWriteArrayListClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithCollection(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCopyOnWriteArrayListClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCopyOnWriteArrayList, RGM_SAME_DOMAIN, 
                EIID_ICCopyOnWriteArrayListClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithArray(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** ppICopyOnWriteArrayList)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, pRegime, Elastos::Utility::Concurrent::EIID_ICopyOnWriteArrayList, (IInterface**)ppICopyOnWriteArrayList);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** __ppICopyOnWriteArrayList)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICopyOnWriteArrayList);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** ppICopyOnWriteArrayList)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_ICopyOnWriteArrayList, (PInterface*)ppICopyOnWriteArrayList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayList, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** __ppICopyOnWriteArrayList)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICopyOnWriteArrayList = Elastos::Utility::Concurrent::ICopyOnWriteArrayList::Probe(__pNewObj);
        if (*__ppICopyOnWriteArrayList) (*__ppICopyOnWriteArrayList)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** __ppICopyOnWriteArrayList)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICopyOnWriteArrayList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** __ppICopyOnWriteArrayList)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICopyOnWriteArrayList = Elastos::Utility::Concurrent::ICopyOnWriteArrayList::Probe(__pNewObj);
        if (*__ppICopyOnWriteArrayList) (*__ppICopyOnWriteArrayList)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,
/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayList** __ppICopyOnWriteArrayList)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICopyOnWriteArrayList);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS ArrayOf<IInterface *> * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CCopyOnWriteArrayListHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayListHelper** ppICopyOnWriteArrayListHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayListHelper, pRegime, Elastos::Utility::Concurrent::EIID_ICopyOnWriteArrayListHelper, (IInterface**)ppICopyOnWriteArrayListHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayListHelper** __ppICopyOnWriteArrayListHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICopyOnWriteArrayListHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::ICopyOnWriteArrayListHelper** ppICopyOnWriteArrayListHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArrayListHelper, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_ICopyOnWriteArrayListHelper, (PInterface*)ppICopyOnWriteArrayListHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CCopyOnWriteArraySet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCopyOnWriteArraySetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCopyOnWriteArraySet, RGM_SAME_DOMAIN, 
                EIID_ICCopyOnWriteArraySetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithC(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::ISet** ppISet)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArraySet, pRegime, Elastos::Utility::EIID_ISet, (IInterface**)ppISet);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISet);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::ISet** ppISet)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArraySet, RGM_SAME_DOMAIN, Elastos::Utility::EIID_ISet, (PInterface*)ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArraySet, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArraySet, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArraySet, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCopyOnWriteArraySet, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISet = Elastos::Utility::ISet::Probe(__pNewObj);
        if (*__ppISet) (*__ppISet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::Utility::ISet** __ppISet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::ICollection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::ICollection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CConcurrentHashMap
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacityLoadFactorConcurrencyLevel(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacityLoadFactor(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialCapacity(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICConcurrentHashMapClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, 
                EIID_ICConcurrentHashMapClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithM(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** ppIConcurrentHashMap)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentHashMap, pRegime, Elastos::Utility::Concurrent::EIID_IConcurrentHashMap, (IInterface**)ppIConcurrentHashMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIConcurrentHashMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** ppIConcurrentHashMap)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::EIID_IConcurrentHashMap, (PInterface*)ppIConcurrentHashMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentHashMap, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CConcurrentHashMap, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CConcurrentHashMap, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentHashMap = Elastos::Utility::Concurrent::IConcurrentHashMap::Probe(__pNewObj);
        if (*__ppIConcurrentHashMap) (*__ppIConcurrentHashMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIConcurrentHashMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentHashMap = Elastos::Utility::Concurrent::IConcurrentHashMap::Probe(__pNewObj);
        if (*__ppIConcurrentHashMap) (*__ppIConcurrentHashMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIConcurrentHashMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Float Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Float Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentHashMap = Elastos::Utility::Concurrent::IConcurrentHashMap::Probe(__pNewObj);
        if (*__ppIConcurrentHashMap) (*__ppIConcurrentHashMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIConcurrentHashMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIConcurrentHashMap = Elastos::Utility::Concurrent::IConcurrentHashMap::Probe(__pNewObj);
        if (*__ppIConcurrentHashMap) (*__ppIConcurrentHashMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::Utility::Concurrent::IConcurrentHashMap** __ppIConcurrentHashMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIConcurrentHashMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::IMap * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::IMap * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicBoolean
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicBooleanClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicBoolean, RGM_SAME_DOMAIN, 
                EIID_ICAtomicBooleanClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicBoolean** ppIAtomicBoolean)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicBoolean, pRegime, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicBoolean, (IInterface**)ppIAtomicBoolean);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicBoolean** __ppIAtomicBoolean)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAtomicBoolean);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicBoolean** ppIAtomicBoolean)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicBoolean, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicBoolean, (PInterface*)ppIAtomicBoolean);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicBoolean, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicBoolean, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicBoolean** __ppIAtomicBoolean)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicBoolean = Elastos::Utility::Concurrent::Atomic::IAtomicBoolean::Probe(__pNewObj);
        if (*__ppIAtomicBoolean) (*__ppIAtomicBoolean)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicBoolean** __ppIAtomicBoolean)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicBoolean);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicInteger32
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicInteger32ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicInteger32, RGM_SAME_DOMAIN, 
                EIID_ICAtomicInteger32ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32** ppIAtomicInteger32)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicInteger32, pRegime, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicInteger32, (IInterface**)ppIAtomicInteger32);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32** __ppIAtomicInteger32)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAtomicInteger32);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32** ppIAtomicInteger32)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicInteger32, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicInteger32, (PInterface*)ppIAtomicInteger32);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicInteger32, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicInteger32, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32** __ppIAtomicInteger32)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicInteger32 = Elastos::Utility::Concurrent::Atomic::IAtomicInteger32::Probe(__pNewObj);
        if (*__ppIAtomicInteger32) (*__ppIAtomicInteger32)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32** __ppIAtomicInteger32)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicInteger32);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicInteger32Array
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicInteger32ArrayClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicInteger32Array, RGM_SAME_DOMAIN, 
                EIID_ICAtomicInteger32ArrayClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLength(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicInteger32ArrayClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicInteger32Array, RGM_SAME_DOMAIN, 
                EIID_ICAtomicInteger32ArrayClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOther(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32Array** __ppIAtomicInteger32Array)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicInteger32Array = Elastos::Utility::Concurrent::Atomic::IAtomicInteger32Array::Probe(__pNewObj);
        if (*__ppIAtomicInteger32Array) (*__ppIAtomicInteger32Array)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32Array** __ppIAtomicInteger32Array)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicInteger32Array);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32Array** __ppIAtomicInteger32Array)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicInteger32Array = Elastos::Utility::Concurrent::Atomic::IAtomicInteger32Array::Probe(__pNewObj);
        if (*__ppIAtomicInteger32Array) (*__ppIAtomicInteger32Array)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger32Array** __ppIAtomicInteger32Array)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicInteger32Array);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int32> & Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicInteger64
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicInteger64ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicInteger64, RGM_SAME_DOMAIN, 
                EIID_ICAtomicInteger64ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64** ppIAtomicInteger64)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicInteger64, pRegime, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicInteger64, (IInterface**)ppIAtomicInteger64);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64** __ppIAtomicInteger64)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAtomicInteger64);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64** ppIAtomicInteger64)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicInteger64, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicInteger64, (PInterface*)ppIAtomicInteger64);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicInteger64, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicInteger64, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64** __ppIAtomicInteger64)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicInteger64 = Elastos::Utility::Concurrent::Atomic::IAtomicInteger64::Probe(__pNewObj);
        if (*__ppIAtomicInteger64) (*__ppIAtomicInteger64)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64** __ppIAtomicInteger64)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicInteger64);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicInteger64Array
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicInteger64ArrayClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicInteger64Array, RGM_SAME_DOMAIN, 
                EIID_ICAtomicInteger64ArrayClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLength(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicInteger64ArrayClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicInteger64Array, RGM_SAME_DOMAIN, 
                EIID_ICAtomicInteger64ArrayClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOther(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64Array** __ppIAtomicInteger64Array)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicInteger64Array = Elastos::Utility::Concurrent::Atomic::IAtomicInteger64Array::Probe(__pNewObj);
        if (*__ppIAtomicInteger64Array) (*__ppIAtomicInteger64Array)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64Array** __ppIAtomicInteger64Array)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicInteger64Array);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64Array** __ppIAtomicInteger64Array)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicInteger64Array = Elastos::Utility::Concurrent::Atomic::IAtomicInteger64Array::Probe(__pNewObj);
        if (*__ppIAtomicInteger64Array) (*__ppIAtomicInteger64Array)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicInteger64Array** __ppIAtomicInteger64Array)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicInteger64Array);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Int64> & Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicMarkableReference
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ IInterface * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicMarkableReferenceClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicMarkableReference, RGM_SAME_DOMAIN, 
                EIID_ICAtomicMarkableReferenceClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialRefInitialMark(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicMarkableReference** __ppIAtomicMarkableReference)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicMarkableReference = Elastos::Utility::Concurrent::Atomic::IAtomicMarkableReference::Probe(__pNewObj);
        if (*__ppIAtomicMarkableReference) (*__ppIAtomicMarkableReference)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicMarkableReference** __ppIAtomicMarkableReference)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIAtomicMarkableReference);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicReference
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicReferenceClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicReference, RGM_SAME_DOMAIN, 
                EIID_ICAtomicReferenceClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialValue(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReference** ppIAtomicReference)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicReference, pRegime, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicReference, (IInterface**)ppIAtomicReference);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReference** __ppIAtomicReference)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAtomicReference);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReference** ppIAtomicReference)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicReference, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Atomic::EIID_IAtomicReference, (PInterface*)ppIAtomicReference);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicReference, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicReference, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAtomicReference, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAtomicReference, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReference** __ppIAtomicReference)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicReference = Elastos::Utility::Concurrent::Atomic::IAtomicReference::Probe(__pNewObj);
        if (*__ppIAtomicReference) (*__ppIAtomicReference)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReference** __ppIAtomicReference)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAtomicReference);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicReferenceArray
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicReferenceArrayClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicReferenceArray, RGM_SAME_DOMAIN, 
                EIID_ICAtomicReferenceArrayClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLength(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicReferenceArrayClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicReferenceArray, RGM_SAME_DOMAIN, 
                EIID_ICAtomicReferenceArrayClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithArray(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReferenceArray** __ppIAtomicReferenceArray)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicReferenceArray = Elastos::Utility::Concurrent::Atomic::IAtomicReferenceArray::Probe(__pNewObj);
        if (*__ppIAtomicReferenceArray) (*__ppIAtomicReferenceArray)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReferenceArray** __ppIAtomicReferenceArray)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicReferenceArray);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReferenceArray** __ppIAtomicReferenceArray)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicReferenceArray = Elastos::Utility::Concurrent::Atomic::IAtomicReferenceArray::Probe(__pNewObj);
        if (*__ppIAtomicReferenceArray) (*__ppIAtomicReferenceArray)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicReferenceArray** __ppIAtomicReferenceArray)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAtomicReferenceArray);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<IInterface *> & Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CAtomicStampedReference
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ IInterface * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAtomicStampedReferenceClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAtomicStampedReference, RGM_SAME_DOMAIN, 
                EIID_ICAtomicStampedReferenceClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithInitialRefInitialStamp(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicStampedReference** __ppIAtomicStampedReference)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAtomicStampedReference = Elastos::Utility::Concurrent::Atomic::IAtomicStampedReference::Probe(__pNewObj);
        if (*__ppIAtomicStampedReference) (*__ppIAtomicStampedReference)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::Concurrent::Atomic::IAtomicStampedReference** __ppIAtomicStampedReference)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIAtomicStampedReference);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ IInterface * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ IInterface * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Atomic {
class CFencesHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Atomic::IFencesHelper** ppIFencesHelper)
    {

        return _CObject_CreateInstance(ECLSID_CFencesHelper, pRegime, Elastos::Utility::Concurrent::Atomic::EIID_IFencesHelper, (IInterface**)ppIFencesHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Atomic::IFencesHelper** __ppIFencesHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIFencesHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::Atomic::IFencesHelper** ppIFencesHelper)
    {
        return _CObject_CreateInstance(ECLSID_CFencesHelper, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Atomic::EIID_IFencesHelper, (PInterface*)ppIFencesHelper);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
class CLockSupport
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Locks::ILockSupport** ppILockSupport)
    {

        return _CObject_CreateInstance(ECLSID_CLockSupport, pRegime, Elastos::Utility::Concurrent::Locks::EIID_ILockSupport, (IInterface**)ppILockSupport);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Locks::ILockSupport** __ppILockSupport)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppILockSupport);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Concurrent::Locks::ILockSupport** ppILockSupport)
    {
        return _CObject_CreateInstance(ECLSID_CLockSupport, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Locks::EIID_ILockSupport, (PInterface*)ppILockSupport);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
class CReentrantLock
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICReentrantLockClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CReentrantLock, RGM_SAME_DOMAIN, 
                EIID_ICReentrantLockClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFair(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantLock** ppIReentrantLock)
    {

        return _CObject_CreateInstance(ECLSID_CReentrantLock, pRegime, Elastos::Utility::Concurrent::Locks::EIID_IReentrantLock, (IInterface**)ppIReentrantLock);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantLock** __ppIReentrantLock)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIReentrantLock);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantLock** ppIReentrantLock)
    {
        return _CObject_CreateInstance(ECLSID_CReentrantLock, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Locks::EIID_IReentrantLock, (PInterface*)ppIReentrantLock);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CReentrantLock, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CReentrantLock, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CReentrantLock, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CReentrantLock, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantLock** __ppIReentrantLock)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIReentrantLock = Elastos::Utility::Concurrent::Locks::IReentrantLock::Probe(__pNewObj);
        if (*__ppIReentrantLock) (*__ppIReentrantLock)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantLock** __ppIReentrantLock)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIReentrantLock);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
namespace Locks {
class CReentrantReadWriteLock
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICReentrantReadWriteLockClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CReentrantReadWriteLock, RGM_SAME_DOMAIN, 
                EIID_ICReentrantReadWriteLockClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFair(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantReadWriteLock** ppIReentrantReadWriteLock)
    {

        return _CObject_CreateInstance(ECLSID_CReentrantReadWriteLock, pRegime, Elastos::Utility::Concurrent::Locks::EIID_IReentrantReadWriteLock, (IInterface**)ppIReentrantReadWriteLock);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantReadWriteLock** __ppIReentrantReadWriteLock)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIReentrantReadWriteLock);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantReadWriteLock** ppIReentrantReadWriteLock)
    {
        return _CObject_CreateInstance(ECLSID_CReentrantReadWriteLock, RGM_SAME_DOMAIN, Elastos::Utility::Concurrent::Locks::EIID_IReentrantReadWriteLock, (PInterface*)ppIReentrantReadWriteLock);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {

        return _CObject_CreateInstance(ECLSID_CReentrantReadWriteLock, pRegime, Elastos::IO::EIID_ISerializable, (IInterface**)ppISerializable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISerializable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::IO::ISerializable** ppISerializable)
    {
        return _CObject_CreateInstance(ECLSID_CReentrantReadWriteLock, RGM_SAME_DOMAIN, Elastos::IO::EIID_ISerializable, (PInterface*)ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CReentrantReadWriteLock, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CReentrantReadWriteLock, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantReadWriteLock** __ppIReentrantReadWriteLock)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIReentrantReadWriteLock = Elastos::Utility::Concurrent::Locks::IReentrantReadWriteLock::Probe(__pNewObj);
        if (*__ppIReentrantReadWriteLock) (*__ppIReentrantReadWriteLock)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::Concurrent::Locks::IReentrantReadWriteLock** __ppIReentrantReadWriteLock)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIReentrantReadWriteLock);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Concurrent {
class CSemaphore
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSemaphoreClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSemaphore, RGM_SAME_DOMAIN, 
                EIID_ICSemaphoreClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPermits(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSemaphoreClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSemaphore, RGM_SAME_DOMAIN, 
                EIID_ICSemaphoreClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPermitsFair(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Concurrent::ISemaphore** __ppISemaphore)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISemaphore = Elastos::Utility::Concurrent::ISemaphore::Probe(__pNewObj);
        if (*__ppISemaphore) (*__ppISemaphore)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Concurrent::ISemaphore** __ppISemaphore)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISemaphore);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Concurrent::ISemaphore** __ppISemaphore)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISemaphore = Elastos::Utility::Concurrent::ISemaphore::Probe(__pNewObj);
        if (*__ppISemaphore) (*__ppISemaphore)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Concurrent::ISemaphore** __ppISemaphore)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISemaphore);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CAdler32
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Zip::IAdler32** ppIAdler32)
    {

        return _CObject_CreateInstance(ECLSID_CAdler32, pRegime, Elastos::Utility::Zip::EIID_IAdler32, (IInterface**)ppIAdler32);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Zip::IAdler32** __ppIAdler32)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAdler32);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Zip::IAdler32** ppIAdler32)
    {
        return _CObject_CreateInstance(ECLSID_CAdler32, RGM_SAME_DOMAIN, Elastos::Utility::Zip::EIID_IAdler32, (PInterface*)ppIAdler32);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAdler32, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAdler32, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CCRC32
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Zip::ICRC32** ppICRC32)
    {

        return _CObject_CreateInstance(ECLSID_CCRC32, pRegime, Elastos::Utility::Zip::EIID_ICRC32, (IInterface**)ppICRC32);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Zip::ICRC32** __ppICRC32)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICRC32);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Zip::ICRC32** ppICRC32)
    {
        return _CObject_CreateInstance(ECLSID_CCRC32, RGM_SAME_DOMAIN, Elastos::Utility::Zip::EIID_ICRC32, (PInterface*)ppICRC32);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCRC32, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCRC32, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CInflater
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflater, RGM_SAME_DOMAIN, 
                EIID_ICInflaterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNoHeader(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Zip::IInflater** ppIInflater)
    {

        return _CObject_CreateInstance(ECLSID_CInflater, pRegime, Elastos::Utility::Zip::EIID_IInflater, (IInterface**)ppIInflater);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Zip::IInflater** __ppIInflater)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIInflater);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Zip::IInflater** ppIInflater)
    {
        return _CObject_CreateInstance(ECLSID_CInflater, RGM_SAME_DOMAIN, Elastos::Utility::Zip::EIID_IInflater, (PInterface*)ppIInflater);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CInflater, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CInflater, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Utility::Zip::IInflater** __ppIInflater)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflater = Elastos::Utility::Zip::IInflater::Probe(__pNewObj);
        if (*__ppIInflater) (*__ppIInflater)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Utility::Zip::IInflater** __ppIInflater)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIInflater);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CDeflater
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflater, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLevel(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflater, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithLevelNoHeader(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Zip::IDeflater** ppIDeflater)
    {

        return _CObject_CreateInstance(ECLSID_CDeflater, pRegime, Elastos::Utility::Zip::EIID_IDeflater, (IInterface**)ppIDeflater);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Zip::IDeflater** __ppIDeflater)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDeflater);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Zip::IDeflater** ppIDeflater)
    {
        return _CObject_CreateInstance(ECLSID_CDeflater, RGM_SAME_DOMAIN, Elastos::Utility::Zip::EIID_IDeflater, (PInterface*)ppIDeflater);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDeflater, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDeflater, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Zip::IDeflater** __ppIDeflater)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflater = Elastos::Utility::Zip::IDeflater::Probe(__pNewObj);
        if (*__ppIDeflater) (*__ppIDeflater)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Zip::IDeflater** __ppIDeflater)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDeflater);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Zip::IDeflater** __ppIDeflater)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflater = Elastos::Utility::Zip::IDeflater::Probe(__pNewObj);
        if (*__ppIDeflater) (*__ppIDeflater)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Zip::IDeflater** __ppIDeflater)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIDeflater);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CInflaterInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflaterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICInflaterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflaterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICInflaterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsInflater(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflaterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICInflaterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsInflaterBsize(pParam0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IInflaterInputStream** __ppIInflaterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflaterInputStream = Elastos::Utility::Zip::IInflaterInputStream::Probe(__pNewObj);
        if (*__ppIInflaterInputStream) (*__ppIInflaterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IInflaterInputStream** __ppIInflaterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIInflaterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ Elastos::Utility::Zip::IInflaterInputStream** __ppIInflaterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflaterInputStream = Elastos::Utility::Zip::IInflaterInputStream::Probe(__pNewObj);
        if (*__ppIInflaterInputStream) (*__ppIInflaterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [out] */ Elastos::Utility::Zip::IInflaterInputStream** __ppIInflaterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIInflaterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::Zip::IInflaterInputStream** __ppIInflaterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflaterInputStream = Elastos::Utility::Zip::IInflaterInputStream::Probe(__pNewObj);
        if (*__ppIInflaterInputStream) (*__ppIInflaterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::Zip::IInflaterInputStream** __ppIInflaterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIInflaterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CInflaterOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflaterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICInflaterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflaterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICInflaterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsInf(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInflaterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInflaterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICInflaterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsInfBufferSize(pParam0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IInflaterOutputStream** __ppIInflaterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflaterOutputStream = Elastos::Utility::Zip::IInflaterOutputStream::Probe(__pNewObj);
        if (*__ppIInflaterOutputStream) (*__ppIInflaterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IInflaterOutputStream** __ppIInflaterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIInflaterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ Elastos::Utility::Zip::IInflaterOutputStream** __ppIInflaterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflaterOutputStream = Elastos::Utility::Zip::IInflaterOutputStream::Probe(__pNewObj);
        if (*__ppIInflaterOutputStream) (*__ppIInflaterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [out] */ Elastos::Utility::Zip::IInflaterOutputStream** __ppIInflaterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIInflaterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::Zip::IInflaterOutputStream** __ppIInflaterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInflaterOutputStream = Elastos::Utility::Zip::IInflaterOutputStream::Probe(__pNewObj);
        if (*__ppIInflaterOutputStream) (*__ppIInflaterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::Zip::IInflaterOutputStream** __ppIInflaterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIInflaterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IInflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CDeflaterInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflaterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflaterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsDeflater(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflaterInputStream, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsDeflaterBufferSize(pParam0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IDeflaterInputStream** __ppIDeflaterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflaterInputStream = Elastos::Utility::Zip::IDeflaterInputStream::Probe(__pNewObj);
        if (*__ppIDeflaterInputStream) (*__ppIDeflaterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IDeflaterInputStream** __ppIDeflaterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDeflaterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ Elastos::Utility::Zip::IDeflaterInputStream** __ppIDeflaterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflaterInputStream = Elastos::Utility::Zip::IDeflaterInputStream::Probe(__pNewObj);
        if (*__ppIDeflaterInputStream) (*__ppIDeflaterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [out] */ Elastos::Utility::Zip::IDeflaterInputStream** __ppIDeflaterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIDeflaterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::Zip::IDeflaterInputStream** __ppIDeflaterInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflaterInputStream = Elastos::Utility::Zip::IDeflaterInputStream::Probe(__pNewObj);
        if (*__ppIDeflaterInputStream) (*__ppIDeflaterInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::Zip::IDeflaterInputStream** __ppIDeflaterInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIDeflaterInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CDeflaterOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflaterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflaterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsDef(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDeflaterOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDeflaterOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICDeflaterOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsDefBsize(pParam0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IDeflaterOutputStream** __ppIDeflaterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflaterOutputStream = Elastos::Utility::Zip::IDeflaterOutputStream::Probe(__pNewObj);
        if (*__ppIDeflaterOutputStream) (*__ppIDeflaterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IDeflaterOutputStream** __ppIDeflaterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIDeflaterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ Elastos::Utility::Zip::IDeflaterOutputStream** __ppIDeflaterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflaterOutputStream = Elastos::Utility::Zip::IDeflaterOutputStream::Probe(__pNewObj);
        if (*__ppIDeflaterOutputStream) (*__ppIDeflaterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [out] */ Elastos::Utility::Zip::IDeflaterOutputStream** __ppIDeflaterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIDeflaterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::Zip::IDeflaterOutputStream** __ppIDeflaterOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDeflaterOutputStream = Elastos::Utility::Zip::IDeflaterOutputStream::Probe(__pNewObj);
        if (*__ppIDeflaterOutputStream) (*__ppIDeflaterOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::Zip::IDeflaterOutputStream** __ppIDeflaterOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIDeflaterOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IDeflater * pParam1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CCheckedInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCheckedInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCheckedInputStream, RGM_SAME_DOMAIN, 
                EIID_ICCheckedInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsCsum(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ Elastos::Utility::Zip::ICheckedInputStream** __ppICheckedInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICheckedInputStream = Elastos::Utility::Zip::ICheckedInputStream::Probe(__pNewObj);
        if (*__ppICheckedInputStream) (*__ppICheckedInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,
/* [out] */ Elastos::Utility::Zip::ICheckedInputStream** __ppICheckedInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICheckedInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CCheckedOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICCheckedOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CCheckedOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICCheckedOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsCs(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ Elastos::Utility::Zip::ICheckedOutputStream** __ppICheckedOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICheckedOutputStream = Elastos::Utility::Zip::ICheckedOutputStream::Probe(__pNewObj);
        if (*__ppICheckedOutputStream) (*__ppICheckedOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,
/* [out] */ Elastos::Utility::Zip::ICheckedOutputStream** __ppICheckedOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppICheckedOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Zip::IChecksum * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CGZIPInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGZIPInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGZIPInputStream, RGM_SAME_DOMAIN, 
                EIID_ICGZIPInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGZIPInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGZIPInputStream, RGM_SAME_DOMAIN, 
                EIID_ICGZIPInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIsSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IGZIPInputStream** __ppIGZIPInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGZIPInputStream = Elastos::Utility::Zip::IGZIPInputStream::Probe(__pNewObj);
        if (*__ppIGZIPInputStream) (*__ppIGZIPInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IGZIPInputStream** __ppIGZIPInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIGZIPInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::Zip::IGZIPInputStream** __ppIGZIPInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGZIPInputStream = Elastos::Utility::Zip::IGZIPInputStream::Probe(__pNewObj);
        if (*__ppIGZIPInputStream) (*__ppIGZIPInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::Zip::IGZIPInputStream** __ppIGZIPInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIGZIPInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CGZIPOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGZIPOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGZIPOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICGZIPOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICGZIPOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CGZIPOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICGZIPOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsSize(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IGZIPOutputStream** __ppIGZIPOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGZIPOutputStream = Elastos::Utility::Zip::IGZIPOutputStream::Probe(__pNewObj);
        if (*__ppIGZIPOutputStream) (*__ppIGZIPOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IGZIPOutputStream** __ppIGZIPOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIGZIPOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::Zip::IGZIPOutputStream** __ppIGZIPOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIGZIPOutputStream = Elastos::Utility::Zip::IGZIPOutputStream::Probe(__pNewObj);
        if (*__ppIGZIPOutputStream) (*__ppIGZIPOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::Zip::IGZIPOutputStream** __ppIGZIPOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIGZIPOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CZipInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipInputStream, RGM_SAME_DOMAIN, 
                EIID_ICZipInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStream(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IZipInputStream** __ppIZipInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipInputStream = Elastos::Utility::Zip::IZipInputStream::Probe(__pNewObj);
        if (*__ppIZipInputStream) (*__ppIZipInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IZipInputStream** __ppIZipInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIZipInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IZipConstants** __ppIZipConstants)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipConstants = Elastos::Utility::Zip::IZipConstants::Probe(__pNewObj);
        if (*__ppIZipConstants) (*__ppIZipConstants)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IZipConstants** __ppIZipConstants)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIZipConstants);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CZipOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICZipOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IZipOutputStream** __ppIZipOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipOutputStream = Elastos::Utility::Zip::IZipOutputStream::Probe(__pNewObj);
        if (*__ppIZipOutputStream) (*__ppIZipOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IZipOutputStream** __ppIZipOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIZipOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::Zip::IZipConstants** __ppIZipConstants)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipConstants = Elastos::Utility::Zip::IZipConstants::Probe(__pNewObj);
        if (*__ppIZipConstants) (*__ppIZipConstants)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::Zip::IZipConstants** __ppIZipConstants)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIZipConstants);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CZipEntry
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipEntry, RGM_SAME_DOMAIN, 
                EIID_ICZipEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipEntry, RGM_SAME_DOMAIN, 
                EIID_ICZipEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithZe(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,/* [in] */ Elastos::IO::IInputStream * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipEntry, RGM_SAME_DOMAIN, 
                EIID_ICZipEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithHdrBufIs(Param0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::Zip::IZipEntry** __ppIZipEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipEntry = Elastos::Utility::Zip::IZipEntry::Probe(__pNewObj);
        if (*__ppIZipEntry) (*__ppIZipEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::Zip::IZipEntry** __ppIZipEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIZipEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,/* [out] */ Elastos::Utility::Zip::IZipEntry** __ppIZipEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipEntry = Elastos::Utility::Zip::IZipEntry::Probe(__pNewObj);
        if (*__ppIZipEntry) (*__ppIZipEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,
/* [out] */ Elastos::Utility::Zip::IZipEntry** __ppIZipEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIZipEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,/* [in] */ Elastos::IO::IInputStream * pParam1,/* [out] */ Elastos::Utility::Zip::IZipEntry** __ppIZipEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipEntry = Elastos::Utility::Zip::IZipEntry::Probe(__pNewObj);
        if (*__ppIZipEntry) (*__ppIZipEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,
/* [in] */ Elastos::IO::IInputStream * pParam1,
/* [out] */ Elastos::Utility::Zip::IZipEntry** __ppIZipEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIZipEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,/* [in] */ Elastos::IO::IInputStream * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS ArrayOf<_ELASTOS Byte> & Param0,
/* [in] */ Elastos::IO::IInputStream * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Zip {
class CZipFile
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipFile, RGM_SAME_DOMAIN, 
                EIID_ICZipFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipFile, RGM_SAME_DOMAIN, 
                EIID_ICZipFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileMode(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICZipFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CZipFile, RGM_SAME_DOMAIN, 
                EIID_ICZipFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::Utility::Zip::IZipFile** __ppIZipFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipFile = Elastos::Utility::Zip::IZipFile::Probe(__pNewObj);
        if (*__ppIZipFile) (*__ppIZipFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::Utility::Zip::IZipFile** __ppIZipFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIZipFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Utility::Zip::IZipFile** __ppIZipFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipFile = Elastos::Utility::Zip::IZipFile::Probe(__pNewObj);
        if (*__ppIZipFile) (*__ppIZipFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Utility::Zip::IZipFile** __ppIZipFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIZipFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::Zip::IZipFile** __ppIZipFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIZipFile = Elastos::Utility::Zip::IZipFile::Probe(__pNewObj);
        if (*__ppIZipFile) (*__ppIZipFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::Zip::IZipFile** __ppIZipFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIZipFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CName
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICNameClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CName, RGM_SAME_DOMAIN, 
                EIID_ICNameClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICNameClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CName, RGM_SAME_DOMAIN, 
                EIID_ICNameClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameValidateName(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::Jar::IName** __ppIName)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIName = Elastos::Utility::Jar::IName::Probe(__pNewObj);
        if (*__ppIName) (*__ppIName)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::Jar::IName** __ppIName)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIName);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Jar::IName** __ppIName)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIName = Elastos::Utility::Jar::IName::Probe(__pNewObj);
        if (*__ppIName) (*__ppIName)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Jar::IName** __ppIName)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIName);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CAttributes
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributesClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributes, RGM_SAME_DOMAIN, 
                EIID_ICAttributesClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithAttributes(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICAttributesClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CAttributes, RGM_SAME_DOMAIN, 
                EIID_ICAttributesClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSize(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Jar::IAttributes** ppIAttributes)
    {

        return _CObject_CreateInstance(ECLSID_CAttributes, pRegime, Elastos::Utility::Jar::EIID_IAttributes, (IInterface**)ppIAttributes);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Jar::IAttributes** __ppIAttributes)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAttributes);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Jar::IAttributes** ppIAttributes)
    {
        return _CObject_CreateInstance(ECLSID_CAttributes, RGM_SAME_DOMAIN, Elastos::Utility::Jar::EIID_IAttributes, (PInterface*)ppIAttributes);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CAttributes, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CAttributes, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::IMap** ppIMap)
    {

        return _CObject_CreateInstance(ECLSID_CAttributes, pRegime, Elastos::Utility::EIID_IMap, (IInterface**)ppIMap);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMap);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::IMap** ppIMap)
    {
        return _CObject_CreateInstance(ECLSID_CAttributes, RGM_SAME_DOMAIN, Elastos::Utility::EIID_IMap, (PInterface*)ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAttributes, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAttributes, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,/* [out] */ Elastos::Utility::Jar::IAttributes** __ppIAttributes)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributes = Elastos::Utility::Jar::IAttributes::Probe(__pNewObj);
        if (*__ppIAttributes) (*__ppIAttributes)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,
/* [out] */ Elastos::Utility::Jar::IAttributes** __ppIAttributes)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIAttributes);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IAttributes * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::Jar::IAttributes** __ppIAttributes)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIAttributes = Elastos::Utility::Jar::IAttributes::Probe(__pNewObj);
        if (*__ppIAttributes) (*__ppIAttributes)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::Jar::IAttributes** __ppIAttributes)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIAttributes);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIMap = Elastos::Utility::IMap::Probe(__pNewObj);
        if (*__ppIMap) (*__ppIMap)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Utility::IMap** __ppIMap)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIMap);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CJarEntry
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarEntry, RGM_SAME_DOMAIN, 
                EIID_ICJarEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarEntry, RGM_SAME_DOMAIN, 
                EIID_ICJarEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithZipEntry(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Jar::IJarEntry * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarEntryClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarEntry, RGM_SAME_DOMAIN, 
                EIID_ICJarEntryClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithJarEntry(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::Jar::IJarEntry** __ppIJarEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarEntry = Elastos::Utility::Jar::IJarEntry::Probe(__pNewObj);
        if (*__ppIJarEntry) (*__ppIJarEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::Jar::IJarEntry** __ppIJarEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIJarEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,/* [out] */ Elastos::Utility::Jar::IJarEntry** __ppIJarEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarEntry = Elastos::Utility::Jar::IJarEntry::Probe(__pNewObj);
        if (*__ppIJarEntry) (*__ppIJarEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,
/* [out] */ Elastos::Utility::Jar::IJarEntry** __ppIJarEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJarEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Zip::IZipEntry * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IJarEntry * pParam0,/* [out] */ Elastos::Utility::Jar::IJarEntry** __ppIJarEntry)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarEntry = Elastos::Utility::Jar::IJarEntry::Probe(__pNewObj);
        if (*__ppIJarEntry) (*__ppIJarEntry)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IJarEntry * pParam0,
/* [out] */ Elastos::Utility::Jar::IJarEntry** __ppIJarEntry)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJarEntry);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IJarEntry * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IJarEntry * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CJarFile
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarFile, RGM_SAME_DOMAIN, 
                EIID_ICJarFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFile(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarFile, RGM_SAME_DOMAIN, 
                EIID_ICJarFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileVerify(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarFile, RGM_SAME_DOMAIN, 
                EIID_ICJarFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFileVerifyMode(pParam0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarFile, RGM_SAME_DOMAIN, 
                EIID_ICJarFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilename(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarFileClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarFile, RGM_SAME_DOMAIN, 
                EIID_ICJarFileClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithFilenameVerify(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarFile = Elastos::Utility::Jar::IJarFile::Probe(__pNewObj);
        if (*__ppIJarFile) (*__ppIJarFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJarFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarFile = Elastos::Utility::Jar::IJarFile::Probe(__pNewObj);
        if (*__ppIJarFile) (*__ppIJarFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIJarFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarFile = Elastos::Utility::Jar::IJarFile::Probe(__pNewObj);
        if (*__ppIJarFile) (*__ppIJarFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIJarFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IFile * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IFile * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarFile = Elastos::Utility::Jar::IJarFile::Probe(__pNewObj);
        if (*__ppIJarFile) (*__ppIJarFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIJarFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarFile = Elastos::Utility::Jar::IJarFile::Probe(__pNewObj);
        if (*__ppIJarFile) (*__ppIJarFile)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Jar::IJarFile** __ppIJarFile)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIJarFile);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CJarInputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarInputStream, RGM_SAME_DOMAIN, 
                EIID_ICJarInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStreamVerify(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarInputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarInputStream, RGM_SAME_DOMAIN, 
                EIID_ICJarInputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStream(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ Elastos::Utility::Jar::IJarInputStream** __ppIJarInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarInputStream = Elastos::Utility::Jar::IJarInputStream::Probe(__pNewObj);
        if (*__ppIJarInputStream) (*__ppIJarInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ Elastos::Utility::Jar::IJarInputStream** __ppIJarInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIJarInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [in] */ _ELASTOS Boolean Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [in] */ _ELASTOS Boolean Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Jar::IJarInputStream** __ppIJarInputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarInputStream = Elastos::Utility::Jar::IJarInputStream::Probe(__pNewObj);
        if (*__ppIJarInputStream) (*__ppIJarInputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Jar::IJarInputStream** __ppIJarInputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJarInputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CJarOutputStream
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICJarOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOsManifest(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJarOutputStreamClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJarOutputStream, RGM_SAME_DOMAIN, 
                EIID_ICJarOutputStreamClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithOs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,/* [out] */ Elastos::Utility::Jar::IJarOutputStream** __ppIJarOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarOutputStream = Elastos::Utility::Jar::IJarOutputStream::Probe(__pNewObj);
        if (*__ppIJarOutputStream) (*__ppIJarOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,
/* [out] */ Elastos::Utility::Jar::IJarOutputStream** __ppIJarOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIJarOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [in] */ Elastos::Utility::Jar::IManifest * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::Utility::Jar::IJarOutputStream** __ppIJarOutputStream)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJarOutputStream = Elastos::Utility::Jar::IJarOutputStream::Probe(__pNewObj);
        if (*__ppIJarOutputStream) (*__ppIJarOutputStream)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::Utility::Jar::IJarOutputStream** __ppIJarOutputStream)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJarOutputStream);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFlushable = Elastos::IO::IFlushable::Probe(__pNewObj);
        if (*__ppIFlushable) (*__ppIFlushable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ Elastos::IO::IFlushable** __ppIFlushable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIFlushable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IOutputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IOutputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CManifest
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICManifestClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CManifest, RGM_SAME_DOMAIN, 
                EIID_ICManifestClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIs(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICManifestClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CManifest, RGM_SAME_DOMAIN, 
                EIID_ICManifestClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMani(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Jar::IManifest** ppIManifest)
    {

        return _CObject_CreateInstance(ECLSID_CManifest, pRegime, Elastos::Utility::Jar::EIID_IManifest, (IInterface**)ppIManifest);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Jar::IManifest** __ppIManifest)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIManifest);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Utility::Jar::IManifest** ppIManifest)
    {
        return _CObject_CreateInstance(ECLSID_CManifest, RGM_SAME_DOMAIN, Elastos::Utility::Jar::EIID_IManifest, (PInterface*)ppIManifest);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {

        return _CObject_CreateInstance(ECLSID_CManifest, pRegime, Elastos::Core::EIID_ICloneable, (IInterface**)ppICloneable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloneable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloneable** ppICloneable)
    {
        return _CObject_CreateInstance(ECLSID_CManifest, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloneable, (PInterface*)ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CManifest, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CManifest, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Utility::Jar::IManifest** __ppIManifest)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIManifest = Elastos::Utility::Jar::IManifest::Probe(__pNewObj);
        if (*__ppIManifest) (*__ppIManifest)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Utility::Jar::IManifest** __ppIManifest)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIManifest);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IInputStream * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IInputStream * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,/* [out] */ Elastos::Utility::Jar::IManifest** __ppIManifest)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIManifest = Elastos::Utility::Jar::IManifest::Probe(__pNewObj);
        if (*__ppIManifest) (*__ppIManifest)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,
/* [out] */ Elastos::Utility::Jar::IManifest** __ppIManifest)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIManifest);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICloneable = Elastos::Core::ICloneable::Probe(__pNewObj);
        if (*__ppICloneable) (*__ppICloneable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,
/* [out] */ Elastos::Core::ICloneable** __ppICloneable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppICloneable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Utility::Jar::IManifest * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Utility {
namespace Jar {
class CPack200Helper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Utility::Jar::IPack200Helper** ppIPack200Helper)
    {

        return _CObject_CreateInstance(ECLSID_CPack200Helper, pRegime, Elastos::Utility::Jar::EIID_IPack200Helper, (IInterface**)ppIPack200Helper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Utility::Jar::IPack200Helper** __ppIPack200Helper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIPack200Helper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Utility::Jar::IPack200Helper** ppIPack200Helper)
    {
        return _CObject_CreateInstance(ECLSID_CPack200Helper, RGM_SAME_DOMAIN, Elastos::Utility::Jar::EIID_IPack200Helper, (PInterface*)ppIPack200Helper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CSQLWarning
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSQLWarningClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSQLWarning, RGM_SAME_DOMAIN, 
                EIID_ICSQLWarningClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheReason(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSQLWarningClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSQLWarning, RGM_SAME_DOMAIN, 
                EIID_ICSQLWarningClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheReasonTheSQLState(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSQLWarningClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSQLWarning, RGM_SAME_DOMAIN, 
                EIID_ICSQLWarningClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheReasonTheSQLStateTheErrorCode(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::ISQLWarning** ppISQLWarning)
    {

        return _CObject_CreateInstance(ECLSID_CSQLWarning, pRegime, Elastos::Sql::EIID_ISQLWarning, (IInterface**)ppISQLWarning);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppISQLWarning);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::ISQLWarning** ppISQLWarning)
    {
        return _CObject_CreateInstance(ECLSID_CSQLWarning, RGM_SAME_DOMAIN, Elastos::Sql::EIID_ISQLWarning, (PInterface*)ppISQLWarning);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSQLWarning, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSQLWarning, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISQLWarning = Elastos::Sql::ISQLWarning::Probe(__pNewObj);
        if (*__ppISQLWarning) (*__ppISQLWarning)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISQLWarning);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISQLWarning = Elastos::Sql::ISQLWarning::Probe(__pNewObj);
        if (*__ppISQLWarning) (*__ppISQLWarning)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISQLWarning);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISQLWarning = Elastos::Sql::ISQLWarning::Probe(__pNewObj);
        if (*__ppISQLWarning) (*__ppISQLWarning)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Sql::ISQLWarning** __ppISQLWarning)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppISQLWarning);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CTime
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTime, RGM_SAME_DOMAIN, 
                EIID_ICTimeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheHourTheMinuteTheSecond(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimeClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTime, RGM_SAME_DOMAIN, 
                EIID_ICTimeClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheTime(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Sql::ITime** __ppITime)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITime = Elastos::Sql::ITime::Probe(__pNewObj);
        if (*__ppITime) (*__ppITime)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Sql::ITime** __ppITime)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppITime);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Sql::ITime** __ppITime)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITime = Elastos::Sql::ITime::Probe(__pNewObj);
        if (*__ppITime) (*__ppITime)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Sql::ITime** __ppITime)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppITime);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CSqlDate
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSqlDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSqlDate, RGM_SAME_DOMAIN, 
                EIID_ICSqlDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheYearTheMonthTheDay(Param0, Param1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSqlDateClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSqlDate, RGM_SAME_DOMAIN, 
                EIID_ICSqlDateClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheDate(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ Elastos::Sql::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Sql::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ Elastos::Sql::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Sql::IDate** __ppIDate)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDate = Elastos::Sql::IDate::Probe(__pNewObj);
        if (*__ppIDate) (*__ppIDate)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Sql::IDate** __ppIDate)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDate);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CTimestamp
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimestampClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTimestamp, RGM_SAME_DOMAIN, 
                EIID_ICTimestampClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheYearTheMonthTheDateTheHourTheMinuteTheSecondTheNano(Param0, Param1, Param2, Param3, Param4, Param5, Param6, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTimestampClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTimestamp, RGM_SAME_DOMAIN, 
                EIID_ICTimestampClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTheTime(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [out] */ Elastos::Sql::ITimestamp** __ppITimestamp)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITimestamp = Elastos::Sql::ITimestamp::Probe(__pNewObj);
        if (*__ppITimestamp) (*__ppITimestamp)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [out] */ Elastos::Sql::ITimestamp** __ppITimestamp)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, __ppITimestamp);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Int32 Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [in] */ _ELASTOS Int32 Param5,/* [in] */ _ELASTOS Int32 Param6,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, Param5, Param6, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [in] */ _ELASTOS Int32 Param5,
/* [in] */ _ELASTOS Int32 Param6,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, Param5, Param6, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Sql::ITimestamp** __ppITimestamp)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITimestamp = Elastos::Sql::ITimestamp::Probe(__pNewObj);
        if (*__ppITimestamp) (*__ppITimestamp)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Sql::ITimestamp** __ppITimestamp)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppITimestamp);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CDriverPropertyInfo
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDriverPropertyInfoClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDriverPropertyInfo, RGM_SAME_DOMAIN, 
                EIID_ICDriverPropertyInfoClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameValue(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Sql::IDriverPropertyInfo** __ppIDriverPropertyInfo)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDriverPropertyInfo = Elastos::Sql::IDriverPropertyInfo::Probe(__pNewObj);
        if (*__ppIDriverPropertyInfo) (*__ppIDriverPropertyInfo)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Sql::IDriverPropertyInfo** __ppIDriverPropertyInfo)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIDriverPropertyInfo);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CDataTruncation
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Boolean Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDataTruncationClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDataTruncation, RGM_SAME_DOMAIN, 
                EIID_ICDataTruncationClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithIndexParameterReadDataSizeTransferSize(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Boolean Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::Sql::IDataTruncation** __ppIDataTruncation)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDataTruncation = Elastos::Sql::IDataTruncation::Probe(__pNewObj);
        if (*__ppIDataTruncation) (*__ppIDataTruncation)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::Sql::IDataTruncation** __ppIDataTruncation)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIDataTruncation);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Boolean Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISerializable = Elastos::IO::ISerializable::Probe(__pNewObj);
        if (*__ppISerializable) (*__ppISerializable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ Elastos::IO::ISerializable** __ppISerializable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppISerializable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [in] */ _ELASTOS Boolean Param1,/* [in] */ _ELASTOS Boolean Param2,/* [in] */ _ELASTOS Int32 Param3,/* [in] */ _ELASTOS Int32 Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [in] */ _ELASTOS Boolean Param1,
/* [in] */ _ELASTOS Boolean Param2,
/* [in] */ _ELASTOS Int32 Param3,
/* [in] */ _ELASTOS Int32 Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CDriverManager
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::IDriverManagerHelper** ppIDriverManagerHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDriverManager, pRegime, Elastos::Sql::EIID_IDriverManagerHelper, (IInterface**)ppIDriverManagerHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::IDriverManagerHelper** __ppIDriverManagerHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDriverManagerHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Sql::IDriverManagerHelper** ppIDriverManagerHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDriverManager, RGM_SAME_DOMAIN, Elastos::Sql::EIID_IDriverManagerHelper, (PInterface*)ppIDriverManagerHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
class CSQLPermission
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSQLPermissionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSQLPermission, RGM_SAME_DOMAIN, 
                EIID_ICSQLPermissionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICSQLPermissionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CSQLPermission, RGM_SAME_DOMAIN, 
                EIID_ICSQLPermissionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithNameActions(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Sql::ISQLPermission** __ppISQLPermission)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISQLPermission = Elastos::Sql::ISQLPermission::Probe(__pNewObj);
        if (*__ppISQLPermission) (*__ppISQLPermission)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Sql::ISQLPermission** __ppISQLPermission)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppISQLPermission);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Sql::ISQLPermission** __ppISQLPermission)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppISQLPermission = Elastos::Sql::ISQLPermission::Probe(__pNewObj);
        if (*__ppISQLPermission) (*__ppISQLPermission)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Sql::ISQLPermission** __ppISQLPermission)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppISQLPermission);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CTableResult
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTableResultClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTableResult, RGM_SAME_DOMAIN, 
                EIID_ICTableResultClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMaxrows(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::ITableResult** ppITableResult)
    {

        return _CObject_CreateInstance(ECLSID_CTableResult, pRegime, Elastos::Sql::SQLite::EIID_ITableResult, (IInterface**)ppITableResult);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::ITableResult** __ppITableResult)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppITableResult);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::ITableResult** ppITableResult)
    {
        return _CObject_CreateInstance(ECLSID_CTableResult, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_ITableResult, (PInterface*)ppITableResult);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTableResult, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTableResult, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Sql::SQLite::ITableResult** __ppITableResult)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITableResult = Elastos::Sql::SQLite::ITableResult::Probe(__pNewObj);
        if (*__ppITableResult) (*__ppITableResult)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Sql::SQLite::ITableResult** __ppITableResult)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppITableResult);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CShell
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IPrintWriter * pParam0,/* [in] */ Elastos::IO::IPrintWriter * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICShellClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CShell, RGM_SAME_DOMAIN, 
                EIID_ICShellClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPwErr(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [in] */ Elastos::IO::IPrintStream * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICShellClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CShell, RGM_SAME_DOMAIN, 
                EIID_ICShellClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPwErrs(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintWriter * pParam0,/* [in] */ Elastos::IO::IPrintWriter * pParam1,/* [out] */ Elastos::Sql::SQLite::IShell** __ppIShell)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIShell = Elastos::Sql::SQLite::IShell::Probe(__pNewObj);
        if (*__ppIShell) (*__ppIShell)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintWriter * pParam0,
/* [in] */ Elastos::IO::IPrintWriter * pParam1,
/* [out] */ Elastos::Sql::SQLite::IShell** __ppIShell)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIShell);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintWriter * pParam0,/* [in] */ Elastos::IO::IPrintWriter * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintWriter * pParam0,
/* [in] */ Elastos::IO::IPrintWriter * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [in] */ Elastos::IO::IPrintStream * pParam1,/* [out] */ Elastos::Sql::SQLite::IShell** __ppIShell)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIShell = Elastos::Sql::SQLite::IShell::Probe(__pNewObj);
        if (*__ppIShell) (*__ppIShell)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintStream * pParam0,
/* [in] */ Elastos::IO::IPrintStream * pParam1,
/* [out] */ Elastos::Sql::SQLite::IShell** __ppIShell)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIShell);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::IO::IPrintStream * pParam0,/* [in] */ Elastos::IO::IPrintStream * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::IO::IPrintStream * pParam0,
/* [in] */ Elastos::IO::IPrintStream * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CDBDump
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::IShell * pParam0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDBDumpClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDBDump, RGM_SAME_DOMAIN, 
                EIID_ICDBDumpClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSTables(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::IShell * pParam0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,/* [out] */ Elastos::Sql::SQLite::IDBDump** __ppIDBDump)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDBDump = Elastos::Sql::SQLite::IDBDump::Probe(__pNewObj);
        if (*__ppIDBDump) (*__ppIDBDump)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::IShell * pParam0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,
/* [out] */ Elastos::Sql::SQLite::IDBDump** __ppIDBDump)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIDBDump);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::IShell * pParam0,/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::IShell * pParam0,
/* [in] */ const _ELASTOS ArrayOf<_ELASTOS String> & Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CVm
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IVm** ppIVm)
    {

        return _CObject_CreateInstance(ECLSID_CVm, pRegime, Elastos::Sql::SQLite::EIID_IVm, (IInterface**)ppIVm);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IVm** __ppIVm)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIVm);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IVm** ppIVm)
    {
        return _CObject_CreateInstance(ECLSID_CVm, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IVm, (PInterface*)ppIVm);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CVm, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CVm, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CBlob
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IBlob** ppIBlob)
    {

        return _CObject_CreateInstance(ECLSID_CBlob, pRegime, Elastos::Sql::SQLite::EIID_IBlob, (IInterface**)ppIBlob);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IBlob** __ppIBlob)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBlob);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IBlob** ppIBlob)
    {
        return _CObject_CreateInstance(ECLSID_CBlob, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IBlob, (PInterface*)ppIBlob);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CBlob, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CBlob, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CBlobR
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBlobRClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBlobR, RGM_SAME_DOMAIN, 
                EIID_ICBlobRClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBlob(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,/* [out] */ Elastos::Sql::SQLite::IBlobR** __ppIBlobR)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlobR = Elastos::Sql::SQLite::IBlobR::Probe(__pNewObj);
        if (*__ppIBlobR) (*__ppIBlobR)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,
/* [out] */ Elastos::Sql::SQLite::IBlobR** __ppIBlobR)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBlobR);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CBlobW
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBlobWClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBlobW, RGM_SAME_DOMAIN, 
                EIID_ICBlobWClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithBlob(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,/* [out] */ Elastos::Sql::SQLite::IBlobW** __ppIBlobW)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBlobW = Elastos::Sql::SQLite::IBlobW::Probe(__pNewObj);
        if (*__ppIBlobW) (*__ppIBlobW)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,
/* [out] */ Elastos::Sql::SQLite::IBlobW** __ppIBlobW)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIBlobW);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::IBlob * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CDatabase
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IDatabase** ppIDatabase)
    {

        return _CObject_CreateInstance(ECLSID_CDatabase, pRegime, Elastos::Sql::SQLite::EIID_IDatabase, (IInterface**)ppIDatabase);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IDatabase** __ppIDatabase)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDatabase);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IDatabase** ppIDatabase)
    {
        return _CObject_CreateInstance(ECLSID_CDatabase, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IDatabase, (PInterface*)ppIDatabase);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDatabase, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDatabase, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CDatabaseHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IDatabaseHelper** ppIDatabaseHelper)
    {

        return _CObject_CreateInstance(ECLSID_CDatabaseHelper, pRegime, Elastos::Sql::SQLite::EIID_IDatabaseHelper, (IInterface**)ppIDatabaseHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IDatabaseHelper** __ppIDatabaseHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIDatabaseHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Sql::SQLite::IDatabaseHelper** ppIDatabaseHelper)
    {
        return _CObject_CreateInstance(ECLSID_CDatabaseHelper, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IDatabaseHelper, (PInterface*)ppIDatabaseHelper);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CJDBCDriver
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::IDriver** ppIDriver)
    {

        return _CObject_CreateInstance(ECLSID_CJDBCDriver, pRegime, Elastos::Sql::EIID_IDriver, (IInterface**)ppIDriver);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::IDriver** __ppIDriver)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDriver);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::IDriver** ppIDriver)
    {
        return _CObject_CreateInstance(ECLSID_CJDBCDriver, RGM_SAME_DOMAIN, Elastos::Sql::EIID_IDriver, (PInterface*)ppIDriver);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CJDBCDriver, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CJDBCDriver, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CBackup
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IBackup** ppIBackup)
    {

        return _CObject_CreateInstance(ECLSID_CBackup, pRegime, Elastos::Sql::SQLite::EIID_IBackup, (IInterface**)ppIBackup);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IBackup** __ppIBackup)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBackup);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IBackup** ppIBackup)
    {
        return _CObject_CreateInstance(ECLSID_CBackup, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IBackup, (PInterface*)ppIBackup);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CBackup, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CBackup, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CFunctionContext
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IFunctionContext** ppIFunctionContext)
    {

        return _CObject_CreateInstance(ECLSID_CFunctionContext, pRegime, Elastos::Sql::SQLite::EIID_IFunctionContext, (IInterface**)ppIFunctionContext);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IFunctionContext** __ppIFunctionContext)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFunctionContext);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IFunctionContext** ppIFunctionContext)
    {
        return _CObject_CreateInstance(ECLSID_CFunctionContext, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IFunctionContext, (PInterface*)ppIFunctionContext);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CFunctionContext, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CFunctionContext, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CStmt
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IStmt** ppIStmt)
    {

        return _CObject_CreateInstance(ECLSID_CStmt, pRegime, Elastos::Sql::SQLite::EIID_IStmt, (IInterface**)ppIStmt);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IStmt** __ppIStmt)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIStmt);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IStmt** ppIStmt)
    {
        return _CObject_CreateInstance(ECLSID_CStmt, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IStmt, (PInterface*)ppIStmt);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CStmt, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CStmt, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CStringEncoderHelper
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IStringEncoderHelper** ppIStringEncoderHelper)
    {

        return _CObject_CreateInstance(ECLSID_CStringEncoderHelper, pRegime, Elastos::Sql::SQLite::EIID_IStringEncoderHelper, (IInterface**)ppIStringEncoderHelper);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IStringEncoderHelper** __ppIStringEncoderHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIStringEncoderHelper);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IStringEncoderHelper** ppIStringEncoderHelper)
    {
        return _CObject_CreateInstance(ECLSID_CStringEncoderHelper, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IStringEncoderHelper, (PInterface*)ppIStringEncoderHelper);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CStringEncoderHelper, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CStringEncoderHelper, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CSinFunc
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IFunction** ppIFunction)
    {

        return _CObject_CreateInstance(ECLSID_CSinFunc, pRegime, Elastos::Sql::SQLite::EIID_IFunction, (IInterface**)ppIFunction);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IFunction** __ppIFunction)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIFunction);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IFunction** ppIFunction)
    {
        return _CObject_CreateInstance(ECLSID_CSinFunc, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IFunction, (PInterface*)ppIFunction);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CSinFunc, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CSinFunc, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CTestTrace
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::ITrace** ppITrace)
    {

        return _CObject_CreateInstance(ECLSID_CTestTrace, pRegime, Elastos::Sql::SQLite::EIID_ITrace, (IInterface**)ppITrace);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::ITrace** __ppITrace)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppITrace);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::ITrace** ppITrace)
    {
        return _CObject_CreateInstance(ECLSID_CTestTrace, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_ITrace, (PInterface*)ppITrace);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {

        return _CObject_CreateInstance(ECLSID_CTestTrace, pRegime, Elastos::Sql::SQLite::EIID_ICallback, (IInterface**)ppICallback);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::ICallback** __ppICallback)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICallback);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {
        return _CObject_CreateInstance(ECLSID_CTestTrace, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_ICallback, (PInterface*)ppICallback);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTestTrace, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTestTrace, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CAuthorizerCallback
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IAuthorizer** ppIAuthorizer)
    {

        return _CObject_CreateInstance(ECLSID_CAuthorizerCallback, pRegime, Elastos::Sql::SQLite::EIID_IAuthorizer, (IInterface**)ppIAuthorizer);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IAuthorizer** __ppIAuthorizer)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIAuthorizer);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IAuthorizer** ppIAuthorizer)
    {
        return _CObject_CreateInstance(ECLSID_CAuthorizerCallback, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IAuthorizer, (PInterface*)ppIAuthorizer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {

        return _CObject_CreateInstance(ECLSID_CAuthorizerCallback, pRegime, Elastos::Sql::SQLite::EIID_ICallback, (IInterface**)ppICallback);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::ICallback** __ppICallback)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICallback);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {
        return _CObject_CreateInstance(ECLSID_CAuthorizerCallback, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_ICallback, (PInterface*)ppICallback);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CAuthorizerCallback, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CAuthorizerCallback, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CTestBusyHandler
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IBusyHandler** ppIBusyHandler)
    {

        return _CObject_CreateInstance(ECLSID_CTestBusyHandler, pRegime, Elastos::Sql::SQLite::EIID_IBusyHandler, (IInterface**)ppIBusyHandler);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IBusyHandler** __ppIBusyHandler)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIBusyHandler);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IBusyHandler** ppIBusyHandler)
    {
        return _CObject_CreateInstance(ECLSID_CTestBusyHandler, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IBusyHandler, (PInterface*)ppIBusyHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {

        return _CObject_CreateInstance(ECLSID_CTestBusyHandler, pRegime, Elastos::Sql::SQLite::EIID_ICallback, (IInterface**)ppICallback);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::ICallback** __ppICallback)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICallback);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {
        return _CObject_CreateInstance(ECLSID_CTestBusyHandler, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_ICallback, (PInterface*)ppICallback);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTestBusyHandler, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTestBusyHandler, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CTestProgressHandler
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IProgressHandler** ppIProgressHandler)
    {

        return _CObject_CreateInstance(ECLSID_CTestProgressHandler, pRegime, Elastos::Sql::SQLite::EIID_IProgressHandler, (IInterface**)ppIProgressHandler);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IProgressHandler** __ppIProgressHandler)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIProgressHandler);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IProgressHandler** ppIProgressHandler)
    {
        return _CObject_CreateInstance(ECLSID_CTestProgressHandler, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IProgressHandler, (PInterface*)ppIProgressHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {

        return _CObject_CreateInstance(ECLSID_CTestProgressHandler, pRegime, Elastos::Sql::SQLite::EIID_ICallback, (IInterface**)ppICallback);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::ICallback** __ppICallback)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICallback);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::ICallback** ppICallback)
    {
        return _CObject_CreateInstance(ECLSID_CTestProgressHandler, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_ICallback, (PInterface*)ppICallback);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTestProgressHandler, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTestProgressHandler, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
class CMockFunction
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::IMockFunction** ppIMockFunction)
    {

        return _CObject_CreateInstance(ECLSID_CMockFunction, pRegime, Elastos::Sql::SQLite::EIID_IMockFunction, (IInterface**)ppIMockFunction);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::IMockFunction** __ppIMockFunction)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIMockFunction);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::IMockFunction** ppIMockFunction)
    {
        return _CObject_CreateInstance(ECLSID_CMockFunction, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::EIID_IMockFunction, (PInterface*)ppIMockFunction);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CMockFunction, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CMockFunction, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CJDBCConnection
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJDBCConnectionClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJDBCConnection, RGM_SAME_DOMAIN, 
                EIID_ICJDBCConnectionClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithUrlEncPwdDrepVfs(Param0, Param1, Param2, Param3, Param4, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection** __ppIJDBCConnection)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJDBCConnection = Elastos::Sql::SQLite::JDBC::IJDBCConnection::Probe(__pNewObj);
        if (*__ppIJDBCConnection) (*__ppIJDBCConnection)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection** __ppIJDBCConnection)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIJDBCConnection);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ Elastos::Sql::SQLite::IBusyHandler** __ppIBusyHandler)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBusyHandler = Elastos::Sql::SQLite::IBusyHandler::Probe(__pNewObj);
        if (*__ppIBusyHandler) (*__ppIBusyHandler)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ Elastos::Sql::SQLite::IBusyHandler** __ppIBusyHandler)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIBusyHandler);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ const _ELASTOS String& Param3,/* [in] */ const _ELASTOS String& Param4,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, Param2, Param3, Param4, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ const _ELASTOS String& Param3,
/* [in] */ const _ELASTOS String& Param4,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, Param2, Param3, Param4, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CJDBCPreparedStatement
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJDBCPreparedStatementClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJDBCPreparedStatement, RGM_SAME_DOMAIN, 
                EIID_ICJDBCPreparedStatementClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithConnSql(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCPreparedStatement** __ppIJDBCPreparedStatement)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJDBCPreparedStatement = Elastos::Sql::SQLite::JDBC::IJDBCPreparedStatement::Probe(__pNewObj);
        if (*__ppIJDBCPreparedStatement) (*__ppIJDBCPreparedStatement)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCPreparedStatement** __ppIJDBCPreparedStatement)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIJDBCPreparedStatement);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Sql::IPreparedStatement** __ppIPreparedStatement)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIPreparedStatement = Elastos::Sql::IPreparedStatement::Probe(__pNewObj);
        if (*__ppIPreparedStatement) (*__ppIPreparedStatement)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Sql::IPreparedStatement** __ppIPreparedStatement)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIPreparedStatement);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CJDBCStatement
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJDBCStatementClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJDBCStatement, RGM_SAME_DOMAIN, 
                EIID_ICJDBCStatementClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithConn(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement** __ppIJDBCStatement)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJDBCStatement = Elastos::Sql::SQLite::JDBC::IJDBCStatement::Probe(__pNewObj);
        if (*__ppIJDBCStatement) (*__ppIJDBCStatement)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement** __ppIJDBCStatement)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJDBCStatement);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CJDBCResultSetMetaData
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJDBCResultSetMetaDataClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJDBCResultSetMetaData, RGM_SAME_DOMAIN, 
                EIID_ICJDBCResultSetMetaDataClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithR(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet * pParam0,/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSetMetaData** __ppIJDBCResultSetMetaData)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJDBCResultSetMetaData = Elastos::Sql::SQLite::JDBC::IJDBCResultSetMetaData::Probe(__pNewObj);
        if (*__ppIJDBCResultSetMetaData) (*__ppIJDBCResultSetMetaData)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet * pParam0,
/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSetMetaData** __ppIJDBCResultSetMetaData)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJDBCResultSetMetaData);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CTableResultX
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTableResultXClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTableResultX, RGM_SAME_DOMAIN, 
                EIID_ICTableResultXClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithMaxrows(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICTableResultXClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CTableResultX, RGM_SAME_DOMAIN, 
                EIID_ICTableResultXClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTr(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** ppITableResultX)
    {

        return _CObject_CreateInstance(ECLSID_CTableResultX, pRegime, Elastos::Sql::SQLite::JDBC::EIID_ITableResultX, (IInterface**)ppITableResultX);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** __ppITableResultX)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppITableResultX);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** ppITableResultX)
    {
        return _CObject_CreateInstance(ECLSID_CTableResultX, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::JDBC::EIID_ITableResultX, (PInterface*)ppITableResultX);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CTableResultX, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CTableResultX, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** __ppITableResultX)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITableResultX = Elastos::Sql::SQLite::JDBC::ITableResultX::Probe(__pNewObj);
        if (*__ppITableResultX) (*__ppITableResultX)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** __ppITableResultX)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppITableResultX);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,/* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** __ppITableResultX)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppITableResultX = Elastos::Sql::SQLite::JDBC::ITableResultX::Probe(__pNewObj);
        if (*__ppITableResultX) (*__ppITableResultX)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,
/* [out] */ Elastos::Sql::SQLite::JDBC::ITableResultX** __ppITableResultX)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppITableResultX);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CJDBCDatabaseMetaData
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJDBCDatabaseMetaDataClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJDBCDatabaseMetaData, RGM_SAME_DOMAIN, 
                EIID_ICJDBCDatabaseMetaDataClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithConn(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCDatabaseMetaData** __ppIJDBCDatabaseMetaData)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJDBCDatabaseMetaData = Elastos::Sql::SQLite::JDBC::IJDBCDatabaseMetaData::Probe(__pNewObj);
        if (*__ppIJDBCDatabaseMetaData) (*__ppIJDBCDatabaseMetaData)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCDatabaseMetaData** __ppIJDBCDatabaseMetaData)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIJDBCDatabaseMetaData);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCConnection * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CJDBCResultSet
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICJDBCResultSetClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CJDBCResultSet, RGM_SAME_DOMAIN, 
                EIID_ICJDBCResultSetClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithTrS(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement * pParam1,/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet** __ppIJDBCResultSet)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIJDBCResultSet = Elastos::Sql::SQLite::JDBC::IJDBCResultSet::Probe(__pNewObj);
        if (*__ppIJDBCResultSet) (*__ppIJDBCResultSet)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,
/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement * pParam1,
/* [out] */ Elastos::Sql::SQLite::JDBC::IJDBCResultSet** __ppIJDBCResultSet)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIJDBCResultSet);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Sql::SQLite::ITableResult * pParam0,
/* [in] */ Elastos::Sql::SQLite::JDBC::IJDBCStatement * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC {
class CDatabaseX
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Sql::SQLite::JDBC::IDatabaseX** ppIDatabaseX)
    {

        return _CObject_CreateInstance(ECLSID_CDatabaseX, pRegime, Elastos::Sql::SQLite::JDBC::EIID_IDatabaseX, (IInterface**)ppIDatabaseX);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Sql::SQLite::JDBC::IDatabaseX** __ppIDatabaseX)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIDatabaseX);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Sql::SQLite::JDBC::IDatabaseX** ppIDatabaseX)
    {
        return _CObject_CreateInstance(ECLSID_CDatabaseX, RGM_SAME_DOMAIN, Elastos::Sql::SQLite::JDBC::EIID_IDatabaseX, (PInterface*)ppIDatabaseX);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CDatabaseX, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CDatabaseX, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CPathClassLoader
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICPathClassLoaderClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CPathClassLoader, RGM_SAME_DOMAIN, 
                EIID_ICPathClassLoaderClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithPath(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IClassLoader** __ppIClassLoader)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIClassLoader = Elastos::Core::IClassLoader::Probe(__pNewObj);
        if (*__ppIClassLoader) (*__ppIClassLoader)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IClassLoader** __ppIClassLoader)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIClassLoader);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CStringWrapper
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICStringWrapperClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CStringWrapper, RGM_SAME_DOMAIN, 
                EIID_ICStringWrapperClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithStr(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::ICharSequence** __ppICharSequence)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppICharSequence = Elastos::Core::ICharSequence::Probe(__pNewObj);
        if (*__ppICharSequence) (*__ppICharSequence)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::ICharSequence** __ppICharSequence)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppICharSequence);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IString** __ppIString)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIString = Elastos::Core::IString::Probe(__pNewObj);
        if (*__ppIString) (*__ppIString)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IString** __ppIString)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIString);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIComparable = Elastos::Core::IComparable::Probe(__pNewObj);
        if (*__ppIComparable) (*__ppIComparable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IComparable** __ppIComparable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIComparable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CBoolean
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICBooleanClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CBoolean, RGM_SAME_DOMAIN, 
                EIID_ICBooleanClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ Elastos::Core::IBoolean** __ppIBoolean)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIBoolean = Elastos::Core::IBoolean::Probe(__pNewObj);
        if (*__ppIBoolean) (*__ppIBoolean)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ Elastos::Core::IBoolean** __ppIBoolean)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIBoolean);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Boolean Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Boolean Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CByte
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Byte Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICByteClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CByte, RGM_SAME_DOMAIN, 
                EIID_ICByteClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Byte Param0,/* [out] */ Elastos::Core::IByte** __ppIByte)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIByte = Elastos::Core::IByte::Probe(__pNewObj);
        if (*__ppIByte) (*__ppIByte)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Byte Param0,
/* [out] */ Elastos::Core::IByte** __ppIByte)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIByte);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Byte Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Byte Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CChar32
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Char32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChar32ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChar32, RGM_SAME_DOMAIN, 
                EIID_ICChar32ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Char32 Param0,/* [out] */ Elastos::Core::IChar32** __ppIChar32)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChar32 = Elastos::Core::IChar32::Probe(__pNewObj);
        if (*__ppIChar32) (*__ppIChar32)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Char32 Param0,
/* [out] */ Elastos::Core::IChar32** __ppIChar32)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIChar32);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Char32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Char32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CChar16
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Char16 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChar16ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChar16, RGM_SAME_DOMAIN, 
                EIID_ICChar16ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Char16 Param0,/* [out] */ Elastos::Core::IChar16** __ppIChar16)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChar16 = Elastos::Core::IChar16::Probe(__pNewObj);
        if (*__ppIChar16) (*__ppIChar16)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Char16 Param0,
/* [out] */ Elastos::Core::IChar16** __ppIChar16)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIChar16);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Char16 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Char16 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CChar8
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Char8 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICChar8ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CChar8, RGM_SAME_DOMAIN, 
                EIID_ICChar8ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Char8 Param0,/* [out] */ Elastos::Core::IChar8** __ppIChar8)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIChar8 = Elastos::Core::IChar8::Probe(__pNewObj);
        if (*__ppIChar8) (*__ppIChar8)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Char8 Param0,
/* [out] */ Elastos::Core::IChar8** __ppIChar8)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIChar8);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Char8 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Char8 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CInteger16
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int16 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInteger16ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInteger16, RGM_SAME_DOMAIN, 
                EIID_ICInteger16ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int16 Param0,/* [out] */ Elastos::Core::IInteger16** __ppIInteger16)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInteger16 = Elastos::Core::IInteger16::Probe(__pNewObj);
        if (*__ppIInteger16) (*__ppIInteger16)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int16 Param0,
/* [out] */ Elastos::Core::IInteger16** __ppIInteger16)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIInteger16);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int16 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int16 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CInteger32
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInteger32ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInteger32, RGM_SAME_DOMAIN, 
                EIID_ICInteger32ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ Elastos::Core::IInteger32** __ppIInteger32)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInteger32 = Elastos::Core::IInteger32::Probe(__pNewObj);
        if (*__ppIInteger32) (*__ppIInteger32)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ Elastos::Core::IInteger32** __ppIInteger32)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIInteger32);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int32 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int32 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CInteger64
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICInteger64ClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CInteger64, RGM_SAME_DOMAIN, 
                EIID_ICInteger64ClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Core::IInteger64** __ppIInteger64)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIInteger64 = Elastos::Core::IInteger64::Probe(__pNewObj);
        if (*__ppIInteger64) (*__ppIInteger64)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Core::IInteger64** __ppIInteger64)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIInteger64);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CFloat
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Float Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICFloatClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CFloat, RGM_SAME_DOMAIN, 
                EIID_ICFloatClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Float Param0,/* [out] */ Elastos::Core::IFloat** __ppIFloat)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIFloat = Elastos::Core::IFloat::Probe(__pNewObj);
        if (*__ppIFloat) (*__ppIFloat)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Float Param0,
/* [out] */ Elastos::Core::IFloat** __ppIFloat)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIFloat);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Float Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Float Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CDouble
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Double Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICDoubleClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CDouble, RGM_SAME_DOMAIN, 
                EIID_ICDoubleClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithValue(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Double Param0,/* [out] */ Elastos::Core::IDouble** __ppIDouble)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIDouble = Elastos::Core::IDouble::Probe(__pNewObj);
        if (*__ppIDouble) (*__ppIDouble)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Double Param0,
/* [out] */ Elastos::Core::IDouble** __ppIDouble)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIDouble);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Double Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Double Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CArrayOf
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICArrayOfClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CArrayOf, RGM_SAME_DOMAIN, 
                EIID_ICArrayOfClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRiidSize(Param0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ Elastos::Core::IArrayOf** __ppIArrayOf)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIArrayOf = Elastos::Core::IArrayOf::Probe(__pNewObj);
        if (*__ppIArrayOf) (*__ppIArrayOf)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS InterfaceID & Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ Elastos::Core::IArrayOf** __ppIArrayOf)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIArrayOf);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS InterfaceID & Param0,/* [in] */ _ELASTOS Int32 Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS InterfaceID & Param0,
/* [in] */ _ELASTOS Int32 Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, Param1, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CRandom
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICRandomClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CRandom, RGM_SAME_DOMAIN, 
                EIID_ICRandomClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithSeed(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::IRandom** ppIRandom)
    {

        return _CObject_CreateInstance(ECLSID_CRandom, pRegime, Elastos::Core::EIID_IRandom, (IInterface**)ppIRandom);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::IRandom** __ppIRandom)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIRandom);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::IRandom** ppIRandom)
    {
        return _CObject_CreateInstance(ECLSID_CRandom, RGM_SAME_DOMAIN, Elastos::Core::EIID_IRandom, (PInterface*)ppIRandom);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CRandom, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CRandom, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ Elastos::Core::IRandom** __ppIRandom)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRandom = Elastos::Core::IRandom::Probe(__pNewObj);
        if (*__ppIRandom) (*__ppIRandom)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ Elastos::Core::IRandom** __ppIRandom)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRandom);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ _ELASTOS Int64 Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ _ELASTOS Int64 Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CObjectContainer
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IObjectContainer** ppIObjectContainer)
    {

        return _CObject_CreateInstance(ECLSID_CObjectContainer, pRegime, EIID_IObjectContainer, (IInterface**)ppIObjectContainer);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IObjectContainer** __ppIObjectContainer)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIObjectContainer);
    }

    static _ELASTOS ECode New(/* [out] */ IObjectContainer** ppIObjectContainer)
    {
        return _CObject_CreateInstance(ECLSID_CObjectContainer, RGM_SAME_DOMAIN, EIID_IObjectContainer, (PInterface*)ppIObjectContainer);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CObjectContainer, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CObjectContainer, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CBlockGuard
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::IBlockGuard** ppIBlockGuard)
    {

        return _CObject_CreateInstance(ECLSID_CBlockGuard, pRegime, Elastos::Core::EIID_IBlockGuard, (IInterface**)ppIBlockGuard);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::IBlockGuard** __ppIBlockGuard)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppIBlockGuard);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Core::IBlockGuard** ppIBlockGuard)
    {
        return _CObject_CreateInstance(ECLSID_CBlockGuard, RGM_SAME_DOMAIN, Elastos::Core::EIID_IBlockGuard, (PInterface*)ppIBlockGuard);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CCloseGuard
{
public:

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloseGuard** ppICloseGuard)
    {

        return _CObject_CreateInstance(ECLSID_CCloseGuard, pRegime, Elastos::Core::EIID_ICloseGuard, (IInterface**)ppICloseGuard);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloseGuard** __ppICloseGuard)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppICloseGuard);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::ICloseGuard** ppICloseGuard)
    {
        return _CObject_CreateInstance(ECLSID_CCloseGuard, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloseGuard, (PInterface*)ppICloseGuard);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CCloseGuard, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CCloseGuard, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CCloseGuardHelper
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ICloseGuardHelper** ppICloseGuardHelper)
    {

        return _CObject_CreateInstance(ECLSID_CCloseGuardHelper, pRegime, Elastos::Core::EIID_ICloseGuardHelper, (IInterface**)ppICloseGuardHelper);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ICloseGuardHelper** __ppICloseGuardHelper)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppICloseGuardHelper);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Core::ICloseGuardHelper** ppICloseGuardHelper)
    {
        return _CObject_CreateInstance(ECLSID_CCloseGuardHelper, RGM_SAME_DOMAIN, Elastos::Core::EIID_ICloseGuardHelper, (PInterface*)ppICloseGuardHelper);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
class CSystem
{
public:

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::ISystem** ppISystem)
    {

        return _CObject_CreateInstance(ECLSID_CSystem, pRegime, Elastos::Core::EIID_ISystem, (IInterface**)ppISystem);

    }

    static _ELASTOS ECode AcquireSingletonInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::ISystem** __ppISystem)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return AcquireSingletonInRegime(pRegime, __ppISystem);
    }

    static _ELASTOS ECode AcquireSingleton(/* [out] */ Elastos::Core::ISystem** ppISystem)
    {
        return _CObject_CreateInstance(ECLSID_CSystem, RGM_SAME_DOMAIN, Elastos::Core::EIID_ISystem, (PInterface*)ppISystem);
    }
};
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
namespace Threading {
class CThread
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRunnable(pParam0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithRunnableThreadName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithThreadName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithGroupRunnable(pParam0, pParam1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithGroupRunnableThreadName(pParam0, pParam1, Param2, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithGroupThreadName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int64 Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithGroupRunnableThreadNameStackSize(pParam0, pParam1, Param2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThread, RGM_SAME_DOMAIN, 
                EIID_ICThreadClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithGroupNamePriorityDaemon(pParam0, Param1, Param2, Param3, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::Threading::IThread** ppIThread)
    {

        return _CObject_CreateInstance(ECLSID_CThread, pRegime, Elastos::Core::Threading::EIID_IThread, (IInterface**)ppIThread);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIThread);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::Threading::IThread** ppIThread)
    {
        return _CObject_CreateInstance(ECLSID_CThread, RGM_SAME_DOMAIN, Elastos::Core::Threading::EIID_IThread, (PInterface*)ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::IRunnable** ppIRunnable)
    {

        return _CObject_CreateInstance(ECLSID_CThread, pRegime, Elastos::Core::EIID_IRunnable, (IInterface**)ppIRunnable);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIRunnable);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::IRunnable** ppIRunnable)
    {
        return _CObject_CreateInstance(ECLSID_CThread, RGM_SAME_DOMAIN, Elastos::Core::EIID_IRunnable, (PInterface*)ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CThread, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CThread, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::IRunnable * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::IRunnable * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int64 Param3,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, Param3, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int64 Param3,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, Param3, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ Elastos::Core::IRunnable * pParam1,/* [in] */ const _ELASTOS String& Param2,/* [in] */ _ELASTOS Int64 Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, pParam1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ Elastos::Core::IRunnable * pParam1,
/* [in] */ const _ELASTOS String& Param2,
/* [in] */ _ELASTOS Int64 Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, pParam1, Param2, Param3, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThread = Elastos::Core::Threading::IThread::Probe(__pNewObj);
        if (*__ppIThread) (*__ppIThread)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Boolean Param3,
/* [out] */ Elastos::Core::Threading::IThread** __ppIThread)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, Param3, __ppIThread);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIRunnable = Elastos::Core::IRunnable::Probe(__pNewObj);
        if (*__ppIRunnable) (*__ppIRunnable)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Boolean Param3,
/* [out] */ Elastos::Core::IRunnable** __ppIRunnable)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, Param3, __ppIRunnable);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [in] */ _ELASTOS Int32 Param2,/* [in] */ _ELASTOS Boolean Param3,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, Param2, Param3, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [in] */ _ELASTOS Int32 Param2,
/* [in] */ _ELASTOS Boolean Param3,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, Param2, Param3, __ppIWeakReferenceSource);
    }
};
}
}
}

EXTERN_C ELAPI _Impl_CheckClsId(
    PInterface pServerObj,
    const _ELASTOS ClassID* pClassid,
    PInterface *ppServerObj);

namespace Elastos {
namespace Core {
namespace Threading {
class CThreadGroup
{
public:

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadGroupClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThreadGroup, RGM_SAME_DOMAIN, 
                EIID_ICThreadGroupClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithName(Param0, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode _NewInRegime(/* [in] */ IRegime* __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IInterface** __ppObject)
    {
        _ELASTOS ECode ec;
        ICThreadGroupClassObject* pClassObject;
        PInterface pObject = NULL;

        ec = _CObject_AcquireClassFactory(ECLSID_CThreadGroup, RGM_SAME_DOMAIN, 
                EIID_ICThreadGroupClassObject, (IInterface**)&pClassObject);
        if (FAILED(ec)) return ec;

        ec = pClassObject->CreateObjectWithParentName(pParam0, Param1, &pObject);

        if (!IS_RGM_NUMBER(__pRegime) && NULL != pObject)
            ec = _CObject_EnterRegime(pObject, __pRegime);

        *__ppObject = pObject;

        pClassObject->Release();

        return ec;
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ Elastos::Core::Threading::IThreadGroup** ppIThreadGroup)
    {

        return _CObject_CreateInstance(ECLSID_CThreadGroup, pRegime, Elastos::Core::Threading::EIID_IThreadGroup, (IInterface**)ppIThreadGroup);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ Elastos::Core::Threading::IThreadGroup** __ppIThreadGroup)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIThreadGroup);
    }

    static _ELASTOS ECode New(/* [out] */ Elastos::Core::Threading::IThreadGroup** ppIThreadGroup)
    {
        return _CObject_CreateInstance(ECLSID_CThreadGroup, RGM_SAME_DOMAIN, Elastos::Core::Threading::EIID_IThreadGroup, (PInterface*)ppIThreadGroup);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ IRegime* pRegime,/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {

        return _CObject_CreateInstance(ECLSID_CThreadGroup, pRegime, EIID_IWeakReferenceSource, (IInterface**)ppIWeakReferenceSource);

    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime, /* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        return NewInRegime(pRegime, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode New(/* [out] */ IWeakReferenceSource** ppIWeakReferenceSource)
    {
        return _CObject_CreateInstance(ECLSID_CThreadGroup, RGM_SAME_DOMAIN, EIID_IWeakReferenceSource, (PInterface*)ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ Elastos::Core::Threading::IThreadGroup** __ppIThreadGroup)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThreadGroup = Elastos::Core::Threading::IThreadGroup::Probe(__pNewObj);
        if (*__ppIThreadGroup) (*__ppIThreadGroup)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ Elastos::Core::Threading::IThreadGroup** __ppIThreadGroup)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIThreadGroup);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ const _ELASTOS String& Param0,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, Param0, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ const _ELASTOS String& Param0,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, Param0, __ppIWeakReferenceSource);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ Elastos::Core::Threading::IThreadGroup** __ppIThreadGroup)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIThreadGroup = Elastos::Core::Threading::IThreadGroup::Probe(__pNewObj);
        if (*__ppIThreadGroup) (*__ppIThreadGroup)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ Elastos::Core::Threading::IThreadGroup** __ppIThreadGroup)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIThreadGroup);
    }

    static _ELASTOS ECode NewInRegime(/* [in] */ PInterface __pRegime,/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,/* [in] */ const _ELASTOS String& Param1,/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        IInterface* __pNewObj;
        PRegime pRegime = NULL;

        if (!IS_RGM_NUMBER(__pRegime)){
            pRegime = IRegime::Probe(__pRegime);
            if (!pRegime) return E_NO_INTERFACE;
        }
        else pRegime = (PRegime)__pRegime;

        _ELASTOS ECode ec = _NewInRegime(pRegime, pParam0, Param1, &__pNewObj);
        if (FAILED(ec)) return ec;

        *__ppIWeakReferenceSource = IWeakReferenceSource::Probe(__pNewObj);
        if (*__ppIWeakReferenceSource) (*__ppIWeakReferenceSource)->AddRef();
        else ec = E_NO_INTERFACE;
        __pNewObj->Release();

        return ec;
    }

    static _ELASTOS ECode New(/* [in] */ Elastos::Core::Threading::IThreadGroup * pParam0,
/* [in] */ const _ELASTOS String& Param1,
/* [out] */ IWeakReferenceSource** __ppIWeakReferenceSource)
    {
        return NewInRegime(RGM_SAME_DOMAIN, pParam0, Param1, __ppIWeakReferenceSource);
    }
};
}
}
}

#else // !__cplusplus
#error // doesn't support C compiler
#endif // __cplusplus

#endif // __CAR_ELASTOS_CORE_H__
