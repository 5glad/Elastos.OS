// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     api_generator
// For
//     org/chromium/base/TraceEvent

#ifndef ELASTOS_ORG_CHROMIUM_BASE_TRACEEVENT_JNI
#define ELASTOS_ORG_CHROMIUM_BASE_TRACEEVENT_JNI

//#include <jni.h>

#include "ElAndroid.h"
#include "elastos.h"
#include "base/logging.h"

//#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.

namespace base {
namespace android {

extern "C" {

static void RegisterEnabledObserver();

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeRegisterEnabledObserver() {
    return RegisterEnabledObserver();
}

static void StartATrace();

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeStartATrace() {
    return StartATrace();
}

static void StopATrace();

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeStopATrace() {
    return StopATrace();
}

static void Instant(const Elastos::String& name,
    const Elastos::String& arg);

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeInstant(
    /* [in] */ const Elastos::String& name,
    /* [in] */ const Elastos::String& arg) {
    return Instant(name, arg);
}

static void Begin(const Elastos::String& name,
    const Elastos::String& arg);

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeBegin(
    /* [in] */ const Elastos::String& name,
    /* [in] */ const Elastos::String& arg) {
    return Begin(name, arg);
}

static void End(const Elastos::String& name,
    const Elastos::String& arg);

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeEnd(
    /* [in] */ const Elastos::String& name,
    /* [in] */ const Elastos::String& arg) {
    return End(name, arg);
}

static void BeginToplevel();

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeBeginToplevel() {
    return BeginToplevel();
}

static void EndToplevel();

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeEndToplevel() {
    return EndToplevel();
}

static void StartAsync(const Elastos::String& name,
    Elastos::Int64 id,
    const Elastos::String& arg);

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeStartAsync(
    /* [in] */ const Elastos::String& name,
    /* [in] */ Elastos::Int64 id,
    /* [in] */ const Elastos::String& arg) {
    return StartAsync(name, id, arg);
}

static void FinishAsync(const Elastos::String& name,
    Elastos::Int64 id,
    const Elastos::String& arg);

__attribute__((visibility("default")))
void Elastos_TraceEvent_nativeFinishAsync(
    /* [in] */ const Elastos::String& name,
    /* [in] */ Elastos::Int64 id,
    /* [in] */ const Elastos::String& arg) {
    return FinishAsync(name, id, arg);
}

};  // extern "C"

// Step 2: method stubs.

// Step 3: Callback init .
struct ElaTraceEventCallback
{
    void (*elastos_TraceEvent_setEnabled)(Elastos::Boolean enabled);
};

extern "C" {
static struct ElaTraceEventCallback* sElaTraceEventCallback;
__attribute__((visibility("default")))
void Elastos_TraceEvent_InitCallback(Elastos::Handle32 cb)
{
    sElaTraceEventCallback = (struct ElaTraceEventCallback*)cb;
    DLOG(INFO) << "init pointer for sElaTraceEventCallback is:" << sElaTraceEventCallback;
}
}; // extern "C"

static bool RegisterNativesImpl() {

  return true;
}

}  // namespace android
}  // namespace base

#endif  // ELASTOS_ORG_CHROMIUM_BASE_TRACEEVENT_JNI
