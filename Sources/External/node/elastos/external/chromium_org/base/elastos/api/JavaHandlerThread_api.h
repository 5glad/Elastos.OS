// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     api_generator
// For
//     org/chromium/base/JavaHandlerThread

#ifndef ELASTOS_ORG_CHROMIUM_BASE_JAVAHANDLERTHREAD_JNI
#define ELASTOS_ORG_CHROMIUM_BASE_JAVAHANDLERTHREAD_JNI

//#include <jni.h>

#include "ElAndroid.h"
#include "elastos.h"
#include "base/logging.h"

//#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.

namespace base {
namespace android {

// Step 2: method stubs.

extern "C" {
__attribute__((visibility("default")))
void Elastos_JavaHandlerThread_nativeInitializeThread(
    /* [in] */ IInterface* caller,
    /* [in] */ Elastos::Handle64 nativeJavaHandlerThread,
    /* [in] */ Elastos::Handle64 nativeEvent) {
    JavaHandlerThread* native = reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread);
    //CHECK_NATIVE_PTR(env, jcaller, native, "InitializeThread");
    return native->InitializeThread(caller, nativeEvent);
}
};  // extern "C"

// Step 3: Callback init .
struct ElaJavaHandlerThreadCallback
{
    Elastos::AutoPtr<IInterface> (*elastos_JavaHandlerThread_create)(const Elastos::String& name);
    void (*elastos_JavaHandlerThread_start)(IInterface* obj, Elastos::Handle64 nativeThread, Elastos::Handle64 nativeEvent);
};

extern "C" {
static struct ElaJavaHandlerThreadCallback* sElaJavaHandlerThreadCallback;
__attribute__((visibility("default")))
void Elastos_JavaHandlerThread_InitCallback(Elastos::Handle64 cb)
{
    sElaJavaHandlerThreadCallback = (struct ElaJavaHandlerThreadCallback*)cb;
    DLOG(INFO) << "init pointer for sElaJavaHandlerThreadCallback is:" << sElaJavaHandlerThreadCallback;
}
}; // extern "C"

static bool RegisterNativesImpl() {

  return true;
}

}  // namespace android
}  // namespace base

#endif  // ELASTOS_ORG_CHROMIUM_BASE_JAVAHANDLERTHREAD_JNI
