// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SpeechSynthesis.h"

#include "bindings/modules/v8/V8SpeechSynthesisUtterance.h"
#include "bindings/modules/v8/V8SpeechSynthesisVoice.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SpeechSynthesis* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SpeechSynthesis::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SpeechSynthesis* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SpeechSynthesis::wrapperTypeInfo = { gin::kEmbedderBlink, V8SpeechSynthesis::domTemplate, V8SpeechSynthesis::derefObject, 0, V8SpeechSynthesis::toEventTarget, 0, V8SpeechSynthesis::installPerContextEnabledMethods, &V8EventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, GarbageCollectedObject };

namespace SpeechSynthesisV8Internal {

template <typename T> void V8_USE(T) { }

static void pendingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(holder);
    v8SetReturnValueBool(info, impl->pending());
}

static void pendingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SpeechSynthesisV8Internal::pendingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void speakingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(holder);
    v8SetReturnValueBool(info, impl->speaking());
}

static void speakingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SpeechSynthesisV8Internal::speakingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pausedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(holder);
    v8SetReturnValueBool(info, impl->paused());
}

static void pausedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SpeechSynthesisV8Internal::pausedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onvoiceschangedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(holder);
    EventListener* v8Value = impl->onvoiceschanged();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onvoiceschangedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SpeechSynthesisV8Internal::onvoiceschangedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onvoiceschangedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onvoiceschanged(), v8Value, V8SpeechSynthesis::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnvoiceschanged(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onvoiceschangedAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SpeechSynthesisV8Internal::onvoiceschangedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void speakMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "speak", "SpeechSynthesis", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(info.Holder());
    SpeechSynthesisUtterance* utterance;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(utterance, V8SpeechSynthesisUtterance::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    impl->speak(utterance, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void speakMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SpeechSynthesisV8Internal::speakMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cancelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(info.Holder());
    impl->cancel();
}

static void cancelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SpeechSynthesisV8Internal::cancelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pauseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(info.Holder());
    impl->pause();
}

static void pauseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SpeechSynthesisV8Internal::pauseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void resumeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(info.Holder());
    impl->resume();
}

static void resumeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SpeechSynthesisV8Internal::resumeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getVoicesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SpeechSynthesis* impl = V8SpeechSynthesis::toNative(info.Holder());
    v8SetReturnValue(info, v8Array(impl->getVoices(), info.Holder(), info.GetIsolate()));
}

static void getVoicesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SpeechSynthesisV8Internal::getVoicesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SpeechSynthesisV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8SpeechSynthesisAttributes[] = {
    {"pending", SpeechSynthesisV8Internal::pendingAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"speaking", SpeechSynthesisV8Internal::speakingAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"paused", SpeechSynthesisV8Internal::pausedAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onvoiceschanged", SpeechSynthesisV8Internal::onvoiceschangedAttributeGetterCallback, SpeechSynthesisV8Internal::onvoiceschangedAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8SpeechSynthesisMethods[] = {
    {"speak", SpeechSynthesisV8Internal::speakMethodCallback, 0, 1},
    {"cancel", SpeechSynthesisV8Internal::cancelMethodCallback, 0, 0},
    {"pause", SpeechSynthesisV8Internal::pauseMethodCallback, 0, 0},
    {"resume", SpeechSynthesisV8Internal::resumeMethodCallback, 0, 0},
    {"getVoices", SpeechSynthesisV8Internal::getVoicesMethodCallback, 0, 0},
};

static void configureV8SpeechSynthesisTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::speechSynthesisEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "", V8EventTarget::domTemplate(isolate), V8SpeechSynthesis::internalFieldCount, 0, 0, 0, 0, 0, 0, isolate);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SpeechSynthesis", V8EventTarget::domTemplate(isolate), V8SpeechSynthesis::internalFieldCount,
            V8SpeechSynthesisAttributes, WTF_ARRAY_LENGTH(V8SpeechSynthesisAttributes),
            0, 0,
            V8SpeechSynthesisMethods, WTF_ARRAY_LENGTH(V8SpeechSynthesisMethods),
            isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SpeechSynthesis::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SpeechSynthesisTemplate);
}

bool V8SpeechSynthesis::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SpeechSynthesis::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SpeechSynthesis* V8SpeechSynthesis::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

EventTarget* V8SpeechSynthesis::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(SpeechSynthesis* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SpeechSynthesis>(impl, isolate));
    return V8SpeechSynthesis::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SpeechSynthesis::createWrapper(RawPtr<SpeechSynthesis> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SpeechSynthesis>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SpeechSynthesis>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8SpeechSynthesis::derefObject(void* object)
{
}

template<>
v8::Handle<v8::Value> toV8NoInline(SpeechSynthesis* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
