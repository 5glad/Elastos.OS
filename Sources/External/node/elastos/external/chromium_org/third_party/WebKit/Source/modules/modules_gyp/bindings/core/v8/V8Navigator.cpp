// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8Navigator.h"

#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8MimeTypeArray.h"
#include "bindings/core/v8/V8PluginArray.h"
#include "bindings/modules/v8/V8DeprecatedStorageQuota.h"
#include "bindings/modules/v8/V8GamepadList.h"
#include "bindings/modules/v8/V8Geolocation.h"
#include "bindings/modules/v8/V8NavigatorUserMediaErrorCallback.h"
#include "bindings/modules/v8/V8NavigatorUserMediaSuccessCallback.h"
#include "bindings/modules/v8/V8NetworkInformation.h"
#include "bindings/modules/v8/V8PushManager.h"
#include "bindings/modules/v8/V8ServiceWorkerContainer.h"
#include "bindings/modules/v8/V8StorageQuota.h"
#include "bindings/modules/v8/V8WebKitGamepadList.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptPromise.h"
#include "bindings/v8/ScriptState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "bindings/v8/custom/V8ArrayBufferViewCustom.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/events/NavigatorEvents.h"
#include "core/frame/UseCounter.h"
#include "modules/battery/NavigatorBattery.h"
#include "modules/beacon/NavigatorBeacon.h"
#include "modules/donottrack/NavigatorDoNotTrack.h"
#include "modules/gamepad/NavigatorGamepad.h"
#include "modules/geolocation/NavigatorGeolocation.h"
#include "modules/mediastream/NavigatorMediaStream.h"
#include "modules/navigatorcontentutils/NavigatorContentUtils.h"
#include "modules/netinfo/NavigatorNetworkInformation.h"
#include "modules/push_messaging/NavigatorPushManager.h"
#include "modules/quota/NavigatorStorageQuota.h"
#include "modules/serviceworkers/NavigatorServiceWorker.h"
#include "modules/vibration/NavigatorVibration.h"
#include "modules/webmidi/NavigatorWebMIDI.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(Navigator* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8Navigator::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::Navigator* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8Navigator::wrapperTypeInfo = { gin::kEmbedderBlink, V8Navigator::domTemplate, V8Navigator::derefObject, 0, 0, 0, V8Navigator::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace NavigatorV8Internal {

template <typename T> void V8_USE(T) { }

static void pluginsAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RefPtrWillBeRawPtr<DOMPluginArray> result(impl->plugins());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8PluginArray>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "plugins"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void pluginsAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::pluginsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mimeTypesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RefPtrWillBeRawPtr<DOMMimeTypeArray> result(impl->mimeTypes());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8MimeTypeArray>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "mimeTypes"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void mimeTypesAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::mimeTypesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cookieEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueBool(info, impl->cookieEnabled());
}

static void cookieEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::cookieEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void productSubAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->productSub(), info.GetIsolate());
}

static void productSubAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::NavigatorProductSub);
    NavigatorV8Internal::productSubAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void vendorAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->vendor(), info.GetIsolate());
}

static void vendorAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::NavigatorVendor);
    NavigatorV8Internal::vendorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void vendorSubAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->vendorSub(), info.GetIsolate());
}

static void vendorSubAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::NavigatorVendorSub);
    NavigatorV8Internal::vendorSubAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void maxTouchPointsAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueInt(info, NavigatorEvents::maxTouchPoints(*impl));
}

static void maxTouchPointsAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::maxTouchPointsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void hardwareConcurrencyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->hardwareConcurrency());
}

static void hardwareConcurrencyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::hardwareConcurrencyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void appCodeNameAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->appCodeName(), info.GetIsolate());
}

static void appCodeNameAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::appCodeNameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void appNameAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->appName(), info.GetIsolate());
}

static void appNameAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::appNameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void appVersionAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->appVersion(), info.GetIsolate());
}

static void appVersionAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::appVersionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void platformAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->platform(), info.GetIsolate());
}

static void platformAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::platformAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void productAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->product(), info.GetIsolate());
}

static void productAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::productAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void userAgentAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueString(info, impl->userAgent(), info.GetIsolate());
}

static void userAgentAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::userAgentAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void languageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    bool isNull = false;
    String v8Value = impl->language(isNull);
    if (isNull) {
        v8SetReturnValueNull(info);
        return;
    }
    v8SetReturnValueString(info, v8Value, info.GetIsolate());
}

static void languageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::languageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void languagesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    v8::Handle<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "languages");
    Navigator* impl = V8Navigator::toNative(holder);
    if (!impl->hasLanguagesChanged()) {
        v8::Handle<v8::Value> v8Value = V8HiddenValue::getHiddenValue(info.GetIsolate(), holder, propertyName);
        if (!v8Value.IsEmpty()) {
            v8SetReturnValue(info, v8Value);
            return;
        }
    }
    Vector<String> v8Value = impl->languages();
    V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, propertyName, v8Array(v8Value, info.Holder(), info.GetIsolate()));
    v8SetReturnValue(info, v8Array(v8Value, info.Holder(), info.GetIsolate()));
}

static void languagesAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::languagesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onLineAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueBool(info, impl->onLine());
}

static void onLineAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::onLineAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void doNotTrackAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    v8SetReturnValueStringOrNull(info, NavigatorDoNotTrack::doNotTrack(*impl), info.GetIsolate());
}

static void doNotTrackAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::doNotTrackAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void geolocationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RawPtr<Geolocation> result(NavigatorGeolocation::geolocation(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Geolocation>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "geolocation"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void geolocationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::geolocationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void connectionAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RefPtrWillBeRawPtr<NetworkInformation> result(NavigatorNetworkInformation::connection(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8NetworkInformation>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "connection"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void connectionAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::connectionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pushAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RawPtr<PushManager> result(NavigatorPushManager::push(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8PushManager>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "push"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void pushAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::pushAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitTemporaryStorageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RawPtr<DeprecatedStorageQuota> result(NavigatorStorageQuota::webkitTemporaryStorage(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8DeprecatedStorageQuota>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "webkitTemporaryStorage"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void webkitTemporaryStorageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedStorageQuota);
    NavigatorV8Internal::webkitTemporaryStorageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitPersistentStorageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RawPtr<DeprecatedStorageQuota> result(NavigatorStorageQuota::webkitPersistentStorage(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8DeprecatedStorageQuota>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "webkitPersistentStorage"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void webkitPersistentStorageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedStorageQuota);
    NavigatorV8Internal::webkitPersistentStorageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void storageQuotaAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RawPtr<StorageQuota> result(NavigatorStorageQuota::storageQuota(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8StorageQuota>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "storageQuota"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void storageQuotaAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::storageQuotaAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void serviceWorkerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Navigator* impl = V8Navigator::toNative(holder);
    RefPtr<ServiceWorkerContainer> result(NavigatorServiceWorker::serviceWorker(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8ServiceWorkerContainer>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "serviceWorker"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void serviceWorkerAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    NavigatorV8Internal::serviceWorkerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void javaEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    v8SetReturnValueBool(info, impl->javaEnabled());
}

static void javaEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::javaEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getStorageUpdatesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    impl->getStorageUpdates();
}

static void getStorageUpdatesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::getStorageUpdatesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getBatteryMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = NavigatorBattery::getBattery(scriptState, *impl);
    v8SetReturnValue(info, result.v8Value());
}

static void getBatteryMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::getBatteryMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sendBeacon1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sendBeacon", "Navigator", info.Holder(), info.GetIsolate());
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> url;
    ArrayBufferView* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(url, info[0]);
        TONATIVE_VOID_INTERNAL(data, info[1]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[1])) : 0);
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    bool result = NavigatorBeacon::sendBeacon(executionContext, *impl, url, data, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void sendBeacon2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sendBeacon", "Navigator", info.Holder(), info.GetIsolate());
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> url;
    Blob* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(url, info[0]);
        TONATIVE_VOID_INTERNAL(data, V8Blob::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    bool result = NavigatorBeacon::sendBeacon(executionContext, *impl, url, data, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void sendBeacon3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sendBeacon", "Navigator", info.Holder(), info.GetIsolate());
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> url;
    DOMFormData* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(url, info[0]);
        TONATIVE_VOID_INTERNAL(data, V8FormData::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    bool result = NavigatorBeacon::sendBeacon(executionContext, *impl, url, data, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void sendBeacon4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sendBeacon", "Navigator", info.Holder(), info.GetIsolate());
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> url;
    V8StringResource<> data;
    {
        TOSTRING_VOID_INTERNAL(url, info[0]);
        TOSTRING_VOID_INTERNAL(data, info[1]);
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    bool result = NavigatorBeacon::sendBeacon(executionContext, *impl, url, data, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void sendBeaconMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sendBeacon", "Navigator", info.Holder(), isolate);
    switch (std::min(2, info.Length())) {
    case 1:
        if (true) {
            sendBeacon4Method(info);
            return;
        }
        break;
    case 2:
        if (info[1]->IsUndefined()) {
            sendBeacon4Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[1], isolate)) {
            sendBeacon1Method(info);
            return;
        }
        if (V8Blob::hasInstance(info[1], isolate)) {
            sendBeacon2Method(info);
            return;
        }
        if (V8FormData::hasInstance(info[1], isolate)) {
            sendBeacon3Method(info);
            return;
        }
        if (true) {
            sendBeacon4Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void sendBeaconMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::sendBeaconMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitGetGamepadsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    v8SetReturnValue(info, NavigatorGamepad::webkitGetGamepads(*impl));
}

static void webkitGetGamepadsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedGamepad);
    NavigatorV8Internal::webkitGetGamepadsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getGamepadsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    v8SetReturnValue(info, NavigatorGamepad::getGamepads(*impl));
}

static void getGamepadsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::getGamepadsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitGetUserMediaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitGetUserMedia", "Navigator", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        throwMinimumArityTypeError(exceptionState, 3, info.Length());
        return;
    }
    Navigator* impl = V8Navigator::toNative(info.Holder());
    Dictionary options;
    OwnPtr<NavigatorUserMediaSuccessCallback> successCallback;
    OwnPtr<NavigatorUserMediaErrorCallback> errorCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(options, Dictionary(info[0], info.GetIsolate()));
        if (!options.isUndefinedOrNull() && !options.isObject()) {
            exceptionState.throwTypeError("parameter 1 ('options') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8NavigatorUserMediaSuccessCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (info.Length() <= 2 || !info[2]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        errorCallback = V8NavigatorUserMediaErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
    }
    NavigatorMediaStream::webkitGetUserMedia(*impl, options, successCallback.release(), errorCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void webkitGetUserMediaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::webkitGetUserMediaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void registerProtocolHandlerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "registerProtocolHandler", "Navigator", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        throwMinimumArityTypeError(exceptionState, 3, info.Length());
        return;
    }
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> scheme;
    V8StringResource<> url;
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(scheme, info[0]);
        TOSTRING_VOID_INTERNAL(url, info[1]);
        TOSTRING_VOID_INTERNAL(title, info[2]);
    }
    NavigatorContentUtils::registerProtocolHandler(*impl, scheme, url, title, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void registerProtocolHandlerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::registerProtocolHandlerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void isProtocolHandlerRegisteredMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "isProtocolHandlerRegistered", "Navigator", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> scheme;
    V8StringResource<> url;
    {
        TOSTRING_VOID_INTERNAL(scheme, info[0]);
        TOSTRING_VOID_INTERNAL(url, info[1]);
    }
    String result = NavigatorContentUtils::isProtocolHandlerRegistered(*impl, scheme, url, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void isProtocolHandlerRegisteredMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::isProtocolHandlerRegisteredMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void unregisterProtocolHandlerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "unregisterProtocolHandler", "Navigator", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    Navigator* impl = V8Navigator::toNative(info.Holder());
    V8StringResource<> scheme;
    V8StringResource<> url;
    {
        TOSTRING_VOID_INTERNAL(scheme, info[0]);
        TOSTRING_VOID_INTERNAL(url, info[1]);
    }
    NavigatorContentUtils::unregisterProtocolHandler(*impl, scheme, url, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void unregisterProtocolHandlerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::unregisterProtocolHandlerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void vibrate1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vibrate", "Navigator", info.Holder(), info.GetIsolate());
    Navigator* impl = V8Navigator::toNative(info.Holder());
    unsigned pattern = 0;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        double patternNativeValue;
        TONATIVE_VOID_INTERNAL(patternNativeValue, info[0]->NumberValue());
        if (!std::isnan(patternNativeValue))
            pattern = clampTo<unsigned long>(patternNativeValue);
    }
    v8SetReturnValueBool(info, NavigatorVibration::vibrate(*impl, pattern));
}

static void vibrate2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    Vector<unsigned> pattern;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(pattern, toNativeArray<unsigned>(info[0], 1, info.GetIsolate()));
    }
    v8SetReturnValueBool(info, NavigatorVibration::vibrate(*impl, pattern));
}

static void vibrateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "vibrate", "Navigator", info.Holder(), isolate);
    switch (std::min(1, info.Length())) {
    case 1:
        if (info[0]->IsArray()) {
            vibrate2Method(info);
            return;
        }
        if (true) {
            vibrate1Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void vibrateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::vibrateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void requestMIDIAccessMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Navigator* impl = V8Navigator::toNative(info.Holder());
    Dictionary options;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(options, Dictionary(info[0], info.GetIsolate()));
        if (!options.isUndefinedOrNull() && !options.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("requestMIDIAccess", "Navigator", "parameter 1 ('options') is not an object."), info.GetIsolate());
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = NavigatorWebMIDI::requestMIDIAccess(scriptState, *impl, options);
    v8SetReturnValue(info, result.v8Value());
}

static void requestMIDIAccessMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    NavigatorV8Internal::requestMIDIAccessMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace NavigatorV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8NavigatorAttributes[] = {
    {"plugins", NavigatorV8Internal::pluginsAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mimeTypes", NavigatorV8Internal::mimeTypesAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cookieEnabled", NavigatorV8Internal::cookieEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"productSub", NavigatorV8Internal::productSubAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"vendor", NavigatorV8Internal::vendorAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"vendorSub", NavigatorV8Internal::vendorSubAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"maxTouchPoints", NavigatorV8Internal::maxTouchPointsAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"hardwareConcurrency", NavigatorV8Internal::hardwareConcurrencyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"appCodeName", NavigatorV8Internal::appCodeNameAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"appName", NavigatorV8Internal::appNameAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"appVersion", NavigatorV8Internal::appVersionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"platform", NavigatorV8Internal::platformAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"product", NavigatorV8Internal::productAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"userAgent", NavigatorV8Internal::userAgentAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"language", NavigatorV8Internal::languageAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"languages", NavigatorV8Internal::languagesAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onLine", NavigatorV8Internal::onLineAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"doNotTrack", NavigatorV8Internal::doNotTrackAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"geolocation", NavigatorV8Internal::geolocationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webkitTemporaryStorage", NavigatorV8Internal::webkitTemporaryStorageAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webkitPersistentStorage", NavigatorV8Internal::webkitPersistentStorageAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8NavigatorMethods[] = {
    {"javaEnabled", NavigatorV8Internal::javaEnabledMethodCallback, 0, 0},
    {"getStorageUpdates", NavigatorV8Internal::getStorageUpdatesMethodCallback, 0, 0},
    {"vibrate", NavigatorV8Internal::vibrateMethodCallback, 0, 1},
};

static void configureV8NavigatorTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "Navigator", v8::Local<v8::FunctionTemplate>(), V8Navigator::internalFieldCount,
        V8NavigatorAttributes, WTF_ARRAY_LENGTH(V8NavigatorAttributes),
        0, 0,
        V8NavigatorMethods, WTF_ARRAY_LENGTH(V8NavigatorMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    if (RuntimeEnabledFeatures::networkInformationEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"connection", NavigatorV8Internal::connectionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::pushMessagingEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"push", NavigatorV8Internal::pushAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::quotaPromiseEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"storageQuota", NavigatorV8Internal::storageQuotaAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::serviceWorkerEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"serviceWorker", NavigatorV8Internal::serviceWorkerAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::batteryStatusEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "getBattery"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::getBatteryMethodCallback, v8Undefined(), defaultSignature, 0));
    }
    if (RuntimeEnabledFeatures::beaconEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "sendBeacon"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::sendBeaconMethodCallback, v8Undefined(), defaultSignature, 1));
    }
    if (RuntimeEnabledFeatures::gamepadEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitGetGamepads"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::webkitGetGamepadsMethodCallback, v8Undefined(), defaultSignature, 0));
    }
    if (RuntimeEnabledFeatures::gamepadEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "getGamepads"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::getGamepadsMethodCallback, v8Undefined(), defaultSignature, 0));
    }
    if (RuntimeEnabledFeatures::mediaStreamEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitGetUserMedia"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::webkitGetUserMediaMethodCallback, v8Undefined(), defaultSignature, 3));
    }
    if (RuntimeEnabledFeatures::navigatorContentUtilsEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "registerProtocolHandler"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::registerProtocolHandlerMethodCallback, v8Undefined(), defaultSignature, 3));
    }
    if (RuntimeEnabledFeatures::customSchemeHandlerEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "isProtocolHandlerRegistered"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::isProtocolHandlerRegisteredMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::customSchemeHandlerEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "unregisterProtocolHandler"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::unregisterProtocolHandlerMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::webMIDIEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "requestMIDIAccess"), v8::FunctionTemplate::New(isolate, NavigatorV8Internal::requestMIDIAccessMethodCallback, v8Undefined(), defaultSignature, 0));
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8Navigator::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8NavigatorTemplate);
}

bool V8Navigator::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8Navigator::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Navigator* V8Navigator::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(Navigator* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Navigator>(impl, isolate));
    return V8Navigator::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8Navigator::createWrapper(PassRefPtrWillBeRawPtr<Navigator> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Navigator>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8Navigator>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8Navigator::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(Navigator* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
