// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8DeprecatedStorageInfo.h"

#include "bindings/modules/v8/V8StorageErrorCallback.h"
#include "bindings/modules/v8/V8StorageQuotaCallback.h"
#include "bindings/modules/v8/V8StorageUsageCallback.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(DeprecatedStorageInfo* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8DeprecatedStorageInfo::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::DeprecatedStorageInfo* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8DeprecatedStorageInfo::wrapperTypeInfo = { gin::kEmbedderBlink, V8DeprecatedStorageInfo::domTemplate, V8DeprecatedStorageInfo::derefObject, 0, 0, 0, V8DeprecatedStorageInfo::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, GarbageCollectedObject };

namespace DeprecatedStorageInfoV8Internal {

template <typename T> void V8_USE(T) { }

static void queryUsageAndQuotaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "queryUsageAndQuota", "DeprecatedStorageInfo", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    DeprecatedStorageInfo* impl = V8DeprecatedStorageInfo::toNative(info.Holder());
    unsigned storageType;
    OwnPtr<StorageUsageCallback> usageCallback;
    OwnPtr<StorageErrorCallback> errorCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(storageType, toUInt16(info[0], exceptionState), exceptionState);
        if (info.Length() > 1 && !isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            usageCallback = V8StorageUsageCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        }
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8StorageErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->queryUsageAndQuota(executionContext, storageType, usageCallback.release(), errorCallback.release());
}

static void queryUsageAndQuotaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    DeprecatedStorageInfoV8Internal::queryUsageAndQuotaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void requestQuotaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "requestQuota", "DeprecatedStorageInfo", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    DeprecatedStorageInfo* impl = V8DeprecatedStorageInfo::toNative(info.Holder());
    unsigned storageType;
    unsigned long long newQuotaInBytes;
    OwnPtr<StorageQuotaCallback> quotaCallback;
    OwnPtr<StorageErrorCallback> errorCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(storageType, toUInt16(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(newQuotaInBytes, toUInt64(info[1], exceptionState), exceptionState);
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            quotaCallback = V8StorageQuotaCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
        if (info.Length() > 3 && !isUndefinedOrNull(info[3])) {
            if (!info[3]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 4 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8StorageErrorCallback::create(v8::Handle<v8::Function>::Cast(info[3]), ScriptState::current(info.GetIsolate()));
        }
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->requestQuota(executionContext, storageType, newQuotaInBytes, quotaCallback.release(), errorCallback.release());
}

static void requestQuotaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    DeprecatedStorageInfoV8Internal::requestQuotaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace DeprecatedStorageInfoV8Internal

static const V8DOMConfiguration::MethodConfiguration V8DeprecatedStorageInfoMethods[] = {
    {"queryUsageAndQuota", DeprecatedStorageInfoV8Internal::queryUsageAndQuotaMethodCallback, 0, 1},
    {"requestQuota", DeprecatedStorageInfoV8Internal::requestQuotaMethodCallback, 0, 2},
};

static void configureV8DeprecatedStorageInfoTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "DeprecatedStorageInfo", v8::Local<v8::FunctionTemplate>(), V8DeprecatedStorageInfo::internalFieldCount,
        0, 0,
        0, 0,
        V8DeprecatedStorageInfoMethods, WTF_ARRAY_LENGTH(V8DeprecatedStorageInfoMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8DeprecatedStorageInfoConstants[] = {
        {"TEMPORARY", 0},
        {"PERSISTENT", 1},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8DeprecatedStorageInfoConstants, WTF_ARRAY_LENGTH(V8DeprecatedStorageInfoConstants), isolate);
    COMPILE_ASSERT(0 == DeprecatedStorageInfo::TEMPORARY, TheValueOfDeprecatedStorageInfo_TEMPORARYDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == DeprecatedStorageInfo::PERSISTENT, TheValueOfDeprecatedStorageInfo_PERSISTENTDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8DeprecatedStorageInfo::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8DeprecatedStorageInfoTemplate);
}

bool V8DeprecatedStorageInfo::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8DeprecatedStorageInfo::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DeprecatedStorageInfo* V8DeprecatedStorageInfo::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(DeprecatedStorageInfo* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8DeprecatedStorageInfo>(impl, isolate));
    return V8DeprecatedStorageInfo::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8DeprecatedStorageInfo::createWrapper(RawPtr<DeprecatedStorageInfo> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8DeprecatedStorageInfo>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8DeprecatedStorageInfo>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8DeprecatedStorageInfo::derefObject(void* object)
{
}

template<>
v8::Handle<v8::Value> toV8NoInline(DeprecatedStorageInfo* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
