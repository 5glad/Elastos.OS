// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8EventTarget.h"

#include "bindings/core/v8/V8Event.h"
#include "bindings/v8/BindingSecurity.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(EventTarget* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8EventTarget::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::EventTarget* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8EventTarget::wrapperTypeInfo = { gin::kEmbedderBlink, V8EventTarget::domTemplate, V8EventTarget::derefObject, 0, V8EventTarget::toEventTarget, 0, V8EventTarget::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace EventTargetV8Internal {

template <typename T> void V8_USE(T) { }

static void addEventListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addEventListener", "EventTarget", info.Holder(), info.GetIsolate());
    EventTarget* impl = V8EventTarget::toNative(info.Holder());
    if (LocalDOMWindow* window = impl->toDOMWindow()) {
        if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), window->frame(), exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
        if (!window->document())
            return;
    }
    V8StringResource<WithNullCheck> type;
    RefPtr<EventListener> listener;
    bool useCapture;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (UNLIKELY(info.Length() <= 0)) {
            impl->addEventListener();
            return;
        }
        TOSTRING_VOID_INTERNAL(type, info[0]);
        listener = V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), info[1], false, ListenerFindOrCreate);
        if (UNLIKELY(info.Length() <= 2)) {
            impl->addEventListener(type, listener);
            if (listener && !impl->toNode())
                addHiddenValueToArray(info.Holder(), info[1], V8EventTarget::eventListenerCacheIndex, info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(useCapture, info[2]->BooleanValue());
    }
    impl->addEventListener(type, listener, useCapture);
    if (listener && !impl->toNode())
        addHiddenValueToArray(info.Holder(), info[1], V8EventTarget::eventListenerCacheIndex, info.GetIsolate());
}

static void addEventListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventTargetV8Internal::addEventListenerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void removeEventListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "removeEventListener", "EventTarget", info.Holder(), info.GetIsolate());
    EventTarget* impl = V8EventTarget::toNative(info.Holder());
    if (LocalDOMWindow* window = impl->toDOMWindow()) {
        if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), window->frame(), exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
        if (!window->document())
            return;
    }
    V8StringResource<WithNullCheck> type;
    RefPtr<EventListener> listener;
    bool useCapture;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (UNLIKELY(info.Length() <= 0)) {
            impl->removeEventListener();
            return;
        }
        TOSTRING_VOID_INTERNAL(type, info[0]);
        listener = V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), info[1], false, ListenerFindOnly);
        if (UNLIKELY(info.Length() <= 2)) {
            impl->removeEventListener(type, listener.get());
            if (listener && !impl->toNode())
                removeHiddenValueFromArray(info.Holder(), info[1], V8EventTarget::eventListenerCacheIndex, info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(useCapture, info[2]->BooleanValue());
    }
    impl->removeEventListener(type, listener.get(), useCapture);
    if (listener && !impl->toNode())
        removeHiddenValueFromArray(info.Holder(), info[1], V8EventTarget::eventListenerCacheIndex, info.GetIsolate());
}

static void removeEventListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventTargetV8Internal::removeEventListenerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void dispatchEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "dispatchEvent", "EventTarget", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    EventTarget* impl = V8EventTarget::toNative(info.Holder());
    if (LocalDOMWindow* window = impl->toDOMWindow()) {
        if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), window->frame(), exceptionState)) {
            exceptionState.throwIfNeeded();
            return;
        }
        if (!window->document())
            return;
    }
    Event* event;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(event, V8Event::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    bool result = impl->dispatchEvent(event, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueBool(info, result);
}

static void dispatchEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventTargetV8Internal::dispatchEventMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace EventTargetV8Internal

static const V8DOMConfiguration::MethodConfiguration V8EventTargetMethods[] = {
    {"addEventListener", EventTargetV8Internal::addEventListenerMethodCallback, 0, 0},
    {"removeEventListener", EventTargetV8Internal::removeEventListenerMethodCallback, 0, 0},
    {"dispatchEvent", EventTargetV8Internal::dispatchEventMethodCallback, 0, 1},
};

static void configureV8EventTargetTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "EventTarget", v8::Local<v8::FunctionTemplate>(), V8EventTarget::internalFieldCount,
        0, 0,
        0, 0,
        V8EventTargetMethods, WTF_ARRAY_LENGTH(V8EventTargetMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8EventTarget::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8EventTargetTemplate);
}

bool V8EventTarget::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8EventTarget::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

EventTarget* V8EventTarget::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

EventTarget* V8EventTarget::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

void V8EventTarget::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(EventTarget* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
