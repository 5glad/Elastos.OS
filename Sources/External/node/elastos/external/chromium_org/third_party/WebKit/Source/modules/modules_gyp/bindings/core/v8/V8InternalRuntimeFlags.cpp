// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InternalRuntimeFlags.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(InternalRuntimeFlags* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8InternalRuntimeFlags::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::InternalRuntimeFlags* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8InternalRuntimeFlags::wrapperTypeInfo = { gin::kEmbedderBlink, V8InternalRuntimeFlags::domTemplate, V8InternalRuntimeFlags::derefObject, 0, 0, 0, V8InternalRuntimeFlags::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace InternalRuntimeFlagsV8Internal {

template <typename T> void V8_USE(T) { }

static void applicationCacheEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->applicationCacheEnabled());
}

static void applicationCacheEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::applicationCacheEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void audioVideoTracksEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->audioVideoTracksEnabled());
}

static void audioVideoTracksEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::audioVideoTracksEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void authorShadowDOMForAnyElementEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->authorShadowDOMForAnyElementEnabled());
}

static void authorShadowDOMForAnyElementEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::authorShadowDOMForAnyElementEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void batteryStatusEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->batteryStatusEnabled());
}

static void batteryStatusEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::batteryStatusEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void beaconEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->beaconEnabled());
}

static void beaconEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::beaconEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void prefixedVideoFullscreenEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->prefixedVideoFullscreenEnabled());
}

static void prefixedVideoFullscreenEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::prefixedVideoFullscreenEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void bleedingEdgeFastPathsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->bleedingEdgeFastPathsEnabled());
}

static void bleedingEdgeFastPathsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::bleedingEdgeFastPathsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void themeColorEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->themeColorEnabled());
}

static void themeColorEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::themeColorEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clientHintsDprEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->clientHintsDprEnabled());
}

static void clientHintsDprEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::clientHintsDprEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cryptoEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cryptoEnabled());
}

static void cryptoEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cryptoEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssAnimationUnprefixedEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssAnimationUnprefixedEnabled());
}

static void cssAnimationUnprefixedEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssAnimationUnprefixedEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssCompositingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssCompositingEnabled());
}

static void cssCompositingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssCompositingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssExclusionsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssExclusionsEnabled());
}

static void cssExclusionsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssExclusionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssGridLayoutEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssGridLayoutEnabled());
}

static void cssGridLayoutEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssGridLayoutEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssMaskSourceTypeEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssMaskSourceTypeEnabled());
}

static void cssMaskSourceTypeEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssMaskSourceTypeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssomSmoothScrollEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssomSmoothScrollEnabled());
}

static void cssomSmoothScrollEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssomSmoothScrollEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssShapesEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssShapesEnabled());
}

static void cssShapesEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssShapesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssStickyPositionEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssStickyPositionEnabled());
}

static void cssStickyPositionEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssStickyPositionEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssTouchActionEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssTouchActionEnabled());
}

static void cssTouchActionEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssTouchActionEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssTouchActionDelayEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssTouchActionDelayEnabled());
}

static void cssTouchActionDelayEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssTouchActionDelayEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssTransformsUnprefixedEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssTransformsUnprefixedEnabled());
}

static void cssTransformsUnprefixedEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssTransformsUnprefixedEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssViewportEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssViewportEnabled());
}

static void cssViewportEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssViewportEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssWillChangeEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->cssWillChangeEnabled());
}

static void cssWillChangeEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::cssWillChangeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void css3TextEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->css3TextEnabled());
}

static void css3TextEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::css3TextEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void css3TextDecorationsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->css3TextDecorationsEnabled());
}

static void css3TextDecorationsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::css3TextDecorationsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void customSchemeHandlerEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->customSchemeHandlerEnabled());
}

static void customSchemeHandlerEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::customSchemeHandlerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void databaseEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->databaseEnabled());
}

static void databaseEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::databaseEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void deviceLightEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->deviceLightEnabled());
}

static void deviceLightEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::deviceLightEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void dialogElementEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->dialogElementEnabled());
}

static void dialogElementEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::dialogElementEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void encodingAPIEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->encodingAPIEnabled());
}

static void encodingAPIEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::encodingAPIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void encryptedMediaEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->encryptedMediaEnabled());
}

static void encryptedMediaEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::encryptedMediaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void encryptedMediaAnyVersionEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->encryptedMediaAnyVersionEnabled());
}

static void encryptedMediaAnyVersionEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::encryptedMediaAnyVersionEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void experimentalCanvasFeaturesEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->experimentalCanvasFeaturesEnabled());
}

static void experimentalCanvasFeaturesEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::experimentalCanvasFeaturesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void experimentalContentSecurityPolicyFeaturesEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->experimentalContentSecurityPolicyFeaturesEnabled());
}

static void experimentalContentSecurityPolicyFeaturesEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::experimentalContentSecurityPolicyFeaturesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void experimentalWebSocketEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->experimentalWebSocketEnabled());
}

static void experimentalWebSocketEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::experimentalWebSocketEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fastMobileScrollingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->fastMobileScrollingEnabled());
}

static void fastMobileScrollingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fastMobileScrollingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fileAPIBlobCloseEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->fileAPIBlobCloseEnabled());
}

static void fileAPIBlobCloseEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fileAPIBlobCloseEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fileConstructorEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->fileConstructorEnabled());
}

static void fileConstructorEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fileConstructorEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fileSystemEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->fileSystemEnabled());
}

static void fileSystemEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fileSystemEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fontLoadEventsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->fontLoadEventsEnabled());
}

static void fontLoadEventsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fontLoadEventsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fastTextAutosizingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->fastTextAutosizingEnabled());
}

static void fastTextAutosizingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::fastTextAutosizingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void gamepadEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->gamepadEnabled());
}

static void gamepadEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::gamepadEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void htmlImportsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->htmlImportsEnabled());
}

static void htmlImportsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::htmlImportsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void highResolutionTimeInWorkersEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->highResolutionTimeInWorkersEnabled());
}

static void highResolutionTimeInWorkersEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::highResolutionTimeInWorkersEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void imeAPIEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->imeAPIEnabled());
}

static void imeAPIEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::imeAPIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void imageDataConstructorEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->imageDataConstructorEnabled());
}

static void imageDataConstructorEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::imageDataConstructorEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void indexedDBExperimentalEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->indexedDBExperimentalEnabled());
}

static void indexedDBExperimentalEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::indexedDBExperimentalEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void inputModeAttributeEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->inputModeAttributeEnabled());
}

static void inputModeAttributeEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::inputModeAttributeEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void langAttributeAwareFormControlUIEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->langAttributeAwareFormControlUIEnabled());
}

static void langAttributeAwareFormControlUIEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::langAttributeAwareFormControlUIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void layerSquashingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->layerSquashingEnabled());
}

static void layerSquashingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::layerSquashingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void prefixedEncryptedMediaEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->prefixedEncryptedMediaEnabled());
}

static void prefixedEncryptedMediaEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::prefixedEncryptedMediaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void localStorageEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->localStorageEnabled());
}

static void localStorageEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::localStorageEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void manifestEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->manifestEnabled());
}

static void manifestEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::manifestEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mediaEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->mediaEnabled());
}

static void mediaEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mediaControllerEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->mediaControllerEnabled());
}

static void mediaControllerEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaControllerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mediaQueryParserEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->mediaQueryParserEnabled());
}

static void mediaQueryParserEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaQueryParserEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mediaSourceEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->mediaSourceEnabled());
}

static void mediaSourceEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaSourceEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mediaSourceExperimentalEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->mediaSourceExperimentalEnabled());
}

static void mediaSourceExperimentalEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaSourceExperimentalEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void mediaStreamEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->mediaStreamEnabled());
}

static void mediaStreamEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::mediaStreamEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void memoryInfoInWorkersEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->memoryInfoInWorkersEnabled());
}

static void memoryInfoInWorkersEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::memoryInfoInWorkersEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void navigationTransitionsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->navigationTransitionsEnabled());
}

static void navigationTransitionsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::navigationTransitionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void navigatorContentUtilsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->navigatorContentUtilsEnabled());
}

static void navigatorContentUtilsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::navigatorContentUtilsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void networkInformationEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->networkInformationEnabled());
}

static void networkInformationEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::networkInformationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void notificationsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->notificationsEnabled());
}

static void notificationsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::notificationsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void objectFitPositionEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->objectFitPositionEnabled());
}

static void objectFitPositionEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::objectFitPositionEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void orientationEventEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->orientationEventEnabled());
}

static void orientationEventEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::orientationEventEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void overlayFullscreenVideoEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->overlayFullscreenVideoEnabled());
}

static void overlayFullscreenVideoEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::overlayFullscreenVideoEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pagePopupEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->pagePopupEnabled());
}

static void pagePopupEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pagePopupEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void path2DEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->path2DEnabled());
}

static void path2DEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::path2DEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pathOpsSVGClippingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->pathOpsSVGClippingEnabled());
}

static void pathOpsSVGClippingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pathOpsSVGClippingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void peerConnectionEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->peerConnectionEnabled());
}

static void peerConnectionEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::peerConnectionEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void preciseMemoryInfoEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->preciseMemoryInfoEnabled());
}

static void preciseMemoryInfoEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::preciseMemoryInfoEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pushMessagingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->pushMessagingEnabled());
}

static void pushMessagingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pushMessagingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void quotaEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->quotaEnabled());
}

static void quotaEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::quotaEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void quotaPromiseEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->quotaPromiseEnabled());
}

static void quotaPromiseEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::quotaPromiseEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void overlayScrollbarsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->overlayScrollbarsEnabled());
}

static void overlayScrollbarsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::overlayScrollbarsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void regionBasedColumnsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->regionBasedColumnsEnabled());
}

static void regionBasedColumnsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::regionBasedColumnsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void repaintAfterLayoutEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->repaintAfterLayoutEnabled());
}

static void repaintAfterLayoutEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::repaintAfterLayoutEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void requestAutocompleteEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->requestAutocompleteEnabled());
}

static void requestAutocompleteEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::requestAutocompleteEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenOrientationEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->screenOrientationEnabled());
}

static void screenOrientationEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::screenOrientationEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scriptedSpeechEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->scriptedSpeechEnabled());
}

static void scriptedSpeechEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::scriptedSpeechEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scrollTopLeftInteropEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->scrollTopLeftInteropEnabled());
}

static void scrollTopLeftInteropEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::scrollTopLeftInteropEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void serviceWorkerEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->serviceWorkerEnabled());
}

static void serviceWorkerEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::serviceWorkerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sessionStorageEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->sessionStorageEnabled());
}

static void sessionStorageEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::sessionStorageEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sharedWorkerEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->sharedWorkerEnabled());
}

static void sharedWorkerEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::sharedWorkerEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pictureSizesEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->pictureSizesEnabled());
}

static void pictureSizesEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pictureSizesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pictureEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->pictureEnabled());
}

static void pictureEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pictureEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void showModalDialogEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->showModalDialogEnabled());
}

static void showModalDialogEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::showModalDialogEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void speechSynthesisEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->speechSynthesisEnabled());
}

static void speechSynthesisEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::speechSynthesisEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void streamEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->streamEnabled());
}

static void streamEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::streamEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void subpixelFontScalingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->subpixelFontScalingEnabled());
}

static void subpixelFontScalingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::subpixelFontScalingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void subresourceIntegrityEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->subresourceIntegrityEnabled());
}

static void subresourceIntegrityEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::subresourceIntegrityEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void targetedStyleRecalcEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->targetedStyleRecalcEnabled());
}

static void targetedStyleRecalcEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::targetedStyleRecalcEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void touchEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->touchEnabled());
}

static void touchEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::touchEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void touchIconLoadingEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->touchIconLoadingEnabled());
}

static void touchIconLoadingEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::touchIconLoadingEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void threadedParserDataReceiverEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->threadedParserDataReceiverEnabled());
}

static void threadedParserDataReceiverEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::threadedParserDataReceiverEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void userSelectAllEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->userSelectAllEnabled());
}

static void userSelectAllEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::userSelectAllEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webAnimationsSVGEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webAnimationsSVGEnabled());
}

static void webAnimationsSVGEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAnimationsSVGEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webAnimationsElementAnimateEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webAnimationsElementAnimateEnabled());
}

static void webAnimationsElementAnimateEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAnimationsElementAnimateEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webAnimationsAPIEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webAnimationsAPIEnabled());
}

static void webAnimationsAPIEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAnimationsAPIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

#if ENABLE(WEB_AUDIO)
static void webAudioEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webAudioEnabled());
}
#endif // ENABLE(WEB_AUDIO)

#if ENABLE(WEB_AUDIO)
static void webAudioEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webAudioEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}
#endif // ENABLE(WEB_AUDIO)

static void webGLDraftExtensionsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webGLDraftExtensionsEnabled());
}

static void webGLDraftExtensionsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webGLDraftExtensionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webGLImageChromiumEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webGLImageChromiumEnabled());
}

static void webGLImageChromiumEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webGLImageChromiumEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webMIDIEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webMIDIEnabled());
}

static void webMIDIEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webMIDIEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webVTTRegionsEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->webVTTRegionsEnabled());
}

static void webVTTRegionsEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::webVTTRegionsEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void woff2EnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->woff2Enabled());
}

static void woff2EnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::woff2EnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void xsltEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->xsltEnabled());
}

static void xsltEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::xsltEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pseudoClassesInMatchingCriteriaInAuthorShadowTreesEnabledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    InternalRuntimeFlags* impl = V8InternalRuntimeFlags::toNative(holder);
    v8SetReturnValueBool(info, impl->pseudoClassesInMatchingCriteriaInAuthorShadowTreesEnabled());
}

static void pseudoClassesInMatchingCriteriaInAuthorShadowTreesEnabledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    InternalRuntimeFlagsV8Internal::pseudoClassesInMatchingCriteriaInAuthorShadowTreesEnabledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace InternalRuntimeFlagsV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8InternalRuntimeFlagsAttributes[] = {
    {"applicationCacheEnabled", InternalRuntimeFlagsV8Internal::applicationCacheEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"audioVideoTracksEnabled", InternalRuntimeFlagsV8Internal::audioVideoTracksEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"authorShadowDOMForAnyElementEnabled", InternalRuntimeFlagsV8Internal::authorShadowDOMForAnyElementEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"batteryStatusEnabled", InternalRuntimeFlagsV8Internal::batteryStatusEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"beaconEnabled", InternalRuntimeFlagsV8Internal::beaconEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"prefixedVideoFullscreenEnabled", InternalRuntimeFlagsV8Internal::prefixedVideoFullscreenEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"bleedingEdgeFastPathsEnabled", InternalRuntimeFlagsV8Internal::bleedingEdgeFastPathsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"themeColorEnabled", InternalRuntimeFlagsV8Internal::themeColorEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"clientHintsDprEnabled", InternalRuntimeFlagsV8Internal::clientHintsDprEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cryptoEnabled", InternalRuntimeFlagsV8Internal::cryptoEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssAnimationUnprefixedEnabled", InternalRuntimeFlagsV8Internal::cssAnimationUnprefixedEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssCompositingEnabled", InternalRuntimeFlagsV8Internal::cssCompositingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssExclusionsEnabled", InternalRuntimeFlagsV8Internal::cssExclusionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssGridLayoutEnabled", InternalRuntimeFlagsV8Internal::cssGridLayoutEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssMaskSourceTypeEnabled", InternalRuntimeFlagsV8Internal::cssMaskSourceTypeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssomSmoothScrollEnabled", InternalRuntimeFlagsV8Internal::cssomSmoothScrollEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssShapesEnabled", InternalRuntimeFlagsV8Internal::cssShapesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssStickyPositionEnabled", InternalRuntimeFlagsV8Internal::cssStickyPositionEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssTouchActionEnabled", InternalRuntimeFlagsV8Internal::cssTouchActionEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssTouchActionDelayEnabled", InternalRuntimeFlagsV8Internal::cssTouchActionDelayEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssTransformsUnprefixedEnabled", InternalRuntimeFlagsV8Internal::cssTransformsUnprefixedEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssViewportEnabled", InternalRuntimeFlagsV8Internal::cssViewportEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssWillChangeEnabled", InternalRuntimeFlagsV8Internal::cssWillChangeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"css3TextEnabled", InternalRuntimeFlagsV8Internal::css3TextEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"css3TextDecorationsEnabled", InternalRuntimeFlagsV8Internal::css3TextDecorationsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"customSchemeHandlerEnabled", InternalRuntimeFlagsV8Internal::customSchemeHandlerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"databaseEnabled", InternalRuntimeFlagsV8Internal::databaseEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"deviceLightEnabled", InternalRuntimeFlagsV8Internal::deviceLightEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"dialogElementEnabled", InternalRuntimeFlagsV8Internal::dialogElementEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"encodingAPIEnabled", InternalRuntimeFlagsV8Internal::encodingAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"encryptedMediaEnabled", InternalRuntimeFlagsV8Internal::encryptedMediaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"encryptedMediaAnyVersionEnabled", InternalRuntimeFlagsV8Internal::encryptedMediaAnyVersionEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"experimentalCanvasFeaturesEnabled", InternalRuntimeFlagsV8Internal::experimentalCanvasFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"experimentalContentSecurityPolicyFeaturesEnabled", InternalRuntimeFlagsV8Internal::experimentalContentSecurityPolicyFeaturesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"experimentalWebSocketEnabled", InternalRuntimeFlagsV8Internal::experimentalWebSocketEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"fastMobileScrollingEnabled", InternalRuntimeFlagsV8Internal::fastMobileScrollingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"fileAPIBlobCloseEnabled", InternalRuntimeFlagsV8Internal::fileAPIBlobCloseEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"fileConstructorEnabled", InternalRuntimeFlagsV8Internal::fileConstructorEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"fileSystemEnabled", InternalRuntimeFlagsV8Internal::fileSystemEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"fontLoadEventsEnabled", InternalRuntimeFlagsV8Internal::fontLoadEventsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"fastTextAutosizingEnabled", InternalRuntimeFlagsV8Internal::fastTextAutosizingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"gamepadEnabled", InternalRuntimeFlagsV8Internal::gamepadEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"htmlImportsEnabled", InternalRuntimeFlagsV8Internal::htmlImportsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"highResolutionTimeInWorkersEnabled", InternalRuntimeFlagsV8Internal::highResolutionTimeInWorkersEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"imeAPIEnabled", InternalRuntimeFlagsV8Internal::imeAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"imageDataConstructorEnabled", InternalRuntimeFlagsV8Internal::imageDataConstructorEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"indexedDBExperimentalEnabled", InternalRuntimeFlagsV8Internal::indexedDBExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"inputModeAttributeEnabled", InternalRuntimeFlagsV8Internal::inputModeAttributeEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"langAttributeAwareFormControlUIEnabled", InternalRuntimeFlagsV8Internal::langAttributeAwareFormControlUIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"layerSquashingEnabled", InternalRuntimeFlagsV8Internal::layerSquashingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"prefixedEncryptedMediaEnabled", InternalRuntimeFlagsV8Internal::prefixedEncryptedMediaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"localStorageEnabled", InternalRuntimeFlagsV8Internal::localStorageEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"manifestEnabled", InternalRuntimeFlagsV8Internal::manifestEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mediaEnabled", InternalRuntimeFlagsV8Internal::mediaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mediaControllerEnabled", InternalRuntimeFlagsV8Internal::mediaControllerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mediaQueryParserEnabled", InternalRuntimeFlagsV8Internal::mediaQueryParserEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mediaSourceEnabled", InternalRuntimeFlagsV8Internal::mediaSourceEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mediaSourceExperimentalEnabled", InternalRuntimeFlagsV8Internal::mediaSourceExperimentalEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"mediaStreamEnabled", InternalRuntimeFlagsV8Internal::mediaStreamEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"memoryInfoInWorkersEnabled", InternalRuntimeFlagsV8Internal::memoryInfoInWorkersEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"navigationTransitionsEnabled", InternalRuntimeFlagsV8Internal::navigationTransitionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"navigatorContentUtilsEnabled", InternalRuntimeFlagsV8Internal::navigatorContentUtilsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"networkInformationEnabled", InternalRuntimeFlagsV8Internal::networkInformationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"notificationsEnabled", InternalRuntimeFlagsV8Internal::notificationsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"objectFitPositionEnabled", InternalRuntimeFlagsV8Internal::objectFitPositionEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"orientationEventEnabled", InternalRuntimeFlagsV8Internal::orientationEventEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"overlayFullscreenVideoEnabled", InternalRuntimeFlagsV8Internal::overlayFullscreenVideoEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pagePopupEnabled", InternalRuntimeFlagsV8Internal::pagePopupEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"path2DEnabled", InternalRuntimeFlagsV8Internal::path2DEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pathOpsSVGClippingEnabled", InternalRuntimeFlagsV8Internal::pathOpsSVGClippingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"peerConnectionEnabled", InternalRuntimeFlagsV8Internal::peerConnectionEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"preciseMemoryInfoEnabled", InternalRuntimeFlagsV8Internal::preciseMemoryInfoEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pushMessagingEnabled", InternalRuntimeFlagsV8Internal::pushMessagingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"quotaEnabled", InternalRuntimeFlagsV8Internal::quotaEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"quotaPromiseEnabled", InternalRuntimeFlagsV8Internal::quotaPromiseEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"overlayScrollbarsEnabled", InternalRuntimeFlagsV8Internal::overlayScrollbarsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"regionBasedColumnsEnabled", InternalRuntimeFlagsV8Internal::regionBasedColumnsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"repaintAfterLayoutEnabled", InternalRuntimeFlagsV8Internal::repaintAfterLayoutEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"requestAutocompleteEnabled", InternalRuntimeFlagsV8Internal::requestAutocompleteEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenOrientationEnabled", InternalRuntimeFlagsV8Internal::screenOrientationEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"scriptedSpeechEnabled", InternalRuntimeFlagsV8Internal::scriptedSpeechEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"scrollTopLeftInteropEnabled", InternalRuntimeFlagsV8Internal::scrollTopLeftInteropEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"serviceWorkerEnabled", InternalRuntimeFlagsV8Internal::serviceWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"sessionStorageEnabled", InternalRuntimeFlagsV8Internal::sessionStorageEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"sharedWorkerEnabled", InternalRuntimeFlagsV8Internal::sharedWorkerEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pictureSizesEnabled", InternalRuntimeFlagsV8Internal::pictureSizesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pictureEnabled", InternalRuntimeFlagsV8Internal::pictureEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"showModalDialogEnabled", InternalRuntimeFlagsV8Internal::showModalDialogEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"speechSynthesisEnabled", InternalRuntimeFlagsV8Internal::speechSynthesisEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"streamEnabled", InternalRuntimeFlagsV8Internal::streamEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"subpixelFontScalingEnabled", InternalRuntimeFlagsV8Internal::subpixelFontScalingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"subresourceIntegrityEnabled", InternalRuntimeFlagsV8Internal::subresourceIntegrityEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"targetedStyleRecalcEnabled", InternalRuntimeFlagsV8Internal::targetedStyleRecalcEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"touchEnabled", InternalRuntimeFlagsV8Internal::touchEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"touchIconLoadingEnabled", InternalRuntimeFlagsV8Internal::touchIconLoadingEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"threadedParserDataReceiverEnabled", InternalRuntimeFlagsV8Internal::threadedParserDataReceiverEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"userSelectAllEnabled", InternalRuntimeFlagsV8Internal::userSelectAllEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webAnimationsSVGEnabled", InternalRuntimeFlagsV8Internal::webAnimationsSVGEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webAnimationsElementAnimateEnabled", InternalRuntimeFlagsV8Internal::webAnimationsElementAnimateEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webAnimationsAPIEnabled", InternalRuntimeFlagsV8Internal::webAnimationsAPIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(WEB_AUDIO)
    {"webAudioEnabled", InternalRuntimeFlagsV8Internal::webAudioEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
    {"webGLDraftExtensionsEnabled", InternalRuntimeFlagsV8Internal::webGLDraftExtensionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webGLImageChromiumEnabled", InternalRuntimeFlagsV8Internal::webGLImageChromiumEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webMIDIEnabled", InternalRuntimeFlagsV8Internal::webMIDIEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webVTTRegionsEnabled", InternalRuntimeFlagsV8Internal::webVTTRegionsEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"woff2Enabled", InternalRuntimeFlagsV8Internal::woff2EnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"xsltEnabled", InternalRuntimeFlagsV8Internal::xsltEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pseudoClassesInMatchingCriteriaInAuthorShadowTreesEnabled", InternalRuntimeFlagsV8Internal::pseudoClassesInMatchingCriteriaInAuthorShadowTreesEnabledAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8InternalRuntimeFlagsTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "InternalRuntimeFlags", v8::Local<v8::FunctionTemplate>(), V8InternalRuntimeFlags::internalFieldCount,
        V8InternalRuntimeFlagsAttributes, WTF_ARRAY_LENGTH(V8InternalRuntimeFlagsAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8InternalRuntimeFlags::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8InternalRuntimeFlagsTemplate);
}

bool V8InternalRuntimeFlags::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8InternalRuntimeFlags::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InternalRuntimeFlags* V8InternalRuntimeFlags::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(InternalRuntimeFlags* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InternalRuntimeFlags>(impl, isolate));
    return V8InternalRuntimeFlags::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8InternalRuntimeFlags::createWrapper(PassRefPtrWillBeRawPtr<InternalRuntimeFlags> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InternalRuntimeFlags>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8InternalRuntimeFlags>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8InternalRuntimeFlags::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(InternalRuntimeFlags* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
