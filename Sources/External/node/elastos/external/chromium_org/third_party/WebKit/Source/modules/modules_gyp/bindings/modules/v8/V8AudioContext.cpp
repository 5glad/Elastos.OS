// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#if ENABLE(WEB_AUDIO)
#include "V8AudioContext.h"

#include "bindings/core/v8/V8HTMLMediaElement.h"
#include "bindings/modules/v8/V8AnalyserNode.h"
#include "bindings/modules/v8/V8AudioBuffer.h"
#include "bindings/modules/v8/V8AudioBufferCallback.h"
#include "bindings/modules/v8/V8AudioBufferSourceNode.h"
#include "bindings/modules/v8/V8AudioDestinationNode.h"
#include "bindings/modules/v8/V8AudioListener.h"
#include "bindings/modules/v8/V8BiquadFilterNode.h"
#include "bindings/modules/v8/V8ChannelMergerNode.h"
#include "bindings/modules/v8/V8ChannelSplitterNode.h"
#include "bindings/modules/v8/V8ConvolverNode.h"
#include "bindings/modules/v8/V8DelayNode.h"
#include "bindings/modules/v8/V8DynamicsCompressorNode.h"
#include "bindings/modules/v8/V8GainNode.h"
#include "bindings/modules/v8/V8MediaElementAudioSourceNode.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "bindings/modules/v8/V8MediaStreamAudioDestinationNode.h"
#include "bindings/modules/v8/V8MediaStreamAudioSourceNode.h"
#include "bindings/modules/v8/V8OscillatorNode.h"
#include "bindings/modules/v8/V8PannerNode.h"
#include "bindings/modules/v8/V8PeriodicWave.h"
#include "bindings/modules/v8/V8ScriptProcessorNode.h"
#include "bindings/modules/v8/V8WaveShaperNode.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "bindings/v8/custom/V8ArrayBufferCustom.h"
#include "bindings/v8/custom/V8Float32ArrayCustom.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(AudioContext* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8AudioContext::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::AudioContext* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8AudioContext::wrapperTypeInfo = { gin::kEmbedderBlink, V8AudioContext::domTemplate, V8AudioContext::derefObject, V8AudioContext::toActiveDOMObject, V8AudioContext::toEventTarget, 0, V8AudioContext::installPerContextEnabledMethods, &V8EventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace AudioContextV8Internal {

template <typename T> void V8_USE(T) { }

static void destinationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    AudioContext* impl = V8AudioContext::toNative(holder);
    RefPtrWillBeRawPtr<AudioDestinationNode> result(impl->destination());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8AudioDestinationNode>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "destination"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void destinationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    AudioContextV8Internal::destinationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void currentTimeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    AudioContext* impl = V8AudioContext::toNative(holder);
    v8SetReturnValue(info, impl->currentTime());
}

static void currentTimeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    AudioContextV8Internal::currentTimeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sampleRateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    AudioContext* impl = V8AudioContext::toNative(holder);
    v8SetReturnValue(info, impl->sampleRate());
}

static void sampleRateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    AudioContextV8Internal::sampleRateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void listenerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    AudioContext* impl = V8AudioContext::toNative(holder);
    RefPtrWillBeRawPtr<AudioListener> result(impl->listener());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8AudioListener>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "listener"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void listenerAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    AudioContextV8Internal::listenerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncompleteAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    AudioContext* impl = V8AudioContext::toNative(holder);
    EventListener* v8Value = impl->oncomplete();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncompleteAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    AudioContextV8Internal::oncompleteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncompleteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    AudioContext* impl = V8AudioContext::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->oncomplete(), v8Value, V8AudioContext::eventListenerCacheIndex, info.GetIsolate());
    impl->setOncomplete(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncompleteAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    AudioContextV8Internal::oncompleteAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createBuffer", "AudioContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        throwMinimumArityTypeError(exceptionState, 3, info.Length());
        return;
    }
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    unsigned numberOfChannels;
    unsigned numberOfFrames;
    float sampleRate;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(numberOfChannels, toUInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(numberOfFrames, toUInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(sampleRate, static_cast<float>(info[2]->NumberValue()));
    }
    RefPtrWillBeRawPtr<AudioBuffer> result = impl->createBuffer(numberOfChannels, numberOfFrames, sampleRate, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createBufferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void decodeAudioDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "decodeAudioData", "AudioContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    ArrayBuffer* audioData;
    OwnPtr<AudioBufferCallback> successCallback;
    OwnPtr<AudioBufferCallback> errorCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(audioData, info[0]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[0])) : 0);
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8AudioBufferCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8AudioBufferCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
    }
    impl->decodeAudioData(audioData, successCallback.release(), errorCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void decodeAudioDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::decodeAudioDataMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createBufferSourceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createBufferSource());
}

static void createBufferSourceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createBufferSourceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createMediaElementSourceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createMediaElementSource", "AudioContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    HTMLMediaElement* mediaElement;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(mediaElement, V8HTMLMediaElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    RefPtrWillBeRawPtr<MediaElementAudioSourceNode> result = impl->createMediaElementSource(mediaElement, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createMediaElementSourceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createMediaElementSourceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createMediaStreamSourceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createMediaStreamSource", "AudioContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    MediaStream* mediaStream;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(mediaStream, V8MediaStream::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    RefPtrWillBeRawPtr<MediaStreamAudioSourceNode> result = impl->createMediaStreamSource(mediaStream, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createMediaStreamSourceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createMediaStreamSourceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createMediaStreamDestinationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createMediaStreamDestination());
}

static void createMediaStreamDestinationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createMediaStreamDestinationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createGainMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createGain());
}

static void createGainMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createGainMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createDelayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDelay", "AudioContext", info.Holder(), info.GetIsolate());
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    double maxDelayTime;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (UNLIKELY(info.Length() <= 0)) {
            RefPtrWillBeRawPtr<DelayNode> result = impl->createDelay(exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValue(info, result.release());
            return;
        }
        TONATIVE_VOID_INTERNAL(maxDelayTime, static_cast<double>(info[0]->NumberValue()));
    }
    RefPtrWillBeRawPtr<DelayNode> result = impl->createDelay(maxDelayTime, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDelayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createDelayMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createBiquadFilterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createBiquadFilter());
}

static void createBiquadFilterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createBiquadFilterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createWaveShaperMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createWaveShaper());
}

static void createWaveShaperMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createWaveShaperMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createPannerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createPanner());
}

static void createPannerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createPannerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createConvolverMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createConvolver());
}

static void createConvolverMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createConvolverMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createDynamicsCompressorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createDynamicsCompressor());
}

static void createDynamicsCompressorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createDynamicsCompressorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createAnalyserMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createAnalyser());
}

static void createAnalyserMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createAnalyserMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createScriptProcessorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createScriptProcessor", "AudioContext", info.Holder(), info.GetIsolate());
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    unsigned bufferSize;
    unsigned numberOfInputChannels;
    unsigned numberOfOutputChannels;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (UNLIKELY(info.Length() <= 0)) {
            RefPtrWillBeRawPtr<ScriptProcessorNode> result = impl->createScriptProcessor(exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValue(info, result.release());
            return;
        }
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(bufferSize, toUInt32(info[0], exceptionState), exceptionState);
        if (UNLIKELY(info.Length() <= 1)) {
            RefPtrWillBeRawPtr<ScriptProcessorNode> result = impl->createScriptProcessor(bufferSize, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValue(info, result.release());
            return;
        }
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(numberOfInputChannels, toUInt32(info[1], exceptionState), exceptionState);
        if (UNLIKELY(info.Length() <= 2)) {
            RefPtrWillBeRawPtr<ScriptProcessorNode> result = impl->createScriptProcessor(bufferSize, numberOfInputChannels, exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValue(info, result.release());
            return;
        }
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(numberOfOutputChannels, toUInt32(info[2], exceptionState), exceptionState);
    }
    RefPtrWillBeRawPtr<ScriptProcessorNode> result = impl->createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createScriptProcessorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createScriptProcessorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createOscillatorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    v8SetReturnValue(info, impl->createOscillator());
}

static void createOscillatorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createOscillatorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createPeriodicWaveMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createPeriodicWave", "AudioContext", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    Float32Array* real;
    Float32Array* imag;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(real, info[0]->IsFloat32Array() ? V8Float32Array::toNative(v8::Handle<v8::Float32Array>::Cast(info[0])) : 0);
        TONATIVE_VOID_INTERNAL(imag, info[1]->IsFloat32Array() ? V8Float32Array::toNative(v8::Handle<v8::Float32Array>::Cast(info[1])) : 0);
    }
    RefPtrWillBeRawPtr<PeriodicWave> result = impl->createPeriodicWave(real, imag, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createPeriodicWaveMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createPeriodicWaveMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createChannelSplitterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createChannelSplitter", "AudioContext", info.Holder(), info.GetIsolate());
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    unsigned numberOfOutputs;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (UNLIKELY(info.Length() <= 0)) {
            RefPtrWillBeRawPtr<ChannelSplitterNode> result = impl->createChannelSplitter(exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValue(info, result.release());
            return;
        }
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(numberOfOutputs, toUInt32(info[0], exceptionState), exceptionState);
    }
    RefPtrWillBeRawPtr<ChannelSplitterNode> result = impl->createChannelSplitter(numberOfOutputs, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createChannelSplitterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createChannelSplitterMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createChannelMergerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createChannelMerger", "AudioContext", info.Holder(), info.GetIsolate());
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    unsigned numberOfInputs;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (UNLIKELY(info.Length() <= 0)) {
            RefPtrWillBeRawPtr<ChannelMergerNode> result = impl->createChannelMerger(exceptionState);
            if (exceptionState.hadException()) {
                exceptionState.throwIfNeeded();
                return;
            }
            v8SetReturnValue(info, result.release());
            return;
        }
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(numberOfInputs, toUInt32(info[0], exceptionState), exceptionState);
    }
    RefPtrWillBeRawPtr<ChannelMergerNode> result = impl->createChannelMerger(numberOfInputs, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createChannelMergerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::createChannelMergerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void startRenderingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    AudioContext* impl = V8AudioContext::toNative(info.Holder());
    impl->startRendering();
}

static void startRenderingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    AudioContextV8Internal::startRenderingMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "AudioContext", info.Holder(), isolate);
    Document& document = *toDocument(currentExecutionContext(isolate));
    RefPtrWillBeRawPtr<AudioContext> impl = AudioContext::create(document, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;

    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8AudioContext>(impl.release(), &V8AudioContext::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    v8SetReturnValue(info, wrapper);
}

} // namespace AudioContextV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8AudioContextAttributes[] = {
    {"destination", AudioContextV8Internal::destinationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"currentTime", AudioContextV8Internal::currentTimeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"sampleRate", AudioContextV8Internal::sampleRateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"listener", AudioContextV8Internal::listenerAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"oncomplete", AudioContextV8Internal::oncompleteAttributeGetterCallback, AudioContextV8Internal::oncompleteAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8AudioContextMethods[] = {
    {"createBuffer", AudioContextV8Internal::createBufferMethodCallback, 0, 3},
    {"decodeAudioData", AudioContextV8Internal::decodeAudioDataMethodCallback, 0, 2},
    {"createBufferSource", AudioContextV8Internal::createBufferSourceMethodCallback, 0, 0},
    {"createMediaElementSource", AudioContextV8Internal::createMediaElementSourceMethodCallback, 0, 1},
    {"createMediaStreamSource", AudioContextV8Internal::createMediaStreamSourceMethodCallback, 0, 1},
    {"createMediaStreamDestination", AudioContextV8Internal::createMediaStreamDestinationMethodCallback, 0, 0},
    {"createGain", AudioContextV8Internal::createGainMethodCallback, 0, 0},
    {"createDelay", AudioContextV8Internal::createDelayMethodCallback, 0, 0},
    {"createBiquadFilter", AudioContextV8Internal::createBiquadFilterMethodCallback, 0, 0},
    {"createWaveShaper", AudioContextV8Internal::createWaveShaperMethodCallback, 0, 0},
    {"createPanner", AudioContextV8Internal::createPannerMethodCallback, 0, 0},
    {"createConvolver", AudioContextV8Internal::createConvolverMethodCallback, 0, 0},
    {"createDynamicsCompressor", AudioContextV8Internal::createDynamicsCompressorMethodCallback, 0, 0},
    {"createAnalyser", AudioContextV8Internal::createAnalyserMethodCallback, 0, 0},
    {"createScriptProcessor", AudioContextV8Internal::createScriptProcessorMethodCallback, 0, 0},
    {"createOscillator", AudioContextV8Internal::createOscillatorMethodCallback, 0, 0},
    {"createPeriodicWave", AudioContextV8Internal::createPeriodicWaveMethodCallback, 0, 2},
    {"createChannelSplitter", AudioContextV8Internal::createChannelSplitterMethodCallback, 0, 0},
    {"createChannelMerger", AudioContextV8Internal::createChannelMergerMethodCallback, 0, 0},
    {"startRendering", AudioContextV8Internal::startRenderingMethodCallback, 0, 0},
};

void V8AudioContext::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("AudioContext"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    AudioContextV8Internal::constructor(info);
}

static void configureV8AudioContextTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "AudioContext", V8EventTarget::domTemplate(isolate), V8AudioContext::internalFieldCount,
        V8AudioContextAttributes, WTF_ARRAY_LENGTH(V8AudioContextAttributes),
        0, 0,
        V8AudioContextMethods, WTF_ARRAY_LENGTH(V8AudioContextMethods),
        isolate);
    functionTemplate->SetCallHandler(V8AudioContext::constructorCallback);
    functionTemplate->SetLength(0);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8AudioContext::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8AudioContextTemplate);
}

bool V8AudioContext::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8AudioContext::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

AudioContext* V8AudioContext::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

ActiveDOMObject* V8AudioContext::toActiveDOMObject(v8::Handle<v8::Object> wrapper)
{
    return toNative(wrapper);
}

EventTarget* V8AudioContext::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(AudioContext* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8AudioContext>(impl, isolate));
    return V8AudioContext::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8AudioContext::createWrapper(PassRefPtrWillBeRawPtr<AudioContext> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8AudioContext>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8AudioContext>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8AudioContext::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(AudioContext* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
#endif // ENABLE(WEB_AUDIO)
