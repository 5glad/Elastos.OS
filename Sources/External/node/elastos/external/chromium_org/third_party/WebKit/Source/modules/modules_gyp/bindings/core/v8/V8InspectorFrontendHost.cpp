// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InspectorFrontendHost.h"

#include "bindings/core/v8/V8MouseEvent.h"
#include "bindings/modules/v8/V8DOMFileSystem.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptValue.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "modules/filesystem/InspectorFrontendHostFileSystem.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(InspectorFrontendHost* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8InspectorFrontendHost::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::InspectorFrontendHost* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8InspectorFrontendHost::wrapperTypeInfo = { gin::kEmbedderBlink, V8InspectorFrontendHost::domTemplate, V8InspectorFrontendHost::derefObject, 0, 0, 0, V8InspectorFrontendHost::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace InspectorFrontendHostV8Internal {

template <typename T> void V8_USE(T) { }

static void setZoomFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setZoomFactor", "InspectorFrontendHost", 1, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    float zoom;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(zoom, static_cast<float>(info[0]->NumberValue()));
    }
    impl->setZoomFactor(zoom);
}

static void setZoomFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::setZoomFactorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void zoomFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    v8SetReturnValue(info, impl->zoomFactor());
}

static void zoomFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::zoomFactorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setInjectedScriptForOriginMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("setInjectedScriptForOrigin", "InspectorFrontendHost", 2, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    V8StringResource<> origin;
    V8StringResource<> script;
    {
        TOSTRING_VOID_INTERNAL(origin, info[0]);
        TOSTRING_VOID_INTERNAL(script, info[1]);
    }
    impl->setInjectedScriptForOrigin(origin, script);
}

static void setInjectedScriptForOriginMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::setInjectedScriptForOriginMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void copyTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("copyText", "InspectorFrontendHost", 1, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    V8StringResource<> text;
    {
        TOSTRING_VOID_INTERNAL(text, info[0]);
    }
    impl->copyText(text);
}

static void copyTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::copyTextMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void platformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InspectorFrontendHost::platformMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void portMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InspectorFrontendHost::portMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void showContextMenuMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InspectorFrontendHost::showContextMenuMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sendMessageToBackendMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("sendMessageToBackend", "InspectorFrontendHost", 1, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    V8StringResource<> message;
    {
        TOSTRING_VOID_INTERNAL(message, info[0]);
    }
    impl->sendMessageToBackend(message);
}

static void sendMessageToBackendMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::sendMessageToBackendMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sendMessageToEmbedderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("sendMessageToEmbedder", "InspectorFrontendHost", 1, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    V8StringResource<> message;
    {
        TOSTRING_VOID_INTERNAL(message, info[0]);
    }
    impl->sendMessageToEmbedder(message);
}

static void sendMessageToEmbedderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::sendMessageToEmbedderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void recordActionTakenMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InspectorFrontendHost::recordActionTakenMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void recordPanelShownMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InspectorFrontendHost::recordPanelShownMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getSelectionBackgroundColorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    v8SetReturnValueString(info, impl->getSelectionBackgroundColor(), info.GetIsolate());
}

static void getSelectionBackgroundColorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::getSelectionBackgroundColorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getSelectionForegroundColorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    v8SetReturnValueString(info, impl->getSelectionForegroundColor(), info.GetIsolate());
}

static void getSelectionForegroundColorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::getSelectionForegroundColorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void isUnderTestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    v8SetReturnValueBool(info, impl->isUnderTest());
}

static void isUnderTestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::isUnderTestMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void isolatedFileSystemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("isolatedFileSystem", "InspectorFrontendHost", 2, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    V8StringResource<> fileSystemId;
    V8StringResource<> registeredName;
    {
        TOSTRING_VOID_INTERNAL(fileSystemId, info[0]);
        TOSTRING_VOID_INTERNAL(registeredName, info[1]);
    }
    v8SetReturnValue(info, InspectorFrontendHostFileSystem::isolatedFileSystem(*impl, fileSystemId, registeredName));
}

static void isolatedFileSystemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::isolatedFileSystemMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void upgradeDraggedFileSystemPermissionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("upgradeDraggedFileSystemPermissions", "InspectorFrontendHost", 1, info.Length(), info.GetIsolate());
        return;
    }
    InspectorFrontendHost* impl = V8InspectorFrontendHost::toNative(info.Holder());
    DOMFileSystem* domFileSystem;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(domFileSystem, V8DOMFileSystem::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    InspectorFrontendHostFileSystem::upgradeDraggedFileSystemPermissions(*impl, domFileSystem);
}

static void upgradeDraggedFileSystemPermissionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InspectorFrontendHostV8Internal::upgradeDraggedFileSystemPermissionsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace InspectorFrontendHostV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InspectorFrontendHostMethods[] = {
    {"setZoomFactor", InspectorFrontendHostV8Internal::setZoomFactorMethodCallback, 0, 1},
    {"zoomFactor", InspectorFrontendHostV8Internal::zoomFactorMethodCallback, 0, 0},
    {"setInjectedScriptForOrigin", InspectorFrontendHostV8Internal::setInjectedScriptForOriginMethodCallback, 0, 2},
    {"copyText", InspectorFrontendHostV8Internal::copyTextMethodCallback, 0, 1},
    {"platform", InspectorFrontendHostV8Internal::platformMethodCallback, 0, 0},
    {"port", InspectorFrontendHostV8Internal::portMethodCallback, 0, 0},
    {"showContextMenu", InspectorFrontendHostV8Internal::showContextMenuMethodCallback, 0, 2},
    {"sendMessageToBackend", InspectorFrontendHostV8Internal::sendMessageToBackendMethodCallback, 0, 1},
    {"sendMessageToEmbedder", InspectorFrontendHostV8Internal::sendMessageToEmbedderMethodCallback, 0, 1},
    {"recordActionTaken", InspectorFrontendHostV8Internal::recordActionTakenMethodCallback, 0, 1},
    {"recordPanelShown", InspectorFrontendHostV8Internal::recordPanelShownMethodCallback, 0, 1},
    {"getSelectionBackgroundColor", InspectorFrontendHostV8Internal::getSelectionBackgroundColorMethodCallback, 0, 0},
    {"getSelectionForegroundColor", InspectorFrontendHostV8Internal::getSelectionForegroundColorMethodCallback, 0, 0},
    {"isUnderTest", InspectorFrontendHostV8Internal::isUnderTestMethodCallback, 0, 0},
};

static void configureV8InspectorFrontendHostTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "InspectorFrontendHost", v8::Local<v8::FunctionTemplate>(), V8InspectorFrontendHost::internalFieldCount,
        0, 0,
        0, 0,
        V8InspectorFrontendHostMethods, WTF_ARRAY_LENGTH(V8InspectorFrontendHostMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "isolatedFileSystem"), v8::FunctionTemplate::New(isolate, InspectorFrontendHostV8Internal::isolatedFileSystemMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "upgradeDraggedFileSystemPermissions"), v8::FunctionTemplate::New(isolate, InspectorFrontendHostV8Internal::upgradeDraggedFileSystemPermissionsMethodCallback, v8Undefined(), defaultSignature, 1));
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8InspectorFrontendHost::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8InspectorFrontendHostTemplate);
}

bool V8InspectorFrontendHost::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8InspectorFrontendHost::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InspectorFrontendHost* V8InspectorFrontendHost::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(InspectorFrontendHost* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InspectorFrontendHost>(impl, isolate));
    return V8InspectorFrontendHost::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8InspectorFrontendHost::createWrapper(PassRefPtr<InspectorFrontendHost> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InspectorFrontendHost>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8InspectorFrontendHost>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8InspectorFrontendHost::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(InspectorFrontendHost* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
