// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGPathSeg.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGPathSeg* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGPathSeg::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGPathSeg* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGPathSeg::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGPathSeg::domTemplate, V8SVGPathSeg::derefObject, 0, 0, 0, V8SVGPathSeg::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace SVGPathSegV8Internal {

template <typename T> void V8_USE(T) { }

static void pathSegTypeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGPathSeg* impl = V8SVGPathSeg::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->pathSegType());
}

static void pathSegTypeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGPathSegV8Internal::pathSegTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pathSegTypeAsLetterAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGPathSeg* impl = V8SVGPathSeg::toNative(holder);
    v8SetReturnValueString(info, impl->pathSegTypeAsLetter(), info.GetIsolate());
}

static void pathSegTypeAsLetterAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGPathSegV8Internal::pathSegTypeAsLetterAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SVGPathSegV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8SVGPathSegAttributes[] = {
    {"pathSegType", SVGPathSegV8Internal::pathSegTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pathSegTypeAsLetter", SVGPathSegV8Internal::pathSegTypeAsLetterAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8SVGPathSegTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGPathSeg", v8::Local<v8::FunctionTemplate>(), V8SVGPathSeg::internalFieldCount,
        V8SVGPathSegAttributes, WTF_ARRAY_LENGTH(V8SVGPathSegAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8SVGPathSegConstants[] = {
        {"PATHSEG_UNKNOWN", 0},
        {"PATHSEG_CLOSEPATH", 1},
        {"PATHSEG_MOVETO_ABS", 2},
        {"PATHSEG_MOVETO_REL", 3},
        {"PATHSEG_LINETO_ABS", 4},
        {"PATHSEG_LINETO_REL", 5},
        {"PATHSEG_CURVETO_CUBIC_ABS", 6},
        {"PATHSEG_CURVETO_CUBIC_REL", 7},
        {"PATHSEG_CURVETO_QUADRATIC_ABS", 8},
        {"PATHSEG_CURVETO_QUADRATIC_REL", 9},
        {"PATHSEG_ARC_ABS", 10},
        {"PATHSEG_ARC_REL", 11},
        {"PATHSEG_LINETO_HORIZONTAL_ABS", 12},
        {"PATHSEG_LINETO_HORIZONTAL_REL", 13},
        {"PATHSEG_LINETO_VERTICAL_ABS", 14},
        {"PATHSEG_LINETO_VERTICAL_REL", 15},
        {"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS", 16},
        {"PATHSEG_CURVETO_CUBIC_SMOOTH_REL", 17},
        {"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS", 18},
        {"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL", 19},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8SVGPathSegConstants, WTF_ARRAY_LENGTH(V8SVGPathSegConstants), isolate);
    COMPILE_ASSERT(0 == SVGPathSeg::PATHSEG_UNKNOWN, TheValueOfSVGPathSeg_PATHSEG_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGPathSeg::PATHSEG_CLOSEPATH, TheValueOfSVGPathSeg_PATHSEG_CLOSEPATHDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGPathSeg::PATHSEG_MOVETO_ABS, TheValueOfSVGPathSeg_PATHSEG_MOVETO_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == SVGPathSeg::PATHSEG_MOVETO_REL, TheValueOfSVGPathSeg_PATHSEG_MOVETO_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == SVGPathSeg::PATHSEG_LINETO_ABS, TheValueOfSVGPathSeg_PATHSEG_LINETO_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == SVGPathSeg::PATHSEG_LINETO_REL, TheValueOfSVGPathSeg_PATHSEG_LINETO_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(6 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_ABS, TheValueOfSVGPathSeg_PATHSEG_CURVETO_CUBIC_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_REL, TheValueOfSVGPathSeg_PATHSEG_CURVETO_CUBIC_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_ABS, TheValueOfSVGPathSeg_PATHSEG_CURVETO_QUADRATIC_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(9 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_REL, TheValueOfSVGPathSeg_PATHSEG_CURVETO_QUADRATIC_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(10 == SVGPathSeg::PATHSEG_ARC_ABS, TheValueOfSVGPathSeg_PATHSEG_ARC_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(11 == SVGPathSeg::PATHSEG_ARC_REL, TheValueOfSVGPathSeg_PATHSEG_ARC_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(12 == SVGPathSeg::PATHSEG_LINETO_HORIZONTAL_ABS, TheValueOfSVGPathSeg_PATHSEG_LINETO_HORIZONTAL_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(13 == SVGPathSeg::PATHSEG_LINETO_HORIZONTAL_REL, TheValueOfSVGPathSeg_PATHSEG_LINETO_HORIZONTAL_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(14 == SVGPathSeg::PATHSEG_LINETO_VERTICAL_ABS, TheValueOfSVGPathSeg_PATHSEG_LINETO_VERTICAL_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(15 == SVGPathSeg::PATHSEG_LINETO_VERTICAL_REL, TheValueOfSVGPathSeg_PATHSEG_LINETO_VERTICAL_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(16 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, TheValueOfSVGPathSeg_PATHSEG_CURVETO_CUBIC_SMOOTH_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(17 == SVGPathSeg::PATHSEG_CURVETO_CUBIC_SMOOTH_REL, TheValueOfSVGPathSeg_PATHSEG_CURVETO_CUBIC_SMOOTH_RELDoesntMatchWithImplementation);
    COMPILE_ASSERT(18 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, TheValueOfSVGPathSeg_PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABSDoesntMatchWithImplementation);
    COMPILE_ASSERT(19 == SVGPathSeg::PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, TheValueOfSVGPathSeg_PATHSEG_CURVETO_QUADRATIC_SMOOTH_RELDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGPathSeg::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGPathSegTemplate);
}

bool V8SVGPathSeg::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGPathSeg::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGPathSeg* V8SVGPathSeg::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> V8SVGPathSeg::createWrapper(PassRefPtr<SVGPathSeg> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGPathSeg>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGPathSeg>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGPathSeg::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGPathSeg* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
