// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CSSRule.h"

#include "bindings/core/v8/V8CSSRule.h"
#include "bindings/core/v8/V8CSSStyleSheet.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(CSSRule* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8CSSRule::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::CSSRule* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8CSSRule::wrapperTypeInfo = { gin::kEmbedderBlink, V8CSSRule::domTemplate, V8CSSRule::derefObject, 0, 0, 0, V8CSSRule::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace CSSRuleV8Internal {

template <typename T> void V8_USE(T) { }

static void typeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSRule* impl = V8CSSRule::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->type());
}

static void typeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSRuleV8Internal::typeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssTextAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSRule* impl = V8CSSRule::toNative(holder);
    v8SetReturnValueString(info, impl->cssText(), info.GetIsolate());
}

static void cssTextAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSRuleV8Internal::cssTextAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssTextAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSRule* impl = V8CSSRule::toNative(holder);
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    impl->setCSSText(cppValue);
}

static void cssTextAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    CSSRuleV8Internal::cssTextAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void parentStyleSheetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSRule* impl = V8CSSRule::toNative(holder);
    RefPtrWillBeRawPtr<CSSStyleSheet> result(impl->parentStyleSheet());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8CSSStyleSheet>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "parentStyleSheet"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void parentStyleSheetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSRuleV8Internal::parentStyleSheetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void parentRuleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSRule* impl = V8CSSRule::toNative(holder);
    RefPtrWillBeRawPtr<CSSRule> result(impl->parentRule());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8CSSRule>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "parentRule"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void parentRuleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSRuleV8Internal::parentRuleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace CSSRuleV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8CSSRuleAttributes[] = {
    {"type", CSSRuleV8Internal::typeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cssText", CSSRuleV8Internal::cssTextAttributeGetterCallback, CSSRuleV8Internal::cssTextAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"parentStyleSheet", CSSRuleV8Internal::parentStyleSheetAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"parentRule", CSSRuleV8Internal::parentRuleAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8CSSRuleTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "CSSRule", v8::Local<v8::FunctionTemplate>(), V8CSSRule::internalFieldCount,
        V8CSSRuleAttributes, WTF_ARRAY_LENGTH(V8CSSRuleAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8CSSRuleConstants[] = {
        {"UNKNOWN_RULE", 0},
        {"STYLE_RULE", 1},
        {"CHARSET_RULE", 2},
        {"IMPORT_RULE", 3},
        {"MEDIA_RULE", 4},
        {"FONT_FACE_RULE", 5},
        {"PAGE_RULE", 6},
        {"KEYFRAMES_RULE", 7},
        {"WEBKIT_KEYFRAMES_RULE", 7},
        {"KEYFRAME_RULE", 8},
        {"WEBKIT_KEYFRAME_RULE", 8},
        {"SUPPORTS_RULE", 12},
        {"WEBKIT_FILTER_RULE", 17},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8CSSRuleConstants, WTF_ARRAY_LENGTH(V8CSSRuleConstants), isolate);
    if (RuntimeEnabledFeatures::cssViewportEnabled()) {
        static const V8DOMConfiguration::ConstantConfiguration constantConfiguration = {"VIEWPORT_RULE", static_cast<signed int>(15)};
        V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, &constantConfiguration, 1, isolate);
    }
    COMPILE_ASSERT(0 == CSSRule::UNKNOWN_RULE, TheValueOfCSSRule_UNKNOWN_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == CSSRule::STYLE_RULE, TheValueOfCSSRule_STYLE_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == CSSRule::CHARSET_RULE, TheValueOfCSSRule_CHARSET_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == CSSRule::IMPORT_RULE, TheValueOfCSSRule_IMPORT_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == CSSRule::MEDIA_RULE, TheValueOfCSSRule_MEDIA_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == CSSRule::FONT_FACE_RULE, TheValueOfCSSRule_FONT_FACE_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(6 == CSSRule::PAGE_RULE, TheValueOfCSSRule_PAGE_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == CSSRule::KEYFRAMES_RULE, TheValueOfCSSRule_KEYFRAMES_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == CSSRule::WEBKIT_KEYFRAMES_RULE, TheValueOfCSSRule_WEBKIT_KEYFRAMES_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == CSSRule::KEYFRAME_RULE, TheValueOfCSSRule_KEYFRAME_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == CSSRule::WEBKIT_KEYFRAME_RULE, TheValueOfCSSRule_WEBKIT_KEYFRAME_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(12 == CSSRule::SUPPORTS_RULE, TheValueOfCSSRule_SUPPORTS_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(15 == CSSRule::VIEWPORT_RULE, TheValueOfCSSRule_VIEWPORT_RULEDoesntMatchWithImplementation);
    COMPILE_ASSERT(17 == CSSRule::WEBKIT_FILTER_RULE, TheValueOfCSSRule_WEBKIT_FILTER_RULEDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8CSSRule::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8CSSRuleTemplate);
}

bool V8CSSRule::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8CSSRule::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSRule* V8CSSRule::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> V8CSSRule::createWrapper(PassRefPtrWillBeRawPtr<CSSRule> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8CSSRule>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8CSSRule>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8CSSRule::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(CSSRule* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
