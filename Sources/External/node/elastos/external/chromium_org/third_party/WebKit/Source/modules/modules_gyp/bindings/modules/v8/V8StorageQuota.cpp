// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8StorageQuota.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptPromise.h"
#include "bindings/v8/ScriptState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(StorageQuota* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8StorageQuota::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::StorageQuota* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8StorageQuota::wrapperTypeInfo = { gin::kEmbedderBlink, V8StorageQuota::domTemplate, V8StorageQuota::derefObject, 0, 0, 0, V8StorageQuota::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, GarbageCollectedObject };

namespace StorageQuotaV8Internal {

template <typename T> void V8_USE(T) { }

static void supportedTypesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    StorageQuota* impl = V8StorageQuota::toNative(holder);
    v8SetReturnValue(info, v8Array(impl->supportedTypes(), info.Holder(), info.GetIsolate()));
}

static void supportedTypesAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    StorageQuotaV8Internal::supportedTypesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void queryInfoMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("queryInfo", "StorageQuota", 1, info.Length(), info.GetIsolate());
        return;
    }
    StorageQuota* impl = V8StorageQuota::toNative(info.Holder());
    V8StringResource<> type;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(type, info[0]);
        String string = type;
        if (!(string == "temporary" || string == "persistent")) {
            throwTypeError(ExceptionMessages::failedToExecute("queryInfo", "StorageQuota", "parameter 1 ('" + string + "') is not a valid enum value."), info.GetIsolate());
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->queryInfo(scriptState, type);
    v8SetReturnValue(info, result.v8Value());
}

static void queryInfoMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    StorageQuotaV8Internal::queryInfoMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void requestPersistentQuotaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "requestPersistentQuota", "StorageQuota", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    StorageQuota* impl = V8StorageQuota::toNative(info.Holder());
    unsigned long long newQuota = 0;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        double newQuotaNativeValue;
        TONATIVE_VOID_INTERNAL(newQuotaNativeValue, info[0]->NumberValue());
        if (!std::isnan(newQuotaNativeValue))
            newQuota = clampTo<unsigned long long>(newQuotaNativeValue);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->requestPersistentQuota(scriptState, newQuota);
    v8SetReturnValue(info, result.v8Value());
}

static void requestPersistentQuotaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    StorageQuotaV8Internal::requestPersistentQuotaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace StorageQuotaV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8StorageQuotaAttributes[] = {
    {"supportedTypes", StorageQuotaV8Internal::supportedTypesAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8StorageQuotaMethods[] = {
    {"queryInfo", StorageQuotaV8Internal::queryInfoMethodCallback, 0, 1},
    {"requestPersistentQuota", StorageQuotaV8Internal::requestPersistentQuotaMethodCallback, 0, 1},
};

static void configureV8StorageQuotaTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::quotaPromiseEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "", v8::Local<v8::FunctionTemplate>(), V8StorageQuota::internalFieldCount, 0, 0, 0, 0, 0, 0, isolate);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "StorageQuota", v8::Local<v8::FunctionTemplate>(), V8StorageQuota::internalFieldCount,
            V8StorageQuotaAttributes, WTF_ARRAY_LENGTH(V8StorageQuotaAttributes),
            0, 0,
            V8StorageQuotaMethods, WTF_ARRAY_LENGTH(V8StorageQuotaMethods),
            isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8StorageQuota::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8StorageQuotaTemplate);
}

bool V8StorageQuota::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8StorageQuota::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

StorageQuota* V8StorageQuota::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(StorageQuota* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8StorageQuota>(impl, isolate));
    return V8StorageQuota::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8StorageQuota::createWrapper(RawPtr<StorageQuota> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8StorageQuota>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8StorageQuota>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8StorageQuota::derefObject(void* object)
{
}

template<>
v8::Handle<v8::Value> toV8NoInline(StorageQuota* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
