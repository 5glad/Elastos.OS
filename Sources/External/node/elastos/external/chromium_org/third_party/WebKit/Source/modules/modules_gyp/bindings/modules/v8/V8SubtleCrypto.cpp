// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SubtleCrypto.h"

#include "bindings/modules/v8/V8Key.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptPromise.h"
#include "bindings/v8/ScriptState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "bindings/v8/custom/V8ArrayBufferCustom.h"
#include "bindings/v8/custom/V8ArrayBufferViewCustom.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SubtleCrypto* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SubtleCrypto::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SubtleCrypto* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SubtleCrypto::wrapperTypeInfo = { gin::kEmbedderBlink, V8SubtleCrypto::domTemplate, V8SubtleCrypto::derefObject, 0, 0, 0, V8SubtleCrypto::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, GarbageCollectedObject };

namespace SubtleCryptoV8Internal {

template <typename T> void V8_USE(T) { }

static void encrypt1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    Key* key;
    ArrayBuffer* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("encrypt", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(data, info[2]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[2])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->encrypt(scriptState, algorithm, key, data);
    v8SetReturnValue(info, result.v8Value());
}

static void encrypt2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    Key* key;
    ArrayBufferView* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("encrypt", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(data, info[2]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[2])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->encrypt(scriptState, algorithm, key, data);
    v8SetReturnValue(info, result.v8Value());
}

static void encryptMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "encrypt", "SubtleCrypto", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 3:
        if (V8ArrayBuffer::hasInstance(info[2], isolate)) {
            encrypt1Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[2], isolate)) {
            encrypt2Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void encryptMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::encryptMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void decrypt1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    Key* key;
    ArrayBuffer* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("decrypt", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(data, info[2]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[2])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->decrypt(scriptState, algorithm, key, data);
    v8SetReturnValue(info, result.v8Value());
}

static void decrypt2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    Key* key;
    ArrayBufferView* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("decrypt", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(data, info[2]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[2])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->decrypt(scriptState, algorithm, key, data);
    v8SetReturnValue(info, result.v8Value());
}

static void decryptMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "decrypt", "SubtleCrypto", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 3:
        if (V8ArrayBuffer::hasInstance(info[2], isolate)) {
            decrypt1Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[2], isolate)) {
            decrypt2Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void decryptMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::decryptMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sign1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    Key* key;
    ArrayBuffer* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("sign", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(data, info[2]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[2])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->sign(scriptState, algorithm, key, data);
    v8SetReturnValue(info, result.v8Value());
}

static void sign2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    Key* key;
    ArrayBufferView* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("sign", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(data, info[2]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[2])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->sign(scriptState, algorithm, key, data);
    v8SetReturnValue(info, result.v8Value());
}

static void signMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "sign", "SubtleCrypto", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 3:
        if (V8ArrayBuffer::hasInstance(info[2], isolate)) {
            sign1Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[2], isolate)) {
            sign2Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void signMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::signMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void verifyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8SubtleCrypto::verifyMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void digest1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    ArrayBuffer* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("digest", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(data, info[1]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[1])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->digest(scriptState, algorithm, data);
    v8SetReturnValue(info, result.v8Value());
}

static void digest2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    ArrayBufferView* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("digest", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(data, info[1]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[1])) : 0);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->digest(scriptState, algorithm, data);
    v8SetReturnValue(info, result.v8Value());
}

static void digestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "digest", "SubtleCrypto", info.Holder(), isolate);
    switch (std::min(2, info.Length())) {
    case 2:
        if (V8ArrayBuffer::hasInstance(info[1], isolate)) {
            digest1Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[1], isolate)) {
            digest2Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void digestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::digestMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void generateKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 3)) {
        throwMinimumArityTypeErrorForMethod("generateKey", "SubtleCrypto", 3, info.Length(), info.GetIsolate());
        return;
    }
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    Dictionary algorithm;
    bool extractable;
    Vector<String> keyUsages;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[0], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("generateKey", "SubtleCrypto", "parameter 1 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(extractable, info[1]->BooleanValue());
        TONATIVE_VOID_INTERNAL(keyUsages, toNativeArray<String>(info[2], 3, info.GetIsolate()));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->generateKey(scriptState, algorithm, extractable, keyUsages);
    v8SetReturnValue(info, result.v8Value());
}

static void generateKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::generateKeyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void importKey1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    ArrayBuffer* keyData;
    Dictionary algorithm;
    bool extractable;
    Vector<String> keyUsages;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(keyData, info[1]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[1])) : 0);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[2], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("importKey", "SubtleCrypto", "parameter 3 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(extractable, info[3]->BooleanValue());
        TONATIVE_VOID_INTERNAL(keyUsages, toNativeArray<String>(info[4], 5, info.GetIsolate()));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->importKey(scriptState, format, keyData, algorithm, extractable, keyUsages);
    v8SetReturnValue(info, result.v8Value());
}

static void importKey2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    ArrayBufferView* keyData;
    Dictionary algorithm;
    bool extractable;
    Vector<String> keyUsages;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(keyData, info[1]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[1])) : 0);
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[2], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("importKey", "SubtleCrypto", "parameter 3 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(extractable, info[3]->BooleanValue());
        TONATIVE_VOID_INTERNAL(keyUsages, toNativeArray<String>(info[4], 5, info.GetIsolate()));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->importKey(scriptState, format, keyData, algorithm, extractable, keyUsages);
    v8SetReturnValue(info, result.v8Value());
}

static void importKey3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    Dictionary keyData;
    Dictionary algorithm;
    bool extractable;
    Vector<String> keyUsages;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(keyData, Dictionary(info[1], info.GetIsolate()));
        if (!keyData.isUndefinedOrNull() && !keyData.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("importKey", "SubtleCrypto", "parameter 2 ('keyData') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(algorithm, Dictionary(info[2], info.GetIsolate()));
        if (!algorithm.isUndefinedOrNull() && !algorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("importKey", "SubtleCrypto", "parameter 3 ('algorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(extractable, info[3]->BooleanValue());
        TONATIVE_VOID_INTERNAL(keyUsages, toNativeArray<String>(info[4], 5, info.GetIsolate()));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->importKey(scriptState, format, keyData, algorithm, extractable, keyUsages);
    v8SetReturnValue(info, result.v8Value());
}

static void importKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "importKey", "SubtleCrypto", info.Holder(), isolate);
    switch (std::min(5, info.Length())) {
    case 5:
        if (V8ArrayBuffer::hasInstance(info[1], isolate)) {
            importKey1Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[1], isolate)) {
            importKey2Method(info);
            return;
        }
        if (info[1]->IsObject()) {
            importKey3Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(5, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void importKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::importKeyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void exportKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("exportKey", "SubtleCrypto", 2, info.Length(), info.GetIsolate());
        return;
    }
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    Key* key;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->exportKey(scriptState, format, key);
    v8SetReturnValue(info, result.v8Value());
}

static void exportKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::exportKeyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void wrapKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 4)) {
        throwMinimumArityTypeErrorForMethod("wrapKey", "SubtleCrypto", 4, info.Length(), info.GetIsolate());
        return;
    }
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    Key* key;
    Key* wrappingKey;
    Dictionary wrapAlgorithm;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(key, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
        TONATIVE_VOID_INTERNAL(wrappingKey, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[2]));
        TONATIVE_VOID_INTERNAL(wrapAlgorithm, Dictionary(info[3], info.GetIsolate()));
        if (!wrapAlgorithm.isUndefinedOrNull() && !wrapAlgorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("wrapKey", "SubtleCrypto", "parameter 4 ('wrapAlgorithm') is not an object."), info.GetIsolate());
            return;
        }
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->wrapKey(scriptState, format, key, wrappingKey, wrapAlgorithm);
    v8SetReturnValue(info, result.v8Value());
}

static void wrapKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::wrapKeyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void unwrapKey1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    ArrayBuffer* wrappedKey;
    Key* unwrappingKey;
    Dictionary unwrapAlgorithm;
    Dictionary unwrappedKeyAlgorithm;
    bool extractable;
    Vector<String> keyUsages;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(wrappedKey, info[1]->IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle<v8::ArrayBuffer>::Cast(info[1])) : 0);
        TONATIVE_VOID_INTERNAL(unwrappingKey, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[2]));
        TONATIVE_VOID_INTERNAL(unwrapAlgorithm, Dictionary(info[3], info.GetIsolate()));
        if (!unwrapAlgorithm.isUndefinedOrNull() && !unwrapAlgorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("unwrapKey", "SubtleCrypto", "parameter 4 ('unwrapAlgorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(unwrappedKeyAlgorithm, Dictionary(info[4], info.GetIsolate()));
        if (!unwrappedKeyAlgorithm.isUndefinedOrNull() && !unwrappedKeyAlgorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("unwrapKey", "SubtleCrypto", "parameter 5 ('unwrappedKeyAlgorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(extractable, info[5]->BooleanValue());
        TONATIVE_VOID_INTERNAL(keyUsages, toNativeArray<String>(info[6], 7, info.GetIsolate()));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->unwrapKey(scriptState, format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages);
    v8SetReturnValue(info, result.v8Value());
}

static void unwrapKey2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SubtleCrypto* impl = V8SubtleCrypto::toNative(info.Holder());
    V8StringResource<> format;
    ArrayBufferView* wrappedKey;
    Key* unwrappingKey;
    Dictionary unwrapAlgorithm;
    Dictionary unwrappedKeyAlgorithm;
    bool extractable;
    Vector<String> keyUsages;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(format, info[0]);
        TONATIVE_VOID_INTERNAL(wrappedKey, info[1]->IsArrayBufferView() ? V8ArrayBufferView::toNative(v8::Handle<v8::ArrayBufferView>::Cast(info[1])) : 0);
        TONATIVE_VOID_INTERNAL(unwrappingKey, V8Key::toNativeWithTypeCheck(info.GetIsolate(), info[2]));
        TONATIVE_VOID_INTERNAL(unwrapAlgorithm, Dictionary(info[3], info.GetIsolate()));
        if (!unwrapAlgorithm.isUndefinedOrNull() && !unwrapAlgorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("unwrapKey", "SubtleCrypto", "parameter 4 ('unwrapAlgorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(unwrappedKeyAlgorithm, Dictionary(info[4], info.GetIsolate()));
        if (!unwrappedKeyAlgorithm.isUndefinedOrNull() && !unwrappedKeyAlgorithm.isObject()) {
            throwTypeError(ExceptionMessages::failedToExecute("unwrapKey", "SubtleCrypto", "parameter 5 ('unwrappedKeyAlgorithm') is not an object."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(extractable, info[5]->BooleanValue());
        TONATIVE_VOID_INTERNAL(keyUsages, toNativeArray<String>(info[6], 7, info.GetIsolate()));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = impl->unwrapKey(scriptState, format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages);
    v8SetReturnValue(info, result.v8Value());
}

static void unwrapKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "unwrapKey", "SubtleCrypto", info.Holder(), isolate);
    switch (std::min(7, info.Length())) {
    case 7:
        if (V8ArrayBuffer::hasInstance(info[1], isolate)) {
            unwrapKey1Method(info);
            return;
        }
        if (V8ArrayBufferView::hasInstance(info[1], isolate)) {
            unwrapKey2Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(7, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void unwrapKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SubtleCryptoV8Internal::unwrapKeyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SubtleCryptoV8Internal

static const V8DOMConfiguration::MethodConfiguration V8SubtleCryptoMethods[] = {
    {"encrypt", SubtleCryptoV8Internal::encryptMethodCallback, 0, 3},
    {"decrypt", SubtleCryptoV8Internal::decryptMethodCallback, 0, 3},
    {"sign", SubtleCryptoV8Internal::signMethodCallback, 0, 3},
    {"verify", SubtleCryptoV8Internal::verifyMethodCallback, 0, 4},
    {"digest", SubtleCryptoV8Internal::digestMethodCallback, 0, 2},
    {"generateKey", SubtleCryptoV8Internal::generateKeyMethodCallback, 0, 3},
    {"importKey", SubtleCryptoV8Internal::importKeyMethodCallback, 0, 5},
    {"exportKey", SubtleCryptoV8Internal::exportKeyMethodCallback, 0, 2},
    {"wrapKey", SubtleCryptoV8Internal::wrapKeyMethodCallback, 0, 4},
    {"unwrapKey", SubtleCryptoV8Internal::unwrapKeyMethodCallback, 0, 7},
};

static void configureV8SubtleCryptoTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SubtleCrypto", v8::Local<v8::FunctionTemplate>(), V8SubtleCrypto::internalFieldCount,
        0, 0,
        0, 0,
        V8SubtleCryptoMethods, WTF_ARRAY_LENGTH(V8SubtleCryptoMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SubtleCrypto::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SubtleCryptoTemplate);
}

bool V8SubtleCrypto::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SubtleCrypto::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SubtleCrypto* V8SubtleCrypto::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(SubtleCrypto* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SubtleCrypto>(impl, isolate));
    return V8SubtleCrypto::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SubtleCrypto::createWrapper(RawPtr<SubtleCrypto> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SubtleCrypto>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SubtleCrypto>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8SubtleCrypto::derefObject(void* object)
{
}

template<>
v8::Handle<v8::Value> toV8NoInline(SubtleCrypto* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
