// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8FontFaceSetForEachCallback.h"

#include "bindings/core/v8/V8FontFace.h"
#include "bindings/core/v8/V8FontFaceSet.h"
#include "bindings/v8/V8Binding.h"
#include "bindings/v8/V8Callback.h"
#include "core/dom/ExecutionContext.h"
#include "wtf/Assertions.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

V8FontFaceSetForEachCallback::V8FontFaceSetForEachCallback(v8::Handle<v8::Function> callback, ScriptState* scriptState)
    : ActiveDOMCallback(scriptState->executionContext())
    , m_scriptState(scriptState)
{
    m_callback.set(scriptState->isolate(), callback);
}

V8FontFaceSetForEachCallback::~V8FontFaceSetForEachCallback()
{
}

bool V8FontFaceSetForEachCallback::handleItem(ScriptValue thisValue, FontFace* fontFace, FontFace* fontFaceAgain, FontFaceSet* set)
{
    if (!canInvokeCallback())
        return true;

    v8::Isolate* isolate = m_scriptState->isolate();
    if (m_scriptState->contextIsEmpty())
        return true;

    ScriptState::Scope scope(m_scriptState.get());
    v8::Handle<v8::Value> thisHandle = thisValue.v8Value();
    if (thisHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> fontFaceHandle = toV8(fontFace, m_scriptState->context()->Global(), isolate);
    if (fontFaceHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> fontFaceAgainHandle = toV8(fontFaceAgain, m_scriptState->context()->Global(), isolate);
    if (fontFaceAgainHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> setHandle = toV8(set, m_scriptState->context()->Global(), isolate);
    if (setHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> argv[] = { fontFaceHandle, fontFaceAgainHandle, setHandle };

    return invokeCallback(m_scriptState.get(), m_callback.newLocal(isolate), thisHandle, 3, argv);
}

bool V8FontFaceSetForEachCallback::handleItem(FontFace* fontFace, FontFace* fontFaceAgain, FontFaceSet* set)
{
    if (!canInvokeCallback())
        return true;

    v8::Isolate* isolate = m_scriptState->isolate();
    if (m_scriptState->contextIsEmpty())
        return true;

    ScriptState::Scope scope(m_scriptState.get());
    v8::Handle<v8::Value> fontFaceHandle = toV8(fontFace, m_scriptState->context()->Global(), isolate);
    if (fontFaceHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> fontFaceAgainHandle = toV8(fontFaceAgain, m_scriptState->context()->Global(), isolate);
    if (fontFaceAgainHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> setHandle = toV8(set, m_scriptState->context()->Global(), isolate);
    if (setHandle.IsEmpty()) {
        if (!isScriptControllerTerminating())
            CRASH();
        return true;
    }
    v8::Handle<v8::Value> argv[] = { fontFaceHandle, fontFaceAgainHandle, setHandle };

    return invokeCallback(m_scriptState.get(), m_callback.newLocal(isolate), 3, argv);
}

} // namespace WebCore
