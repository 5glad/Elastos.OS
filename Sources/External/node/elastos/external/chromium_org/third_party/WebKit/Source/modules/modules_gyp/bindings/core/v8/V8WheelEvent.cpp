// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WheelEvent.h"

#include "bindings/core/v8/V8Window.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(WheelEvent* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8WheelEvent::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::WheelEvent* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8WheelEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8WheelEvent::domTemplate, V8WheelEvent::derefObject, 0, 0, 0, V8WheelEvent::installPerContextEnabledMethods, &V8MouseEvent::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace WheelEventV8Internal {

template <typename T> void V8_USE(T) { }

static void deltaXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValue(info, impl->deltaX());
}

static void deltaXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::deltaXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void deltaYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValue(info, impl->deltaY());
}

static void deltaYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::deltaYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void deltaZAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValue(info, impl->deltaZ());
}

static void deltaZAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::deltaZAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void deltaModeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->deltaMode());
}

static void deltaModeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::deltaModeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void wheelDeltaXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValueInt(info, impl->wheelDeltaX());
}

static void wheelDeltaXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::wheelDeltaXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void wheelDeltaYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValueInt(info, impl->wheelDeltaY());
}

static void wheelDeltaYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::wheelDeltaYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void wheelDeltaAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValueInt(info, impl->wheelDelta());
}

static void wheelDeltaAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WheelEventV8Internal::wheelDeltaAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitDirectionInvertedFromDeviceAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WheelEvent* impl = V8WheelEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->webkitDirectionInvertedFromDevice());
}

static void webkitDirectionInvertedFromDeviceAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedWheelEventDirectionInvertedFromDevice);
    WheelEventV8Internal::webkitDirectionInvertedFromDeviceAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void initWebKitWheelEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "initWebKitWheelEvent", "WheelEvent", info.Holder(), info.GetIsolate());
    WheelEvent* impl = V8WheelEvent::toNative(info.Holder());
    int wheelDeltaX;
    int wheelDeltaY;
    LocalDOMWindow* view;
    int screenX;
    int screenY;
    int clientX;
    int clientY;
    bool ctrlKey;
    bool altKey;
    bool shiftKey;
    bool metaKey;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(wheelDeltaX, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(wheelDeltaY, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(view, toDOMWindow(info[2], info.GetIsolate()));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(screenX, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(screenY, toInt32(info[4], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(clientX, toInt32(info[5], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(clientY, toInt32(info[6], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(ctrlKey, info[7]->BooleanValue());
        TONATIVE_VOID_INTERNAL(altKey, info[8]->BooleanValue());
        TONATIVE_VOID_INTERNAL(shiftKey, info[9]->BooleanValue());
        TONATIVE_VOID_INTERNAL(metaKey, info[10]->BooleanValue());
    }
    impl->initWebKitWheelEvent(wheelDeltaX, wheelDeltaY, view, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey);
}

static void initWebKitWheelEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedWheelEventInit);
    WheelEventV8Internal::initWebKitWheelEventMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "WheelEvent", info.Holder(), isolate);
    if (info.Length() < 1) {
        exceptionState.throwTypeError("An event name must be provided.");
        exceptionState.throwIfNeeded();
        return;
    }

    TOSTRING_VOID(V8StringResource<>, type, info[0]);
    WheelEventInit eventInit;
    if (info.Length() >= 2) {
        TONATIVE_VOID(Dictionary, options, Dictionary(info[1], isolate));
        if (!initializeWheelEvent(eventInit, options, exceptionState, info)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    RefPtrWillBeRawPtr<WheelEvent> event = WheelEvent::create(type, eventInit);
    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8WheelEvent>(event.release(), &V8WheelEvent::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

} // namespace WheelEventV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8WheelEventAttributes[] = {
    {"deltaX", WheelEventV8Internal::deltaXAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"deltaY", WheelEventV8Internal::deltaYAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"deltaZ", WheelEventV8Internal::deltaZAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"deltaMode", WheelEventV8Internal::deltaModeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"wheelDeltaX", WheelEventV8Internal::wheelDeltaXAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"wheelDeltaY", WheelEventV8Internal::wheelDeltaYAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"wheelDelta", WheelEventV8Internal::wheelDeltaAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webkitDirectionInvertedFromDevice", WheelEventV8Internal::webkitDirectionInvertedFromDeviceAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8WheelEventMethods[] = {
    {"initWebKitWheelEvent", WheelEventV8Internal::initWebKitWheelEventMethodCallback, 0, 0},
};

bool initializeWheelEvent(WheelEventInit& eventInit, const Dictionary& options, ExceptionState& exceptionState, const v8::FunctionCallbackInfo<v8::Value>& info, const String& forEventName)
{
    Dictionary::ConversionContext conversionContext(forEventName.isEmpty() ? String("WheelEvent") : forEventName, "", exceptionState);
    if (!initializeMouseEvent(eventInit, options, exceptionState, info, forEventName.isEmpty() ? String("WheelEvent") : forEventName))
        return false;

    if (!options.convert(conversionContext.setConversionType("double", false), "deltaX", eventInit.deltaX))
        return false;
    if (!options.convert(conversionContext.setConversionType("double", false), "deltaY", eventInit.deltaY))
        return false;
    if (!options.convert(conversionContext.setConversionType("double", false), "deltaZ", eventInit.deltaZ))
        return false;
    if (!options.convert(conversionContext.setConversionType("unsigned long", false), "deltaMode", eventInit.deltaMode))
        return false;
    if (!options.convert(conversionContext.setConversionType("long", false), "wheelDeltaX", eventInit.wheelDeltaX))
        return false;
    if (!options.convert(conversionContext.setConversionType("long", false), "wheelDeltaY", eventInit.wheelDeltaY))
        return false;
    return true;
}

void V8WheelEvent::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("WheelEvent"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    WheelEventV8Internal::constructor(info);
}

static void configureV8WheelEventTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "WheelEvent", V8MouseEvent::domTemplate(isolate), V8WheelEvent::internalFieldCount,
        V8WheelEventAttributes, WTF_ARRAY_LENGTH(V8WheelEventAttributes),
        0, 0,
        V8WheelEventMethods, WTF_ARRAY_LENGTH(V8WheelEventMethods),
        isolate);
    functionTemplate->SetCallHandler(V8WheelEvent::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8WheelEventConstants[] = {
        {"DOM_DELTA_PIXEL", 0x00},
        {"DOM_DELTA_LINE", 0x01},
        {"DOM_DELTA_PAGE", 0x02},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8WheelEventConstants, WTF_ARRAY_LENGTH(V8WheelEventConstants), isolate);
    COMPILE_ASSERT(0x00 == WheelEvent::DOM_DELTA_PIXEL, TheValueOfWheelEvent_DOM_DELTA_PIXELDoesntMatchWithImplementation);
    COMPILE_ASSERT(0x01 == WheelEvent::DOM_DELTA_LINE, TheValueOfWheelEvent_DOM_DELTA_LINEDoesntMatchWithImplementation);
    COMPILE_ASSERT(0x02 == WheelEvent::DOM_DELTA_PAGE, TheValueOfWheelEvent_DOM_DELTA_PAGEDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8WheelEvent::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8WheelEventTemplate);
}

bool V8WheelEvent::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8WheelEvent::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WheelEvent* V8WheelEvent::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(WheelEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8WheelEvent>(impl, isolate));
    return V8WheelEvent::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8WheelEvent::createWrapper(PassRefPtrWillBeRawPtr<WheelEvent> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8WheelEvent>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8WheelEvent>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8WheelEvent::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(WheelEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
