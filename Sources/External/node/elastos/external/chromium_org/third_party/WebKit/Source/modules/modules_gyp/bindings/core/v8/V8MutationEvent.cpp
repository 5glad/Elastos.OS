// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8MutationEvent.h"

#include "bindings/core/v8/V8Node.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(MutationEvent* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8MutationEvent::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::MutationEvent* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8MutationEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8MutationEvent::domTemplate, V8MutationEvent::derefObject, 0, 0, 0, V8MutationEvent::installPerContextEnabledMethods, &V8Event::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace MutationEventV8Internal {

template <typename T> void V8_USE(T) { }

static void relatedNodeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    MutationEvent* impl = V8MutationEvent::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->relatedNode()), impl);
}

static void relatedNodeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    MutationEventV8Internal::relatedNodeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void prevValueAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    MutationEvent* impl = V8MutationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->prevValue(), info.GetIsolate());
}

static void prevValueAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    MutationEventV8Internal::prevValueAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void newValueAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    MutationEvent* impl = V8MutationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->newValue(), info.GetIsolate());
}

static void newValueAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    MutationEventV8Internal::newValueAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void attrNameAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    MutationEvent* impl = V8MutationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->attrName(), info.GetIsolate());
}

static void attrNameAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    MutationEventV8Internal::attrNameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void attrChangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    MutationEvent* impl = V8MutationEvent::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->attrChange());
}

static void attrChangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    MutationEventV8Internal::attrChangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void initMutationEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "initMutationEvent", "MutationEvent", info.Holder(), info.GetIsolate());
    MutationEvent* impl = V8MutationEvent::toNative(info.Holder());
    V8StringResource<> type;
    bool canBubble;
    bool cancelable;
    Node* relatedNode;
    V8StringResource<> prevValue;
    V8StringResource<> newValue;
    V8StringResource<> attrName;
    unsigned attrChange;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(type, info[0]);
        TONATIVE_VOID_INTERNAL(canBubble, info[1]->BooleanValue());
        TONATIVE_VOID_INTERNAL(cancelable, info[2]->BooleanValue());
        TONATIVE_VOID_INTERNAL(relatedNode, V8Node::toNativeWithTypeCheck(info.GetIsolate(), info[3]));
        TOSTRING_VOID_INTERNAL(prevValue, info[4]);
        TOSTRING_VOID_INTERNAL(newValue, info[5]);
        TOSTRING_VOID_INTERNAL(attrName, info[6]);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(attrChange, toUInt16(info[7], exceptionState), exceptionState);
    }
    impl->initMutationEvent(type, canBubble, cancelable, relatedNode, prevValue, newValue, attrName, attrChange);
}

static void initMutationEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    MutationEventV8Internal::initMutationEventMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace MutationEventV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8MutationEventAttributes[] = {
    {"relatedNode", MutationEventV8Internal::relatedNodeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"prevValue", MutationEventV8Internal::prevValueAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"newValue", MutationEventV8Internal::newValueAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"attrName", MutationEventV8Internal::attrNameAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"attrChange", MutationEventV8Internal::attrChangeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8MutationEventMethods[] = {
    {"initMutationEvent", MutationEventV8Internal::initMutationEventMethodCallback, 0, 0},
};

static void configureV8MutationEventTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "MutationEvent", V8Event::domTemplate(isolate), V8MutationEvent::internalFieldCount,
        V8MutationEventAttributes, WTF_ARRAY_LENGTH(V8MutationEventAttributes),
        0, 0,
        V8MutationEventMethods, WTF_ARRAY_LENGTH(V8MutationEventMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8MutationEventConstants[] = {
        {"MODIFICATION", 1},
        {"ADDITION", 2},
        {"REMOVAL", 3},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8MutationEventConstants, WTF_ARRAY_LENGTH(V8MutationEventConstants), isolate);
    COMPILE_ASSERT(1 == MutationEvent::MODIFICATION, TheValueOfMutationEvent_MODIFICATIONDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == MutationEvent::ADDITION, TheValueOfMutationEvent_ADDITIONDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == MutationEvent::REMOVAL, TheValueOfMutationEvent_REMOVALDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8MutationEvent::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8MutationEventTemplate);
}

bool V8MutationEvent::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8MutationEvent::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MutationEvent* V8MutationEvent::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(MutationEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8MutationEvent>(impl, isolate));
    return V8MutationEvent::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8MutationEvent::createWrapper(PassRefPtrWillBeRawPtr<MutationEvent> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8MutationEvent>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8MutationEvent>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8MutationEvent::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(MutationEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
