// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CSSPrimitiveValue.h"

#include "bindings/core/v8/V8Counter.h"
#include "bindings/core/v8/V8RGBColor.h"
#include "bindings/core/v8/V8Rect.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(CSSPrimitiveValue* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8CSSPrimitiveValue::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::CSSPrimitiveValue* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8CSSPrimitiveValue::wrapperTypeInfo = { gin::kEmbedderBlink, V8CSSPrimitiveValue::domTemplate, V8CSSPrimitiveValue::derefObject, 0, 0, 0, V8CSSPrimitiveValue::installPerContextEnabledMethods, &V8CSSValue::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace CSSPrimitiveValueV8Internal {

template <typename T> void V8_USE(T) { }

static void primitiveTypeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->primitiveType());
}

static void primitiveTypeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSPrimitiveValueV8Internal::primitiveTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setFloatValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setFloatValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    unsigned unitType;
    float floatValue;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(unitType, toUInt16(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(floatValue, static_cast<float>(info[1]->NumberValue()));
    }
    impl->setFloatValue(unitType, floatValue, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setFloatValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::setFloatValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getFloatValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getFloatValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    unsigned unitType;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(unitType, toUInt16(info[0], exceptionState), exceptionState);
    }
    float result = impl->getFloatValue(unitType, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result);
}

static void getFloatValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::getFloatValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setStringValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setStringValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    unsigned stringType;
    V8StringResource<> stringValue;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(stringType, toUInt16(info[0], exceptionState), exceptionState);
        TOSTRING_VOID_INTERNAL(stringValue, info[1]);
    }
    impl->setStringValue(stringType, stringValue, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setStringValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::setStringValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getStringValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getStringValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    String result = impl->getStringValue(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void getStringValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::getStringValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getCounterValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getCounterValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    RefPtrWillBeRawPtr<Counter> result = impl->getCounterValue(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getCounterValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::getCounterValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getRectValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getRectValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    RefPtrWillBeRawPtr<Rect> result = impl->getRectValue(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getRectValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::getRectValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getRGBColorValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getRGBColorValue", "CSSPrimitiveValue", info.Holder(), info.GetIsolate());
    CSSPrimitiveValue* impl = V8CSSPrimitiveValue::toNative(info.Holder());
    RefPtrWillBeRawPtr<RGBColor> result = impl->getRGBColorValue(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void getRGBColorValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSPrimitiveValueV8Internal::getRGBColorValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace CSSPrimitiveValueV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8CSSPrimitiveValueAttributes[] = {
    {"primitiveType", CSSPrimitiveValueV8Internal::primitiveTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8CSSPrimitiveValueMethods[] = {
    {"setFloatValue", CSSPrimitiveValueV8Internal::setFloatValueMethodCallback, 0, 0},
    {"getFloatValue", CSSPrimitiveValueV8Internal::getFloatValueMethodCallback, 0, 0},
    {"setStringValue", CSSPrimitiveValueV8Internal::setStringValueMethodCallback, 0, 0},
    {"getStringValue", CSSPrimitiveValueV8Internal::getStringValueMethodCallback, 0, 0},
    {"getCounterValue", CSSPrimitiveValueV8Internal::getCounterValueMethodCallback, 0, 0},
    {"getRectValue", CSSPrimitiveValueV8Internal::getRectValueMethodCallback, 0, 0},
    {"getRGBColorValue", CSSPrimitiveValueV8Internal::getRGBColorValueMethodCallback, 0, 0},
};

static void configureV8CSSPrimitiveValueTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "CSSPrimitiveValue", V8CSSValue::domTemplate(isolate), V8CSSPrimitiveValue::internalFieldCount,
        V8CSSPrimitiveValueAttributes, WTF_ARRAY_LENGTH(V8CSSPrimitiveValueAttributes),
        0, 0,
        V8CSSPrimitiveValueMethods, WTF_ARRAY_LENGTH(V8CSSPrimitiveValueMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8CSSPrimitiveValueConstants[] = {
        {"CSS_UNKNOWN", 0},
        {"CSS_NUMBER", 1},
        {"CSS_PERCENTAGE", 2},
        {"CSS_EMS", 3},
        {"CSS_EXS", 4},
        {"CSS_PX", 5},
        {"CSS_CM", 6},
        {"CSS_MM", 7},
        {"CSS_IN", 8},
        {"CSS_PT", 9},
        {"CSS_PC", 10},
        {"CSS_DEG", 11},
        {"CSS_RAD", 12},
        {"CSS_GRAD", 13},
        {"CSS_MS", 14},
        {"CSS_S", 15},
        {"CSS_HZ", 16},
        {"CSS_KHZ", 17},
        {"CSS_DIMENSION", 18},
        {"CSS_STRING", 19},
        {"CSS_URI", 20},
        {"CSS_IDENT", 21},
        {"CSS_ATTR", 22},
        {"CSS_COUNTER", 23},
        {"CSS_RECT", 24},
        {"CSS_RGBCOLOR", 25},
        {"CSS_VW", 26},
        {"CSS_VH", 27},
        {"CSS_VMIN", 28},
        {"CSS_VMAX", 29},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8CSSPrimitiveValueConstants, WTF_ARRAY_LENGTH(V8CSSPrimitiveValueConstants), isolate);
    COMPILE_ASSERT(0 == CSSPrimitiveValue::CSS_UNKNOWN, TheValueOfCSSPrimitiveValue_CSS_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == CSSPrimitiveValue::CSS_NUMBER, TheValueOfCSSPrimitiveValue_CSS_NUMBERDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == CSSPrimitiveValue::CSS_PERCENTAGE, TheValueOfCSSPrimitiveValue_CSS_PERCENTAGEDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == CSSPrimitiveValue::CSS_EMS, TheValueOfCSSPrimitiveValue_CSS_EMSDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == CSSPrimitiveValue::CSS_EXS, TheValueOfCSSPrimitiveValue_CSS_EXSDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == CSSPrimitiveValue::CSS_PX, TheValueOfCSSPrimitiveValue_CSS_PXDoesntMatchWithImplementation);
    COMPILE_ASSERT(6 == CSSPrimitiveValue::CSS_CM, TheValueOfCSSPrimitiveValue_CSS_CMDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == CSSPrimitiveValue::CSS_MM, TheValueOfCSSPrimitiveValue_CSS_MMDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == CSSPrimitiveValue::CSS_IN, TheValueOfCSSPrimitiveValue_CSS_INDoesntMatchWithImplementation);
    COMPILE_ASSERT(9 == CSSPrimitiveValue::CSS_PT, TheValueOfCSSPrimitiveValue_CSS_PTDoesntMatchWithImplementation);
    COMPILE_ASSERT(10 == CSSPrimitiveValue::CSS_PC, TheValueOfCSSPrimitiveValue_CSS_PCDoesntMatchWithImplementation);
    COMPILE_ASSERT(11 == CSSPrimitiveValue::CSS_DEG, TheValueOfCSSPrimitiveValue_CSS_DEGDoesntMatchWithImplementation);
    COMPILE_ASSERT(12 == CSSPrimitiveValue::CSS_RAD, TheValueOfCSSPrimitiveValue_CSS_RADDoesntMatchWithImplementation);
    COMPILE_ASSERT(13 == CSSPrimitiveValue::CSS_GRAD, TheValueOfCSSPrimitiveValue_CSS_GRADDoesntMatchWithImplementation);
    COMPILE_ASSERT(14 == CSSPrimitiveValue::CSS_MS, TheValueOfCSSPrimitiveValue_CSS_MSDoesntMatchWithImplementation);
    COMPILE_ASSERT(15 == CSSPrimitiveValue::CSS_S, TheValueOfCSSPrimitiveValue_CSS_SDoesntMatchWithImplementation);
    COMPILE_ASSERT(16 == CSSPrimitiveValue::CSS_HZ, TheValueOfCSSPrimitiveValue_CSS_HZDoesntMatchWithImplementation);
    COMPILE_ASSERT(17 == CSSPrimitiveValue::CSS_KHZ, TheValueOfCSSPrimitiveValue_CSS_KHZDoesntMatchWithImplementation);
    COMPILE_ASSERT(18 == CSSPrimitiveValue::CSS_DIMENSION, TheValueOfCSSPrimitiveValue_CSS_DIMENSIONDoesntMatchWithImplementation);
    COMPILE_ASSERT(19 == CSSPrimitiveValue::CSS_STRING, TheValueOfCSSPrimitiveValue_CSS_STRINGDoesntMatchWithImplementation);
    COMPILE_ASSERT(20 == CSSPrimitiveValue::CSS_URI, TheValueOfCSSPrimitiveValue_CSS_URIDoesntMatchWithImplementation);
    COMPILE_ASSERT(21 == CSSPrimitiveValue::CSS_IDENT, TheValueOfCSSPrimitiveValue_CSS_IDENTDoesntMatchWithImplementation);
    COMPILE_ASSERT(22 == CSSPrimitiveValue::CSS_ATTR, TheValueOfCSSPrimitiveValue_CSS_ATTRDoesntMatchWithImplementation);
    COMPILE_ASSERT(23 == CSSPrimitiveValue::CSS_COUNTER, TheValueOfCSSPrimitiveValue_CSS_COUNTERDoesntMatchWithImplementation);
    COMPILE_ASSERT(24 == CSSPrimitiveValue::CSS_RECT, TheValueOfCSSPrimitiveValue_CSS_RECTDoesntMatchWithImplementation);
    COMPILE_ASSERT(25 == CSSPrimitiveValue::CSS_RGBCOLOR, TheValueOfCSSPrimitiveValue_CSS_RGBCOLORDoesntMatchWithImplementation);
    COMPILE_ASSERT(26 == CSSPrimitiveValue::CSS_VW, TheValueOfCSSPrimitiveValue_CSS_VWDoesntMatchWithImplementation);
    COMPILE_ASSERT(27 == CSSPrimitiveValue::CSS_VH, TheValueOfCSSPrimitiveValue_CSS_VHDoesntMatchWithImplementation);
    COMPILE_ASSERT(28 == CSSPrimitiveValue::CSS_VMIN, TheValueOfCSSPrimitiveValue_CSS_VMINDoesntMatchWithImplementation);
    COMPILE_ASSERT(29 == CSSPrimitiveValue::CSS_VMAX, TheValueOfCSSPrimitiveValue_CSS_VMAXDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8CSSPrimitiveValue::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8CSSPrimitiveValueTemplate);
}

bool V8CSSPrimitiveValue::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8CSSPrimitiveValue::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSPrimitiveValue* V8CSSPrimitiveValue::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(CSSPrimitiveValue* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8CSSPrimitiveValue>(impl, isolate));
    return V8CSSPrimitiveValue::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8CSSPrimitiveValue::createWrapper(PassRefPtrWillBeRawPtr<CSSPrimitiveValue> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8CSSPrimitiveValue>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8CSSPrimitiveValue>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8CSSPrimitiveValue::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(CSSPrimitiveValue* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
