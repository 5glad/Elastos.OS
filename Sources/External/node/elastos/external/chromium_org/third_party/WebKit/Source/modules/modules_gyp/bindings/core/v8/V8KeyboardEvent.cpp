// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8KeyboardEvent.h"

#include "bindings/core/v8/V8Window.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(KeyboardEvent* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8KeyboardEvent::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::KeyboardEvent* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8KeyboardEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8KeyboardEvent::domTemplate, V8KeyboardEvent::derefObject, 0, 0, 0, V8KeyboardEvent::installPerContextEnabledMethods, &V8UIEvent::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace KeyboardEventV8Internal {

template <typename T> void V8_USE(T) { }

static void keyIdentifierAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueString(info, impl->keyIdentifier(), info.GetIsolate());
}

static void keyIdentifierAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::keyIdentifierAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void locationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->location());
}

static void locationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::locationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void keyLocationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->location());
}

static void keyLocationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::KeyboardEventKeyLocation);
    KeyboardEventV8Internal::keyLocationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ctrlKeyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->ctrlKey());
}

static void ctrlKeyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::ctrlKeyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void shiftKeyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->shiftKey());
}

static void shiftKeyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::shiftKeyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void altKeyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->altKey());
}

static void altKeyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::altKeyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void metaKeyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->metaKey());
}

static void metaKeyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::metaKeyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void repeatAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->repeat());
}

static void repeatAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::repeatAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void altGraphKeyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    KeyboardEvent* impl = V8KeyboardEvent::toNative(holder);
    v8SetReturnValueBool(info, impl->altGraphKey());
}

static void altGraphKeyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    KeyboardEventV8Internal::altGraphKeyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getModifierStateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getModifierState", "KeyboardEvent", 1, info.Length(), info.GetIsolate());
        return;
    }
    KeyboardEvent* impl = V8KeyboardEvent::toNative(info.Holder());
    V8StringResource<> keyArgument;
    {
        TOSTRING_VOID_INTERNAL(keyArgument, info[0]);
    }
    v8SetReturnValueBool(info, impl->getModifierState(keyArgument));
}

static void getModifierStateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    KeyboardEventV8Internal::getModifierStateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void initKeyboardEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "initKeyboardEvent", "KeyboardEvent", info.Holder(), info.GetIsolate());
    KeyboardEvent* impl = V8KeyboardEvent::toNative(info.Holder());
    V8StringResource<> type;
    bool canBubble;
    bool cancelable;
    LocalDOMWindow* view;
    V8StringResource<> keyIdentifier;
    unsigned location;
    bool ctrlKey;
    bool altKey;
    bool shiftKey;
    bool metaKey;
    bool altGraphKey;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(type, info[0]);
        TONATIVE_VOID_INTERNAL(canBubble, info[1]->BooleanValue());
        TONATIVE_VOID_INTERNAL(cancelable, info[2]->BooleanValue());
        TONATIVE_VOID_INTERNAL(view, toDOMWindow(info[3], info.GetIsolate()));
        TOSTRING_VOID_INTERNAL(keyIdentifier, info[4]);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(location, toUInt32(info[5], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(ctrlKey, info[6]->BooleanValue());
        TONATIVE_VOID_INTERNAL(altKey, info[7]->BooleanValue());
        TONATIVE_VOID_INTERNAL(shiftKey, info[8]->BooleanValue());
        TONATIVE_VOID_INTERNAL(metaKey, info[9]->BooleanValue());
        TONATIVE_VOID_INTERNAL(altGraphKey, info[10]->BooleanValue());
    }
    impl->initKeyboardEvent(type, canBubble, cancelable, view, keyIdentifier, location, ctrlKey, altKey, shiftKey, metaKey, altGraphKey);
}

static void initKeyboardEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    KeyboardEventV8Internal::initKeyboardEventMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "KeyboardEvent", info.Holder(), isolate);
    if (info.Length() < 1) {
        exceptionState.throwTypeError("An event name must be provided.");
        exceptionState.throwIfNeeded();
        return;
    }

    TOSTRING_VOID(V8StringResource<>, type, info[0]);
    KeyboardEventInit eventInit;
    if (info.Length() >= 2) {
        TONATIVE_VOID(Dictionary, options, Dictionary(info[1], isolate));
        if (!initializeKeyboardEvent(eventInit, options, exceptionState, info)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    RefPtrWillBeRawPtr<KeyboardEvent> event = KeyboardEvent::create(type, eventInit);
    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8KeyboardEvent>(event.release(), &V8KeyboardEvent::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

} // namespace KeyboardEventV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8KeyboardEventAttributes[] = {
    {"keyIdentifier", KeyboardEventV8Internal::keyIdentifierAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"location", KeyboardEventV8Internal::locationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"keyLocation", KeyboardEventV8Internal::keyLocationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"ctrlKey", KeyboardEventV8Internal::ctrlKeyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"shiftKey", KeyboardEventV8Internal::shiftKeyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"altKey", KeyboardEventV8Internal::altKeyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"metaKey", KeyboardEventV8Internal::metaKeyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"repeat", KeyboardEventV8Internal::repeatAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"altGraphKey", KeyboardEventV8Internal::altGraphKeyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8KeyboardEventMethods[] = {
    {"getModifierState", KeyboardEventV8Internal::getModifierStateMethodCallback, 0, 1},
    {"initKeyboardEvent", KeyboardEventV8Internal::initKeyboardEventMethodCallback, 0, 0},
};

bool initializeKeyboardEvent(KeyboardEventInit& eventInit, const Dictionary& options, ExceptionState& exceptionState, const v8::FunctionCallbackInfo<v8::Value>& info, const String& forEventName)
{
    Dictionary::ConversionContext conversionContext(forEventName.isEmpty() ? String("KeyboardEvent") : forEventName, "", exceptionState);
    if (!initializeUIEvent(eventInit, options, exceptionState, info, forEventName.isEmpty() ? String("KeyboardEvent") : forEventName))
        return false;

    if (!options.convert(conversionContext.setConversionType("DOMString", false), "keyIdentifier", eventInit.keyIdentifier))
        return false;
    if (!options.convert(conversionContext.setConversionType("unsigned long", false), "location", eventInit.location))
        return false;
    if (options.convert(conversionContext.setConversionType("unsigned long", false), "keyLocation", eventInit.location)) {
        if (options.hasProperty("keyLocation"))
            UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::KeyboardEventKeyLocation);
    } else {
        return false;
    }
    if (!options.convert(conversionContext.setConversionType("boolean", false), "ctrlKey", eventInit.ctrlKey))
        return false;
    if (!options.convert(conversionContext.setConversionType("boolean", false), "shiftKey", eventInit.shiftKey))
        return false;
    if (!options.convert(conversionContext.setConversionType("boolean", false), "altKey", eventInit.altKey))
        return false;
    if (!options.convert(conversionContext.setConversionType("boolean", false), "metaKey", eventInit.metaKey))
        return false;
    if (!options.convert(conversionContext.setConversionType("boolean", false), "repeat", eventInit.repeat))
        return false;
    return true;
}

void V8KeyboardEvent::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("KeyboardEvent"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    KeyboardEventV8Internal::constructor(info);
}

static void configureV8KeyboardEventTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "KeyboardEvent", V8UIEvent::domTemplate(isolate), V8KeyboardEvent::internalFieldCount,
        V8KeyboardEventAttributes, WTF_ARRAY_LENGTH(V8KeyboardEventAttributes),
        0, 0,
        V8KeyboardEventMethods, WTF_ARRAY_LENGTH(V8KeyboardEventMethods),
        isolate);
    functionTemplate->SetCallHandler(V8KeyboardEvent::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8KeyboardEventConstants[] = {
        {"DOM_KEY_LOCATION_STANDARD", 0x00},
        {"DOM_KEY_LOCATION_LEFT", 0x01},
        {"DOM_KEY_LOCATION_RIGHT", 0x02},
        {"DOM_KEY_LOCATION_NUMPAD", 0x03},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8KeyboardEventConstants, WTF_ARRAY_LENGTH(V8KeyboardEventConstants), isolate);
    COMPILE_ASSERT(0x00 == KeyboardEvent::DOM_KEY_LOCATION_STANDARD, TheValueOfKeyboardEvent_DOM_KEY_LOCATION_STANDARDDoesntMatchWithImplementation);
    COMPILE_ASSERT(0x01 == KeyboardEvent::DOM_KEY_LOCATION_LEFT, TheValueOfKeyboardEvent_DOM_KEY_LOCATION_LEFTDoesntMatchWithImplementation);
    COMPILE_ASSERT(0x02 == KeyboardEvent::DOM_KEY_LOCATION_RIGHT, TheValueOfKeyboardEvent_DOM_KEY_LOCATION_RIGHTDoesntMatchWithImplementation);
    COMPILE_ASSERT(0x03 == KeyboardEvent::DOM_KEY_LOCATION_NUMPAD, TheValueOfKeyboardEvent_DOM_KEY_LOCATION_NUMPADDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8KeyboardEvent::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8KeyboardEventTemplate);
}

bool V8KeyboardEvent::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8KeyboardEvent::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

KeyboardEvent* V8KeyboardEvent::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(KeyboardEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8KeyboardEvent>(impl, isolate));
    return V8KeyboardEvent::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8KeyboardEvent::createWrapper(PassRefPtrWillBeRawPtr<KeyboardEvent> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8KeyboardEvent>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8KeyboardEvent>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8KeyboardEvent::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(KeyboardEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
