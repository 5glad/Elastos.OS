// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InternalSettingsGenerated.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(InternalSettingsGenerated* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8InternalSettingsGenerated::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::InternalSettingsGenerated* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8InternalSettingsGenerated::wrapperTypeInfo = { gin::kEmbedderBlink, V8InternalSettingsGenerated::domTemplate, V8InternalSettingsGenerated::derefObject, 0, 0, 0, V8InternalSettingsGenerated::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace InternalSettingsGeneratedV8Internal {

template <typename T> void V8_USE(T) { }

static void setDOMPasteAllowedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDOMPasteAllowed", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool DOMPasteAllowed;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(DOMPasteAllowed, info[0]->BooleanValue());
    }
    impl->setDOMPasteAllowed(DOMPasteAllowed);
}

static void setDOMPasteAllowedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDOMPasteAllowedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAccelerated2dCanvasEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAccelerated2dCanvasEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool accelerated2dCanvasEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(accelerated2dCanvasEnabled, info[0]->BooleanValue());
    }
    impl->setAccelerated2dCanvasEnabled(accelerated2dCanvasEnabled);
}

static void setAccelerated2dCanvasEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAccelerated2dCanvasMSAASampleCountMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setAccelerated2dCanvasMSAASampleCount", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int accelerated2dCanvasMSAASampleCount;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(accelerated2dCanvasMSAASampleCount, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setAccelerated2dCanvasMSAASampleCount(accelerated2dCanvasMSAASampleCount);
}

static void setAccelerated2dCanvasMSAASampleCountMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasMSAASampleCountMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingEnabled(acceleratedCompositingEnabled);
}

static void setAcceleratedCompositingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingForCanvasEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingForCanvasEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingForCanvasEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingForCanvasEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingForCanvasEnabled(acceleratedCompositingForCanvasEnabled);
}

static void setAcceleratedCompositingForCanvasEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForCanvasEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingForFiltersEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingForFiltersEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingForFiltersEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingForFiltersEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingForFiltersEnabled(acceleratedCompositingForFiltersEnabled);
}

static void setAcceleratedCompositingForFiltersEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFiltersEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingForFixedPositionEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingForFixedPositionEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingForFixedPositionEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingForFixedPositionEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingForFixedPositionEnabled(acceleratedCompositingForFixedPositionEnabled);
}

static void setAcceleratedCompositingForFixedPositionEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFixedPositionEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingForFixedRootBackgroundEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingForFixedRootBackgroundEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingForFixedRootBackgroundEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingForFixedRootBackgroundEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingForFixedRootBackgroundEnabled(acceleratedCompositingForFixedRootBackgroundEnabled);
}

static void setAcceleratedCompositingForFixedRootBackgroundEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFixedRootBackgroundEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingForOverflowScrollEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingForOverflowScrollEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingForOverflowScrollEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingForOverflowScrollEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingForOverflowScrollEnabled(acceleratedCompositingForOverflowScrollEnabled);
}

static void setAcceleratedCompositingForOverflowScrollEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForOverflowScrollEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAcceleratedCompositingForVideoEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAcceleratedCompositingForVideoEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool acceleratedCompositingForVideoEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(acceleratedCompositingForVideoEnabled, info[0]->BooleanValue());
    }
    impl->setAcceleratedCompositingForVideoEnabled(acceleratedCompositingForVideoEnabled);
}

static void setAcceleratedCompositingForVideoEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForVideoEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAccessibilityFontScaleFactorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAccessibilityFontScaleFactor", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    double accessibilityFontScaleFactor;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(accessibilityFontScaleFactor, static_cast<double>(info[0]->NumberValue()));
    }
    impl->setAccessibilityFontScaleFactor(accessibilityFontScaleFactor);
}

static void setAccessibilityFontScaleFactorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAccessibilityFontScaleFactorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowConnectingInsecureWebSocketMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowConnectingInsecureWebSocket", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowConnectingInsecureWebSocket;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowConnectingInsecureWebSocket, info[0]->BooleanValue());
    }
    impl->setAllowConnectingInsecureWebSocket(allowConnectingInsecureWebSocket);
}

static void setAllowConnectingInsecureWebSocketMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowConnectingInsecureWebSocketMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowCustomScrollbarInMainFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowCustomScrollbarInMainFrame", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowCustomScrollbarInMainFrame;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowCustomScrollbarInMainFrame, info[0]->BooleanValue());
    }
    impl->setAllowCustomScrollbarInMainFrame(allowCustomScrollbarInMainFrame);
}

static void setAllowCustomScrollbarInMainFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowCustomScrollbarInMainFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowDisplayOfInsecureContentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowDisplayOfInsecureContent", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowDisplayOfInsecureContent;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowDisplayOfInsecureContent, info[0]->BooleanValue());
    }
    impl->setAllowDisplayOfInsecureContent(allowDisplayOfInsecureContent);
}

static void setAllowDisplayOfInsecureContentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowDisplayOfInsecureContentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowFileAccessFromFileURLsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowFileAccessFromFileURLs", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowFileAccessFromFileURLs;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowFileAccessFromFileURLs, info[0]->BooleanValue());
    }
    impl->setAllowFileAccessFromFileURLs(allowFileAccessFromFileURLs);
}

static void setAllowFileAccessFromFileURLsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowFileAccessFromFileURLsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowRunningOfInsecureContentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowRunningOfInsecureContent", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowRunningOfInsecureContent;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowRunningOfInsecureContent, info[0]->BooleanValue());
    }
    impl->setAllowRunningOfInsecureContent(allowRunningOfInsecureContent);
}

static void setAllowRunningOfInsecureContentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowRunningOfInsecureContentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowScriptsToCloseWindowsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowScriptsToCloseWindows", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowScriptsToCloseWindows;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowScriptsToCloseWindows, info[0]->BooleanValue());
    }
    impl->setAllowScriptsToCloseWindows(allowScriptsToCloseWindows);
}

static void setAllowScriptsToCloseWindowsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowScriptsToCloseWindowsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAllowUniversalAccessFromFileURLsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAllowUniversalAccessFromFileURLs", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool allowUniversalAccessFromFileURLs;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(allowUniversalAccessFromFileURLs, info[0]->BooleanValue());
    }
    impl->setAllowUniversalAccessFromFileURLs(allowUniversalAccessFromFileURLs);
}

static void setAllowUniversalAccessFromFileURLsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAllowUniversalAccessFromFileURLsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAntialiased2dCanvasEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAntialiased2dCanvasEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool antialiased2dCanvasEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(antialiased2dCanvasEnabled, info[0]->BooleanValue());
    }
    impl->setAntialiased2dCanvasEnabled(antialiased2dCanvasEnabled);
}

static void setAntialiased2dCanvasEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAntialiased2dCanvasEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setAsynchronousSpellCheckingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setAsynchronousSpellCheckingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool asynchronousSpellCheckingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(asynchronousSpellCheckingEnabled, info[0]->BooleanValue());
    }
    impl->setAsynchronousSpellCheckingEnabled(asynchronousSpellCheckingEnabled);
}

static void setAsynchronousSpellCheckingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setAsynchronousSpellCheckingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setCaretBrowsingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setCaretBrowsingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool caretBrowsingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(caretBrowsingEnabled, info[0]->BooleanValue());
    }
    impl->setCaretBrowsingEnabled(caretBrowsingEnabled);
}

static void setCaretBrowsingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCaretBrowsingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setCompositedScrollingForFramesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setCompositedScrollingForFramesEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool compositedScrollingForFramesEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(compositedScrollingForFramesEnabled, info[0]->BooleanValue());
    }
    impl->setCompositedScrollingForFramesEnabled(compositedScrollingForFramesEnabled);
}

static void setCompositedScrollingForFramesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCompositedScrollingForFramesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setCompositorDrivenAcceleratedScrollingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setCompositorDrivenAcceleratedScrollingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool compositorDrivenAcceleratedScrollingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(compositorDrivenAcceleratedScrollingEnabled, info[0]->BooleanValue());
    }
    impl->setCompositorDrivenAcceleratedScrollingEnabled(compositorDrivenAcceleratedScrollingEnabled);
}

static void setCompositorDrivenAcceleratedScrollingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCompositorDrivenAcceleratedScrollingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setCompositorTouchHitTestingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setCompositorTouchHitTesting", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool compositorTouchHitTesting;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(compositorTouchHitTesting, info[0]->BooleanValue());
    }
    impl->setCompositorTouchHitTesting(compositorTouchHitTesting);
}

static void setCompositorTouchHitTestingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCompositorTouchHitTestingMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setContainerCullingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setContainerCullingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool containerCullingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(containerCullingEnabled, info[0]->BooleanValue());
    }
    impl->setContainerCullingEnabled(containerCullingEnabled);
}

static void setContainerCullingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setContainerCullingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setCookieEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setCookieEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool cookieEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(cookieEnabled, info[0]->BooleanValue());
    }
    impl->setCookieEnabled(cookieEnabled);
}

static void setCookieEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setCookieEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDefaultFixedFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDefaultFixedFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int defaultFixedFontSize;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(defaultFixedFontSize, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setDefaultFixedFontSize(defaultFixedFontSize);
}

static void setDefaultFixedFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultFixedFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDefaultFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setDefaultFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int defaultFontSize;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(defaultFontSize, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setDefaultFontSize(defaultFontSize);
}

static void setDefaultFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDefaultTextEncodingNameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDefaultTextEncodingName", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    V8StringResource<> defaultTextEncodingName;
    {
        TOSTRING_VOID_INTERNAL(defaultTextEncodingName, info[0]);
    }
    impl->setDefaultTextEncodingName(defaultTextEncodingName);
}

static void setDefaultTextEncodingNameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultTextEncodingNameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDefaultVideoPosterURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDefaultVideoPosterURL", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    V8StringResource<> defaultVideoPosterURL;
    {
        TOSTRING_VOID_INTERNAL(defaultVideoPosterURL, info[0]);
    }
    impl->setDefaultVideoPosterURL(defaultVideoPosterURL);
}

static void setDefaultVideoPosterURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDefaultVideoPosterURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDeferredFiltersEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDeferredFiltersEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool deferredFiltersEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(deferredFiltersEnabled, info[0]->BooleanValue());
    }
    impl->setDeferredFiltersEnabled(deferredFiltersEnabled);
}

static void setDeferredFiltersEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeferredFiltersEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDeviceScaleAdjustmentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDeviceScaleAdjustment", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    double deviceScaleAdjustment;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(deviceScaleAdjustment, static_cast<double>(info[0]->NumberValue()));
    }
    impl->setDeviceScaleAdjustment(deviceScaleAdjustment);
}

static void setDeviceScaleAdjustmentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeviceScaleAdjustmentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDeviceSupportsMouseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDeviceSupportsMouse", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool deviceSupportsMouse;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(deviceSupportsMouse, info[0]->BooleanValue());
    }
    impl->setDeviceSupportsMouse(deviceSupportsMouse);
}

static void setDeviceSupportsMouseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeviceSupportsMouseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDeviceSupportsTouchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDeviceSupportsTouch", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool deviceSupportsTouch;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(deviceSupportsTouch, info[0]->BooleanValue());
    }
    impl->setDeviceSupportsTouch(deviceSupportsTouch);
}

static void setDeviceSupportsTouchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDeviceSupportsTouchMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDisallowFullscreenForNonMediaElementsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDisallowFullscreenForNonMediaElements", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool disallowFullscreenForNonMediaElements;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(disallowFullscreenForNonMediaElements, info[0]->BooleanValue());
    }
    impl->setDisallowFullscreenForNonMediaElements(disallowFullscreenForNonMediaElements);
}

static void setDisallowFullscreenForNonMediaElementsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDisallowFullscreenForNonMediaElementsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDNSPrefetchingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDNSPrefetchingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool dnsPrefetchingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(dnsPrefetchingEnabled, info[0]->BooleanValue());
    }
    impl->setDNSPrefetchingEnabled(dnsPrefetchingEnabled);
}

static void setDNSPrefetchingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDNSPrefetchingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setDownloadableBinaryFontsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setDownloadableBinaryFontsEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool downloadableBinaryFontsEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(downloadableBinaryFontsEnabled, info[0]->BooleanValue());
    }
    impl->setDownloadableBinaryFontsEnabled(downloadableBinaryFontsEnabled);
}

static void setDownloadableBinaryFontsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setDownloadableBinaryFontsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setForceZeroLayoutHeightMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setForceZeroLayoutHeight", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool forceZeroLayoutHeight;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(forceZeroLayoutHeight, info[0]->BooleanValue());
    }
    impl->setForceZeroLayoutHeight(forceZeroLayoutHeight);
}

static void setForceZeroLayoutHeightMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setForceZeroLayoutHeightMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setFullscreenSupportedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setFullscreenSupported", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool fullscreenSupported;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(fullscreenSupported, info[0]->BooleanValue());
    }
    impl->setFullscreenSupported(fullscreenSupported);
}

static void setFullscreenSupportedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setFullscreenSupportedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setHyperlinkAuditingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setHyperlinkAuditingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool hyperlinkAuditingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(hyperlinkAuditingEnabled, info[0]->BooleanValue());
    }
    impl->setHyperlinkAuditingEnabled(hyperlinkAuditingEnabled);
}

static void setHyperlinkAuditingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setHyperlinkAuditingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setIgnoreMainFrameOverflowHiddenQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setIgnoreMainFrameOverflowHiddenQuirk", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool ignoreMainFrameOverflowHiddenQuirk;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(ignoreMainFrameOverflowHiddenQuirk, info[0]->BooleanValue());
    }
    impl->setIgnoreMainFrameOverflowHiddenQuirk(ignoreMainFrameOverflowHiddenQuirk);
}

static void setIgnoreMainFrameOverflowHiddenQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setIgnoreMainFrameOverflowHiddenQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setImagesEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setImagesEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool imagesEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(imagesEnabled, info[0]->BooleanValue());
    }
    impl->setImagesEnabled(imagesEnabled);
}

static void setImagesEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setImagesEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setJavaEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setJavaEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool javaEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(javaEnabled, info[0]->BooleanValue());
    }
    impl->setJavaEnabled(javaEnabled);
}

static void setJavaEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setJavaEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setJavaScriptCanAccessClipboardMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setJavaScriptCanAccessClipboard", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool javaScriptCanAccessClipboard;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(javaScriptCanAccessClipboard, info[0]->BooleanValue());
    }
    impl->setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);
}

static void setJavaScriptCanAccessClipboardMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setJavaScriptCanAccessClipboardMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setJavaScriptCanOpenWindowsAutomaticallyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setJavaScriptCanOpenWindowsAutomatically", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool javaScriptCanOpenWindowsAutomatically;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(javaScriptCanOpenWindowsAutomatically, info[0]->BooleanValue());
    }
    impl->setJavaScriptCanOpenWindowsAutomatically(javaScriptCanOpenWindowsAutomatically);
}

static void setJavaScriptCanOpenWindowsAutomaticallyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setJavaScriptCanOpenWindowsAutomaticallyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setLayerSquashingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setLayerSquashingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool layerSquashingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(layerSquashingEnabled, info[0]->BooleanValue());
    }
    impl->setLayerSquashingEnabled(layerSquashingEnabled);
}

static void setLayerSquashingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLayerSquashingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setLoadWithOverviewModeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setLoadWithOverviewMode", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool loadWithOverviewMode;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(loadWithOverviewMode, info[0]->BooleanValue());
    }
    impl->setLoadWithOverviewMode(loadWithOverviewMode);
}

static void setLoadWithOverviewModeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLoadWithOverviewModeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setLoadsImagesAutomaticallyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setLoadsImagesAutomatically", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool loadsImagesAutomatically;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(loadsImagesAutomatically, info[0]->BooleanValue());
    }
    impl->setLoadsImagesAutomatically(loadsImagesAutomatically);
}

static void setLoadsImagesAutomaticallyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLoadsImagesAutomaticallyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setLocalStorageEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setLocalStorageEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool localStorageEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(localStorageEnabled, info[0]->BooleanValue());
    }
    impl->setLocalStorageEnabled(localStorageEnabled);
}

static void setLocalStorageEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setLocalStorageEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMainFrameClipsContentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setMainFrameClipsContent", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool mainFrameClipsContent;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(mainFrameClipsContent, info[0]->BooleanValue());
    }
    impl->setMainFrameClipsContent(mainFrameClipsContent);
}

static void setMainFrameClipsContentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMainFrameClipsContentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMaxBeaconTransmissionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMaxBeaconTransmission", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int maxBeaconTransmission;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(maxBeaconTransmission, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setMaxBeaconTransmission(maxBeaconTransmission);
}

static void setMaxBeaconTransmissionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMaxBeaconTransmissionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMaxTouchPointsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMaxTouchPoints", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int maxTouchPoints;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(maxTouchPoints, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setMaxTouchPoints(maxTouchPoints);
}

static void setMaxTouchPointsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMaxTouchPointsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMediaControlsOverlayPlayButtonEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setMediaControlsOverlayPlayButtonEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool mediaControlsOverlayPlayButtonEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(mediaControlsOverlayPlayButtonEnabled, info[0]->BooleanValue());
    }
    impl->setMediaControlsOverlayPlayButtonEnabled(mediaControlsOverlayPlayButtonEnabled);
}

static void setMediaControlsOverlayPlayButtonEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMediaControlsOverlayPlayButtonEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMediaPlaybackRequiresUserGestureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setMediaPlaybackRequiresUserGesture", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool mediaPlaybackRequiresUserGesture;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(mediaPlaybackRequiresUserGesture, info[0]->BooleanValue());
    }
    impl->setMediaPlaybackRequiresUserGesture(mediaPlaybackRequiresUserGesture);
}

static void setMediaPlaybackRequiresUserGestureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMediaPlaybackRequiresUserGestureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMediaTypeOverrideMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setMediaTypeOverride", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    V8StringResource<> mediaTypeOverride;
    {
        TOSTRING_VOID_INTERNAL(mediaTypeOverride, info[0]);
    }
    impl->setMediaTypeOverride(mediaTypeOverride);
}

static void setMediaTypeOverrideMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMediaTypeOverrideMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMinimumAccelerated2dCanvasSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMinimumAccelerated2dCanvasSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int minimumAccelerated2dCanvasSize;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(minimumAccelerated2dCanvasSize, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setMinimumAccelerated2dCanvasSize(minimumAccelerated2dCanvasSize);
}

static void setMinimumAccelerated2dCanvasSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMinimumAccelerated2dCanvasSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMinimumFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMinimumFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int minimumFontSize;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(minimumFontSize, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setMinimumFontSize(minimumFontSize);
}

static void setMinimumFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMinimumFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setMinimumLogicalFontSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setMinimumLogicalFontSize", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int minimumLogicalFontSize;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(minimumLogicalFontSize, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setMinimumLogicalFontSize(minimumLogicalFontSize);
}

static void setMinimumLogicalFontSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setMinimumLogicalFontSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setNavigateOnDragDropMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setNavigateOnDragDrop", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool navigateOnDragDrop;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(navigateOnDragDrop, info[0]->BooleanValue());
    }
    impl->setNavigateOnDragDrop(navigateOnDragDrop);
}

static void setNavigateOnDragDropMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setNavigateOnDragDropMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setNeedsSiteSpecificQuirksMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setNeedsSiteSpecificQuirks", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool needsSiteSpecificQuirks;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(needsSiteSpecificQuirks, info[0]->BooleanValue());
    }
    impl->setNeedsSiteSpecificQuirks(needsSiteSpecificQuirks);
}

static void setNeedsSiteSpecificQuirksMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setNeedsSiteSpecificQuirksMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setOfflineWebApplicationCacheEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setOfflineWebApplicationCacheEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool offlineWebApplicationCacheEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(offlineWebApplicationCacheEnabled, info[0]->BooleanValue());
    }
    impl->setOfflineWebApplicationCacheEnabled(offlineWebApplicationCacheEnabled);
}

static void setOfflineWebApplicationCacheEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setOfflineWebApplicationCacheEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPageCacheSupportsPluginsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setPageCacheSupportsPlugins", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool pageCacheSupportsPlugins;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(pageCacheSupportsPlugins, info[0]->BooleanValue());
    }
    impl->setPageCacheSupportsPlugins(pageCacheSupportsPlugins);
}

static void setPageCacheSupportsPluginsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPageCacheSupportsPluginsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPasswordEchoDurationInSecondsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setPasswordEchoDurationInSeconds", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    double passwordEchoDurationInSeconds;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(passwordEchoDurationInSeconds, static_cast<double>(info[0]->NumberValue()));
    }
    impl->setPasswordEchoDurationInSeconds(passwordEchoDurationInSeconds);
}

static void setPasswordEchoDurationInSecondsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPasswordEchoDurationInSecondsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPasswordEchoEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setPasswordEchoEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool passwordEchoEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(passwordEchoEnabled, info[0]->BooleanValue());
    }
    impl->setPasswordEchoEnabled(passwordEchoEnabled);
}

static void setPasswordEchoEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPasswordEchoEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPinchOverlayScrollbarThicknessMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setPinchOverlayScrollbarThickness", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int pinchOverlayScrollbarThickness;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(pinchOverlayScrollbarThickness, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setPinchOverlayScrollbarThickness(pinchOverlayScrollbarThickness);
}

static void setPinchOverlayScrollbarThicknessMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPinchOverlayScrollbarThicknessMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPinchVirtualViewportEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setPinchVirtualViewportEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool pinchVirtualViewportEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(pinchVirtualViewportEnabled, info[0]->BooleanValue());
    }
    impl->setPinchVirtualViewportEnabled(pinchVirtualViewportEnabled);
}

static void setPinchVirtualViewportEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPinchVirtualViewportEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPluginsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setPluginsEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool pluginsEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(pluginsEnabled, info[0]->BooleanValue());
    }
    impl->setPluginsEnabled(pluginsEnabled);
}

static void setPluginsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setPluginsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setRegionBasedColumnsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setRegionBasedColumnsEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool regionBasedColumnsEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(regionBasedColumnsEnabled, info[0]->BooleanValue());
    }
    impl->setRegionBasedColumnsEnabled(regionBasedColumnsEnabled);
}

static void setRegionBasedColumnsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setRegionBasedColumnsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setReportScreenSizeInPhysicalPixelsQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setReportScreenSizeInPhysicalPixelsQuirk", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool reportScreenSizeInPhysicalPixelsQuirk;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(reportScreenSizeInPhysicalPixelsQuirk, info[0]->BooleanValue());
    }
    impl->setReportScreenSizeInPhysicalPixelsQuirk(reportScreenSizeInPhysicalPixelsQuirk);
}

static void setReportScreenSizeInPhysicalPixelsQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setReportScreenSizeInPhysicalPixelsQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setScriptEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setScriptEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool scriptEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(scriptEnabled, info[0]->BooleanValue());
    }
    impl->setScriptEnabled(scriptEnabled);
}

static void setScriptEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setScriptEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setScrollAnimatorEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setScrollAnimatorEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool scrollAnimatorEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(scrollAnimatorEnabled, info[0]->BooleanValue());
    }
    impl->setScrollAnimatorEnabled(scrollAnimatorEnabled);
}

static void setScrollAnimatorEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setScrollAnimatorEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setSelectTrailingWhitespaceEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setSelectTrailingWhitespaceEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool selectTrailingWhitespaceEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(selectTrailingWhitespaceEnabled, info[0]->BooleanValue());
    }
    impl->setSelectTrailingWhitespaceEnabled(selectTrailingWhitespaceEnabled);
}

static void setSelectTrailingWhitespaceEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSelectTrailingWhitespaceEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setSelectionIncludesAltImageTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setSelectionIncludesAltImageText", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool selectionIncludesAltImageText;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(selectionIncludesAltImageText, info[0]->BooleanValue());
    }
    impl->setSelectionIncludesAltImageText(selectionIncludesAltImageText);
}

static void setSelectionIncludesAltImageTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSelectionIncludesAltImageTextMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setShouldClearDocumentBackgroundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setShouldClearDocumentBackground", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool shouldClearDocumentBackground;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(shouldClearDocumentBackground, info[0]->BooleanValue());
    }
    impl->setShouldClearDocumentBackground(shouldClearDocumentBackground);
}

static void setShouldClearDocumentBackgroundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShouldClearDocumentBackgroundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setShouldPrintBackgroundsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setShouldPrintBackgrounds", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool shouldPrintBackgrounds;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(shouldPrintBackgrounds, info[0]->BooleanValue());
    }
    impl->setShouldPrintBackgrounds(shouldPrintBackgrounds);
}

static void setShouldPrintBackgroundsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShouldPrintBackgroundsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setShouldRespectImageOrientationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setShouldRespectImageOrientation", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool shouldRespectImageOrientation;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(shouldRespectImageOrientation, info[0]->BooleanValue());
    }
    impl->setShouldRespectImageOrientation(shouldRespectImageOrientation);
}

static void setShouldRespectImageOrientationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShouldRespectImageOrientationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setShrinksStandaloneImagesToFitMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setShrinksStandaloneImagesToFit", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool shrinksStandaloneImagesToFit;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(shrinksStandaloneImagesToFit, info[0]->BooleanValue());
    }
    impl->setShrinksStandaloneImagesToFit(shrinksStandaloneImagesToFit);
}

static void setShrinksStandaloneImagesToFitMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setShrinksStandaloneImagesToFitMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setSmartInsertDeleteEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setSmartInsertDeleteEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool smartInsertDeleteEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(smartInsertDeleteEnabled, info[0]->BooleanValue());
    }
    impl->setSmartInsertDeleteEnabled(smartInsertDeleteEnabled);
}

static void setSmartInsertDeleteEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSmartInsertDeleteEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setSpatialNavigationEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setSpatialNavigationEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool spatialNavigationEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(spatialNavigationEnabled, info[0]->BooleanValue());
    }
    impl->setSpatialNavigationEnabled(spatialNavigationEnabled);
}

static void setSpatialNavigationEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSpatialNavigationEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setSupportsMultipleWindowsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setSupportsMultipleWindows", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool supportsMultipleWindows;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(supportsMultipleWindows, info[0]->BooleanValue());
    }
    impl->setSupportsMultipleWindows(supportsMultipleWindows);
}

static void setSupportsMultipleWindowsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSupportsMultipleWindowsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setSyncXHRInDocumentsEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setSyncXHRInDocumentsEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool syncXHRInDocumentsEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(syncXHRInDocumentsEnabled, info[0]->BooleanValue());
    }
    impl->setSyncXHRInDocumentsEnabled(syncXHRInDocumentsEnabled);
}

static void setSyncXHRInDocumentsEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setSyncXHRInDocumentsEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTextAreasAreResizableMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setTextAreasAreResizable", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool textAreasAreResizable;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(textAreasAreResizable, info[0]->BooleanValue());
    }
    impl->setTextAreasAreResizable(textAreasAreResizable);
}

static void setTextAreasAreResizableMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTextAreasAreResizableMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTouchAdjustmentEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setTouchAdjustmentEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool touchAdjustmentEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(touchAdjustmentEnabled, info[0]->BooleanValue());
    }
    impl->setTouchAdjustmentEnabled(touchAdjustmentEnabled);
}

static void setTouchAdjustmentEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTouchAdjustmentEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTouchDragDropEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setTouchDragDropEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool touchDragDropEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(touchDragDropEnabled, info[0]->BooleanValue());
    }
    impl->setTouchDragDropEnabled(touchDragDropEnabled);
}

static void setTouchDragDropEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTouchDragDropEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTouchEditingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setTouchEditingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool touchEditingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(touchEditingEnabled, info[0]->BooleanValue());
    }
    impl->setTouchEditingEnabled(touchEditingEnabled);
}

static void setTouchEditingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTouchEditingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTreatIPAddressAsDomainMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setTreatIPAddressAsDomain", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool treatIPAddressAsDomain;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(treatIPAddressAsDomain, info[0]->BooleanValue());
    }
    impl->setTreatIPAddressAsDomain(treatIPAddressAsDomain);
}

static void setTreatIPAddressAsDomainMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setTreatIPAddressAsDomainMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setUnifiedTextCheckerEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setUnifiedTextCheckerEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool unifiedTextCheckerEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(unifiedTextCheckerEnabled, info[0]->BooleanValue());
    }
    impl->setUnifiedTextCheckerEnabled(unifiedTextCheckerEnabled);
}

static void setUnifiedTextCheckerEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUnifiedTextCheckerEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setUnsafePluginPastingEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setUnsafePluginPastingEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool unsafePluginPastingEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(unsafePluginPastingEnabled, info[0]->BooleanValue());
    }
    impl->setUnsafePluginPastingEnabled(unsafePluginPastingEnabled);
}

static void setUnsafePluginPastingEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUnsafePluginPastingEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setUseLegacyBackgroundSizeShorthandBehaviorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setUseLegacyBackgroundSizeShorthandBehavior", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool useLegacyBackgroundSizeShorthandBehavior;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(useLegacyBackgroundSizeShorthandBehavior, info[0]->BooleanValue());
    }
    impl->setUseLegacyBackgroundSizeShorthandBehavior(useLegacyBackgroundSizeShorthandBehavior);
}

static void setUseLegacyBackgroundSizeShorthandBehaviorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseLegacyBackgroundSizeShorthandBehaviorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setUseSolidColorScrollbarsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setUseSolidColorScrollbars", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool useSolidColorScrollbars;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(useSolidColorScrollbars, info[0]->BooleanValue());
    }
    impl->setUseSolidColorScrollbars(useSolidColorScrollbars);
}

static void setUseSolidColorScrollbarsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseSolidColorScrollbarsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setUseWideViewportMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setUseWideViewport", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool useWideViewport;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(useWideViewport, info[0]->BooleanValue());
    }
    impl->setUseWideViewport(useWideViewport);
}

static void setUseWideViewportMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUseWideViewportMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setUsesEncodingDetectorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setUsesEncodingDetector", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool usesEncodingDetector;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(usesEncodingDetector, info[0]->BooleanValue());
    }
    impl->setUsesEncodingDetector(usesEncodingDetector);
}

static void setUsesEncodingDetectorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setUsesEncodingDetectorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setValidationMessageTimerMagnificationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setValidationMessageTimerMagnification", "InternalSettingsGenerated", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    int validationMessageTimerMagnification;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(validationMessageTimerMagnification, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->setValidationMessageTimerMagnification(validationMessageTimerMagnification);
}

static void setValidationMessageTimerMagnificationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setValidationMessageTimerMagnificationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setViewportEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setViewportEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool viewportEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(viewportEnabled, info[0]->BooleanValue());
    }
    impl->setViewportEnabled(viewportEnabled);
}

static void setViewportEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setViewportMetaEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setViewportMetaEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool viewportMetaEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(viewportMetaEnabled, info[0]->BooleanValue());
    }
    impl->setViewportMetaEnabled(viewportMetaEnabled);
}

static void setViewportMetaEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportMetaEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setViewportMetaMergeContentQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setViewportMetaMergeContentQuirk", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool viewportMetaMergeContentQuirk;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(viewportMetaMergeContentQuirk, info[0]->BooleanValue());
    }
    impl->setViewportMetaMergeContentQuirk(viewportMetaMergeContentQuirk);
}

static void setViewportMetaMergeContentQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportMetaMergeContentQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setViewportMetaZeroValuesQuirkMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setViewportMetaZeroValuesQuirk", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool viewportMetaZeroValuesQuirk;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(viewportMetaZeroValuesQuirk, info[0]->BooleanValue());
    }
    impl->setViewportMetaZeroValuesQuirk(viewportMetaZeroValuesQuirk);
}

static void setViewportMetaZeroValuesQuirkMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setViewportMetaZeroValuesQuirkMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setWebAudioEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setWebAudioEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool webAudioEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(webAudioEnabled, info[0]->BooleanValue());
    }
    impl->setWebAudioEnabled(webAudioEnabled);
}

static void setWebAudioEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebAudioEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setWebGLEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setWebGLEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool webGLEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(webGLEnabled, info[0]->BooleanValue());
    }
    impl->setWebGLEnabled(webGLEnabled);
}

static void setWebGLEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebGLEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setWebGLErrorsToConsoleEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setWebGLErrorsToConsoleEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool webGLErrorsToConsoleEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(webGLErrorsToConsoleEnabled, info[0]->BooleanValue());
    }
    impl->setWebGLErrorsToConsoleEnabled(webGLErrorsToConsoleEnabled);
}

static void setWebGLErrorsToConsoleEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebGLErrorsToConsoleEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setWebSecurityEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setWebSecurityEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool webSecurityEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(webSecurityEnabled, info[0]->BooleanValue());
    }
    impl->setWebSecurityEnabled(webSecurityEnabled);
}

static void setWebSecurityEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWebSecurityEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setWideViewportQuirkEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setWideViewportQuirkEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool wideViewportQuirkEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(wideViewportQuirkEnabled, info[0]->BooleanValue());
    }
    impl->setWideViewportQuirkEnabled(wideViewportQuirkEnabled);
}

static void setWideViewportQuirkEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setWideViewportQuirkEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setXSSAuditorEnabledMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setXSSAuditorEnabled", "InternalSettingsGenerated", 1, info.Length(), info.GetIsolate());
        return;
    }
    InternalSettingsGenerated* impl = V8InternalSettingsGenerated::toNative(info.Holder());
    bool xssAuditorEnabled;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(xssAuditorEnabled, info[0]->BooleanValue());
    }
    impl->setXSSAuditorEnabled(xssAuditorEnabled);
}

static void setXSSAuditorEnabledMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InternalSettingsGeneratedV8Internal::setXSSAuditorEnabledMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace InternalSettingsGeneratedV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InternalSettingsGeneratedMethods[] = {
    {"setDOMPasteAllowed", InternalSettingsGeneratedV8Internal::setDOMPasteAllowedMethodCallback, 0, 1},
    {"setAccelerated2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasEnabledMethodCallback, 0, 1},
    {"setAccelerated2dCanvasMSAASampleCount", InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasMSAASampleCountMethodCallback, 0, 1},
    {"setAcceleratedCompositingEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingEnabledMethodCallback, 0, 1},
    {"setAcceleratedCompositingForCanvasEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForCanvasEnabledMethodCallback, 0, 1},
    {"setAcceleratedCompositingForFiltersEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFiltersEnabledMethodCallback, 0, 1},
    {"setAcceleratedCompositingForFixedPositionEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFixedPositionEnabledMethodCallback, 0, 1},
    {"setAcceleratedCompositingForFixedRootBackgroundEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFixedRootBackgroundEnabledMethodCallback, 0, 1},
    {"setAcceleratedCompositingForOverflowScrollEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForOverflowScrollEnabledMethodCallback, 0, 1},
    {"setAcceleratedCompositingForVideoEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForVideoEnabledMethodCallback, 0, 1},
    {"setAccessibilityFontScaleFactor", InternalSettingsGeneratedV8Internal::setAccessibilityFontScaleFactorMethodCallback, 0, 1},
    {"setAllowConnectingInsecureWebSocket", InternalSettingsGeneratedV8Internal::setAllowConnectingInsecureWebSocketMethodCallback, 0, 1},
    {"setAllowCustomScrollbarInMainFrame", InternalSettingsGeneratedV8Internal::setAllowCustomScrollbarInMainFrameMethodCallback, 0, 1},
    {"setAllowDisplayOfInsecureContent", InternalSettingsGeneratedV8Internal::setAllowDisplayOfInsecureContentMethodCallback, 0, 1},
    {"setAllowFileAccessFromFileURLs", InternalSettingsGeneratedV8Internal::setAllowFileAccessFromFileURLsMethodCallback, 0, 1},
    {"setAllowRunningOfInsecureContent", InternalSettingsGeneratedV8Internal::setAllowRunningOfInsecureContentMethodCallback, 0, 1},
    {"setAllowScriptsToCloseWindows", InternalSettingsGeneratedV8Internal::setAllowScriptsToCloseWindowsMethodCallback, 0, 1},
    {"setAllowUniversalAccessFromFileURLs", InternalSettingsGeneratedV8Internal::setAllowUniversalAccessFromFileURLsMethodCallback, 0, 1},
    {"setAntialiased2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setAntialiased2dCanvasEnabledMethodCallback, 0, 1},
    {"setAsynchronousSpellCheckingEnabled", InternalSettingsGeneratedV8Internal::setAsynchronousSpellCheckingEnabledMethodCallback, 0, 1},
    {"setCaretBrowsingEnabled", InternalSettingsGeneratedV8Internal::setCaretBrowsingEnabledMethodCallback, 0, 1},
    {"setCompositedScrollingForFramesEnabled", InternalSettingsGeneratedV8Internal::setCompositedScrollingForFramesEnabledMethodCallback, 0, 1},
    {"setCompositorDrivenAcceleratedScrollingEnabled", InternalSettingsGeneratedV8Internal::setCompositorDrivenAcceleratedScrollingEnabledMethodCallback, 0, 1},
    {"setCompositorTouchHitTesting", InternalSettingsGeneratedV8Internal::setCompositorTouchHitTestingMethodCallback, 0, 1},
    {"setContainerCullingEnabled", InternalSettingsGeneratedV8Internal::setContainerCullingEnabledMethodCallback, 0, 1},
    {"setCookieEnabled", InternalSettingsGeneratedV8Internal::setCookieEnabledMethodCallback, 0, 1},
    {"setDefaultFixedFontSize", InternalSettingsGeneratedV8Internal::setDefaultFixedFontSizeMethodCallback, 0, 1},
    {"setDefaultFontSize", InternalSettingsGeneratedV8Internal::setDefaultFontSizeMethodCallback, 0, 1},
    {"setDefaultTextEncodingName", InternalSettingsGeneratedV8Internal::setDefaultTextEncodingNameMethodCallback, 0, 1},
    {"setDefaultVideoPosterURL", InternalSettingsGeneratedV8Internal::setDefaultVideoPosterURLMethodCallback, 0, 1},
    {"setDeferredFiltersEnabled", InternalSettingsGeneratedV8Internal::setDeferredFiltersEnabledMethodCallback, 0, 1},
    {"setDeviceScaleAdjustment", InternalSettingsGeneratedV8Internal::setDeviceScaleAdjustmentMethodCallback, 0, 1},
    {"setDeviceSupportsMouse", InternalSettingsGeneratedV8Internal::setDeviceSupportsMouseMethodCallback, 0, 1},
    {"setDeviceSupportsTouch", InternalSettingsGeneratedV8Internal::setDeviceSupportsTouchMethodCallback, 0, 1},
    {"setDisallowFullscreenForNonMediaElements", InternalSettingsGeneratedV8Internal::setDisallowFullscreenForNonMediaElementsMethodCallback, 0, 1},
    {"setDNSPrefetchingEnabled", InternalSettingsGeneratedV8Internal::setDNSPrefetchingEnabledMethodCallback, 0, 1},
    {"setDownloadableBinaryFontsEnabled", InternalSettingsGeneratedV8Internal::setDownloadableBinaryFontsEnabledMethodCallback, 0, 1},
    {"setForceZeroLayoutHeight", InternalSettingsGeneratedV8Internal::setForceZeroLayoutHeightMethodCallback, 0, 1},
    {"setFullscreenSupported", InternalSettingsGeneratedV8Internal::setFullscreenSupportedMethodCallback, 0, 1},
    {"setHyperlinkAuditingEnabled", InternalSettingsGeneratedV8Internal::setHyperlinkAuditingEnabledMethodCallback, 0, 1},
    {"setIgnoreMainFrameOverflowHiddenQuirk", InternalSettingsGeneratedV8Internal::setIgnoreMainFrameOverflowHiddenQuirkMethodCallback, 0, 1},
    {"setImagesEnabled", InternalSettingsGeneratedV8Internal::setImagesEnabledMethodCallback, 0, 1},
    {"setJavaEnabled", InternalSettingsGeneratedV8Internal::setJavaEnabledMethodCallback, 0, 1},
    {"setJavaScriptCanAccessClipboard", InternalSettingsGeneratedV8Internal::setJavaScriptCanAccessClipboardMethodCallback, 0, 1},
    {"setJavaScriptCanOpenWindowsAutomatically", InternalSettingsGeneratedV8Internal::setJavaScriptCanOpenWindowsAutomaticallyMethodCallback, 0, 1},
    {"setLayerSquashingEnabled", InternalSettingsGeneratedV8Internal::setLayerSquashingEnabledMethodCallback, 0, 1},
    {"setLoadWithOverviewMode", InternalSettingsGeneratedV8Internal::setLoadWithOverviewModeMethodCallback, 0, 1},
    {"setLoadsImagesAutomatically", InternalSettingsGeneratedV8Internal::setLoadsImagesAutomaticallyMethodCallback, 0, 1},
    {"setLocalStorageEnabled", InternalSettingsGeneratedV8Internal::setLocalStorageEnabledMethodCallback, 0, 1},
    {"setMainFrameClipsContent", InternalSettingsGeneratedV8Internal::setMainFrameClipsContentMethodCallback, 0, 1},
    {"setMaxBeaconTransmission", InternalSettingsGeneratedV8Internal::setMaxBeaconTransmissionMethodCallback, 0, 1},
    {"setMaxTouchPoints", InternalSettingsGeneratedV8Internal::setMaxTouchPointsMethodCallback, 0, 1},
    {"setMediaControlsOverlayPlayButtonEnabled", InternalSettingsGeneratedV8Internal::setMediaControlsOverlayPlayButtonEnabledMethodCallback, 0, 1},
    {"setMediaPlaybackRequiresUserGesture", InternalSettingsGeneratedV8Internal::setMediaPlaybackRequiresUserGestureMethodCallback, 0, 1},
    {"setMediaTypeOverride", InternalSettingsGeneratedV8Internal::setMediaTypeOverrideMethodCallback, 0, 1},
    {"setMinimumAccelerated2dCanvasSize", InternalSettingsGeneratedV8Internal::setMinimumAccelerated2dCanvasSizeMethodCallback, 0, 1},
    {"setMinimumFontSize", InternalSettingsGeneratedV8Internal::setMinimumFontSizeMethodCallback, 0, 1},
    {"setMinimumLogicalFontSize", InternalSettingsGeneratedV8Internal::setMinimumLogicalFontSizeMethodCallback, 0, 1},
    {"setNavigateOnDragDrop", InternalSettingsGeneratedV8Internal::setNavigateOnDragDropMethodCallback, 0, 1},
    {"setNeedsSiteSpecificQuirks", InternalSettingsGeneratedV8Internal::setNeedsSiteSpecificQuirksMethodCallback, 0, 1},
    {"setOfflineWebApplicationCacheEnabled", InternalSettingsGeneratedV8Internal::setOfflineWebApplicationCacheEnabledMethodCallback, 0, 1},
    {"setPageCacheSupportsPlugins", InternalSettingsGeneratedV8Internal::setPageCacheSupportsPluginsMethodCallback, 0, 1},
    {"setPasswordEchoDurationInSeconds", InternalSettingsGeneratedV8Internal::setPasswordEchoDurationInSecondsMethodCallback, 0, 1},
    {"setPasswordEchoEnabled", InternalSettingsGeneratedV8Internal::setPasswordEchoEnabledMethodCallback, 0, 1},
    {"setPinchOverlayScrollbarThickness", InternalSettingsGeneratedV8Internal::setPinchOverlayScrollbarThicknessMethodCallback, 0, 1},
    {"setPinchVirtualViewportEnabled", InternalSettingsGeneratedV8Internal::setPinchVirtualViewportEnabledMethodCallback, 0, 1},
    {"setPluginsEnabled", InternalSettingsGeneratedV8Internal::setPluginsEnabledMethodCallback, 0, 1},
    {"setRegionBasedColumnsEnabled", InternalSettingsGeneratedV8Internal::setRegionBasedColumnsEnabledMethodCallback, 0, 1},
    {"setReportScreenSizeInPhysicalPixelsQuirk", InternalSettingsGeneratedV8Internal::setReportScreenSizeInPhysicalPixelsQuirkMethodCallback, 0, 1},
    {"setScriptEnabled", InternalSettingsGeneratedV8Internal::setScriptEnabledMethodCallback, 0, 1},
    {"setScrollAnimatorEnabled", InternalSettingsGeneratedV8Internal::setScrollAnimatorEnabledMethodCallback, 0, 1},
    {"setSelectTrailingWhitespaceEnabled", InternalSettingsGeneratedV8Internal::setSelectTrailingWhitespaceEnabledMethodCallback, 0, 1},
    {"setSelectionIncludesAltImageText", InternalSettingsGeneratedV8Internal::setSelectionIncludesAltImageTextMethodCallback, 0, 1},
    {"setShouldClearDocumentBackground", InternalSettingsGeneratedV8Internal::setShouldClearDocumentBackgroundMethodCallback, 0, 1},
    {"setShouldPrintBackgrounds", InternalSettingsGeneratedV8Internal::setShouldPrintBackgroundsMethodCallback, 0, 1},
    {"setShouldRespectImageOrientation", InternalSettingsGeneratedV8Internal::setShouldRespectImageOrientationMethodCallback, 0, 1},
    {"setShrinksStandaloneImagesToFit", InternalSettingsGeneratedV8Internal::setShrinksStandaloneImagesToFitMethodCallback, 0, 1},
    {"setSmartInsertDeleteEnabled", InternalSettingsGeneratedV8Internal::setSmartInsertDeleteEnabledMethodCallback, 0, 1},
    {"setSpatialNavigationEnabled", InternalSettingsGeneratedV8Internal::setSpatialNavigationEnabledMethodCallback, 0, 1},
    {"setSupportsMultipleWindows", InternalSettingsGeneratedV8Internal::setSupportsMultipleWindowsMethodCallback, 0, 1},
    {"setSyncXHRInDocumentsEnabled", InternalSettingsGeneratedV8Internal::setSyncXHRInDocumentsEnabledMethodCallback, 0, 1},
    {"setTextAreasAreResizable", InternalSettingsGeneratedV8Internal::setTextAreasAreResizableMethodCallback, 0, 1},
    {"setTouchAdjustmentEnabled", InternalSettingsGeneratedV8Internal::setTouchAdjustmentEnabledMethodCallback, 0, 1},
    {"setTouchDragDropEnabled", InternalSettingsGeneratedV8Internal::setTouchDragDropEnabledMethodCallback, 0, 1},
    {"setTouchEditingEnabled", InternalSettingsGeneratedV8Internal::setTouchEditingEnabledMethodCallback, 0, 1},
    {"setTreatIPAddressAsDomain", InternalSettingsGeneratedV8Internal::setTreatIPAddressAsDomainMethodCallback, 0, 1},
    {"setUnifiedTextCheckerEnabled", InternalSettingsGeneratedV8Internal::setUnifiedTextCheckerEnabledMethodCallback, 0, 1},
    {"setUnsafePluginPastingEnabled", InternalSettingsGeneratedV8Internal::setUnsafePluginPastingEnabledMethodCallback, 0, 1},
    {"setUseLegacyBackgroundSizeShorthandBehavior", InternalSettingsGeneratedV8Internal::setUseLegacyBackgroundSizeShorthandBehaviorMethodCallback, 0, 1},
    {"setUseSolidColorScrollbars", InternalSettingsGeneratedV8Internal::setUseSolidColorScrollbarsMethodCallback, 0, 1},
    {"setUseWideViewport", InternalSettingsGeneratedV8Internal::setUseWideViewportMethodCallback, 0, 1},
    {"setUsesEncodingDetector", InternalSettingsGeneratedV8Internal::setUsesEncodingDetectorMethodCallback, 0, 1},
    {"setValidationMessageTimerMagnification", InternalSettingsGeneratedV8Internal::setValidationMessageTimerMagnificationMethodCallback, 0, 1},
    {"setViewportEnabled", InternalSettingsGeneratedV8Internal::setViewportEnabledMethodCallback, 0, 1},
    {"setViewportMetaEnabled", InternalSettingsGeneratedV8Internal::setViewportMetaEnabledMethodCallback, 0, 1},
    {"setViewportMetaMergeContentQuirk", InternalSettingsGeneratedV8Internal::setViewportMetaMergeContentQuirkMethodCallback, 0, 1},
    {"setViewportMetaZeroValuesQuirk", InternalSettingsGeneratedV8Internal::setViewportMetaZeroValuesQuirkMethodCallback, 0, 1},
    {"setWebAudioEnabled", InternalSettingsGeneratedV8Internal::setWebAudioEnabledMethodCallback, 0, 1},
    {"setWebGLEnabled", InternalSettingsGeneratedV8Internal::setWebGLEnabledMethodCallback, 0, 1},
    {"setWebGLErrorsToConsoleEnabled", InternalSettingsGeneratedV8Internal::setWebGLErrorsToConsoleEnabledMethodCallback, 0, 1},
    {"setWebSecurityEnabled", InternalSettingsGeneratedV8Internal::setWebSecurityEnabledMethodCallback, 0, 1},
    {"setWideViewportQuirkEnabled", InternalSettingsGeneratedV8Internal::setWideViewportQuirkEnabledMethodCallback, 0, 1},
    {"setXSSAuditorEnabled", InternalSettingsGeneratedV8Internal::setXSSAuditorEnabledMethodCallback, 0, 1},
};

static void configureV8InternalSettingsGeneratedTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "InternalSettingsGenerated", v8::Local<v8::FunctionTemplate>(), V8InternalSettingsGenerated::internalFieldCount,
        0, 0,
        0, 0,
        V8InternalSettingsGeneratedMethods, WTF_ARRAY_LENGTH(V8InternalSettingsGeneratedMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8InternalSettingsGenerated::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8InternalSettingsGeneratedTemplate);
}

bool V8InternalSettingsGenerated::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8InternalSettingsGenerated::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InternalSettingsGenerated* V8InternalSettingsGenerated::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(InternalSettingsGenerated* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InternalSettingsGenerated>(impl, isolate));
    return V8InternalSettingsGenerated::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8InternalSettingsGenerated::createWrapper(PassRefPtrWillBeRawPtr<InternalSettingsGenerated> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InternalSettingsGenerated>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8InternalSettingsGenerated>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8InternalSettingsGenerated::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(InternalSettingsGenerated* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
