// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8Event.h"

#include "bindings/core/v8/V8DataTransfer.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/NameNodeList.h"
#include "core/dom/NodeList.h"
#include "core/dom/StaticNodeList.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "core/html/LabelsNodeList.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(Event* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8Event::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::Event* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8Event::wrapperTypeInfo = { gin::kEmbedderBlink, V8Event::domTemplate, V8Event::derefObject, 0, 0, 0, V8Event::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace EventV8Internal {

template <typename T> void V8_USE(T) { }

static void typeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueString(info, impl->type(), info.GetIsolate());
}

static void typeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::typeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void targetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->target()), impl);
}

static void targetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::targetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void currentTargetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentTarget()), impl);
}

static void currentTargetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::currentTargetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void eventPhaseAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->eventPhase());
}

static void eventPhaseAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::eventPhaseAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void bubblesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueBool(info, impl->bubbles());
}

static void bubblesAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::bubblesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cancelableAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueBool(info, impl->cancelable());
}

static void cancelableAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::cancelableAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timeStampAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValue(info, static_cast<double>(impl->timeStamp()));
}

static void timeStampAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::timeStampAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void defaultPreventedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueBool(info, impl->defaultPrevented());
}

static void defaultPreventedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    EventV8Internal::defaultPreventedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void srcElementAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->srcElement()), impl);
}

static void srcElementAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventSrcElement);
    EventV8Internal::srcElementAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void returnValueAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    v8SetReturnValueBool(info, impl->legacyReturnValue(executionContext));
}

static void returnValueAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventReturnValue);
    EventV8Internal::returnValueAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void returnValueAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    TONATIVE_VOID(bool, cppValue, v8Value->BooleanValue());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->setLegacyReturnValue(executionContext, cppValue);
}

static void returnValueAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventReturnValue);
    EventV8Internal::returnValueAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cancelBubbleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    v8SetReturnValueBool(info, impl->cancelBubble());
}

static void cancelBubbleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventCancelBubble);
    EventV8Internal::cancelBubbleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cancelBubbleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    TONATIVE_VOID(bool, cppValue, v8Value->BooleanValue());
    impl->setCancelBubble(cppValue);
}

static void cancelBubbleAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventCancelBubble);
    EventV8Internal::cancelBubbleAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pathAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Event* impl = V8Event::toNative(holder);
    RefPtrWillBeRawPtr<NodeList> result(impl->path());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8NodeList>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "path"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void pathAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventPath);
    EventV8Internal::pathAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clipboardDataAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::EventClipboardData);
    V8Event::clipboardDataAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void stopPropagationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toNative(info.Holder());
    impl->stopPropagation();
}

static void stopPropagationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventV8Internal::stopPropagationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void preventDefaultMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toNative(info.Holder());
    impl->preventDefault();
}

static void preventDefaultMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventV8Internal::preventDefaultMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void initEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toNative(info.Holder());
    V8StringResource<> eventTypeArg;
    bool canBubbleArg;
    bool cancelableArg;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(eventTypeArg, info[0]);
        TONATIVE_VOID_INTERNAL(canBubbleArg, info[1]->BooleanValue());
        TONATIVE_VOID_INTERNAL(cancelableArg, info[2]->BooleanValue());
    }
    impl->initEvent(eventTypeArg, canBubbleArg, cancelableArg);
}

static void initEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventV8Internal::initEventMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void stopImmediatePropagationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Event* impl = V8Event::toNative(info.Holder());
    impl->stopImmediatePropagation();
}

static void stopImmediatePropagationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    EventV8Internal::stopImmediatePropagationMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "Event", info.Holder(), isolate);
    if (info.Length() < 1) {
        exceptionState.throwTypeError("An event name must be provided.");
        exceptionState.throwIfNeeded();
        return;
    }

    TOSTRING_VOID(V8StringResource<>, type, info[0]);
    EventInit eventInit;
    if (info.Length() >= 2) {
        TONATIVE_VOID(Dictionary, options, Dictionary(info[1], isolate));
        if (!initializeEvent(eventInit, options, exceptionState, info)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    RefPtrWillBeRawPtr<Event> event = Event::create(type, eventInit);
    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8Event>(event.release(), &V8Event::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

} // namespace EventV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8EventAttributes[] = {
    {"type", EventV8Internal::typeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"target", EventV8Internal::targetAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"currentTarget", EventV8Internal::currentTargetAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"eventPhase", EventV8Internal::eventPhaseAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"bubbles", EventV8Internal::bubblesAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cancelable", EventV8Internal::cancelableAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"timeStamp", EventV8Internal::timeStampAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"defaultPrevented", EventV8Internal::defaultPreventedAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"srcElement", EventV8Internal::srcElementAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"returnValue", EventV8Internal::returnValueAttributeGetterCallback, EventV8Internal::returnValueAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"cancelBubble", EventV8Internal::cancelBubbleAttributeGetterCallback, EventV8Internal::cancelBubbleAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"path", EventV8Internal::pathAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"clipboardData", EventV8Internal::clipboardDataAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8EventMethods[] = {
    {"stopPropagation", EventV8Internal::stopPropagationMethodCallback, 0, 0},
    {"preventDefault", EventV8Internal::preventDefaultMethodCallback, 0, 0},
    {"initEvent", EventV8Internal::initEventMethodCallback, 0, 0},
    {"stopImmediatePropagation", EventV8Internal::stopImmediatePropagationMethodCallback, 0, 0},
};

bool initializeEvent(EventInit& eventInit, const Dictionary& options, ExceptionState& exceptionState, const v8::FunctionCallbackInfo<v8::Value>& info, const String& forEventName)
{
    Dictionary::ConversionContext conversionContext(forEventName.isEmpty() ? String("Event") : forEventName, "", exceptionState);
    if (!options.convert(conversionContext.setConversionType("boolean", false), "bubbles", eventInit.bubbles))
        return false;
    if (!options.convert(conversionContext.setConversionType("boolean", false), "cancelable", eventInit.cancelable))
        return false;
    return true;
}

void V8Event::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("Event"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    EventV8Internal::constructor(info);
}

static void configureV8EventTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "Event", v8::Local<v8::FunctionTemplate>(), V8Event::internalFieldCount,
        V8EventAttributes, WTF_ARRAY_LENGTH(V8EventAttributes),
        0, 0,
        V8EventMethods, WTF_ARRAY_LENGTH(V8EventMethods),
        isolate);
    functionTemplate->SetCallHandler(V8Event::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8EventConstants[] = {
        {"NONE", 0},
        {"CAPTURING_PHASE", 1},
        {"AT_TARGET", 2},
        {"BUBBLING_PHASE", 3},
        {"MOUSEDOWN", 1},
        {"MOUSEUP", 2},
        {"MOUSEOVER", 4},
        {"MOUSEOUT", 8},
        {"MOUSEMOVE", 16},
        {"MOUSEDRAG", 32},
        {"CLICK", 64},
        {"DBLCLICK", 128},
        {"KEYDOWN", 256},
        {"KEYUP", 512},
        {"KEYPRESS", 1024},
        {"DRAGDROP", 2048},
        {"FOCUS", 4096},
        {"BLUR", 8192},
        {"SELECT", 16384},
        {"CHANGE", 32768},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8EventConstants, WTF_ARRAY_LENGTH(V8EventConstants), isolate);
    COMPILE_ASSERT(0 == Event::NONE, TheValueOfEvent_NONEDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == Event::CAPTURING_PHASE, TheValueOfEvent_CAPTURING_PHASEDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == Event::AT_TARGET, TheValueOfEvent_AT_TARGETDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == Event::BUBBLING_PHASE, TheValueOfEvent_BUBBLING_PHASEDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == Event::MOUSEDOWN, TheValueOfEvent_MOUSEDOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == Event::MOUSEUP, TheValueOfEvent_MOUSEUPDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == Event::MOUSEOVER, TheValueOfEvent_MOUSEOVERDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == Event::MOUSEOUT, TheValueOfEvent_MOUSEOUTDoesntMatchWithImplementation);
    COMPILE_ASSERT(16 == Event::MOUSEMOVE, TheValueOfEvent_MOUSEMOVEDoesntMatchWithImplementation);
    COMPILE_ASSERT(32 == Event::MOUSEDRAG, TheValueOfEvent_MOUSEDRAGDoesntMatchWithImplementation);
    COMPILE_ASSERT(64 == Event::CLICK, TheValueOfEvent_CLICKDoesntMatchWithImplementation);
    COMPILE_ASSERT(128 == Event::DBLCLICK, TheValueOfEvent_DBLCLICKDoesntMatchWithImplementation);
    COMPILE_ASSERT(256 == Event::KEYDOWN, TheValueOfEvent_KEYDOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(512 == Event::KEYUP, TheValueOfEvent_KEYUPDoesntMatchWithImplementation);
    COMPILE_ASSERT(1024 == Event::KEYPRESS, TheValueOfEvent_KEYPRESSDoesntMatchWithImplementation);
    COMPILE_ASSERT(2048 == Event::DRAGDROP, TheValueOfEvent_DRAGDROPDoesntMatchWithImplementation);
    COMPILE_ASSERT(4096 == Event::FOCUS, TheValueOfEvent_FOCUSDoesntMatchWithImplementation);
    COMPILE_ASSERT(8192 == Event::BLUR, TheValueOfEvent_BLURDoesntMatchWithImplementation);
    COMPILE_ASSERT(16384 == Event::SELECT, TheValueOfEvent_SELECTDoesntMatchWithImplementation);
    COMPILE_ASSERT(32768 == Event::CHANGE, TheValueOfEvent_CHANGEDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8Event::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8EventTemplate);
}

bool V8Event::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8Event::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Event* V8Event::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> V8Event::createWrapper(PassRefPtrWillBeRawPtr<Event> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Event>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8Event>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8Event::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(Event* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
