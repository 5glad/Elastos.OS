// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8CSSStyleDeclaration.h"

#include "bindings/core/v8/V8CSSRule.h"
#include "bindings/core/v8/V8CSSValue.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(CSSStyleDeclaration* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8CSSStyleDeclaration::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::CSSStyleDeclaration* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8CSSStyleDeclaration::wrapperTypeInfo = { gin::kEmbedderBlink, V8CSSStyleDeclaration::domTemplate, V8CSSStyleDeclaration::derefObject, 0, 0, 0, V8CSSStyleDeclaration::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace CSSStyleDeclarationV8Internal {

template <typename T> void V8_USE(T) { }

static void cssTextAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(holder);
    v8SetReturnValueStringOrNull(info, impl->cssText(), info.GetIsolate());
}

static void cssTextAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSStyleDeclarationV8Internal::cssTextAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cssTextAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "cssText", "CSSStyleDeclaration", holder, info.GetIsolate());
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(holder);
    TOSTRING_VOID(V8StringResource<WithNullCheck>, cppValue, v8Value);
    impl->setCSSText(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void cssTextAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    CSSStyleDeclarationV8Internal::cssTextAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void lengthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->length());
}

static void lengthAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSStyleDeclarationV8Internal::lengthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void parentRuleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(holder);
    RefPtrWillBeRawPtr<CSSRule> result(impl->parentRule());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8CSSRule>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "parentRule"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void parentRuleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSStyleDeclarationV8Internal::parentRuleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getPropertyValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    V8StringResource<> propertyName;
    {
        TOSTRING_VOID_INTERNAL(propertyName, info[0]);
    }
    v8SetReturnValueStringOrNull(info, impl->getPropertyValue(propertyName), info.GetIsolate());
}

static void getPropertyValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSStyleDeclarationV8Internal::getPropertyValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void removePropertyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "removeProperty", "CSSStyleDeclaration", info.Holder(), info.GetIsolate());
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    V8StringResource<> propertyName;
    {
        TOSTRING_VOID_INTERNAL(propertyName, info[0]);
    }
    String result = impl->removeProperty(propertyName, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueStringOrNull(info, result, info.GetIsolate());
}

static void removePropertyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSStyleDeclarationV8Internal::removePropertyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getPropertyPriorityMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    V8StringResource<> propertyName;
    {
        TOSTRING_VOID_INTERNAL(propertyName, info[0]);
    }
    v8SetReturnValueStringOrNull(info, impl->getPropertyPriority(propertyName), info.GetIsolate());
}

static void getPropertyPriorityMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSStyleDeclarationV8Internal::getPropertyPriorityMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setPropertyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setProperty", "CSSStyleDeclaration", info.Holder(), info.GetIsolate());
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    V8StringResource<> propertyName;
    V8StringResource<WithNullCheck> value;
    V8StringResource<WithNullCheck> priority;
    {
        TOSTRING_VOID_INTERNAL(propertyName, info[0]);
        TOSTRING_VOID_INTERNAL(value, info[1]);
        TOSTRING_VOID_INTERNAL(priority, argumentOrNull(info, 2));
    }
    impl->setProperty(propertyName, value, priority, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setPropertyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSStyleDeclarationV8Internal::setPropertyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void itemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "item", "CSSStyleDeclaration", info.Holder(), info.GetIsolate());
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    unsigned index;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(index, toUInt32(info[0], exceptionState), exceptionState);
    }
    v8SetReturnValueString(info, impl->item(index), info.GetIsolate());
}

static void itemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    CSSStyleDeclarationV8Internal::itemMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getPropertyCSSValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    V8StringResource<> propertyName;
    {
        TOSTRING_VOID_INTERNAL(propertyName, info[0]);
    }
    v8SetReturnValue(info, impl->getPropertyCSSValue(propertyName));
}

static void getPropertyCSSValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::CSSStyleDeclarationGetPropertyCSSValue);
    CSSStyleDeclarationV8Internal::getPropertyCSSValueMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void indexedPropertyGetter(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    CSSStyleDeclaration* impl = V8CSSStyleDeclaration::toNative(info.Holder());
    String result = impl->item(index);
    if (result.isNull())
        return;
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void indexedPropertyGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMIndexedProperty");
    CSSStyleDeclarationV8Internal::indexedPropertyGetter(index, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void namedPropertyGetterCallback(v8::Local<v8::String> name, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMNamedProperty");
    V8CSSStyleDeclaration::namedPropertyGetterCustom(name, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void namedPropertySetterCallback(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMNamedProperty");
    V8CSSStyleDeclaration::namedPropertySetterCustom(name, v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void namedPropertyQueryCallback(v8::Local<v8::String> name, const v8::PropertyCallbackInfo<v8::Integer>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMNamedProperty");
    V8CSSStyleDeclaration::namedPropertyQueryCustom(name, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void namedPropertyEnumeratorCallback(const v8::PropertyCallbackInfo<v8::Array>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMNamedProperty");
    V8CSSStyleDeclaration::namedPropertyEnumeratorCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace CSSStyleDeclarationV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8CSSStyleDeclarationAttributes[] = {
    {"cssText", CSSStyleDeclarationV8Internal::cssTextAttributeGetterCallback, CSSStyleDeclarationV8Internal::cssTextAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"length", CSSStyleDeclarationV8Internal::lengthAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"parentRule", CSSStyleDeclarationV8Internal::parentRuleAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8CSSStyleDeclarationMethods[] = {
    {"getPropertyValue", CSSStyleDeclarationV8Internal::getPropertyValueMethodCallback, 0, 0},
    {"removeProperty", CSSStyleDeclarationV8Internal::removePropertyMethodCallback, 0, 0},
    {"getPropertyPriority", CSSStyleDeclarationV8Internal::getPropertyPriorityMethodCallback, 0, 0},
    {"setProperty", CSSStyleDeclarationV8Internal::setPropertyMethodCallback, 0, 0},
    {"item", CSSStyleDeclarationV8Internal::itemMethodCallback, 0, 0},
    {"getPropertyCSSValue", CSSStyleDeclarationV8Internal::getPropertyCSSValueMethodCallback, 0, 0},
};

static void configureV8CSSStyleDeclarationTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "CSSStyleDeclaration", v8::Local<v8::FunctionTemplate>(), V8CSSStyleDeclaration::internalFieldCount,
        V8CSSStyleDeclarationAttributes, WTF_ARRAY_LENGTH(V8CSSStyleDeclarationAttributes),
        0, 0,
        V8CSSStyleDeclarationMethods, WTF_ARRAY_LENGTH(V8CSSStyleDeclarationMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    functionTemplate->InstanceTemplate()->SetIndexedPropertyHandler(CSSStyleDeclarationV8Internal::indexedPropertyGetterCallback, 0, 0, 0, indexedPropertyEnumerator<CSSStyleDeclaration>);
    functionTemplate->InstanceTemplate()->SetNamedPropertyHandler(CSSStyleDeclarationV8Internal::namedPropertyGetterCallback, CSSStyleDeclarationV8Internal::namedPropertySetterCallback, CSSStyleDeclarationV8Internal::namedPropertyQueryCallback, 0, CSSStyleDeclarationV8Internal::namedPropertyEnumeratorCallback);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8CSSStyleDeclaration::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8CSSStyleDeclarationTemplate);
}

bool V8CSSStyleDeclaration::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8CSSStyleDeclaration::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSStyleDeclaration* V8CSSStyleDeclaration::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(CSSStyleDeclaration* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8CSSStyleDeclaration>(impl, isolate));
    return V8CSSStyleDeclaration::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8CSSStyleDeclaration::createWrapper(PassRefPtrWillBeRawPtr<CSSStyleDeclaration> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8CSSStyleDeclaration>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8CSSStyleDeclaration>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8CSSStyleDeclaration::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(CSSStyleDeclaration* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
