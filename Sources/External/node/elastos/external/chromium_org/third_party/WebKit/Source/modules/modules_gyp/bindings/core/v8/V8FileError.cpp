// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8FileError.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(FileError* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8FileError::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::FileError* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8FileError::wrapperTypeInfo = { gin::kEmbedderBlink, V8FileError::domTemplate, V8FileError::derefObject, 0, 0, 0, V8FileError::installPerContextEnabledMethods, &V8DOMError::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace FileErrorV8Internal {

template <typename T> void V8_USE(T) { }

static void codeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    FileError* impl = V8FileError::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->code());
}

static void codeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::FileError);
    FileErrorV8Internal::codeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace FileErrorV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8FileErrorAttributes[] = {
    {"code", FileErrorV8Internal::codeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8FileErrorTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "FileError", V8DOMError::domTemplate(isolate), V8FileError::internalFieldCount,
        V8FileErrorAttributes, WTF_ARRAY_LENGTH(V8FileErrorAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8FileErrorConstants[] = {
        {"NOT_FOUND_ERR", 1},
        {"SECURITY_ERR", 2},
        {"ABORT_ERR", 3},
        {"NOT_READABLE_ERR", 4},
        {"ENCODING_ERR", 5},
        {"NO_MODIFICATION_ALLOWED_ERR", 6},
        {"INVALID_STATE_ERR", 7},
        {"SYNTAX_ERR", 8},
        {"INVALID_MODIFICATION_ERR", 9},
        {"QUOTA_EXCEEDED_ERR", 10},
        {"TYPE_MISMATCH_ERR", 11},
        {"PATH_EXISTS_ERR", 12},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8FileErrorConstants, WTF_ARRAY_LENGTH(V8FileErrorConstants), isolate);
    COMPILE_ASSERT(1 == FileError::NOT_FOUND_ERR, TheValueOfFileError_NOT_FOUND_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == FileError::SECURITY_ERR, TheValueOfFileError_SECURITY_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == FileError::ABORT_ERR, TheValueOfFileError_ABORT_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == FileError::NOT_READABLE_ERR, TheValueOfFileError_NOT_READABLE_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == FileError::ENCODING_ERR, TheValueOfFileError_ENCODING_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(6 == FileError::NO_MODIFICATION_ALLOWED_ERR, TheValueOfFileError_NO_MODIFICATION_ALLOWED_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == FileError::INVALID_STATE_ERR, TheValueOfFileError_INVALID_STATE_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == FileError::SYNTAX_ERR, TheValueOfFileError_SYNTAX_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(9 == FileError::INVALID_MODIFICATION_ERR, TheValueOfFileError_INVALID_MODIFICATION_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(10 == FileError::QUOTA_EXCEEDED_ERR, TheValueOfFileError_QUOTA_EXCEEDED_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(11 == FileError::TYPE_MISMATCH_ERR, TheValueOfFileError_TYPE_MISMATCH_ERRDoesntMatchWithImplementation);
    COMPILE_ASSERT(12 == FileError::PATH_EXISTS_ERR, TheValueOfFileError_PATH_EXISTS_ERRDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8FileError::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8FileErrorTemplate);
}

bool V8FileError::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8FileError::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

FileError* V8FileError::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(FileError* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8FileError>(impl, isolate));
    return V8FileError::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8FileError::createWrapper(PassRefPtrWillBeRawPtr<FileError> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8FileError>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8FileError>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8FileError::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(FileError* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
