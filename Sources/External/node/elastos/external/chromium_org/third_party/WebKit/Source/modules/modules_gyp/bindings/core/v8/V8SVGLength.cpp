// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGLength.h"

#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGLengthTearOff* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGLength::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGLengthTearOff* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGLength::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGLength::domTemplate, V8SVGLength::derefObject, 0, 0, V8SVGLength::visitDOMWrapper, V8SVGLength::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace SVGLengthTearOffV8Internal {

template <typename T> void V8_USE(T) { }

static void unitTypeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->unitType());
}

static void unitTypeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGLengthTearOffV8Internal::unitTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void valueAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "value", "SVGLength", holder, info.GetIsolate());
    float v8Value = impl->value(exceptionState);
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValue(info, v8Value);
}

static void valueAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGLengthTearOffV8Internal::valueAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void valueAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "value", "SVGLength", holder, info.GetIsolate());
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    TONATIVE_VOID(float, cppValue, static_cast<float>(v8Value->NumberValue()));
    impl->setValue(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void valueAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGLengthTearOffV8Internal::valueAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void valueInSpecifiedUnitsAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    v8SetReturnValue(info, impl->valueInSpecifiedUnits());
}

static void valueInSpecifiedUnitsAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void valueInSpecifiedUnitsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "valueInSpecifiedUnits", "SVGLength", holder, info.GetIsolate());
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    TONATIVE_VOID(float, cppValue, static_cast<float>(v8Value->NumberValue()));
    impl->setValueInSpecifiedUnits(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void valueInSpecifiedUnitsAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void valueAsStringAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    v8SetReturnValueString(info, impl->valueAsString(), info.GetIsolate());
}

static void valueAsStringAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGLengthTearOffV8Internal::valueAsStringAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void valueAsStringAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "valueAsString", "SVGLength", holder, info.GetIsolate());
    SVGLengthTearOff* impl = V8SVGLength::toNative(holder);
    TOSTRING_VOID(V8StringResource<WithNullCheck>, cppValue, v8Value);
    impl->setValueAsString(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void valueAsStringAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGLengthTearOffV8Internal::valueAsStringAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void newValueSpecifiedUnitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "newValueSpecifiedUnits", "SVGLength", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    SVGLengthTearOff* impl = V8SVGLength::toNative(info.Holder());
    unsigned unitType;
    float valueInSpecifiedUnits;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(unitType, toUInt16(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(valueInSpecifiedUnits, static_cast<float>(info[1]->NumberValue()));
    }
    impl->newValueSpecifiedUnits(unitType, valueInSpecifiedUnits, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void newValueSpecifiedUnitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGLengthTearOffV8Internal::newValueSpecifiedUnitsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void convertToSpecifiedUnitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "convertToSpecifiedUnits", "SVGLength", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    SVGLengthTearOff* impl = V8SVGLength::toNative(info.Holder());
    unsigned unitType;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(unitType, toUInt16(info[0], exceptionState), exceptionState);
    }
    impl->convertToSpecifiedUnits(unitType, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void convertToSpecifiedUnitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGLengthTearOffV8Internal::convertToSpecifiedUnitsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SVGLengthTearOffV8Internal

void V8SVGLength::visitDOMWrapper(void* object, const v8::Persistent<v8::Object>& wrapper, v8::Isolate* isolate)
{
    SVGLengthTearOff* impl = fromInternalPointer(object);
    v8::Local<v8::Object> creationContext = v8::Local<v8::Object>::New(isolate, wrapper);
    V8WrapperInstantiationScope scope(creationContext, isolate);
    SVGElement* contextElement = impl->contextElement();
    if (contextElement) {
        if (!DOMDataStore::containsWrapper<V8SVGElement>(contextElement, isolate))
            wrap(contextElement, creationContext, isolate);
        DOMDataStore::setWrapperReference<V8SVGElement>(wrapper, contextElement, isolate);
    }
    setObjectGroup(object, wrapper, isolate);
}

static const V8DOMConfiguration::AttributeConfiguration V8SVGLengthAttributes[] = {
    {"unitType", SVGLengthTearOffV8Internal::unitTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"value", SVGLengthTearOffV8Internal::valueAttributeGetterCallback, SVGLengthTearOffV8Internal::valueAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"valueInSpecifiedUnits", SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeGetterCallback, SVGLengthTearOffV8Internal::valueInSpecifiedUnitsAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"valueAsString", SVGLengthTearOffV8Internal::valueAsStringAttributeGetterCallback, SVGLengthTearOffV8Internal::valueAsStringAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8SVGLengthMethods[] = {
    {"newValueSpecifiedUnits", SVGLengthTearOffV8Internal::newValueSpecifiedUnitsMethodCallback, 0, 2},
    {"convertToSpecifiedUnits", SVGLengthTearOffV8Internal::convertToSpecifiedUnitsMethodCallback, 0, 1},
};

static void configureV8SVGLengthTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGLength", v8::Local<v8::FunctionTemplate>(), V8SVGLength::internalFieldCount,
        V8SVGLengthAttributes, WTF_ARRAY_LENGTH(V8SVGLengthAttributes),
        0, 0,
        V8SVGLengthMethods, WTF_ARRAY_LENGTH(V8SVGLengthMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8SVGLengthConstants[] = {
        {"SVG_LENGTHTYPE_UNKNOWN", 0},
        {"SVG_LENGTHTYPE_NUMBER", 1},
        {"SVG_LENGTHTYPE_PERCENTAGE", 2},
        {"SVG_LENGTHTYPE_EMS", 3},
        {"SVG_LENGTHTYPE_EXS", 4},
        {"SVG_LENGTHTYPE_PX", 5},
        {"SVG_LENGTHTYPE_CM", 6},
        {"SVG_LENGTHTYPE_MM", 7},
        {"SVG_LENGTHTYPE_IN", 8},
        {"SVG_LENGTHTYPE_PT", 9},
        {"SVG_LENGTHTYPE_PC", 10},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8SVGLengthConstants, WTF_ARRAY_LENGTH(V8SVGLengthConstants), isolate);
    COMPILE_ASSERT(0 == SVGLengthTearOff::SVG_LENGTHTYPE_UNKNOWN, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGLengthTearOff::SVG_LENGTHTYPE_NUMBER, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_NUMBERDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGLengthTearOff::SVG_LENGTHTYPE_PERCENTAGE, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_PERCENTAGEDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == SVGLengthTearOff::SVG_LENGTHTYPE_EMS, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_EMSDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == SVGLengthTearOff::SVG_LENGTHTYPE_EXS, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_EXSDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == SVGLengthTearOff::SVG_LENGTHTYPE_PX, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_PXDoesntMatchWithImplementation);
    COMPILE_ASSERT(6 == SVGLengthTearOff::SVG_LENGTHTYPE_CM, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_CMDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == SVGLengthTearOff::SVG_LENGTHTYPE_MM, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_MMDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == SVGLengthTearOff::SVG_LENGTHTYPE_IN, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_INDoesntMatchWithImplementation);
    COMPILE_ASSERT(9 == SVGLengthTearOff::SVG_LENGTHTYPE_PT, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_PTDoesntMatchWithImplementation);
    COMPILE_ASSERT(10 == SVGLengthTearOff::SVG_LENGTHTYPE_PC, TheValueOfSVGLengthTearOff_SVG_LENGTHTYPE_PCDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGLength::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGLengthTemplate);
}

bool V8SVGLength::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGLength::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGLengthTearOff* V8SVGLength::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(SVGLengthTearOff* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGLength>(impl, isolate));
    return V8SVGLength::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SVGLength::createWrapper(PassRefPtr<SVGLengthTearOff> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGLength>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGLength>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGLength::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGLengthTearOff* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
