// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGMarkerElement.h"

#include "bindings/core/v8/V8SVGAngle.h"
#include "bindings/core/v8/V8SVGAnimatedAngle.h"
#include "bindings/core/v8/V8SVGAnimatedEnumeration.h"
#include "bindings/core/v8/V8SVGAnimatedLength.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGMarkerElement* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGMarkerElement::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGMarkerElement* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGMarkerElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGMarkerElement::domTemplate, V8SVGMarkerElement::derefObject, 0, V8SVGMarkerElement::toEventTarget, 0, V8SVGMarkerElement::installPerContextEnabledMethods, &V8SVGElement::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace SVGMarkerElementV8Internal {

template <typename T> void V8_USE(T) { }

static void refXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->refX()), impl);
}

static void refXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::refXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void refYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->refY()), impl);
}

static void refYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::refYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void markerUnitsAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->markerUnits()), impl);
}

static void markerUnitsAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::markerUnitsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void markerWidthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->markerWidth()), impl);
}

static void markerWidthAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::markerWidthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void markerHeightAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->markerHeight()), impl);
}

static void markerHeightAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::markerHeightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void orientTypeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->orientType()), impl);
}

static void orientTypeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::orientTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void orientAngleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->orientAngle()), impl);
}

static void orientAngleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::orientAngleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void viewBoxAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewBox()), impl);
}

static void viewBoxAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::viewBoxAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void preserveAspectRatioAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->preserveAspectRatio()), impl);
}

static void preserveAspectRatioAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMarkerElementV8Internal::preserveAspectRatioAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setOrientToAutoMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(info.Holder());
    impl->setOrientToAuto();
}

static void setOrientToAutoMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMarkerElementV8Internal::setOrientToAutoMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setOrientToAngleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setOrientToAngle", "SVGMarkerElement", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGMarkerElement* impl = V8SVGMarkerElement::toNative(info.Holder());
    SVGAngleTearOff* angle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGAngle::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("setOrientToAngle", "SVGMarkerElement", "parameter 1 is not of type 'SVGAngle'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(angle, V8SVGAngle::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    impl->setOrientToAngle(angle);
}

static void setOrientToAngleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMarkerElementV8Internal::setOrientToAngleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SVGMarkerElementV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8SVGMarkerElementAttributes[] = {
    {"refX", SVGMarkerElementV8Internal::refXAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"refY", SVGMarkerElementV8Internal::refYAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"markerUnits", SVGMarkerElementV8Internal::markerUnitsAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"markerWidth", SVGMarkerElementV8Internal::markerWidthAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"markerHeight", SVGMarkerElementV8Internal::markerHeightAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"orientType", SVGMarkerElementV8Internal::orientTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"orientAngle", SVGMarkerElementV8Internal::orientAngleAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"viewBox", SVGMarkerElementV8Internal::viewBoxAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"preserveAspectRatio", SVGMarkerElementV8Internal::preserveAspectRatioAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8SVGMarkerElementMethods[] = {
    {"setOrientToAuto", SVGMarkerElementV8Internal::setOrientToAutoMethodCallback, 0, 0},
    {"setOrientToAngle", SVGMarkerElementV8Internal::setOrientToAngleMethodCallback, 0, 1},
};

static void configureV8SVGMarkerElementTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGMarkerElement", V8SVGElement::domTemplate(isolate), V8SVGMarkerElement::internalFieldCount,
        V8SVGMarkerElementAttributes, WTF_ARRAY_LENGTH(V8SVGMarkerElementAttributes),
        0, 0,
        V8SVGMarkerElementMethods, WTF_ARRAY_LENGTH(V8SVGMarkerElementMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8SVGMarkerElementConstants[] = {
        {"SVG_MARKERUNITS_UNKNOWN", 0},
        {"SVG_MARKERUNITS_USERSPACEONUSE", 1},
        {"SVG_MARKERUNITS_STROKEWIDTH", 2},
        {"SVG_MARKER_ORIENT_UNKNOWN", 0},
        {"SVG_MARKER_ORIENT_AUTO", 1},
        {"SVG_MARKER_ORIENT_ANGLE", 2},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8SVGMarkerElementConstants, WTF_ARRAY_LENGTH(V8SVGMarkerElementConstants), isolate);
    COMPILE_ASSERT(0 == SVGMarkerElement::SVG_MARKERUNITS_UNKNOWN, TheValueOfSVGMarkerElement_SVG_MARKERUNITS_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGMarkerElement::SVG_MARKERUNITS_USERSPACEONUSE, TheValueOfSVGMarkerElement_SVG_MARKERUNITS_USERSPACEONUSEDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGMarkerElement::SVG_MARKERUNITS_STROKEWIDTH, TheValueOfSVGMarkerElement_SVG_MARKERUNITS_STROKEWIDTHDoesntMatchWithImplementation);
    COMPILE_ASSERT(0 == SVGMarkerElement::SVG_MARKER_ORIENT_UNKNOWN, TheValueOfSVGMarkerElement_SVG_MARKER_ORIENT_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGMarkerElement::SVG_MARKER_ORIENT_AUTO, TheValueOfSVGMarkerElement_SVG_MARKER_ORIENT_AUTODoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGMarkerElement::SVG_MARKER_ORIENT_ANGLE, TheValueOfSVGMarkerElement_SVG_MARKER_ORIENT_ANGLEDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGMarkerElement::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGMarkerElementTemplate);
}

bool V8SVGMarkerElement::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGMarkerElement::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGMarkerElement* V8SVGMarkerElement::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

EventTarget* V8SVGMarkerElement::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(SVGMarkerElement* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGMarkerElement>(impl, isolate));
    return V8SVGMarkerElement::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SVGMarkerElement::createWrapper(PassRefPtrWillBeRawPtr<SVGMarkerElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGMarkerElement>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGMarkerElement>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGMarkerElement::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGMarkerElement* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
