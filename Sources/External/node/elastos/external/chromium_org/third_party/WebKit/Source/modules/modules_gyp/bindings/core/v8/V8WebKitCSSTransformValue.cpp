// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WebKitCSSTransformValue.h"

#include "bindings/core/v8/V8CSSValue.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(CSSTransformValue* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8WebKitCSSTransformValue::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::CSSTransformValue* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8WebKitCSSTransformValue::wrapperTypeInfo = { gin::kEmbedderBlink, V8WebKitCSSTransformValue::domTemplate, V8WebKitCSSTransformValue::derefObject, 0, 0, 0, V8WebKitCSSTransformValue::installPerContextEnabledMethods, &V8CSSValueList::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace CSSTransformValueV8Internal {

template <typename T> void V8_USE(T) { }

static void operationTypeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    CSSTransformValue* impl = V8WebKitCSSTransformValue::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->operationType());
}

static void operationTypeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    CSSTransformValueV8Internal::operationTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void indexedPropertyGetter(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    CSSTransformValue* impl = V8WebKitCSSTransformValue::toNative(info.Holder());
    RefPtrWillBeRawPtr<CSSValue> result = impl->item(index);
    if (!result)
        return;
    v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
}

static void indexedPropertyGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMIndexedProperty");
    CSSTransformValueV8Internal::indexedPropertyGetter(index, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace CSSTransformValueV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8WebKitCSSTransformValueAttributes[] = {
    {"operationType", CSSTransformValueV8Internal::operationTypeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8WebKitCSSTransformValueTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "WebKitCSSTransformValue", V8CSSValueList::domTemplate(isolate), V8WebKitCSSTransformValue::internalFieldCount,
        V8WebKitCSSTransformValueAttributes, WTF_ARRAY_LENGTH(V8WebKitCSSTransformValueAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8WebKitCSSTransformValueConstants[] = {
        {"CSS_TRANSLATE", 1},
        {"CSS_TRANSLATEX", 2},
        {"CSS_TRANSLATEY", 3},
        {"CSS_ROTATE", 4},
        {"CSS_SCALE", 5},
        {"CSS_SCALEX", 6},
        {"CSS_SCALEY", 7},
        {"CSS_SKEW", 8},
        {"CSS_SKEWX", 9},
        {"CSS_SKEWY", 10},
        {"CSS_MATRIX", 11},
        {"CSS_TRANSLATEZ", 12},
        {"CSS_TRANSLATE3D", 13},
        {"CSS_ROTATEX", 14},
        {"CSS_ROTATEY", 15},
        {"CSS_ROTATEZ", 16},
        {"CSS_ROTATE3D", 17},
        {"CSS_SCALEZ", 18},
        {"CSS_SCALE3D", 19},
        {"CSS_PERSPECTIVE", 20},
        {"CSS_MATRIX3D", 21},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8WebKitCSSTransformValueConstants, WTF_ARRAY_LENGTH(V8WebKitCSSTransformValueConstants), isolate);
    functionTemplate->InstanceTemplate()->SetIndexedPropertyHandler(CSSTransformValueV8Internal::indexedPropertyGetterCallback, 0, 0, 0, indexedPropertyEnumerator<CSSTransformValue>);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8WebKitCSSTransformValue::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8WebKitCSSTransformValueTemplate);
}

bool V8WebKitCSSTransformValue::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8WebKitCSSTransformValue::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSTransformValue* V8WebKitCSSTransformValue::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(CSSTransformValue* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8WebKitCSSTransformValue>(impl, isolate));
    return V8WebKitCSSTransformValue::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8WebKitCSSTransformValue::createWrapper(PassRefPtrWillBeRawPtr<CSSTransformValue> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8WebKitCSSTransformValue>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8WebKitCSSTransformValue>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8WebKitCSSTransformValue::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(CSSTransformValue* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
