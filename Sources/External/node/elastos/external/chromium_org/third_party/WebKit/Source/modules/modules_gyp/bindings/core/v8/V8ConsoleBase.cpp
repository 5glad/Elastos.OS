// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8ConsoleBase.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptCallStackFactory.h"
#include "bindings/v8/ScriptState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "core/inspector/ScriptArguments.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(ConsoleBase* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8ConsoleBase::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::ConsoleBase* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8ConsoleBase::wrapperTypeInfo = { gin::kEmbedderBlink, V8ConsoleBase::domTemplate, V8ConsoleBase::derefObject, 0, 0, 0, V8ConsoleBase::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace ConsoleBaseV8Internal {

template <typename T> void V8_USE(T) { }

static void debugMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->debug(scriptState, scriptArguments.release());
}

static void debugMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::debugMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void errorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->error(scriptState, scriptArguments.release());
}

static void errorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::errorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void infoMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->info(scriptState, scriptArguments.release());
}

static void infoMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::infoMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void logMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->log(scriptState, scriptArguments.release());
}

static void logMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::logMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void warnMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->warn(scriptState, scriptArguments.release());
}

static void warnMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::warnMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void dirMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->dir(scriptState, scriptArguments.release());
}

static void dirMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::dirMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void dirxmlMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->dirxml(scriptState, scriptArguments.release());
}

static void dirxmlMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::dirxmlMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void tableMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->table(scriptState, scriptArguments.release());
}

static void tableMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::tableMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void traceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->trace(scriptState, scriptArguments.release());
}

static void traceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::traceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void assertMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    bool condition;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(condition, info[0]->BooleanValue());
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 1));
    impl->assertCondition(scriptState, scriptArguments.release(), condition);
}

static void assertMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::assertMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void countMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->count(scriptState, scriptArguments.release());
}

static void countMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::countMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void markTimelineMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    impl->markTimeline(title);
}

static void markTimelineMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::ConsoleMarkTimeline);
    ConsoleBaseV8Internal::markTimelineMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void profileMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    impl->profile(scriptState, title);
}

static void profileMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::profileMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void profileEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    impl->profileEnd(scriptState, title);
}

static void profileEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::profileEndMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    impl->time(title);
}

static void timeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::timeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timeEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    impl->timeEnd(scriptState, title);
}

static void timeEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::timeEndMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timeStampMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    impl->timeStamp(title);
}

static void timeStampMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::timeStampMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timelineMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    impl->timeline(scriptState, title);
}

static void timelineMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::timelineMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timelineEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    impl->timelineEnd(scriptState, title);
}

static void timelineEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::timelineEndMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void groupMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->group(scriptState, scriptArguments.release());
}

static void groupMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::groupMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void groupCollapsedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->groupCollapsed(scriptState, scriptArguments.release());
}

static void groupCollapsedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::groupCollapsedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void groupEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    impl->groupEnd();
}

static void groupEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::groupEndMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ConsoleBase* impl = V8ConsoleBase::toNative(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    RefPtrWillBeRawPtr<ScriptArguments> scriptArguments(createScriptArguments(scriptState, info, 0));
    impl->clear(scriptState, scriptArguments.release());
}

static void clearMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ConsoleBaseV8Internal::clearMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace ConsoleBaseV8Internal

static const V8DOMConfiguration::MethodConfiguration V8ConsoleBaseMethods[] = {
    {"debug", ConsoleBaseV8Internal::debugMethodCallback, 0, 0},
    {"error", ConsoleBaseV8Internal::errorMethodCallback, 0, 0},
    {"info", ConsoleBaseV8Internal::infoMethodCallback, 0, 0},
    {"log", ConsoleBaseV8Internal::logMethodCallback, 0, 0},
    {"warn", ConsoleBaseV8Internal::warnMethodCallback, 0, 0},
    {"dir", ConsoleBaseV8Internal::dirMethodCallback, 0, 0},
    {"dirxml", ConsoleBaseV8Internal::dirxmlMethodCallback, 0, 0},
    {"table", ConsoleBaseV8Internal::tableMethodCallback, 0, 0},
    {"trace", ConsoleBaseV8Internal::traceMethodCallback, 0, 0},
    {"assert", ConsoleBaseV8Internal::assertMethodCallback, 0, 0},
    {"count", ConsoleBaseV8Internal::countMethodCallback, 0, 0},
    {"markTimeline", ConsoleBaseV8Internal::markTimelineMethodCallback, 0, 0},
    {"profile", ConsoleBaseV8Internal::profileMethodCallback, 0, 0},
    {"profileEnd", ConsoleBaseV8Internal::profileEndMethodCallback, 0, 0},
    {"time", ConsoleBaseV8Internal::timeMethodCallback, 0, 0},
    {"timeEnd", ConsoleBaseV8Internal::timeEndMethodCallback, 0, 0},
    {"timeStamp", ConsoleBaseV8Internal::timeStampMethodCallback, 0, 0},
    {"timeline", ConsoleBaseV8Internal::timelineMethodCallback, 0, 0},
    {"timelineEnd", ConsoleBaseV8Internal::timelineEndMethodCallback, 0, 0},
    {"group", ConsoleBaseV8Internal::groupMethodCallback, 0, 0},
    {"groupCollapsed", ConsoleBaseV8Internal::groupCollapsedMethodCallback, 0, 0},
    {"groupEnd", ConsoleBaseV8Internal::groupEndMethodCallback, 0, 0},
    {"clear", ConsoleBaseV8Internal::clearMethodCallback, 0, 0},
};

static void configureV8ConsoleBaseTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "ConsoleBase", v8::Local<v8::FunctionTemplate>(), V8ConsoleBase::internalFieldCount,
        0, 0,
        0, 0,
        V8ConsoleBaseMethods, WTF_ARRAY_LENGTH(V8ConsoleBaseMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8ConsoleBase::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8ConsoleBaseTemplate);
}

bool V8ConsoleBase::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8ConsoleBase::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ConsoleBase* V8ConsoleBase::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(ConsoleBase* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8ConsoleBase>(impl, isolate));
    return V8ConsoleBase::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8ConsoleBase::createWrapper(PassRefPtrWillBeRawPtr<ConsoleBase> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8ConsoleBase>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8ConsoleBase>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8ConsoleBase::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(ConsoleBase* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
