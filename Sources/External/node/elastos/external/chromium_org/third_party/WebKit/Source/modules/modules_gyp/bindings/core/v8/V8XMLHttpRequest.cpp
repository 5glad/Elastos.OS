// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8XMLHttpRequest.h"

#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8XMLHttpRequestUpload.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMActivityLogger.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(XMLHttpRequest* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8XMLHttpRequest::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::XMLHttpRequest* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8XMLHttpRequest::wrapperTypeInfo = { gin::kEmbedderBlink, V8XMLHttpRequest::domTemplate, V8XMLHttpRequest::derefObject, V8XMLHttpRequest::toActiveDOMObject, V8XMLHttpRequest::toEventTarget, 0, V8XMLHttpRequest::installPerContextEnabledMethods, &V8XMLHttpRequestEventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace XMLHttpRequestV8Internal {

template <typename T> void V8_USE(T) { }

static void onreadystatechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    EventListener* v8Value = impl->onreadystatechange();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onreadystatechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::onreadystatechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onreadystatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onreadystatechange(), v8Value, V8XMLHttpRequest::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnreadystatechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onreadystatechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    XMLHttpRequestV8Internal::onreadystatechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timeoutAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->timeout());
}

static void timeoutAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::timeoutAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timeoutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "timeout", "XMLHttpRequest", holder, info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt32(v8Value, exceptionState), exceptionState);
    impl->setTimeout(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void timeoutAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    XMLHttpRequestV8Internal::timeoutAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void readyStateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->readyState());
}

static void readyStateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::readyStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void withCredentialsAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueBool(info, impl->withCredentials());
}

static void withCredentialsAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::withCredentialsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void withCredentialsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "withCredentials", "XMLHttpRequest", holder, info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    TONATIVE_VOID(bool, cppValue, v8Value->BooleanValue());
    impl->setWithCredentials(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void withCredentialsAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    XMLHttpRequestV8Internal::withCredentialsAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void uploadAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    RefPtrWillBeRawPtr<XMLHttpRequestUpload> result(impl->upload());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8XMLHttpRequestUpload>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "upload"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void uploadAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::uploadAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void responseTextAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    V8XMLHttpRequest::responseTextAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void responseXMLAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "responseXML", "XMLHttpRequest", holder, info.GetIsolate());
    RefPtrWillBeRawPtr<Document> v8Value = impl->responseXML(exceptionState);
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    v8SetReturnValueFast(info, WTF::getPtr(v8Value.release()), impl);
}

static void responseXMLAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::responseXMLAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void responseTypeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueString(info, impl->responseType(), info.GetIsolate());
}

static void responseTypeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::responseTypeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void responseTypeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "responseType", "XMLHttpRequest", holder, info.GetIsolate());
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    String string = cppValue;
    if (!(string == "" || string == "arraybuffer" || string == "blob" || string == "document" || string == "json" || string == "text" || string == "stream"))
        return;
    impl->setResponseType(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void responseTypeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    XMLHttpRequestV8Internal::responseTypeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void responseAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    V8XMLHttpRequest::responseAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void responseURLAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueString(info, impl->responseURL(), info.GetIsolate());
}

static void responseURLAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::responseURLAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void statusAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->status());
}

static void statusAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::statusAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void statusTextAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(holder);
    v8SetReturnValueString(info, impl->statusText(), info.GetIsolate());
}

static void statusTextAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    XMLHttpRequestV8Internal::statusTextAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (contextData && contextData->activityLogger()) {
        Vector<v8::Handle<v8::Value> > loggerArgs = toNativeArguments<v8::Handle<v8::Value> >(info, 0);
        contextData->activityLogger()->logMethod("XMLHttpRequest.open", info.Length(), loggerArgs.data());
    }
    V8XMLHttpRequest::openMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setRequestHeaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRequestHeader", "XMLHttpRequest", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(info.Holder());
    V8StringResource<> header;
    V8StringResource<> value;
    {
        TOSTRING_VOID_INTERNAL(header, info[0]);
        TOSTRING_VOID_INTERNAL(value, info[1]);
    }
    impl->setRequestHeader(header, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setRequestHeaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (contextData && contextData->activityLogger()) {
        Vector<v8::Handle<v8::Value> > loggerArgs = toNativeArguments<v8::Handle<v8::Value> >(info, 0);
        contextData->activityLogger()->logMethod("XMLHttpRequest.setRequestHeader", info.Length(), loggerArgs.data());
    }
    XMLHttpRequestV8Internal::setRequestHeaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sendMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8XMLHttpRequest::sendMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void abortMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(info.Holder());
    impl->abort();
}

static void abortMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    XMLHttpRequestV8Internal::abortMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getAllResponseHeadersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(info.Holder());
    v8SetReturnValueStringOrUndefined(info, impl->getAllResponseHeaders(), info.GetIsolate());
}

static void getAllResponseHeadersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    XMLHttpRequestV8Internal::getAllResponseHeadersMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getResponseHeaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getResponseHeader", "XMLHttpRequest", 1, info.Length(), info.GetIsolate());
        return;
    }
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(info.Holder());
    V8StringResource<> header;
    {
        TOSTRING_VOID_INTERNAL(header, info[0]);
    }
    v8SetReturnValueStringOrNull(info, impl->getResponseHeader(header), info.GetIsolate());
}

static void getResponseHeaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    XMLHttpRequestV8Internal::getResponseHeaderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void overrideMimeTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("overrideMimeType", "XMLHttpRequest", 1, info.Length(), info.GetIsolate());
        return;
    }
    XMLHttpRequest* impl = V8XMLHttpRequest::toNative(info.Holder());
    V8StringResource<> override;
    {
        TOSTRING_VOID_INTERNAL(override, info[0]);
    }
    impl->overrideMimeType(override);
}

static void overrideMimeTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    XMLHttpRequestV8Internal::overrideMimeTypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace XMLHttpRequestV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8XMLHttpRequestAttributes[] = {
    {"onreadystatechange", XMLHttpRequestV8Internal::onreadystatechangeAttributeGetterCallback, XMLHttpRequestV8Internal::onreadystatechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"timeout", XMLHttpRequestV8Internal::timeoutAttributeGetterCallback, XMLHttpRequestV8Internal::timeoutAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"readyState", XMLHttpRequestV8Internal::readyStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"withCredentials", XMLHttpRequestV8Internal::withCredentialsAttributeGetterCallback, XMLHttpRequestV8Internal::withCredentialsAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"upload", XMLHttpRequestV8Internal::uploadAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"responseText", XMLHttpRequestV8Internal::responseTextAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"responseXML", XMLHttpRequestV8Internal::responseXMLAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"responseType", XMLHttpRequestV8Internal::responseTypeAttributeGetterCallback, XMLHttpRequestV8Internal::responseTypeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"response", XMLHttpRequestV8Internal::responseAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"responseURL", XMLHttpRequestV8Internal::responseURLAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"status", XMLHttpRequestV8Internal::statusAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"statusText", XMLHttpRequestV8Internal::statusTextAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8XMLHttpRequestMethods[] = {
    {"open", XMLHttpRequestV8Internal::openMethodCallback, 0, 2},
    {"setRequestHeader", XMLHttpRequestV8Internal::setRequestHeaderMethodCallback, 0, 2},
    {"send", XMLHttpRequestV8Internal::sendMethodCallback, 0, 0},
    {"abort", XMLHttpRequestV8Internal::abortMethodCallback, 0, 0},
    {"getAllResponseHeaders", XMLHttpRequestV8Internal::getAllResponseHeadersMethodCallback, 0, 0},
    {"getResponseHeader", XMLHttpRequestV8Internal::getResponseHeaderMethodCallback, 0, 1},
    {"overrideMimeType", XMLHttpRequestV8Internal::overrideMimeTypeMethodCallback, 0, 1},
};

void V8XMLHttpRequest::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("XMLHttpRequest"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    V8XMLHttpRequest::constructorCustom(info);
}

static void configureV8XMLHttpRequestTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "XMLHttpRequest", V8XMLHttpRequestEventTarget::domTemplate(isolate), V8XMLHttpRequest::internalFieldCount,
        V8XMLHttpRequestAttributes, WTF_ARRAY_LENGTH(V8XMLHttpRequestAttributes),
        0, 0,
        V8XMLHttpRequestMethods, WTF_ARRAY_LENGTH(V8XMLHttpRequestMethods),
        isolate);
    functionTemplate->SetCallHandler(V8XMLHttpRequest::constructorCallback);
    functionTemplate->SetLength(0);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8XMLHttpRequestConstants[] = {
        {"UNSENT", 0},
        {"OPENED", 1},
        {"HEADERS_RECEIVED", 2},
        {"LOADING", 3},
        {"DONE", 4},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8XMLHttpRequestConstants, WTF_ARRAY_LENGTH(V8XMLHttpRequestConstants), isolate);
    COMPILE_ASSERT(0 == XMLHttpRequest::UNSENT, TheValueOfXMLHttpRequest_UNSENTDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == XMLHttpRequest::OPENED, TheValueOfXMLHttpRequest_OPENEDDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == XMLHttpRequest::HEADERS_RECEIVED, TheValueOfXMLHttpRequest_HEADERS_RECEIVEDDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == XMLHttpRequest::LOADING, TheValueOfXMLHttpRequest_LOADINGDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == XMLHttpRequest::DONE, TheValueOfXMLHttpRequest_DONEDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8XMLHttpRequest::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8XMLHttpRequestTemplate);
}

bool V8XMLHttpRequest::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8XMLHttpRequest::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

XMLHttpRequest* V8XMLHttpRequest::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

ActiveDOMObject* V8XMLHttpRequest::toActiveDOMObject(v8::Handle<v8::Object> wrapper)
{
    return toNative(wrapper);
}

EventTarget* V8XMLHttpRequest::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(XMLHttpRequest* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8XMLHttpRequest>(impl, isolate));
    return V8XMLHttpRequest::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8XMLHttpRequest::createWrapper(PassRefPtrWillBeRawPtr<XMLHttpRequest> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8XMLHttpRequest>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8XMLHttpRequest>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8XMLHttpRequest::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(XMLHttpRequest* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
