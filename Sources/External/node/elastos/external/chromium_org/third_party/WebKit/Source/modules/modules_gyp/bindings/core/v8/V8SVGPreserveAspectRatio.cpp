// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGPreserveAspectRatio.h"

#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGPreserveAspectRatioTearOff* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGPreserveAspectRatio::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGPreserveAspectRatioTearOff* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGPreserveAspectRatio::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGPreserveAspectRatio::domTemplate, V8SVGPreserveAspectRatio::derefObject, 0, 0, V8SVGPreserveAspectRatio::visitDOMWrapper, V8SVGPreserveAspectRatio::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace SVGPreserveAspectRatioTearOffV8Internal {

template <typename T> void V8_USE(T) { }

static void alignAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGPreserveAspectRatioTearOff* impl = V8SVGPreserveAspectRatio::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->align());
}

static void alignAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGPreserveAspectRatioTearOffV8Internal::alignAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void alignAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "align", "SVGPreserveAspectRatio", holder, info.GetIsolate());
    SVGPreserveAspectRatioTearOff* impl = V8SVGPreserveAspectRatio::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt16(v8Value, exceptionState), exceptionState);
    impl->setAlign(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void alignAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGPreserveAspectRatioTearOffV8Internal::alignAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void meetOrSliceAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGPreserveAspectRatioTearOff* impl = V8SVGPreserveAspectRatio::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->meetOrSlice());
}

static void meetOrSliceAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGPreserveAspectRatioTearOffV8Internal::meetOrSliceAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void meetOrSliceAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "meetOrSlice", "SVGPreserveAspectRatio", holder, info.GetIsolate());
    SVGPreserveAspectRatioTearOff* impl = V8SVGPreserveAspectRatio::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt16(v8Value, exceptionState), exceptionState);
    impl->setMeetOrSlice(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void meetOrSliceAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGPreserveAspectRatioTearOffV8Internal::meetOrSliceAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SVGPreserveAspectRatioTearOffV8Internal

void V8SVGPreserveAspectRatio::visitDOMWrapper(void* object, const v8::Persistent<v8::Object>& wrapper, v8::Isolate* isolate)
{
    SVGPreserveAspectRatioTearOff* impl = fromInternalPointer(object);
    v8::Local<v8::Object> creationContext = v8::Local<v8::Object>::New(isolate, wrapper);
    V8WrapperInstantiationScope scope(creationContext, isolate);
    SVGElement* contextElement = impl->contextElement();
    if (contextElement) {
        if (!DOMDataStore::containsWrapper<V8SVGElement>(contextElement, isolate))
            wrap(contextElement, creationContext, isolate);
        DOMDataStore::setWrapperReference<V8SVGElement>(wrapper, contextElement, isolate);
    }
    setObjectGroup(object, wrapper, isolate);
}

static const V8DOMConfiguration::AttributeConfiguration V8SVGPreserveAspectRatioAttributes[] = {
    {"align", SVGPreserveAspectRatioTearOffV8Internal::alignAttributeGetterCallback, SVGPreserveAspectRatioTearOffV8Internal::alignAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"meetOrSlice", SVGPreserveAspectRatioTearOffV8Internal::meetOrSliceAttributeGetterCallback, SVGPreserveAspectRatioTearOffV8Internal::meetOrSliceAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8SVGPreserveAspectRatioTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGPreserveAspectRatio", v8::Local<v8::FunctionTemplate>(), V8SVGPreserveAspectRatio::internalFieldCount,
        V8SVGPreserveAspectRatioAttributes, WTF_ARRAY_LENGTH(V8SVGPreserveAspectRatioAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8SVGPreserveAspectRatioConstants[] = {
        {"SVG_PRESERVEASPECTRATIO_UNKNOWN", 0},
        {"SVG_PRESERVEASPECTRATIO_NONE", 1},
        {"SVG_PRESERVEASPECTRATIO_XMINYMIN", 2},
        {"SVG_PRESERVEASPECTRATIO_XMIDYMIN", 3},
        {"SVG_PRESERVEASPECTRATIO_XMAXYMIN", 4},
        {"SVG_PRESERVEASPECTRATIO_XMINYMID", 5},
        {"SVG_PRESERVEASPECTRATIO_XMIDYMID", 6},
        {"SVG_PRESERVEASPECTRATIO_XMAXYMID", 7},
        {"SVG_PRESERVEASPECTRATIO_XMINYMAX", 8},
        {"SVG_PRESERVEASPECTRATIO_XMIDYMAX", 9},
        {"SVG_PRESERVEASPECTRATIO_XMAXYMAX", 10},
        {"SVG_MEETORSLICE_UNKNOWN", 0},
        {"SVG_MEETORSLICE_MEET", 1},
        {"SVG_MEETORSLICE_SLICE", 2},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8SVGPreserveAspectRatioConstants, WTF_ARRAY_LENGTH(V8SVGPreserveAspectRatioConstants), isolate);
    COMPILE_ASSERT(0 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_UNKNOWN, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_NONE, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_NONEDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMINYMIN, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMINYMINDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMIDYMIN, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMIDYMINDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMAXYMIN, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMAXYMINDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMINYMID, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMINYMIDDoesntMatchWithImplementation);
    COMPILE_ASSERT(6 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMIDYMID, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMIDYMIDDoesntMatchWithImplementation);
    COMPILE_ASSERT(7 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMAXYMID, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMAXYMIDDoesntMatchWithImplementation);
    COMPILE_ASSERT(8 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMINYMAX, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMINYMAXDoesntMatchWithImplementation);
    COMPILE_ASSERT(9 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMIDYMAX, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMIDYMAXDoesntMatchWithImplementation);
    COMPILE_ASSERT(10 == SVGPreserveAspectRatioTearOff::SVG_PRESERVEASPECTRATIO_XMAXYMAX, TheValueOfSVGPreserveAspectRatioTearOff_SVG_PRESERVEASPECTRATIO_XMAXYMAXDoesntMatchWithImplementation);
    COMPILE_ASSERT(0 == SVGPreserveAspectRatioTearOff::SVG_MEETORSLICE_UNKNOWN, TheValueOfSVGPreserveAspectRatioTearOff_SVG_MEETORSLICE_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGPreserveAspectRatioTearOff::SVG_MEETORSLICE_MEET, TheValueOfSVGPreserveAspectRatioTearOff_SVG_MEETORSLICE_MEETDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGPreserveAspectRatioTearOff::SVG_MEETORSLICE_SLICE, TheValueOfSVGPreserveAspectRatioTearOff_SVG_MEETORSLICE_SLICEDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGPreserveAspectRatio::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGPreserveAspectRatioTemplate);
}

bool V8SVGPreserveAspectRatio::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGPreserveAspectRatio::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGPreserveAspectRatioTearOff* V8SVGPreserveAspectRatio::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(SVGPreserveAspectRatioTearOff* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGPreserveAspectRatio>(impl, isolate));
    return V8SVGPreserveAspectRatio::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SVGPreserveAspectRatio::createWrapper(PassRefPtr<SVGPreserveAspectRatioTearOff> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGPreserveAspectRatio>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGPreserveAspectRatio>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGPreserveAspectRatio::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGPreserveAspectRatioTearOff* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
