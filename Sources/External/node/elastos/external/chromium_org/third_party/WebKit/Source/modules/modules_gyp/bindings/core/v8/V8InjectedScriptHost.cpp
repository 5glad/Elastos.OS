// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8InjectedScriptHost.h"

#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/v8/BindingSecurity.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptValue.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(InjectedScriptHost* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8InjectedScriptHost::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::InjectedScriptHost* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8InjectedScriptHost::wrapperTypeInfo = { gin::kEmbedderBlink, V8InjectedScriptHost::domTemplate, V8InjectedScriptHost::derefObject, 0, 0, 0, V8InjectedScriptHost::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace InjectedScriptHostV8Internal {

template <typename T> void V8_USE(T) { }

static void clearConsoleMessagesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    InjectedScriptHost* impl = V8InjectedScriptHost::toNative(info.Holder());
    impl->clearConsoleMessages();
}

static void clearConsoleMessagesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    InjectedScriptHostV8Internal::clearConsoleMessagesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void inspectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::inspectMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void inspectedObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::inspectedObjectMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void internalConstructorNameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::internalConstructorNameMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void isHTMLAllCollectionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::isHTMLAllCollectionMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void typeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::typeMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void functionDetailsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::functionDetailsMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getInternalPropertiesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::getInternalPropertiesMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getEventListenersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::getEventListenersMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void evaluateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::evaluateMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void debugFunctionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::debugFunctionMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void undebugFunctionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::undebugFunctionMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void monitorFunctionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::monitorFunctionMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void unmonitorFunctionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::unmonitorFunctionMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void suppressWarningsAndCallMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::suppressWarningsAndCallMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setFunctionVariableValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8InjectedScriptHost::setFunctionVariableValueMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace InjectedScriptHostV8Internal

static const V8DOMConfiguration::MethodConfiguration V8InjectedScriptHostMethods[] = {
    {"clearConsoleMessages", InjectedScriptHostV8Internal::clearConsoleMessagesMethodCallback, 0, 0},
    {"inspect", InjectedScriptHostV8Internal::inspectMethodCallback, 0, 2},
    {"inspectedObject", InjectedScriptHostV8Internal::inspectedObjectMethodCallback, 0, 1},
    {"internalConstructorName", InjectedScriptHostV8Internal::internalConstructorNameMethodCallback, 0, 1},
    {"isHTMLAllCollection", InjectedScriptHostV8Internal::isHTMLAllCollectionMethodCallback, 0, 1},
    {"type", InjectedScriptHostV8Internal::typeMethodCallback, 0, 1},
    {"functionDetails", InjectedScriptHostV8Internal::functionDetailsMethodCallback, 0, 1},
    {"getInternalProperties", InjectedScriptHostV8Internal::getInternalPropertiesMethodCallback, 0, 1},
    {"getEventListeners", InjectedScriptHostV8Internal::getEventListenersMethodCallback, 0, 1},
    {"evaluate", InjectedScriptHostV8Internal::evaluateMethodCallback, 0, 1},
    {"debugFunction", InjectedScriptHostV8Internal::debugFunctionMethodCallback, 0, 1},
    {"undebugFunction", InjectedScriptHostV8Internal::undebugFunctionMethodCallback, 0, 1},
    {"monitorFunction", InjectedScriptHostV8Internal::monitorFunctionMethodCallback, 0, 1},
    {"unmonitorFunction", InjectedScriptHostV8Internal::unmonitorFunctionMethodCallback, 0, 1},
    {"suppressWarningsAndCall", InjectedScriptHostV8Internal::suppressWarningsAndCallMethodCallback, 0, 4},
    {"setFunctionVariableValue", InjectedScriptHostV8Internal::setFunctionVariableValueMethodCallback, 0, 4},
};

static void configureV8InjectedScriptHostTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "InjectedScriptHost", v8::Local<v8::FunctionTemplate>(), V8InjectedScriptHost::internalFieldCount,
        0, 0,
        0, 0,
        V8InjectedScriptHostMethods, WTF_ARRAY_LENGTH(V8InjectedScriptHostMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8InjectedScriptHost::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8InjectedScriptHostTemplate);
}

bool V8InjectedScriptHost::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8InjectedScriptHost::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

InjectedScriptHost* V8InjectedScriptHost::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(InjectedScriptHost* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InjectedScriptHost>(impl, isolate));
    return V8InjectedScriptHost::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8InjectedScriptHost::createWrapper(PassRefPtr<InjectedScriptHost> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8InjectedScriptHost>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8InjectedScriptHost>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8InjectedScriptHost::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(InjectedScriptHost* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
