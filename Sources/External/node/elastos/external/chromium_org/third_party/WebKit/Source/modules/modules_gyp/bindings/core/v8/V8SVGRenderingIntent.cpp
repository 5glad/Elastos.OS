// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGRenderingIntent.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGRenderingIntent* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGRenderingIntent::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGRenderingIntent* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGRenderingIntent::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGRenderingIntent::domTemplate, V8SVGRenderingIntent::derefObject, 0, 0, 0, V8SVGRenderingIntent::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace SVGRenderingIntentV8Internal {

template <typename T> void V8_USE(T) { }

} // namespace SVGRenderingIntentV8Internal

static void configureV8SVGRenderingIntentTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGRenderingIntent", v8::Local<v8::FunctionTemplate>(), V8SVGRenderingIntent::internalFieldCount,
        0, 0,
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8SVGRenderingIntentConstants[] = {
        {"RENDERING_INTENT_UNKNOWN", 0},
        {"RENDERING_INTENT_AUTO", 1},
        {"RENDERING_INTENT_PERCEPTUAL", 2},
        {"RENDERING_INTENT_RELATIVE_COLORIMETRIC", 3},
        {"RENDERING_INTENT_SATURATION", 4},
        {"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC", 5},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8SVGRenderingIntentConstants, WTF_ARRAY_LENGTH(V8SVGRenderingIntentConstants), isolate);
    COMPILE_ASSERT(0 == SVGRenderingIntent::RENDERING_INTENT_UNKNOWN, TheValueOfSVGRenderingIntent_RENDERING_INTENT_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGRenderingIntent::RENDERING_INTENT_AUTO, TheValueOfSVGRenderingIntent_RENDERING_INTENT_AUTODoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGRenderingIntent::RENDERING_INTENT_PERCEPTUAL, TheValueOfSVGRenderingIntent_RENDERING_INTENT_PERCEPTUALDoesntMatchWithImplementation);
    COMPILE_ASSERT(3 == SVGRenderingIntent::RENDERING_INTENT_RELATIVE_COLORIMETRIC, TheValueOfSVGRenderingIntent_RENDERING_INTENT_RELATIVE_COLORIMETRICDoesntMatchWithImplementation);
    COMPILE_ASSERT(4 == SVGRenderingIntent::RENDERING_INTENT_SATURATION, TheValueOfSVGRenderingIntent_RENDERING_INTENT_SATURATIONDoesntMatchWithImplementation);
    COMPILE_ASSERT(5 == SVGRenderingIntent::RENDERING_INTENT_ABSOLUTE_COLORIMETRIC, TheValueOfSVGRenderingIntent_RENDERING_INTENT_ABSOLUTE_COLORIMETRICDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGRenderingIntent::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGRenderingIntentTemplate);
}

bool V8SVGRenderingIntent::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGRenderingIntent::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGRenderingIntent* V8SVGRenderingIntent::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(SVGRenderingIntent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGRenderingIntent>(impl, isolate));
    return V8SVGRenderingIntent::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SVGRenderingIntent::createWrapper(PassRefPtr<SVGRenderingIntent> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGRenderingIntent>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGRenderingIntent>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGRenderingIntent::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGRenderingIntent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
