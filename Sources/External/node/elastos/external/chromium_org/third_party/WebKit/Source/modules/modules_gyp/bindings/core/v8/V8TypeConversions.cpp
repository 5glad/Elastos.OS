// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8TypeConversions.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(TypeConversions* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8TypeConversions::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::TypeConversions* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8TypeConversions::wrapperTypeInfo = { gin::kEmbedderBlink, V8TypeConversions::domTemplate, V8TypeConversions::derefObject, 0, 0, 0, V8TypeConversions::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace TypeConversionsV8Internal {

template <typename T> void V8_USE(T) { }

static void testLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueInt(info, impl->testLong());
}

static void testLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(int, cppValue, toInt32(v8Value, exceptionState), exceptionState);
    impl->setTestLong(cppValue);
}

static void testLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueInt(info, impl->testLong());
}

static void testEnforceRangeLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(int, cppValue, toInt32(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestLong(cppValue);
}

static void testEnforceRangeLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testUnsignedLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedLong());
}

static void testUnsignedLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testUnsignedLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testUnsignedLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUnsignedLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt32(v8Value, exceptionState), exceptionState);
    impl->setTestUnsignedLong(cppValue);
}

static void testUnsignedLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testUnsignedLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeUnsignedLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedLong());
}

static void testEnforceRangeUnsignedLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeUnsignedLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeUnsignedLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt32(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestUnsignedLong(cppValue);
}

static void testEnforceRangeUnsignedLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testLongLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testLongLong()));
}

static void testLongLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(long long, cppValue, toInt64(v8Value, exceptionState), exceptionState);
    impl->setTestLongLong(cppValue);
}

static void testLongLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeLongLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testLongLong()));
}

static void testEnforceRangeLongLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(long long, cppValue, toInt64(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestLongLong(cppValue);
}

static void testEnforceRangeLongLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testUnsignedLongLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testUnsignedLongLong()));
}

static void testUnsignedLongLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testUnsignedLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testUnsignedLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUnsignedLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned long long, cppValue, toUInt64(v8Value, exceptionState), exceptionState);
    impl->setTestUnsignedLongLong(cppValue);
}

static void testUnsignedLongLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testUnsignedLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeUnsignedLongLongAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValue(info, static_cast<double>(impl->testUnsignedLongLong()));
}

static void testEnforceRangeUnsignedLongLongAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeUnsignedLongLongAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeUnsignedLongLong", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned long long, cppValue, toUInt64(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestUnsignedLongLong(cppValue);
}

static void testEnforceRangeUnsignedLongLongAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueInt(info, impl->testByte());
}

static void testByteAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testByteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByte", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(int, cppValue, toInt8(v8Value, exceptionState), exceptionState);
    impl->setTestByte(cppValue);
}

static void testByteAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testByteAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeByteAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueInt(info, impl->testByte());
}

static void testEnforceRangeByteAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeByteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeByteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeByte", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(int, cppValue, toInt8(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestByte(cppValue);
}

static void testEnforceRangeByteAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeByteAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testOctetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->testOctet());
}

static void testOctetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testOctetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testOctetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testOctet", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt8(v8Value, exceptionState), exceptionState);
    impl->setTestOctet(cppValue);
}

static void testOctetAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testOctetAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeOctetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->testOctet());
}

static void testEnforceRangeOctetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeOctetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeOctetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeOctet", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt8(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestOctet(cppValue);
}

static void testEnforceRangeOctetAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeOctetAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testShortAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueInt(info, impl->testShort());
}

static void testShortAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(int, cppValue, toInt16(v8Value, exceptionState), exceptionState);
    impl->setTestShort(cppValue);
}

static void testShortAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeShortAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueInt(info, impl->testShort());
}

static void testEnforceRangeShortAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(int, cppValue, toInt16(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestShort(cppValue);
}

static void testEnforceRangeShortAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testUnsignedShortAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedShort());
}

static void testUnsignedShortAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testUnsignedShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testUnsignedShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testUnsignedShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt16(v8Value, exceptionState), exceptionState);
    impl->setTestUnsignedShort(cppValue);
}

static void testUnsignedShortAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testUnsignedShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeUnsignedShortAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->testUnsignedShort());
}

static void testEnforceRangeUnsignedShortAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testEnforceRangeUnsignedShortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testEnforceRangeUnsignedShort", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt16(v8Value, EnforceRange, exceptionState), exceptionState);
    impl->setTestUnsignedShort(cppValue);
}

static void testEnforceRangeUnsignedShortAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteStringAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueString(info, impl->testByteString(), info.GetIsolate());
}

static void testByteStringAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testByteStringAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteStringAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByteString", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(V8StringResource<>, cppValue, toByteString(v8Value, exceptionState), exceptionState);
    impl->setTestByteString(cppValue);
}

static void testByteStringAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testByteStringAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueStringOrNull(info, impl->testByteString(), info.GetIsolate());
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByteStringTreatReturnedNullStringAsNullAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(V8StringResource<>, cppValue, toByteString(v8Value, exceptionState), exceptionState);
    impl->setTestByteString(cppValue);
}

static void testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueStringOrUndefined(info, impl->testByteString(), info.GetIsolate());
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testByteStringTreatReturnedNullStringAsUndefinedAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(V8StringResource<>, cppValue, toByteString(v8Value, exceptionState), exceptionState);
    impl->setTestByteString(cppValue);
}

static void testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testScalarValueStringAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueString(info, impl->testScalarValueString(), info.GetIsolate());
}

static void testScalarValueStringAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testScalarValueStringAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testScalarValueStringAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testScalarValueString", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(V8StringResource<>, cppValue, toScalarValueString(v8Value, exceptionState), exceptionState);
    impl->setTestScalarValueString(cppValue);
}

static void testScalarValueStringAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testScalarValueStringAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueStringOrNull(info, impl->testScalarValueString(), info.GetIsolate());
}

static void testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testScalarValueStringTreatReturnedNullStringAsNullAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(V8StringResource<>, cppValue, toScalarValueString(v8Value, exceptionState), exceptionState);
    impl->setTestScalarValueString(cppValue);
}

static void testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    v8SetReturnValueStringOrUndefined(info, impl->testScalarValueString(), info.GetIsolate());
}

static void testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "testScalarValueStringTreatReturnedNullStringAsUndefinedAttribute", "TypeConversions", holder, info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(V8StringResource<>, cppValue, toScalarValueString(v8Value, exceptionState), exceptionState);
    impl->setTestScalarValueString(cppValue);
}

static void testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getTestByteStringTreatReturnedNullStringAsNullMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    v8SetReturnValueStringOrNull(info, impl->testByteString(), info.GetIsolate());
}

static void getTestByteStringTreatReturnedNullStringAsNullMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsNullMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    v8SetReturnValueStringOrUndefined(info, impl->testByteString(), info.GetIsolate());
}

static void getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTestByteStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestByteString", "TypeConversions", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    V8StringResource<> byteString;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(byteString, toByteString(info[0], exceptionState), exceptionState);
    }
    impl->setTestByteString(byteString);
}

static void setTestByteStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::setTestByteStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTestByteStringDefaultNullMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestByteStringDefaultNull", "TypeConversions", info.Holder(), info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    V8StringResource<> byteString;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(byteString, toByteString(argumentOrNull(info, 0), exceptionState), exceptionState);
    }
    impl->setTestByteString(byteString);
}

static void setTestByteStringDefaultNullMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::setTestByteStringDefaultNullMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getTestScalarValueStringTreatReturnedNullStringAsNullMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    v8SetReturnValueStringOrNull(info, impl->testScalarValueString(), info.GetIsolate());
}

static void getTestScalarValueStringTreatReturnedNullStringAsNullMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::getTestScalarValueStringTreatReturnedNullStringAsNullMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getTestScalarValueStringTreatReturnedNullStringAsUndefinedMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    v8SetReturnValueStringOrUndefined(info, impl->testScalarValueString(), info.GetIsolate());
}

static void getTestScalarValueStringTreatReturnedNullStringAsUndefinedMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::getTestScalarValueStringTreatReturnedNullStringAsUndefinedMethodMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTestScalarValueStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestScalarValueString", "TypeConversions", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    V8StringResource<> scalarValueString;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(scalarValueString, toScalarValueString(info[0], exceptionState), exceptionState);
    }
    impl->setTestScalarValueString(scalarValueString);
}

static void setTestScalarValueStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::setTestScalarValueStringMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTestScalarValueStringDefaultNullMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setTestScalarValueStringDefaultNull", "TypeConversions", info.Holder(), info.GetIsolate());
    TypeConversions* impl = V8TypeConversions::toNative(info.Holder());
    V8StringResource<> scalarValueString;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(scalarValueString, toScalarValueString(argumentOrNull(info, 0), exceptionState), exceptionState);
    }
    impl->setTestScalarValueString(scalarValueString);
}

static void setTestScalarValueStringDefaultNullMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    TypeConversionsV8Internal::setTestScalarValueStringDefaultNullMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace TypeConversionsV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8TypeConversionsAttributes[] = {
    {"testLong", TypeConversionsV8Internal::testLongAttributeGetterCallback, TypeConversionsV8Internal::testLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeLong", TypeConversionsV8Internal::testEnforceRangeLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testUnsignedLong", TypeConversionsV8Internal::testUnsignedLongAttributeGetterCallback, TypeConversionsV8Internal::testUnsignedLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeUnsignedLong", TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeUnsignedLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testLongLong", TypeConversionsV8Internal::testLongLongAttributeGetterCallback, TypeConversionsV8Internal::testLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeLongLong", TypeConversionsV8Internal::testEnforceRangeLongLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testUnsignedLongLong", TypeConversionsV8Internal::testUnsignedLongLongAttributeGetterCallback, TypeConversionsV8Internal::testUnsignedLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeUnsignedLongLong", TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeUnsignedLongLongAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testByte", TypeConversionsV8Internal::testByteAttributeGetterCallback, TypeConversionsV8Internal::testByteAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeByte", TypeConversionsV8Internal::testEnforceRangeByteAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeByteAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testOctet", TypeConversionsV8Internal::testOctetAttributeGetterCallback, TypeConversionsV8Internal::testOctetAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeOctet", TypeConversionsV8Internal::testEnforceRangeOctetAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeOctetAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testShort", TypeConversionsV8Internal::testShortAttributeGetterCallback, TypeConversionsV8Internal::testShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeShort", TypeConversionsV8Internal::testEnforceRangeShortAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testUnsignedShort", TypeConversionsV8Internal::testUnsignedShortAttributeGetterCallback, TypeConversionsV8Internal::testUnsignedShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testEnforceRangeUnsignedShort", TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeGetterCallback, TypeConversionsV8Internal::testEnforceRangeUnsignedShortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testByteString", TypeConversionsV8Internal::testByteStringAttributeGetterCallback, TypeConversionsV8Internal::testByteStringAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testByteStringTreatReturnedNullStringAsNullAttribute", TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback, TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testByteStringTreatReturnedNullStringAsUndefinedAttribute", TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback, TypeConversionsV8Internal::testByteStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testScalarValueString", TypeConversionsV8Internal::testScalarValueStringAttributeGetterCallback, TypeConversionsV8Internal::testScalarValueStringAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testScalarValueStringTreatReturnedNullStringAsNullAttribute", TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeGetterCallback, TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsNullAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"testScalarValueStringTreatReturnedNullStringAsUndefinedAttribute", TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeGetterCallback, TypeConversionsV8Internal::testScalarValueStringTreatReturnedNullStringAsUndefinedAttributeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8TypeConversionsMethods[] = {
    {"getTestByteStringTreatReturnedNullStringAsNullMethod", TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsNullMethodMethodCallback, 0, 0},
    {"getTestByteStringTreatReturnedNullStringAsUndefinedMethod", TypeConversionsV8Internal::getTestByteStringTreatReturnedNullStringAsUndefinedMethodMethodCallback, 0, 0},
    {"setTestByteString", TypeConversionsV8Internal::setTestByteStringMethodCallback, 0, 1},
    {"setTestByteStringDefaultNull", TypeConversionsV8Internal::setTestByteStringDefaultNullMethodCallback, 0, 0},
    {"getTestScalarValueStringTreatReturnedNullStringAsNullMethod", TypeConversionsV8Internal::getTestScalarValueStringTreatReturnedNullStringAsNullMethodMethodCallback, 0, 0},
    {"getTestScalarValueStringTreatReturnedNullStringAsUndefinedMethod", TypeConversionsV8Internal::getTestScalarValueStringTreatReturnedNullStringAsUndefinedMethodMethodCallback, 0, 0},
    {"setTestScalarValueString", TypeConversionsV8Internal::setTestScalarValueStringMethodCallback, 0, 1},
    {"setTestScalarValueStringDefaultNull", TypeConversionsV8Internal::setTestScalarValueStringDefaultNullMethodCallback, 0, 0},
};

static void configureV8TypeConversionsTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "TypeConversions", v8::Local<v8::FunctionTemplate>(), V8TypeConversions::internalFieldCount,
        V8TypeConversionsAttributes, WTF_ARRAY_LENGTH(V8TypeConversionsAttributes),
        0, 0,
        V8TypeConversionsMethods, WTF_ARRAY_LENGTH(V8TypeConversionsMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8TypeConversions::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8TypeConversionsTemplate);
}

bool V8TypeConversions::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8TypeConversions::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

TypeConversions* V8TypeConversions::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(TypeConversions* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8TypeConversions>(impl, isolate));
    return V8TypeConversions::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8TypeConversions::createWrapper(PassRefPtrWillBeRawPtr<TypeConversions> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8TypeConversions>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8TypeConversions>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8TypeConversions::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(TypeConversions* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
