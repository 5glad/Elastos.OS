// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8Performance.h"

#include "bindings/core/v8/V8MemoryInfo.h"
#include "bindings/core/v8/V8PerformanceEntry.h"
#include "bindings/core/v8/V8PerformanceNavigation.h"
#include "bindings/core/v8/V8PerformanceTiming.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(Performance* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8Performance::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::Performance* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8Performance::wrapperTypeInfo = { gin::kEmbedderBlink, V8Performance::domTemplate, V8Performance::derefObject, 0, V8Performance::toEventTarget, 0, V8Performance::installPerContextEnabledMethods, &V8EventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace PerformanceV8Internal {

template <typename T> void V8_USE(T) { }

static void navigationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Performance* impl = V8Performance::toNative(holder);
    RefPtrWillBeRawPtr<PerformanceNavigation> result(impl->navigation());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8PerformanceNavigation>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "navigation"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void navigationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    PerformanceV8Internal::navigationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void timingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Performance* impl = V8Performance::toNative(holder);
    RefPtrWillBeRawPtr<PerformanceTiming> result(impl->timing());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8PerformanceTiming>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "timing"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void timingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    PerformanceV8Internal::timingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void memoryAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Performance* impl = V8Performance::toNative(holder);
    RefPtrWillBeRawPtr<MemoryInfo> result(impl->memory());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8MemoryInfo>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "memory"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void memoryAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    PerformanceV8Internal::memoryAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitresourcetimingbufferfullAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Performance* impl = V8Performance::toNative(holder);
    EventListener* v8Value = impl->onwebkitresourcetimingbufferfull();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitresourcetimingbufferfullAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    PerformanceV8Internal::onwebkitresourcetimingbufferfullAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitresourcetimingbufferfullAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    Performance* impl = V8Performance::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onwebkitresourcetimingbufferfull(), v8Value, V8Performance::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnwebkitresourcetimingbufferfull(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitresourcetimingbufferfullAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    PerformanceV8Internal::onwebkitresourcetimingbufferfullAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getEntriesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Performance* impl = V8Performance::toNative(info.Holder());
    v8SetReturnValue(info, v8Array(impl->getEntries(), info.Holder(), info.GetIsolate()));
}

static void getEntriesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedPerformanceTimeline);
    PerformanceV8Internal::getEntriesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getEntriesByTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getEntriesByType", "Performance", 1, info.Length(), info.GetIsolate());
        return;
    }
    Performance* impl = V8Performance::toNative(info.Holder());
    V8StringResource<> entryType;
    {
        TOSTRING_VOID_INTERNAL(entryType, info[0]);
    }
    v8SetReturnValue(info, v8Array(impl->getEntriesByType(entryType), info.Holder(), info.GetIsolate()));
}

static void getEntriesByTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedPerformanceTimeline);
    PerformanceV8Internal::getEntriesByTypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getEntriesByNameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getEntriesByName", "Performance", 1, info.Length(), info.GetIsolate());
        return;
    }
    Performance* impl = V8Performance::toNative(info.Holder());
    V8StringResource<> name;
    V8StringResource<> entryType;
    {
        TOSTRING_VOID_INTERNAL(name, info[0]);
        TOSTRING_VOID_INTERNAL(entryType, argumentOrNull(info, 1));
    }
    v8SetReturnValue(info, v8Array(impl->getEntriesByName(name, entryType), info.Holder(), info.GetIsolate()));
}

static void getEntriesByNameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedPerformanceTimeline);
    PerformanceV8Internal::getEntriesByNameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitClearResourceTimingsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Performance* impl = V8Performance::toNative(info.Holder());
    impl->webkitClearResourceTimings();
}

static void webkitClearResourceTimingsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedPerformanceClearResourceTimings);
    PerformanceV8Internal::webkitClearResourceTimingsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitSetResourceTimingBufferSizeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitSetResourceTimingBufferSize", "Performance", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    Performance* impl = V8Performance::toNative(info.Holder());
    unsigned maxSize;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(maxSize, toUInt32(info[0], exceptionState), exceptionState);
    }
    impl->webkitSetResourceTimingBufferSize(maxSize);
}

static void webkitSetResourceTimingBufferSizeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedPerformanceSetResourceTimingBufferSize);
    PerformanceV8Internal::webkitSetResourceTimingBufferSizeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void markMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "mark", "Performance", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    Performance* impl = V8Performance::toNative(info.Holder());
    V8StringResource<> markName;
    {
        TOSTRING_VOID_INTERNAL(markName, info[0]);
    }
    impl->mark(markName, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void markMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedUserTiming);
    PerformanceV8Internal::markMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearMarksMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Performance* impl = V8Performance::toNative(info.Holder());
    V8StringResource<> markName;
    {
        TOSTRING_VOID_INTERNAL(markName, argumentOrNull(info, 0));
    }
    impl->clearMarks(markName);
}

static void clearMarksMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedUserTiming);
    PerformanceV8Internal::clearMarksMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void measureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "measure", "Performance", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    Performance* impl = V8Performance::toNative(info.Holder());
    V8StringResource<> measureName;
    V8StringResource<> startMark;
    V8StringResource<> endMark;
    {
        TOSTRING_VOID_INTERNAL(measureName, info[0]);
        TOSTRING_VOID_INTERNAL(startMark, argumentOrNull(info, 1));
        TOSTRING_VOID_INTERNAL(endMark, argumentOrNull(info, 2));
    }
    impl->measure(measureName, startMark, endMark, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void measureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedUserTiming);
    PerformanceV8Internal::measureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearMeasuresMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Performance* impl = V8Performance::toNative(info.Holder());
    V8StringResource<> measureName;
    {
        TOSTRING_VOID_INTERNAL(measureName, argumentOrNull(info, 0));
    }
    impl->clearMeasures(measureName);
}

static void clearMeasuresMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedUserTiming);
    PerformanceV8Internal::clearMeasuresMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void nowMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Performance* impl = V8Performance::toNative(info.Holder());
    v8SetReturnValue(info, impl->now());
}

static void nowMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    PerformanceV8Internal::nowMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace PerformanceV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8PerformanceAttributes[] = {
    {"navigation", PerformanceV8Internal::navigationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"timing", PerformanceV8Internal::timingAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"memory", PerformanceV8Internal::memoryAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onwebkitresourcetimingbufferfull", PerformanceV8Internal::onwebkitresourcetimingbufferfullAttributeGetterCallback, PerformanceV8Internal::onwebkitresourcetimingbufferfullAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8PerformanceMethods[] = {
    {"getEntries", PerformanceV8Internal::getEntriesMethodCallback, 0, 0},
    {"getEntriesByType", PerformanceV8Internal::getEntriesByTypeMethodCallback, 0, 1},
    {"getEntriesByName", PerformanceV8Internal::getEntriesByNameMethodCallback, 0, 1},
    {"webkitClearResourceTimings", PerformanceV8Internal::webkitClearResourceTimingsMethodCallback, 0, 0},
    {"webkitSetResourceTimingBufferSize", PerformanceV8Internal::webkitSetResourceTimingBufferSizeMethodCallback, 0, 1},
    {"mark", PerformanceV8Internal::markMethodCallback, 0, 1},
    {"clearMarks", PerformanceV8Internal::clearMarksMethodCallback, 0, 0},
    {"measure", PerformanceV8Internal::measureMethodCallback, 0, 1},
    {"clearMeasures", PerformanceV8Internal::clearMeasuresMethodCallback, 0, 0},
    {"now", PerformanceV8Internal::nowMethodCallback, 0, 0},
};

static void configureV8PerformanceTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "Performance", V8EventTarget::domTemplate(isolate), V8Performance::internalFieldCount,
        V8PerformanceAttributes, WTF_ARRAY_LENGTH(V8PerformanceAttributes),
        0, 0,
        V8PerformanceMethods, WTF_ARRAY_LENGTH(V8PerformanceMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8Performance::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8PerformanceTemplate);
}

bool V8Performance::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8Performance::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Performance* V8Performance::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

EventTarget* V8Performance::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(Performance* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Performance>(impl, isolate));
    return V8Performance::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8Performance::createWrapper(PassRefPtrWillBeRawPtr<Performance> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Performance>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8Performance>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8Performance::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(Performance* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
