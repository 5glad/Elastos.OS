// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8IDBKeyRange.h"

#include "bindings/modules/v8/V8IDBKeyRange.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptValue.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(IDBKeyRange* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8IDBKeyRange::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::IDBKeyRange* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8IDBKeyRange::wrapperTypeInfo = { gin::kEmbedderBlink, V8IDBKeyRange::domTemplate, V8IDBKeyRange::derefObject, 0, 0, 0, V8IDBKeyRange::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, GarbageCollectedObject };

namespace IDBKeyRangeV8Internal {

template <typename T> void V8_USE(T) { }

static void lowerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toNative(holder);
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    v8SetReturnValue(info, impl->lowerValue(scriptState).v8Value());
}

static void lowerAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    IDBKeyRangeV8Internal::lowerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void upperAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toNative(holder);
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    v8SetReturnValue(info, impl->upperValue(scriptState).v8Value());
}

static void upperAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    IDBKeyRangeV8Internal::upperAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void lowerOpenAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toNative(holder);
    v8SetReturnValueBool(info, impl->lowerOpen());
}

static void lowerOpenAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    IDBKeyRangeV8Internal::lowerOpenAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void upperOpenAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    IDBKeyRange* impl = V8IDBKeyRange::toNative(holder);
    v8SetReturnValueBool(info, impl->upperOpen());
}

static void upperOpenAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    IDBKeyRangeV8Internal::upperOpenAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onlyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "only", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    ScriptValue value;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(value, ScriptValue(ScriptState::current(info.GetIsolate()), info[0]));
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::only(executionContext, value, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void onlyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    IDBKeyRangeV8Internal::onlyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void lowerBoundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "lowerBound", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    ScriptValue bound;
    bool open;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(bound, ScriptValue(ScriptState::current(info.GetIsolate()), info[0]));
        TONATIVE_VOID_INTERNAL(open, info[1]->BooleanValue());
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::lowerBound(executionContext, bound, open, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void lowerBoundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    IDBKeyRangeV8Internal::lowerBoundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void upperBoundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "upperBound", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    ScriptValue bound;
    bool open;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(bound, ScriptValue(ScriptState::current(info.GetIsolate()), info[0]));
        TONATIVE_VOID_INTERNAL(open, info[1]->BooleanValue());
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::upperBound(executionContext, bound, open, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void upperBoundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    IDBKeyRangeV8Internal::upperBoundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void boundMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "bound", "IDBKeyRange", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    ScriptValue lower;
    ScriptValue upper;
    bool lowerOpen;
    bool upperOpen;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(lower, ScriptValue(ScriptState::current(info.GetIsolate()), info[0]));
        TONATIVE_VOID_INTERNAL(upper, ScriptValue(ScriptState::current(info.GetIsolate()), info[1]));
        TONATIVE_VOID_INTERNAL(lowerOpen, info[2]->BooleanValue());
        TONATIVE_VOID_INTERNAL(upperOpen, info[3]->BooleanValue());
    }
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    RawPtr<IDBKeyRange> result = IDBKeyRange::bound(executionContext, lower, upper, lowerOpen, upperOpen, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void boundMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    IDBKeyRangeV8Internal::boundMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace IDBKeyRangeV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8IDBKeyRangeAttributes[] = {
    {"lower", IDBKeyRangeV8Internal::lowerAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"upper", IDBKeyRangeV8Internal::upperAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"lowerOpen", IDBKeyRangeV8Internal::lowerOpenAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"upperOpen", IDBKeyRangeV8Internal::upperOpenAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static void configureV8IDBKeyRangeTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "IDBKeyRange", v8::Local<v8::FunctionTemplate>(), V8IDBKeyRange::internalFieldCount,
        V8IDBKeyRangeAttributes, WTF_ARRAY_LENGTH(V8IDBKeyRangeAttributes),
        0, 0,
        0, 0,
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    functionTemplate->Set(v8AtomicString(isolate, "only"), v8::FunctionTemplate::New(isolate, IDBKeyRangeV8Internal::onlyMethodCallback, v8Undefined(), v8::Local<v8::Signature>(), 1));
    functionTemplate->Set(v8AtomicString(isolate, "lowerBound"), v8::FunctionTemplate::New(isolate, IDBKeyRangeV8Internal::lowerBoundMethodCallback, v8Undefined(), v8::Local<v8::Signature>(), 1));
    functionTemplate->Set(v8AtomicString(isolate, "upperBound"), v8::FunctionTemplate::New(isolate, IDBKeyRangeV8Internal::upperBoundMethodCallback, v8Undefined(), v8::Local<v8::Signature>(), 1));
    functionTemplate->Set(v8AtomicString(isolate, "bound"), v8::FunctionTemplate::New(isolate, IDBKeyRangeV8Internal::boundMethodCallback, v8Undefined(), v8::Local<v8::Signature>(), 2));

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8IDBKeyRange::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8IDBKeyRangeTemplate);
}

bool V8IDBKeyRange::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8IDBKeyRange::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

IDBKeyRange* V8IDBKeyRange::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(IDBKeyRange* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8IDBKeyRange>(impl, isolate));
    return V8IDBKeyRange::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8IDBKeyRange::createWrapper(RawPtr<IDBKeyRange> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8IDBKeyRange>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8IDBKeyRange>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8IDBKeyRange::derefObject(void* object)
{
}

template<>
v8::Handle<v8::Value> toV8NoInline(IDBKeyRange* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
