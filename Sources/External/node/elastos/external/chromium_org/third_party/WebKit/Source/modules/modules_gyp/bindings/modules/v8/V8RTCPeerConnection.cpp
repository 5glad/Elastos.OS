// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8RTCPeerConnection.h"

#include "bindings/core/v8/V8VoidCallback.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "bindings/modules/v8/V8MediaStreamTrack.h"
#include "bindings/modules/v8/V8RTCDTMFSender.h"
#include "bindings/modules/v8/V8RTCDataChannel.h"
#include "bindings/modules/v8/V8RTCErrorCallback.h"
#include "bindings/modules/v8/V8RTCIceCandidate.h"
#include "bindings/modules/v8/V8RTCSessionDescription.h"
#include "bindings/modules/v8/V8RTCSessionDescriptionCallback.h"
#include "bindings/modules/v8/V8RTCStatsCallback.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(RTCPeerConnection* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8RTCPeerConnection::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::RTCPeerConnection* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8RTCPeerConnection::wrapperTypeInfo = { gin::kEmbedderBlink, V8RTCPeerConnection::domTemplate, V8RTCPeerConnection::derefObject, V8RTCPeerConnection::toActiveDOMObject, V8RTCPeerConnection::toEventTarget, 0, V8RTCPeerConnection::installPerContextEnabledMethods, &V8EventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace RTCPeerConnectionV8Internal {

template <typename T> void V8_USE(T) { }

static void localDescriptionAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "localDescription", "RTCPeerConnection", holder, info.GetIsolate());
    RefPtrWillBeRawPtr<RTCSessionDescription> v8Value = impl->localDescription(exceptionState);
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    RefPtrWillBeRawPtr<RTCSessionDescription> result(v8Value);
    if (result && DOMDataStore::setReturnValueFromWrapper<V8RTCSessionDescription>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "localDescription"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void localDescriptionAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::localDescriptionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void remoteDescriptionAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "remoteDescription", "RTCPeerConnection", holder, info.GetIsolate());
    RefPtrWillBeRawPtr<RTCSessionDescription> v8Value = impl->remoteDescription(exceptionState);
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    RefPtrWillBeRawPtr<RTCSessionDescription> result(v8Value);
    if (result && DOMDataStore::setReturnValueFromWrapper<V8RTCSessionDescription>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "remoteDescription"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void remoteDescriptionAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::remoteDescriptionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void signalingStateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    v8SetReturnValueString(info, impl->signalingState(), info.GetIsolate());
}

static void signalingStateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::signalingStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void iceGatheringStateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    v8SetReturnValueString(info, impl->iceGatheringState(), info.GetIsolate());
}

static void iceGatheringStateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::iceGatheringStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void iceConnectionStateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    v8SetReturnValueString(info, impl->iceConnectionState(), info.GetIsolate());
}

static void iceConnectionStateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::iceConnectionStateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onnegotiationneededAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->onnegotiationneeded();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onnegotiationneededAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onnegotiationneededAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onnegotiationneededAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onnegotiationneeded(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnnegotiationneeded(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onnegotiationneededAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onnegotiationneededAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onicecandidateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->onicecandidate();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onicecandidateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onicecandidateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onicecandidateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onicecandidate(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnicecandidate(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onicecandidateAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onicecandidateAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsignalingstatechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->onsignalingstatechange();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onsignalingstatechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsignalingstatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onsignalingstatechange(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnsignalingstatechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onsignalingstatechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onaddstreamAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->onaddstream();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onaddstreamAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onaddstreamAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onaddstreamAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onaddstream(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnaddstream(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onaddstreamAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onaddstreamAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onremovestreamAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->onremovestream();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onremovestreamAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::onremovestreamAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onremovestreamAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onremovestream(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnremovestream(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onremovestreamAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::onremovestreamAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oniceconnectionstatechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->oniceconnectionstatechange();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oniceconnectionstatechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oniceconnectionstatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->oniceconnectionstatechange(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOniceconnectionstatechange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oniceconnectionstatechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondatachannelAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    EventListener* v8Value = impl->ondatachannel();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondatachannelAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    RTCPeerConnectionV8Internal::ondatachannelAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondatachannelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->ondatachannel(), v8Value, V8RTCPeerConnection::eventListenerCacheIndex, info.GetIsolate());
    impl->setOndatachannel(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondatachannelAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    RTCPeerConnectionV8Internal::ondatachannelAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createOfferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createOffer", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    OwnPtr<RTCSessionDescriptionCallback> successCallback;
    OwnPtr<RTCErrorCallback> failureCallback;
    Dictionary mediaConstraints;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8RTCSessionDescriptionCallback::create(v8::Handle<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        if (info.Length() > 1 && !isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        }
        TONATIVE_VOID_INTERNAL(mediaConstraints, Dictionary(info[2], info.GetIsolate()));
        if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject()) {
            exceptionState.throwTypeError("parameter 3 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->createOffer(successCallback.release(), failureCallback.release(), mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void createOfferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createOfferMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createAnswerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createAnswer", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    OwnPtr<RTCSessionDescriptionCallback> successCallback;
    OwnPtr<RTCErrorCallback> failureCallback;
    Dictionary mediaConstraints;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8RTCSessionDescriptionCallback::create(v8::Handle<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        if (info.Length() > 1 && !isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        }
        TONATIVE_VOID_INTERNAL(mediaConstraints, Dictionary(info[2], info.GetIsolate()));
        if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject()) {
            exceptionState.throwTypeError("parameter 3 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->createAnswer(successCallback.release(), failureCallback.release(), mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void createAnswerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createAnswerMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setLocalDescriptionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setLocalDescription", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    RTCSessionDescription* description;
    OwnPtr<VoidCallback> successCallback;
    OwnPtr<RTCErrorCallback> failureCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(description, V8RTCSessionDescription::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() > 1 && !isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            successCallback = V8VoidCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        }
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
    }
    impl->setLocalDescription(description, successCallback.release(), failureCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setLocalDescriptionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::setLocalDescriptionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setRemoteDescriptionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "setRemoteDescription", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    RTCSessionDescription* description;
    OwnPtr<VoidCallback> successCallback;
    OwnPtr<RTCErrorCallback> failureCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(description, V8RTCSessionDescription::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() > 1 && !isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            successCallback = V8VoidCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        }
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            failureCallback = V8RTCErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
    }
    impl->setRemoteDescription(description, successCallback.release(), failureCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void setRemoteDescriptionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::setRemoteDescriptionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void updateIceMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "updateIce", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    Dictionary configuration;
    Dictionary mediaConstraints;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(configuration, Dictionary(info[0], info.GetIsolate()));
        if (!configuration.isUndefinedOrNull() && !configuration.isObject()) {
            exceptionState.throwTypeError("parameter 1 ('configuration') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        TONATIVE_VOID_INTERNAL(mediaConstraints, Dictionary(info[1], info.GetIsolate()));
        if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject()) {
            exceptionState.throwTypeError("parameter 2 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->updateIce(configuration, mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void updateIceMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::updateIceMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void addIceCandidate1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIceCandidate", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    RTCIceCandidate* candidate;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(candidate, V8RTCIceCandidate::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    impl->addIceCandidate(candidate, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void addIceCandidate2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIceCandidate", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    RTCIceCandidate* candidate;
    OwnPtr<VoidCallback> successCallback;
    OwnPtr<RTCErrorCallback> failureCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(candidate, V8RTCIceCandidate::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8VoidCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (info.Length() <= 2 || !info[2]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        failureCallback = V8RTCErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
    }
    impl->addIceCandidate(candidate, successCallback.release(), failureCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void addIceCandidateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addIceCandidate", "RTCPeerConnection", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 1:
        if (true) {
            addIceCandidate1Method(info);
            return;
        }
        break;
    case 3:
        if (true) {
            addIceCandidate2Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            throwArityTypeError(exceptionState, "[1, 3]", info.Length());
            return;
        }
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void addIceCandidateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::addIceCandidateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getLocalStreamsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    v8SetReturnValue(info, v8Array(impl->getLocalStreams(), info.Holder(), info.GetIsolate()));
}

static void getLocalStreamsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getLocalStreamsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getRemoteStreamsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    v8SetReturnValue(info, v8Array(impl->getRemoteStreams(), info.Holder(), info.GetIsolate()));
}

static void getRemoteStreamsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getRemoteStreamsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getStreamByIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getStreamById", "RTCPeerConnection", 1, info.Length(), info.GetIsolate());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    V8StringResource<> streamId;
    {
        TOSTRING_VOID_INTERNAL(streamId, info[0]);
    }
    v8SetReturnValue(info, impl->getStreamById(streamId));
}

static void getStreamByIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getStreamByIdMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void addStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "addStream", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    MediaStream* stream;
    Dictionary mediaConstraints;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !isUndefinedOrNull(info[0]) && !V8MediaStream::hasInstance(info[0], info.GetIsolate())) {
            exceptionState.throwTypeError("parameter 1 is not of type 'MediaStream'.");
            exceptionState.throwIfNeeded();
            return;
        }
        TONATIVE_VOID_INTERNAL(stream, V8MediaStream::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_INTERNAL(mediaConstraints, Dictionary(info[1], info.GetIsolate()));
        if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject()) {
            exceptionState.throwTypeError("parameter 2 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->addStream(stream, mediaConstraints, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void addStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::addStreamMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void removeStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "removeStream", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    MediaStream* stream;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !isUndefinedOrNull(info[0]) && !V8MediaStream::hasInstance(info[0], info.GetIsolate())) {
            exceptionState.throwTypeError("parameter 1 is not of type 'MediaStream'.");
            exceptionState.throwIfNeeded();
            return;
        }
        TONATIVE_VOID_INTERNAL(stream, V8MediaStream::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    impl->removeStream(stream, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void removeStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::removeStreamMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getStatsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getStats", "RTCPeerConnection", 1, info.Length(), info.GetIsolate());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    OwnPtr<RTCStatsCallback> successCallback;
    MediaStreamTrack* selector;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            throwTypeError(ExceptionMessages::failedToExecute("getStats", "RTCPeerConnection", "The callback provided as parameter 1 is not a function."), info.GetIsolate());
            return;
        }
        successCallback = V8RTCStatsCallback::create(v8::Handle<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
        TONATIVE_VOID_INTERNAL(selector, V8MediaStreamTrack::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    impl->getStats(successCallback.release(), selector);
}

static void getStatsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::getStatsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createDataChannelMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDataChannel", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    V8StringResource<WithUndefinedOrNullCheck> label;
    Dictionary options;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(label, info[0]);
        TONATIVE_VOID_INTERNAL(options, Dictionary(info[1], info.GetIsolate()));
        if (!options.isUndefinedOrNull() && !options.isObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    RefPtrWillBeRawPtr<RTCDataChannel> result = impl->createDataChannel(label, options, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDataChannelMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createDataChannelMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createDTMFSenderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDTMFSender", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    MediaStreamTrack* track;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(track, V8MediaStreamTrack::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    RefPtrWillBeRawPtr<RTCDTMFSender> result = impl->createDTMFSender(track, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDTMFSenderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::createDTMFSenderMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void closeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "close", "RTCPeerConnection", info.Holder(), info.GetIsolate());
    RTCPeerConnection* impl = V8RTCPeerConnection::toNative(info.Holder());
    impl->close(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void closeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    RTCPeerConnectionV8Internal::closeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "RTCPeerConnection", info.Holder(), isolate);
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    Dictionary rtcIceServers;
    Dictionary mediaConstraints;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(rtcIceServers, Dictionary(info[0], info.GetIsolate()));
        if (!rtcIceServers.isUndefinedOrNull() && !rtcIceServers.isObject()) {
            exceptionState.throwTypeError("parameter 1 ('rtcIceServers') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
        TONATIVE_VOID_INTERNAL(mediaConstraints, Dictionary(info[1], info.GetIsolate()));
        if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject()) {
            exceptionState.throwTypeError("parameter 2 ('mediaConstraints') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    ExecutionContext* executionContext = currentExecutionContext(isolate);
    RefPtrWillBeRawPtr<RTCPeerConnection> impl = RTCPeerConnection::create(executionContext, rtcIceServers, mediaConstraints, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;

    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8RTCPeerConnection>(impl.release(), &V8RTCPeerConnection::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    v8SetReturnValue(info, wrapper);
}

} // namespace RTCPeerConnectionV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8RTCPeerConnectionAttributes[] = {
    {"localDescription", RTCPeerConnectionV8Internal::localDescriptionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"remoteDescription", RTCPeerConnectionV8Internal::remoteDescriptionAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"signalingState", RTCPeerConnectionV8Internal::signalingStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"iceGatheringState", RTCPeerConnectionV8Internal::iceGatheringStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"iceConnectionState", RTCPeerConnectionV8Internal::iceConnectionStateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onnegotiationneeded", RTCPeerConnectionV8Internal::onnegotiationneededAttributeGetterCallback, RTCPeerConnectionV8Internal::onnegotiationneededAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onicecandidate", RTCPeerConnectionV8Internal::onicecandidateAttributeGetterCallback, RTCPeerConnectionV8Internal::onicecandidateAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onsignalingstatechange", RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeGetterCallback, RTCPeerConnectionV8Internal::onsignalingstatechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onaddstream", RTCPeerConnectionV8Internal::onaddstreamAttributeGetterCallback, RTCPeerConnectionV8Internal::onaddstreamAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onremovestream", RTCPeerConnectionV8Internal::onremovestreamAttributeGetterCallback, RTCPeerConnectionV8Internal::onremovestreamAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"oniceconnectionstatechange", RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeGetterCallback, RTCPeerConnectionV8Internal::oniceconnectionstatechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"ondatachannel", RTCPeerConnectionV8Internal::ondatachannelAttributeGetterCallback, RTCPeerConnectionV8Internal::ondatachannelAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8RTCPeerConnectionMethods[] = {
    {"createOffer", RTCPeerConnectionV8Internal::createOfferMethodCallback, 0, 1},
    {"createAnswer", RTCPeerConnectionV8Internal::createAnswerMethodCallback, 0, 1},
    {"setLocalDescription", RTCPeerConnectionV8Internal::setLocalDescriptionMethodCallback, 0, 1},
    {"setRemoteDescription", RTCPeerConnectionV8Internal::setRemoteDescriptionMethodCallback, 0, 1},
    {"updateIce", RTCPeerConnectionV8Internal::updateIceMethodCallback, 0, 0},
    {"addIceCandidate", RTCPeerConnectionV8Internal::addIceCandidateMethodCallback, 0, 1},
    {"getLocalStreams", RTCPeerConnectionV8Internal::getLocalStreamsMethodCallback, 0, 0},
    {"getRemoteStreams", RTCPeerConnectionV8Internal::getRemoteStreamsMethodCallback, 0, 0},
    {"getStreamById", RTCPeerConnectionV8Internal::getStreamByIdMethodCallback, 0, 1},
    {"addStream", RTCPeerConnectionV8Internal::addStreamMethodCallback, 0, 1},
    {"removeStream", RTCPeerConnectionV8Internal::removeStreamMethodCallback, 0, 1},
    {"getStats", RTCPeerConnectionV8Internal::getStatsMethodCallback, 0, 1},
    {"createDataChannel", RTCPeerConnectionV8Internal::createDataChannelMethodCallback, 0, 1},
    {"createDTMFSender", RTCPeerConnectionV8Internal::createDTMFSenderMethodCallback, 0, 1},
    {"close", RTCPeerConnectionV8Internal::closeMethodCallback, 0, 0},
};

void V8RTCPeerConnection::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("RTCPeerConnection"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    RTCPeerConnectionV8Internal::constructor(info);
}

static void configureV8RTCPeerConnectionTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "RTCPeerConnection", V8EventTarget::domTemplate(isolate), V8RTCPeerConnection::internalFieldCount,
        V8RTCPeerConnectionAttributes, WTF_ARRAY_LENGTH(V8RTCPeerConnectionAttributes),
        0, 0,
        V8RTCPeerConnectionMethods, WTF_ARRAY_LENGTH(V8RTCPeerConnectionMethods),
        isolate);
    functionTemplate->SetCallHandler(V8RTCPeerConnection::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8RTCPeerConnection::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8RTCPeerConnectionTemplate);
}

bool V8RTCPeerConnection::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8RTCPeerConnection::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

RTCPeerConnection* V8RTCPeerConnection::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

ActiveDOMObject* V8RTCPeerConnection::toActiveDOMObject(v8::Handle<v8::Object> wrapper)
{
    return toNative(wrapper);
}

EventTarget* V8RTCPeerConnection::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(RTCPeerConnection* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8RTCPeerConnection>(impl, isolate));
    return V8RTCPeerConnection::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8RTCPeerConnection::createWrapper(PassRefPtrWillBeRawPtr<RTCPeerConnection> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8RTCPeerConnection>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8RTCPeerConnection>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8RTCPeerConnection::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(RTCPeerConnection* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
