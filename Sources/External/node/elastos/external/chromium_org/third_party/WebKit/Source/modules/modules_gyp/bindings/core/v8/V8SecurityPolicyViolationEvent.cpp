// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SecurityPolicyViolationEvent.h"

#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SecurityPolicyViolationEvent* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SecurityPolicyViolationEvent::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SecurityPolicyViolationEvent* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SecurityPolicyViolationEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8SecurityPolicyViolationEvent::domTemplate, V8SecurityPolicyViolationEvent::derefObject, 0, 0, 0, V8SecurityPolicyViolationEvent::installPerContextEnabledMethods, &V8Event::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace SecurityPolicyViolationEventV8Internal {

template <typename T> void V8_USE(T) { }

static void documentURIAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->documentURI(), info.GetIsolate());
}

static void documentURIAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::documentURIAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void referrerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->referrer(), info.GetIsolate());
}

static void referrerAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::referrerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void blockedURIAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->blockedURI(), info.GetIsolate());
}

static void blockedURIAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::blockedURIAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void violatedDirectiveAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->violatedDirective(), info.GetIsolate());
}

static void violatedDirectiveAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::violatedDirectiveAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void effectiveDirectiveAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->effectiveDirective(), info.GetIsolate());
}

static void effectiveDirectiveAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::effectiveDirectiveAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void originalPolicyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->originalPolicy(), info.GetIsolate());
}

static void originalPolicyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::originalPolicyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sourceFileAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueString(info, impl->sourceFile(), info.GetIsolate());
}

static void sourceFileAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::sourceFileAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void lineNumberAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueInt(info, impl->lineNumber());
}

static void lineNumberAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::lineNumberAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void columnNumberAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueInt(info, impl->columnNumber());
}

static void columnNumberAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::columnNumberAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void statusCodeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SecurityPolicyViolationEvent* impl = V8SecurityPolicyViolationEvent::toNative(holder);
    v8SetReturnValueInt(info, impl->statusCode());
}

static void statusCodeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SecurityPolicyViolationEventV8Internal::statusCodeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "SecurityPolicyViolationEvent", info.Holder(), isolate);
    if (info.Length() < 1) {
        exceptionState.throwTypeError("An event name must be provided.");
        exceptionState.throwIfNeeded();
        return;
    }

    TOSTRING_VOID(V8StringResource<>, type, info[0]);
    SecurityPolicyViolationEventInit eventInit;
    if (info.Length() >= 2) {
        TONATIVE_VOID(Dictionary, options, Dictionary(info[1], isolate));
        if (!initializeSecurityPolicyViolationEvent(eventInit, options, exceptionState, info)) {
            exceptionState.throwIfNeeded();
            return;
        }
    }
    RefPtrWillBeRawPtr<SecurityPolicyViolationEvent> event = SecurityPolicyViolationEvent::create(type, eventInit);
    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8SecurityPolicyViolationEvent>(event.release(), &V8SecurityPolicyViolationEvent::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

} // namespace SecurityPolicyViolationEventV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8SecurityPolicyViolationEventAttributes[] = {
    {"documentURI", SecurityPolicyViolationEventV8Internal::documentURIAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"referrer", SecurityPolicyViolationEventV8Internal::referrerAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"blockedURI", SecurityPolicyViolationEventV8Internal::blockedURIAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"violatedDirective", SecurityPolicyViolationEventV8Internal::violatedDirectiveAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"effectiveDirective", SecurityPolicyViolationEventV8Internal::effectiveDirectiveAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"originalPolicy", SecurityPolicyViolationEventV8Internal::originalPolicyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"sourceFile", SecurityPolicyViolationEventV8Internal::sourceFileAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"lineNumber", SecurityPolicyViolationEventV8Internal::lineNumberAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"columnNumber", SecurityPolicyViolationEventV8Internal::columnNumberAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"statusCode", SecurityPolicyViolationEventV8Internal::statusCodeAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

bool initializeSecurityPolicyViolationEvent(SecurityPolicyViolationEventInit& eventInit, const Dictionary& options, ExceptionState& exceptionState, const v8::FunctionCallbackInfo<v8::Value>& info, const String& forEventName)
{
    Dictionary::ConversionContext conversionContext(forEventName.isEmpty() ? String("SecurityPolicyViolationEvent") : forEventName, "", exceptionState);
    if (!initializeEvent(eventInit, options, exceptionState, info, forEventName.isEmpty() ? String("SecurityPolicyViolationEvent") : forEventName))
        return false;

    if (!options.convert(conversionContext.setConversionType("DOMString", false), "documentURI", eventInit.documentURI))
        return false;
    if (!options.convert(conversionContext.setConversionType("DOMString", false), "referrer", eventInit.referrer))
        return false;
    if (!options.convert(conversionContext.setConversionType("DOMString", false), "blockedURI", eventInit.blockedURI))
        return false;
    if (!options.convert(conversionContext.setConversionType("DOMString", false), "violatedDirective", eventInit.violatedDirective))
        return false;
    if (!options.convert(conversionContext.setConversionType("DOMString", false), "effectiveDirective", eventInit.effectiveDirective))
        return false;
    if (!options.convert(conversionContext.setConversionType("DOMString", false), "originalPolicy", eventInit.originalPolicy))
        return false;
    if (!options.convert(conversionContext.setConversionType("DOMString", false), "sourceFile", eventInit.sourceFile))
        return false;
    if (!options.convert(conversionContext.setConversionType("long", false), "lineNumber", eventInit.lineNumber))
        return false;
    if (!options.convert(conversionContext.setConversionType("long", false), "columnNumber", eventInit.columnNumber))
        return false;
    if (!options.convert(conversionContext.setConversionType("long", false), "statusCode", eventInit.statusCode))
        return false;
    return true;
}

void V8SecurityPolicyViolationEvent::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("SecurityPolicyViolationEvent"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    SecurityPolicyViolationEventV8Internal::constructor(info);
}

static void configureV8SecurityPolicyViolationEventTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::experimentalContentSecurityPolicyFeaturesEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "", V8Event::domTemplate(isolate), V8SecurityPolicyViolationEvent::internalFieldCount, 0, 0, 0, 0, 0, 0, isolate);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SecurityPolicyViolationEvent", V8Event::domTemplate(isolate), V8SecurityPolicyViolationEvent::internalFieldCount,
            V8SecurityPolicyViolationEventAttributes, WTF_ARRAY_LENGTH(V8SecurityPolicyViolationEventAttributes),
            0, 0,
            0, 0,
            isolate);
    functionTemplate->SetCallHandler(V8SecurityPolicyViolationEvent::constructorCallback);
    functionTemplate->SetLength(1);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SecurityPolicyViolationEvent::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SecurityPolicyViolationEventTemplate);
}

bool V8SecurityPolicyViolationEvent::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SecurityPolicyViolationEvent::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SecurityPolicyViolationEvent* V8SecurityPolicyViolationEvent::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(SecurityPolicyViolationEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SecurityPolicyViolationEvent>(impl, isolate));
    return V8SecurityPolicyViolationEvent::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SecurityPolicyViolationEvent::createWrapper(PassRefPtrWillBeRawPtr<SecurityPolicyViolationEvent> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SecurityPolicyViolationEvent>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SecurityPolicyViolationEvent>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8SecurityPolicyViolationEvent::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(SecurityPolicyViolationEvent* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
