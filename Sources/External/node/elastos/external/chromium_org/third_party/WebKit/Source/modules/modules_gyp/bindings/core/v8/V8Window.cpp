// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8Window.h"

#include "../../../../../out/target/product/victara/obj/GYP/shared_intermediates/blink/core/WindowCoreConstructors.h"
#include "../../../../../out/target/product/victara/obj/GYP/shared_intermediates/blink/modules/WindowModulesConstructors.h"
#include "bindings/core/v8/V8Animation.h"
#include "bindings/core/v8/V8AnimationNode.h"
#include "bindings/core/v8/V8AnimationPlayerEvent.h"
#include "bindings/core/v8/V8AnimationTimeline.h"
#include "bindings/core/v8/V8ApplicationCache.h"
#include "bindings/core/v8/V8ApplicationCacheErrorEvent.h"
#include "bindings/core/v8/V8Attr.h"
#include "bindings/core/v8/V8AudioTrack.h"
#include "bindings/core/v8/V8AudioTrackList.h"
#include "bindings/core/v8/V8AutocompleteErrorEvent.h"
#include "bindings/core/v8/V8BarProp.h"
#include "bindings/core/v8/V8BeforeUnloadEvent.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8CDATASection.h"
#include "bindings/core/v8/V8CSS.h"
#include "bindings/core/v8/V8CSSCharsetRule.h"
#include "bindings/core/v8/V8CSSFontFaceRule.h"
#include "bindings/core/v8/V8CSSImportRule.h"
#include "bindings/core/v8/V8CSSKeyframeRule.h"
#include "bindings/core/v8/V8CSSKeyframesRule.h"
#include "bindings/core/v8/V8CSSMediaRule.h"
#include "bindings/core/v8/V8CSSPageRule.h"
#include "bindings/core/v8/V8CSSPrimitiveValue.h"
#include "bindings/core/v8/V8CSSRule.h"
#include "bindings/core/v8/V8CSSRuleList.h"
#include "bindings/core/v8/V8CSSStyleDeclaration.h"
#include "bindings/core/v8/V8CSSStyleRule.h"
#include "bindings/core/v8/V8CSSStyleSheet.h"
#include "bindings/core/v8/V8CSSUnknownRule.h"
#include "bindings/core/v8/V8CSSValue.h"
#include "bindings/core/v8/V8CSSValueList.h"
#include "bindings/core/v8/V8CSSViewportRule.h"
#include "bindings/core/v8/V8CanvasGradient.h"
#include "bindings/core/v8/V8CanvasPattern.h"
#include "bindings/core/v8/V8CanvasRenderingContext2D.h"
#include "bindings/core/v8/V8CharacterData.h"
#include "bindings/core/v8/V8ClientRect.h"
#include "bindings/core/v8/V8ClientRectList.h"
#include "bindings/core/v8/V8Comment.h"
#include "bindings/core/v8/V8CompositionEvent.h"
#include "bindings/core/v8/V8Console.h"
#include "bindings/core/v8/V8Counter.h"
#include "bindings/core/v8/V8CustomEvent.h"
#include "bindings/core/v8/V8DOMError.h"
#include "bindings/core/v8/V8DOMException.h"
#include "bindings/core/v8/V8DOMImplementation.h"
#include "bindings/core/v8/V8DOMParser.h"
#include "bindings/core/v8/V8DOMSettableTokenList.h"
#include "bindings/core/v8/V8DOMStringList.h"
#include "bindings/core/v8/V8DOMStringMap.h"
#include "bindings/core/v8/V8DOMTokenList.h"
#include "bindings/core/v8/V8DataTransfer.h"
#include "bindings/core/v8/V8DataTransferItemList.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8DocumentFragment.h"
#include "bindings/core/v8/V8DocumentType.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8ErrorEvent.h"
#include "bindings/core/v8/V8Event.h"
#include "bindings/core/v8/V8EventSource.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/core/v8/V8File.h"
#include "bindings/core/v8/V8FileError.h"
#include "bindings/core/v8/V8FileList.h"
#include "bindings/core/v8/V8FileReader.h"
#include "bindings/core/v8/V8FocusEvent.h"
#include "bindings/core/v8/V8FontFace.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8HTMLAllCollection.h"
#include "bindings/core/v8/V8HTMLAnchorElement.h"
#include "bindings/core/v8/V8HTMLAppletElement.h"
#include "bindings/core/v8/V8HTMLAreaElement.h"
#include "bindings/core/v8/V8HTMLAudioElement.h"
#include "bindings/core/v8/V8HTMLBRElement.h"
#include "bindings/core/v8/V8HTMLBaseElement.h"
#include "bindings/core/v8/V8HTMLBodyElement.h"
#include "bindings/core/v8/V8HTMLButtonElement.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8HTMLCollection.h"
#include "bindings/core/v8/V8HTMLContentElement.h"
#include "bindings/core/v8/V8HTMLDListElement.h"
#include "bindings/core/v8/V8HTMLDataListElement.h"
#include "bindings/core/v8/V8HTMLDialogElement.h"
#include "bindings/core/v8/V8HTMLDirectoryElement.h"
#include "bindings/core/v8/V8HTMLDivElement.h"
#include "bindings/core/v8/V8HTMLDocument.h"
#include "bindings/core/v8/V8HTMLElement.h"
#include "bindings/core/v8/V8HTMLEmbedElement.h"
#include "bindings/core/v8/V8HTMLFieldSetElement.h"
#include "bindings/core/v8/V8HTMLFontElement.h"
#include "bindings/core/v8/V8HTMLFormControlsCollection.h"
#include "bindings/core/v8/V8HTMLFormElement.h"
#include "bindings/core/v8/V8HTMLFrameElement.h"
#include "bindings/core/v8/V8HTMLFrameSetElement.h"
#include "bindings/core/v8/V8HTMLHRElement.h"
#include "bindings/core/v8/V8HTMLHeadElement.h"
#include "bindings/core/v8/V8HTMLHeadingElement.h"
#include "bindings/core/v8/V8HTMLHtmlElement.h"
#include "bindings/core/v8/V8HTMLIFrameElement.h"
#include "bindings/core/v8/V8HTMLImageElement.h"
#include "bindings/core/v8/V8HTMLInputElement.h"
#include "bindings/core/v8/V8HTMLKeygenElement.h"
#include "bindings/core/v8/V8HTMLLIElement.h"
#include "bindings/core/v8/V8HTMLLabelElement.h"
#include "bindings/core/v8/V8HTMLLegendElement.h"
#include "bindings/core/v8/V8HTMLLinkElement.h"
#include "bindings/core/v8/V8HTMLMapElement.h"
#include "bindings/core/v8/V8HTMLMarqueeElement.h"
#include "bindings/core/v8/V8HTMLMediaElement.h"
#include "bindings/core/v8/V8HTMLMenuElement.h"
#include "bindings/core/v8/V8HTMLMetaElement.h"
#include "bindings/core/v8/V8HTMLMeterElement.h"
#include "bindings/core/v8/V8HTMLModElement.h"
#include "bindings/core/v8/V8HTMLOListElement.h"
#include "bindings/core/v8/V8HTMLObjectElement.h"
#include "bindings/core/v8/V8HTMLOptGroupElement.h"
#include "bindings/core/v8/V8HTMLOptionElement.h"
#include "bindings/core/v8/V8HTMLOptionsCollection.h"
#include "bindings/core/v8/V8HTMLOutputElement.h"
#include "bindings/core/v8/V8HTMLParagraphElement.h"
#include "bindings/core/v8/V8HTMLParamElement.h"
#include "bindings/core/v8/V8HTMLPictureElement.h"
#include "bindings/core/v8/V8HTMLPreElement.h"
#include "bindings/core/v8/V8HTMLProgressElement.h"
#include "bindings/core/v8/V8HTMLQuoteElement.h"
#include "bindings/core/v8/V8HTMLScriptElement.h"
#include "bindings/core/v8/V8HTMLSelectElement.h"
#include "bindings/core/v8/V8HTMLShadowElement.h"
#include "bindings/core/v8/V8HTMLSourceElement.h"
#include "bindings/core/v8/V8HTMLSpanElement.h"
#include "bindings/core/v8/V8HTMLStyleElement.h"
#include "bindings/core/v8/V8HTMLTableCaptionElement.h"
#include "bindings/core/v8/V8HTMLTableCellElement.h"
#include "bindings/core/v8/V8HTMLTableColElement.h"
#include "bindings/core/v8/V8HTMLTableElement.h"
#include "bindings/core/v8/V8HTMLTableRowElement.h"
#include "bindings/core/v8/V8HTMLTableSectionElement.h"
#include "bindings/core/v8/V8HTMLTemplateElement.h"
#include "bindings/core/v8/V8HTMLTextAreaElement.h"
#include "bindings/core/v8/V8HTMLTitleElement.h"
#include "bindings/core/v8/V8HTMLTrackElement.h"
#include "bindings/core/v8/V8HTMLUListElement.h"
#include "bindings/core/v8/V8HTMLUnknownElement.h"
#include "bindings/core/v8/V8HTMLVideoElement.h"
#include "bindings/core/v8/V8HashChangeEvent.h"
#include "bindings/core/v8/V8History.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8InputMethodContext.h"
#include "bindings/core/v8/V8KeyboardEvent.h"
#include "bindings/core/v8/V8Location.h"
#include "bindings/core/v8/V8MediaController.h"
#include "bindings/core/v8/V8MediaError.h"
#include "bindings/core/v8/V8MediaKeyError.h"
#include "bindings/core/v8/V8MediaKeyEvent.h"
#include "bindings/core/v8/V8MediaList.h"
#include "bindings/core/v8/V8MediaQueryList.h"
#include "bindings/core/v8/V8MessageChannel.h"
#include "bindings/core/v8/V8MessageEvent.h"
#include "bindings/core/v8/V8MessagePort.h"
#include "bindings/core/v8/V8MimeType.h"
#include "bindings/core/v8/V8MimeTypeArray.h"
#include "bindings/core/v8/V8MouseEvent.h"
#include "bindings/core/v8/V8MutationEvent.h"
#include "bindings/core/v8/V8MutationObserver.h"
#include "bindings/core/v8/V8MutationRecord.h"
#include "bindings/core/v8/V8NamedNodeMap.h"
#include "bindings/core/v8/V8Navigator.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8NodeFilter.h"
#include "bindings/core/v8/V8NodeIterator.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8Notation.h"
#include "bindings/core/v8/V8OverflowEvent.h"
#include "bindings/core/v8/V8PagePopupController.h"
#include "bindings/core/v8/V8PageTransitionEvent.h"
#include "bindings/core/v8/V8Path2D.h"
#include "bindings/core/v8/V8Performance.h"
#include "bindings/core/v8/V8PerformanceEntry.h"
#include "bindings/core/v8/V8PerformanceMark.h"
#include "bindings/core/v8/V8PerformanceMeasure.h"
#include "bindings/core/v8/V8PerformanceNavigation.h"
#include "bindings/core/v8/V8PerformanceResourceTiming.h"
#include "bindings/core/v8/V8PerformanceTiming.h"
#include "bindings/core/v8/V8Plugin.h"
#include "bindings/core/v8/V8PluginArray.h"
#include "bindings/core/v8/V8PopStateEvent.h"
#include "bindings/core/v8/V8ProcessingInstruction.h"
#include "bindings/core/v8/V8ProgressEvent.h"
#include "bindings/core/v8/V8RGBColor.h"
#include "bindings/core/v8/V8Range.h"
#include "bindings/core/v8/V8Rect.h"
#include "bindings/core/v8/V8RequestAnimationFrameCallback.h"
#include "bindings/core/v8/V8SVGAElement.h"
#include "bindings/core/v8/V8SVGAltGlyphDefElement.h"
#include "bindings/core/v8/V8SVGAltGlyphElement.h"
#include "bindings/core/v8/V8SVGAltGlyphItemElement.h"
#include "bindings/core/v8/V8SVGAngle.h"
#include "bindings/core/v8/V8SVGAnimateElement.h"
#include "bindings/core/v8/V8SVGAnimateMotionElement.h"
#include "bindings/core/v8/V8SVGAnimateTransformElement.h"
#include "bindings/core/v8/V8SVGAnimatedAngle.h"
#include "bindings/core/v8/V8SVGAnimatedBoolean.h"
#include "bindings/core/v8/V8SVGAnimatedEnumeration.h"
#include "bindings/core/v8/V8SVGAnimatedInteger.h"
#include "bindings/core/v8/V8SVGAnimatedLength.h"
#include "bindings/core/v8/V8SVGAnimatedLengthList.h"
#include "bindings/core/v8/V8SVGAnimatedNumber.h"
#include "bindings/core/v8/V8SVGAnimatedNumberList.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "bindings/core/v8/V8SVGAnimatedString.h"
#include "bindings/core/v8/V8SVGAnimatedTransformList.h"
#include "bindings/core/v8/V8SVGAnimationElement.h"
#include "bindings/core/v8/V8SVGCircleElement.h"
#include "bindings/core/v8/V8SVGClipPathElement.h"
#include "bindings/core/v8/V8SVGComponentTransferFunctionElement.h"
#include "bindings/core/v8/V8SVGCursorElement.h"
#include "bindings/core/v8/V8SVGDefsElement.h"
#include "bindings/core/v8/V8SVGDescElement.h"
#include "bindings/core/v8/V8SVGDiscardElement.h"
#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/core/v8/V8SVGEllipseElement.h"
#include "bindings/core/v8/V8SVGFEBlendElement.h"
#include "bindings/core/v8/V8SVGFEColorMatrixElement.h"
#include "bindings/core/v8/V8SVGFEComponentTransferElement.h"
#include "bindings/core/v8/V8SVGFECompositeElement.h"
#include "bindings/core/v8/V8SVGFEConvolveMatrixElement.h"
#include "bindings/core/v8/V8SVGFEDiffuseLightingElement.h"
#include "bindings/core/v8/V8SVGFEDisplacementMapElement.h"
#include "bindings/core/v8/V8SVGFEDistantLightElement.h"
#include "bindings/core/v8/V8SVGFEDropShadowElement.h"
#include "bindings/core/v8/V8SVGFEFloodElement.h"
#include "bindings/core/v8/V8SVGFEFuncAElement.h"
#include "bindings/core/v8/V8SVGFEFuncBElement.h"
#include "bindings/core/v8/V8SVGFEFuncGElement.h"
#include "bindings/core/v8/V8SVGFEFuncRElement.h"
#include "bindings/core/v8/V8SVGFEGaussianBlurElement.h"
#include "bindings/core/v8/V8SVGFEImageElement.h"
#include "bindings/core/v8/V8SVGFEMergeElement.h"
#include "bindings/core/v8/V8SVGFEMergeNodeElement.h"
#include "bindings/core/v8/V8SVGFEMorphologyElement.h"
#include "bindings/core/v8/V8SVGFEOffsetElement.h"
#include "bindings/core/v8/V8SVGFEPointLightElement.h"
#include "bindings/core/v8/V8SVGFESpecularLightingElement.h"
#include "bindings/core/v8/V8SVGFESpotLightElement.h"
#include "bindings/core/v8/V8SVGFETileElement.h"
#include "bindings/core/v8/V8SVGFETurbulenceElement.h"
#include "bindings/core/v8/V8SVGFilterElement.h"
#include "bindings/core/v8/V8SVGFontElement.h"
#include "bindings/core/v8/V8SVGFontFaceElement.h"
#include "bindings/core/v8/V8SVGFontFaceFormatElement.h"
#include "bindings/core/v8/V8SVGFontFaceNameElement.h"
#include "bindings/core/v8/V8SVGFontFaceSrcElement.h"
#include "bindings/core/v8/V8SVGFontFaceUriElement.h"
#include "bindings/core/v8/V8SVGForeignObjectElement.h"
#include "bindings/core/v8/V8SVGGElement.h"
#include "bindings/core/v8/V8SVGGeometryElement.h"
#include "bindings/core/v8/V8SVGGlyphElement.h"
#include "bindings/core/v8/V8SVGGlyphRefElement.h"
#include "bindings/core/v8/V8SVGGradientElement.h"
#include "bindings/core/v8/V8SVGGraphicsElement.h"
#include "bindings/core/v8/V8SVGHKernElement.h"
#include "bindings/core/v8/V8SVGImageElement.h"
#include "bindings/core/v8/V8SVGLength.h"
#include "bindings/core/v8/V8SVGLengthList.h"
#include "bindings/core/v8/V8SVGLineElement.h"
#include "bindings/core/v8/V8SVGLinearGradientElement.h"
#include "bindings/core/v8/V8SVGMPathElement.h"
#include "bindings/core/v8/V8SVGMarkerElement.h"
#include "bindings/core/v8/V8SVGMaskElement.h"
#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/core/v8/V8SVGMetadataElement.h"
#include "bindings/core/v8/V8SVGMissingGlyphElement.h"
#include "bindings/core/v8/V8SVGNumber.h"
#include "bindings/core/v8/V8SVGNumberList.h"
#include "bindings/core/v8/V8SVGPathElement.h"
#include "bindings/core/v8/V8SVGPathSeg.h"
#include "bindings/core/v8/V8SVGPathSegArcAbs.h"
#include "bindings/core/v8/V8SVGPathSegArcRel.h"
#include "bindings/core/v8/V8SVGPathSegClosePath.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicRel.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicSmoothAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoCubicSmoothRel.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticRel.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticSmoothAbs.h"
#include "bindings/core/v8/V8SVGPathSegCurvetoQuadraticSmoothRel.h"
#include "bindings/core/v8/V8SVGPathSegLinetoAbs.h"
#include "bindings/core/v8/V8SVGPathSegLinetoHorizontalAbs.h"
#include "bindings/core/v8/V8SVGPathSegLinetoHorizontalRel.h"
#include "bindings/core/v8/V8SVGPathSegLinetoRel.h"
#include "bindings/core/v8/V8SVGPathSegLinetoVerticalAbs.h"
#include "bindings/core/v8/V8SVGPathSegLinetoVerticalRel.h"
#include "bindings/core/v8/V8SVGPathSegList.h"
#include "bindings/core/v8/V8SVGPathSegMovetoAbs.h"
#include "bindings/core/v8/V8SVGPathSegMovetoRel.h"
#include "bindings/core/v8/V8SVGPatternElement.h"
#include "bindings/core/v8/V8SVGPoint.h"
#include "bindings/core/v8/V8SVGPointList.h"
#include "bindings/core/v8/V8SVGPolygonElement.h"
#include "bindings/core/v8/V8SVGPolylineElement.h"
#include "bindings/core/v8/V8SVGPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGRadialGradientElement.h"
#include "bindings/core/v8/V8SVGRect.h"
#include "bindings/core/v8/V8SVGRectElement.h"
#include "bindings/core/v8/V8SVGRenderingIntent.h"
#include "bindings/core/v8/V8SVGSVGElement.h"
#include "bindings/core/v8/V8SVGScriptElement.h"
#include "bindings/core/v8/V8SVGSetElement.h"
#include "bindings/core/v8/V8SVGStopElement.h"
#include "bindings/core/v8/V8SVGStringList.h"
#include "bindings/core/v8/V8SVGStyleElement.h"
#include "bindings/core/v8/V8SVGSwitchElement.h"
#include "bindings/core/v8/V8SVGSymbolElement.h"
#include "bindings/core/v8/V8SVGTSpanElement.h"
#include "bindings/core/v8/V8SVGTextContentElement.h"
#include "bindings/core/v8/V8SVGTextElement.h"
#include "bindings/core/v8/V8SVGTextPathElement.h"
#include "bindings/core/v8/V8SVGTextPositioningElement.h"
#include "bindings/core/v8/V8SVGTitleElement.h"
#include "bindings/core/v8/V8SVGTransform.h"
#include "bindings/core/v8/V8SVGTransformList.h"
#include "bindings/core/v8/V8SVGUnitTypes.h"
#include "bindings/core/v8/V8SVGUseElement.h"
#include "bindings/core/v8/V8SVGVKernElement.h"
#include "bindings/core/v8/V8SVGViewElement.h"
#include "bindings/core/v8/V8SVGViewSpec.h"
#include "bindings/core/v8/V8SVGZoomEvent.h"
#include "bindings/core/v8/V8Screen.h"
#include "bindings/core/v8/V8SecurityPolicyViolationEvent.h"
#include "bindings/core/v8/V8Selection.h"
#include "bindings/core/v8/V8ShadowRoot.h"
#include "bindings/core/v8/V8SharedWorker.h"
#include "bindings/core/v8/V8Storage.h"
#include "bindings/core/v8/V8StorageEvent.h"
#include "bindings/core/v8/V8Stream.h"
#include "bindings/core/v8/V8StyleMedia.h"
#include "bindings/core/v8/V8StyleSheet.h"
#include "bindings/core/v8/V8StyleSheetList.h"
#include "bindings/core/v8/V8Text.h"
#include "bindings/core/v8/V8TextEvent.h"
#include "bindings/core/v8/V8TextMetrics.h"
#include "bindings/core/v8/V8TextTrack.h"
#include "bindings/core/v8/V8TextTrackCue.h"
#include "bindings/core/v8/V8TextTrackCueList.h"
#include "bindings/core/v8/V8TextTrackList.h"
#include "bindings/core/v8/V8TimeRanges.h"
#include "bindings/core/v8/V8Timing.h"
#include "bindings/core/v8/V8Touch.h"
#include "bindings/core/v8/V8TouchEvent.h"
#include "bindings/core/v8/V8TouchList.h"
#include "bindings/core/v8/V8TrackEvent.h"
#include "bindings/core/v8/V8TransitionEvent.h"
#include "bindings/core/v8/V8TreeWalker.h"
#include "bindings/core/v8/V8UIEvent.h"
#include "bindings/core/v8/V8URL.h"
#include "bindings/core/v8/V8VTTCue.h"
#include "bindings/core/v8/V8VTTRegion.h"
#include "bindings/core/v8/V8VTTRegionList.h"
#include "bindings/core/v8/V8ValidityState.h"
#include "bindings/core/v8/V8VideoTrack.h"
#include "bindings/core/v8/V8VideoTrackList.h"
#include "bindings/core/v8/V8WebGLActiveInfo.h"
#include "bindings/core/v8/V8WebGLBuffer.h"
#include "bindings/core/v8/V8WebGLContextEvent.h"
#include "bindings/core/v8/V8WebGLFramebuffer.h"
#include "bindings/core/v8/V8WebGLProgram.h"
#include "bindings/core/v8/V8WebGLRenderbuffer.h"
#include "bindings/core/v8/V8WebGLRenderingContext.h"
#include "bindings/core/v8/V8WebGLShader.h"
#include "bindings/core/v8/V8WebGLShaderPrecisionFormat.h"
#include "bindings/core/v8/V8WebGLTexture.h"
#include "bindings/core/v8/V8WebGLUniformLocation.h"
#include "bindings/core/v8/V8WebKitAnimationEvent.h"
#include "bindings/core/v8/V8WebKitCSSFilterRule.h"
#include "bindings/core/v8/V8WebKitCSSFilterValue.h"
#include "bindings/core/v8/V8WebKitCSSMatrix.h"
#include "bindings/core/v8/V8WebKitCSSTransformValue.h"
#include "bindings/core/v8/V8WebKitPoint.h"
#include "bindings/core/v8/V8WheelEvent.h"
#include "bindings/core/v8/V8Window.h"
#include "bindings/core/v8/V8Worker.h"
#include "bindings/core/v8/V8XMLDocument.h"
#include "bindings/core/v8/V8XMLHttpRequest.h"
#include "bindings/core/v8/V8XMLHttpRequestProgressEvent.h"
#include "bindings/core/v8/V8XMLHttpRequestUpload.h"
#include "bindings/core/v8/V8XMLSerializer.h"
#include "bindings/core/v8/V8XPathEvaluator.h"
#include "bindings/core/v8/V8XPathExpression.h"
#include "bindings/core/v8/V8XPathResult.h"
#include "bindings/core/v8/V8XSLTProcessor.h"
#include "bindings/modules/v8/V8AnalyserNode.h"
#include "bindings/modules/v8/V8AudioBuffer.h"
#include "bindings/modules/v8/V8AudioBufferSourceNode.h"
#include "bindings/modules/v8/V8AudioContext.h"
#include "bindings/modules/v8/V8AudioDestinationNode.h"
#include "bindings/modules/v8/V8AudioListener.h"
#include "bindings/modules/v8/V8AudioNode.h"
#include "bindings/modules/v8/V8AudioParam.h"
#include "bindings/modules/v8/V8AudioProcessingEvent.h"
#include "bindings/modules/v8/V8BatteryManager.h"
#include "bindings/modules/v8/V8BiquadFilterNode.h"
#include "bindings/modules/v8/V8ChannelMergerNode.h"
#include "bindings/modules/v8/V8ChannelSplitterNode.h"
#include "bindings/modules/v8/V8CloseEvent.h"
#include "bindings/modules/v8/V8ConvolverNode.h"
#include "bindings/modules/v8/V8Crypto.h"
#include "bindings/modules/v8/V8Database.h"
#include "bindings/modules/v8/V8DatabaseCallback.h"
#include "bindings/modules/v8/V8DelayNode.h"
#include "bindings/modules/v8/V8DeprecatedStorageInfo.h"
#include "bindings/modules/v8/V8DeviceLightEvent.h"
#include "bindings/modules/v8/V8DeviceMotionEvent.h"
#include "bindings/modules/v8/V8DeviceOrientationEvent.h"
#include "bindings/modules/v8/V8DynamicsCompressorNode.h"
#include "bindings/modules/v8/V8EntryCallback.h"
#include "bindings/modules/v8/V8ErrorCallback.h"
#include "bindings/modules/v8/V8FileSystemCallback.h"
#include "bindings/modules/v8/V8GainNode.h"
#include "bindings/modules/v8/V8Gamepad.h"
#include "bindings/modules/v8/V8GamepadEvent.h"
#include "bindings/modules/v8/V8IDBCursor.h"
#include "bindings/modules/v8/V8IDBCursorWithValue.h"
#include "bindings/modules/v8/V8IDBDatabase.h"
#include "bindings/modules/v8/V8IDBFactory.h"
#include "bindings/modules/v8/V8IDBIndex.h"
#include "bindings/modules/v8/V8IDBKeyRange.h"
#include "bindings/modules/v8/V8IDBObjectStore.h"
#include "bindings/modules/v8/V8IDBOpenDBRequest.h"
#include "bindings/modules/v8/V8IDBRequest.h"
#include "bindings/modules/v8/V8IDBTransaction.h"
#include "bindings/modules/v8/V8IDBVersionChangeEvent.h"
#include "bindings/modules/v8/V8MIDIConnectionEvent.h"
#include "bindings/modules/v8/V8MIDIMessageEvent.h"
#include "bindings/modules/v8/V8MediaElementAudioSourceNode.h"
#include "bindings/modules/v8/V8MediaKeyMessageEvent.h"
#include "bindings/modules/v8/V8MediaKeyNeededEvent.h"
#include "bindings/modules/v8/V8MediaKeySession.h"
#include "bindings/modules/v8/V8MediaKeys.h"
#include "bindings/modules/v8/V8MediaSource.h"
#include "bindings/modules/v8/V8MediaStream.h"
#include "bindings/modules/v8/V8MediaStreamAudioDestinationNode.h"
#include "bindings/modules/v8/V8MediaStreamAudioSourceNode.h"
#include "bindings/modules/v8/V8MediaStreamEvent.h"
#include "bindings/modules/v8/V8MediaStreamTrack.h"
#include "bindings/modules/v8/V8NetworkInformation.h"
#include "bindings/modules/v8/V8Notification.h"
#include "bindings/modules/v8/V8OfflineAudioCompletionEvent.h"
#include "bindings/modules/v8/V8OfflineAudioContext.h"
#include "bindings/modules/v8/V8OscillatorNode.h"
#include "bindings/modules/v8/V8PeriodicWave.h"
#include "bindings/modules/v8/V8PushEvent.h"
#include "bindings/modules/v8/V8RTCIceCandidate.h"
#include "bindings/modules/v8/V8RTCPeerConnection.h"
#include "bindings/modules/v8/V8RTCSessionDescription.h"
#include "bindings/modules/v8/V8ScriptProcessorNode.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "bindings/modules/v8/V8ServiceWorkerContainer.h"
#include "bindings/modules/v8/V8SpeechGrammar.h"
#include "bindings/modules/v8/V8SpeechGrammarList.h"
#include "bindings/modules/v8/V8SpeechRecognition.h"
#include "bindings/modules/v8/V8SpeechRecognitionError.h"
#include "bindings/modules/v8/V8SpeechRecognitionEvent.h"
#include "bindings/modules/v8/V8SpeechSynthesis.h"
#include "bindings/modules/v8/V8SpeechSynthesisEvent.h"
#include "bindings/modules/v8/V8SpeechSynthesisUtterance.h"
#include "bindings/modules/v8/V8TextDecoder.h"
#include "bindings/modules/v8/V8TextEncoder.h"
#include "bindings/modules/v8/V8VideoPlaybackQuality.h"
#include "bindings/modules/v8/V8WaveShaperNode.h"
#include "bindings/modules/v8/V8WebKitGamepad.h"
#include "bindings/modules/v8/V8WebSocket.h"
#include "bindings/v8/BindingSecurity.h"
#include "bindings/v8/Dictionary.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptPromise.h"
#include "bindings/v8/ScriptState.h"
#include "bindings/v8/ScriptValue.h"
#include "bindings/v8/SerializedScriptValue.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMActivityLogger.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8ErrorHandler.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/GlobalEventHandlers.h"
#include "core/frame/DOMWindowEventHandlers.h"
#include "core/frame/DOMWindowTimers.h"
#include "core/frame/UseCounter.h"
#include "core/page/DOMWindowPagePopup.h"
#include "modules/crypto/DOMWindowCrypto.h"
#include "modules/device_light/DOMWindowDeviceLight.h"
#include "modules/device_orientation/DOMWindowDeviceMotion.h"
#include "modules/device_orientation/DOMWindowDeviceOrientation.h"
#include "modules/filesystem/DOMWindowFileSystem.h"
#include "modules/imagebitmap/ImageBitmapFactories.h"
#include "modules/indexeddb/DOMWindowIndexedDatabase.h"
#include "modules/mediastream/DOMWindowMediaStream.h"
#include "modules/quota/DOMWindowQuota.h"
#include "modules/speech/DOMWindowSpeech.h"
#include "modules/speech/DOMWindowSpeechSynthesis.h"
#include "modules/webaudio/DOMWindowWebAudio.h"
#include "modules/webdatabase/DOMWindowWebDatabase.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(LocalDOMWindow* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8Window::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::LocalDOMWindow* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8Window::wrapperTypeInfo = { gin::kEmbedderBlink, V8Window::domTemplate, V8Window::derefObject, 0, V8Window::toEventTarget, 0, V8Window::installPerContextEnabledMethods, &V8EventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace LocalDOMWindowV8Internal {

template <typename T> void V8_USE(T) { }

static void screenAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Screen> result(impl->screen());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Screen>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "screen"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void screenAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::screenAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void historyAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<History> result(impl->history());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8History>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "history"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void historyAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::historyAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void locationbarAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<BarProp> result(impl->locationbar());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8BarProp>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "locationbar"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void locationbarAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::BarPropLocationbar);
    LocalDOMWindowV8Internal::locationbarAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void menubarAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<BarProp> result(impl->menubar());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8BarProp>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "menubar"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void menubarAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::BarPropMenubar);
    LocalDOMWindowV8Internal::menubarAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void personalbarAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<BarProp> result(impl->personalbar());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8BarProp>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "personalbar"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void personalbarAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::BarPropPersonalbar);
    LocalDOMWindowV8Internal::personalbarAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scrollbarsAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<BarProp> result(impl->scrollbars());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8BarProp>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "scrollbars"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void scrollbarsAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::BarPropScrollbars);
    LocalDOMWindowV8Internal::scrollbarsAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void statusbarAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<BarProp> result(impl->statusbar());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8BarProp>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "statusbar"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void statusbarAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::BarPropStatusbar);
    LocalDOMWindowV8Internal::statusbarAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void toolbarAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<BarProp> result(impl->toolbar());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8BarProp>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "toolbar"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void toolbarAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::BarPropToolbar);
    LocalDOMWindowV8Internal::toolbarAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void navigatorAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Navigator> result(impl->navigator());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Navigator>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "navigator"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void navigatorAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger())
        contextData->activityLogger()->logGetter("Window.navigator");
    LocalDOMWindowV8Internal::navigatorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clientInformationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Navigator> result(impl->clientInformation());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Navigator>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "clientInformation"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void clientInformationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::clientInformationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void locationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Location> result(impl->location());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Location>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "location"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void locationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger())
        contextData->activityLogger()->logGetter("Window.location");
    LocalDOMWindowV8Internal::locationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void locationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* proxyImpl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Location> impl = WTF::getPtr(proxyImpl->location());
    if (!impl)
        return;
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    impl->setHref(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}

static void locationAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.location", v8Value);
    }
    LocalDOMWindowV8Internal::locationAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void eventAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowEvent);
    V8Window::eventAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void eventAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowEvent);
    V8Window::eventAttributeSetterCustom(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void frameElementAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    V8Window::frameElementAttributeGetterCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void offscreenBufferingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueBool(info, impl->offscreenBuffering());
}

static void offscreenBufferingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowOffscreenBuffering);
    LocalDOMWindowV8Internal::offscreenBufferingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void outerHeightAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->outerHeight());
}

static void outerHeightAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::outerHeightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void outerWidthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->outerWidth());
}

static void outerWidthAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::outerWidthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void innerHeightAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->innerHeight());
}

static void innerHeightAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::innerHeightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void innerWidthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->innerWidth());
}

static void innerWidthAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::innerWidthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->screenX());
}

static void screenXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::screenXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->screenY());
}

static void screenYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::screenYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenLeftAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->screenLeft());
}

static void screenLeftAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::screenLeftAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenTopAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->screenTop());
}

static void screenTopAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::screenTopAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scrollXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->scrollX());
}

static void scrollXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::scrollXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scrollYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->scrollY());
}

static void scrollYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::scrollYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pageXOffsetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->pageXOffset());
}

static void pageXOffsetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::pageXOffsetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pageYOffsetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->pageYOffset());
}

static void pageYOffsetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::pageYOffsetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void closedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueBool(info, impl->closed());
}

static void closedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::closedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void lengthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->length());
}

static void lengthAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::lengthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void nameAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueString(info, impl->name(), info.GetIsolate());
}

static void nameAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::nameAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void nameAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    impl->setName(cppValue);
}

static void nameAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::nameAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void statusAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueString(info, impl->status(), info.GetIsolate());
}

static void statusAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::statusAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void statusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    impl->setStatus(cppValue);
}

static void statusAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::statusAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void defaultStatusAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueString(info, impl->defaultStatus(), info.GetIsolate());
}

static void defaultStatusAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultStatus);
    LocalDOMWindowV8Internal::defaultStatusAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void defaultStatusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    impl->setDefaultStatus(cppValue);
}

static void defaultStatusAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultStatus);
    LocalDOMWindowV8Internal::defaultStatusAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void defaultstatusAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueString(info, impl->defaultStatus(), info.GetIsolate());
}

static void defaultstatusAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultstatus);
    LocalDOMWindowV8Internal::defaultstatusAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void defaultstatusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    TOSTRING_VOID(V8StringResource<>, cppValue, v8Value);
    impl->setDefaultStatus(cppValue);
}

static void defaultstatusAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultstatus);
    LocalDOMWindowV8Internal::defaultstatusAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void selfAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->self()), impl);
}

static void selfAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::selfAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void windowAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->window()), impl);
}

static void windowAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::windowAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void framesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->frames()), impl);
}

static void framesAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::framesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->opener()), impl);
}

static void openerAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::openerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openerAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    V8Window::openerAttributeSetterCustom(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void parentAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->parent()), impl);
}

static void parentAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::parentAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void topAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->top()), impl);
}

static void topAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::topAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void documentAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->document()), impl);
}

static void documentAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::documentAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void styleMediaAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<StyleMedia> result(impl->styleMedia());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8StyleMedia>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "styleMedia"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void styleMediaAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::styleMediaAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void devicePixelRatioAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValue(info, impl->devicePixelRatio());
}

static void devicePixelRatioAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::devicePixelRatioAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void applicationCacheAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<ApplicationCache> result(impl->applicationCache());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8ApplicationCache>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "applicationCache"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void applicationCacheAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger())
        contextData->activityLogger()->logGetter("Window.applicationCache");
    LocalDOMWindowV8Internal::applicationCacheAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void sessionStorageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "sessionStorage", "Window", holder, info.GetIsolate());
    RefPtrWillBeRawPtr<Storage> v8Value = impl->sessionStorage(exceptionState);
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    RefPtrWillBeRawPtr<Storage> result(v8Value);
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Storage>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "sessionStorage"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void sessionStorageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger())
        contextData->activityLogger()->logGetter("Window.sessionStorage");
    LocalDOMWindowV8Internal::sessionStorageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void localStorageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "localStorage", "Window", holder, info.GetIsolate());
    RefPtrWillBeRawPtr<Storage> v8Value = impl->localStorage(exceptionState);
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    RefPtrWillBeRawPtr<Storage> result(v8Value);
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Storage>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "localStorage"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void localStorageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger())
        contextData->activityLogger()->logGetter("Window.localStorage");
    LocalDOMWindowV8Internal::localStorageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void orientationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8SetReturnValueInt(info, impl->orientation());
}

static void orientationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowOrientation);
    LocalDOMWindowV8Internal::orientationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void consoleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Console> result(impl->console());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Console>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "console"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void consoleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::consoleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void performanceAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<Performance> result(impl->performance());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Performance>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "performance"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void performanceAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::performanceAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void CSSAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<DOMWindowCSS> result(impl->css());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8CSS>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "CSS"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void CSSAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::CSSAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onanimationendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onanimationend();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onanimationendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onanimationendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onanimationendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onanimationend(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnanimationend(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onanimationendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onanimationendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onanimationiterationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onanimationiteration();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onanimationiterationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onanimationiterationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onanimationiterationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onanimationiteration(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnanimationiteration(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onanimationiterationAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onanimationiterationAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onanimationstartAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onanimationstart();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onanimationstartAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onanimationstartAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onanimationstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onanimationstart(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnanimationstart(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onanimationstartAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onanimationstartAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onorientationchangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onorientationchange();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onorientationchangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onorientationchangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onorientationchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onorientationchange(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnorientationchange(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onorientationchangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onorientationchangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsearchAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onsearch();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onsearchAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onsearchAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsearchAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onsearch(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnsearch(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onsearchAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onsearchAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchcancelAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->ontouchcancel();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontouchcancelAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontouchcancelAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchcancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->ontouchcancel(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOntouchcancel(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontouchcancelAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontouchcancelAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->ontouchend();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontouchendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontouchendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->ontouchend(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOntouchend(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontouchendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontouchendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchmoveAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->ontouchmove();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontouchmoveAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontouchmoveAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchmoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->ontouchmove(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOntouchmove(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontouchmoveAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontouchmoveAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchstartAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->ontouchstart();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontouchstartAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontouchstartAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontouchstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->ontouchstart(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOntouchstart(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontouchstartAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontouchstartAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontransitionendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->ontransitionend();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontransitionendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontransitionendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontransitionendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->ontransitionend(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOntransitionend(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontransitionendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontransitionendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitanimationendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onwebkitanimationend();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitanimationendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onwebkitanimationendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitanimationendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onwebkitanimationend(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnwebkitanimationend(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitanimationendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onwebkitanimationendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitanimationiterationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onwebkitanimationiteration();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitanimationiterationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onwebkitanimationiterationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitanimationiterationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onwebkitanimationiteration(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnwebkitanimationiteration(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitanimationiterationAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onwebkitanimationiterationAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitanimationstartAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onwebkitanimationstart();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkitanimationstartAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onwebkitanimationstartAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkitanimationstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onwebkitanimationstart(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnwebkitanimationstart(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkitanimationstartAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onwebkitanimationstartAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkittransitionendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onwebkittransitionend();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwebkittransitionendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onwebkittransitionendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwebkittransitionendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onwebkittransitionend(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnwebkittransitionend(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwebkittransitionendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onwebkittransitionendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwheelAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = impl->onwheel();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwheelAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onwheelAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwheelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, impl->onwheel(), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnwheel(V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwheelAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onwheel", v8Value);
    }
    LocalDOMWindowV8Internal::onwheelAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onabortAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onabort(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onabortAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onabortAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onabortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onabort(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnabort(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onabortAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onabortAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onautocompleteAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onautocomplete(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onautocompleteAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onautocompleteAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onautocompleteAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onautocomplete(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnautocomplete(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onautocompleteAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onautocompleteAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onautocompleteerrorAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onautocompleteerror(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onautocompleteerrorAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onautocompleteerrorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onautocompleteerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onautocompleteerror(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnautocompleteerror(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onautocompleteerrorAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onautocompleteerrorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onblurAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onblur(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onblurAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onblurAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onblurAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onblur(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnblur(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onblurAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onblurAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncancelAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oncancel(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncancelAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oncancelAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oncancel(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOncancel(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncancelAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oncancelAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncanplayAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oncanplay(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncanplayAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oncanplayAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncanplayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oncanplay(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOncanplay(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncanplayAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oncanplayAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncanplaythroughAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oncanplaythrough(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncanplaythroughAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oncanplaythroughAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncanplaythroughAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oncanplaythrough(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOncanplaythrough(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncanplaythroughAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oncanplaythroughAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onchangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onchange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onchangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onchangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onchange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnchange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onchangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onchangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onclickAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onclick(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onclickAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onclickAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onclick(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnclick(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onclickAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onclick", v8Value);
    }
    LocalDOMWindowV8Internal::onclickAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncloseAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onclose(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncloseAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oncloseAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncloseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onclose(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnclose(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncloseAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oncloseAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncontextmenuAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oncontextmenu(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncontextmenuAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oncontextmenuAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncontextmenuAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oncontextmenu(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOncontextmenu(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncontextmenuAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oncontextmenuAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncuechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oncuechange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oncuechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oncuechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oncuechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oncuechange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOncuechange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oncuechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oncuechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondblclickAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondblclick(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondblclickAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondblclickAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondblclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondblclick(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndblclick(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondblclickAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondblclick", v8Value);
    }
    LocalDOMWindowV8Internal::ondblclickAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondrag(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondragAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondragAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondrag(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndrag(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondragAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondrag", v8Value);
    }
    LocalDOMWindowV8Internal::ondragAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondragend(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondragendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondragendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondragend(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndragend(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondragendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondragend", v8Value);
    }
    LocalDOMWindowV8Internal::ondragendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragenterAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondragenter(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondragenterAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondragenterAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondragenter(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndragenter(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondragenterAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondragenter", v8Value);
    }
    LocalDOMWindowV8Internal::ondragenterAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragleaveAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondragleave(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondragleaveAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondragleaveAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondragleave(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndragleave(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondragleaveAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondragleave", v8Value);
    }
    LocalDOMWindowV8Internal::ondragleaveAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragoverAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondragover(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondragoverAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondragoverAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragoverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondragover(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndragover(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondragoverAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondragover", v8Value);
    }
    LocalDOMWindowV8Internal::ondragoverAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragstartAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondragstart(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondragstartAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondragstartAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondragstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondragstart(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndragstart(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondragstartAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondragstart", v8Value);
    }
    LocalDOMWindowV8Internal::ondragstartAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondropAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondrop(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondropAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondropAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondropAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondrop(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndrop(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondropAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.ondrop", v8Value);
    }
    LocalDOMWindowV8Internal::ondropAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondurationchangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ondurationchange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondurationchangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondurationchangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondurationchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ondurationchange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOndurationchange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondurationchangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ondurationchangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onemptiedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onemptied(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onemptiedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onemptiedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onemptiedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onemptied(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnemptied(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onemptiedAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onemptiedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onendedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onended(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onendedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onendedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onendedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onended(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnended(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onendedAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onendedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onerrorAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onerror(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onerrorAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onerrorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onerror(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnerror(*impl, V8EventListenerList::findOrCreateWrapper<V8ErrorHandler>(v8Value, true, ScriptState::current(info.GetIsolate())));
}

static void onerrorAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onerrorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onfocusAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onfocus(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onfocusAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onfocusAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onfocusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onfocus(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnfocus(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onfocusAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onfocusAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oninputAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oninput(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oninputAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oninputAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oninputAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oninput(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOninput(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oninputAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.oninput", v8Value);
    }
    LocalDOMWindowV8Internal::oninputAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oninvalidAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::oninvalid(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void oninvalidAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::oninvalidAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void oninvalidAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::oninvalid(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOninvalid(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void oninvalidAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::oninvalidAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onkeydownAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onkeydown(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onkeydownAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onkeydownAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onkeydownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onkeydown(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnkeydown(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onkeydownAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onkeydown", v8Value);
    }
    LocalDOMWindowV8Internal::onkeydownAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onkeypressAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onkeypress(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onkeypressAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onkeypressAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onkeypressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onkeypress(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnkeypress(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onkeypressAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onkeypress", v8Value);
    }
    LocalDOMWindowV8Internal::onkeypressAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onkeyupAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onkeyup(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onkeyupAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onkeyupAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onkeyupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onkeyup(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnkeyup(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onkeyupAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onkeyup", v8Value);
    }
    LocalDOMWindowV8Internal::onkeyupAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onload(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onloadAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onloadAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onload(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnload(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onloadAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onloadAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadeddataAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onloadeddata(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onloadeddataAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onloadeddataAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadeddataAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onloadeddata(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnloadeddata(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onloadeddataAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onloadeddataAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadedmetadataAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onloadedmetadata(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onloadedmetadataAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onloadedmetadataAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadedmetadataAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onloadedmetadata(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnloadedmetadata(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onloadedmetadataAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onloadedmetadataAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadstartAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onloadstart(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onloadstartAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onloadstartAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onloadstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onloadstart(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnloadstart(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onloadstartAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onloadstartAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmousedownAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmousedown(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmousedownAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmousedownAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmousedownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmousedown(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmousedown(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmousedownAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmousedown", v8Value);
    }
    LocalDOMWindowV8Internal::onmousedownAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseenterAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmouseenter(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmouseenterAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmouseenterAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmouseenter(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmouseenter(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmouseenterAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmouseenter", v8Value);
    }
    LocalDOMWindowV8Internal::onmouseenterAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseleaveAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmouseleave(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmouseleaveAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmouseleaveAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmouseleave(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmouseleave(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmouseleaveAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmouseleave", v8Value);
    }
    LocalDOMWindowV8Internal::onmouseleaveAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmousemoveAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmousemove(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmousemoveAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmousemoveAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmousemoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmousemove(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmousemove(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmousemoveAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmousemove", v8Value);
    }
    LocalDOMWindowV8Internal::onmousemoveAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseoutAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmouseout(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmouseoutAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmouseoutAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseoutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmouseout(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmouseout(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmouseoutAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmouseout", v8Value);
    }
    LocalDOMWindowV8Internal::onmouseoutAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseoverAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmouseover(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmouseoverAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmouseoverAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseoverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmouseover(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmouseover(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmouseoverAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmouseover", v8Value);
    }
    LocalDOMWindowV8Internal::onmouseoverAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseupAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmouseup(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmouseupAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmouseupAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmouseupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmouseup(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmouseup(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmouseupAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmouseup", v8Value);
    }
    LocalDOMWindowV8Internal::onmouseupAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmousewheelAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onmousewheel(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmousewheelAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmousewheelAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmousewheelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onmousewheel(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnmousewheel(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmousewheelAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
        contextData->activityLogger()->logSetter("Window.onmousewheel", v8Value);
    }
    LocalDOMWindowV8Internal::onmousewheelAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpauseAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onpause(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onpauseAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onpauseAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpauseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onpause(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnpause(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onpauseAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onpauseAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onplayAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onplay(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onplayAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onplayAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onplayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onplay(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnplay(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onplayAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onplayAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onplayingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onplaying(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onplayingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onplayingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onplayingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onplaying(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnplaying(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onplayingAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onplayingAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onprogressAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onprogress(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onprogressAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onprogressAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onprogressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onprogress(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnprogress(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onprogressAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onprogressAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onratechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onratechange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onratechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onratechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onratechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onratechange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnratechange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onratechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onratechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onresetAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onreset(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onresetAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onresetAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onresetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onreset(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnreset(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onresetAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onresetAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onresizeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onresize(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onresizeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onresizeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onresizeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onresize(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnresize(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onresizeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onresizeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onscrollAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onscroll(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onscrollAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onscrollAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onscrollAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onscroll(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnscroll(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onscrollAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onscrollAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onseekedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onseeked(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onseekedAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onseekedAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onseekedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onseeked(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnseeked(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onseekedAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onseekedAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onseekingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onseeking(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onseekingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onseekingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onseekingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onseeking(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnseeking(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onseekingAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onseekingAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onselectAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onselect(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onselectAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onselectAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onselectAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onselect(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnselect(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onselectAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onselectAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onshowAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onshow(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onshowAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onshowAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onshowAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onshow(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnshow(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onshowAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onshowAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onstalledAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onstalled(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onstalledAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onstalledAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onstalledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onstalled(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnstalled(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onstalledAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onstalledAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsubmitAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onsubmit(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onsubmitAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onsubmitAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsubmitAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onsubmit(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnsubmit(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onsubmitAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onsubmitAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsuspendAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onsuspend(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onsuspendAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onsuspendAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onsuspendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onsuspend(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnsuspend(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onsuspendAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onsuspendAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontimeupdateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ontimeupdate(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontimeupdateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontimeupdateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontimeupdateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ontimeupdate(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOntimeupdate(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontimeupdateAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontimeupdateAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontoggleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::ontoggle(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ontoggleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ontoggleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ontoggleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::ontoggle(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOntoggle(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ontoggleAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ontoggleAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onvolumechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onvolumechange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onvolumechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onvolumechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onvolumechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onvolumechange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnvolumechange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onvolumechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onvolumechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwaitingAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = GlobalEventHandlers::onwaiting(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onwaitingAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onwaitingAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onwaitingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, GlobalEventHandlers::onwaiting(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    GlobalEventHandlers::setOnwaiting(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onwaitingAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onwaitingAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onbeforeunloadAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onbeforeunload(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onbeforeunloadAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onbeforeunloadAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onbeforeunloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onbeforeunload(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnbeforeunload(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onbeforeunloadAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onbeforeunloadAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onhashchangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onhashchange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onhashchangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onhashchangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onhashchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onhashchange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnhashchange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onhashchangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onhashchangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onlanguagechangeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onlanguagechange(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onlanguagechangeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onlanguagechangeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onlanguagechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onlanguagechange(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnlanguagechange(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onlanguagechangeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onlanguagechangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmessageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onmessage(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onmessageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onmessageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onmessageAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onmessage(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnmessage(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onmessageAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onmessageAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onofflineAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onoffline(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onofflineAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onofflineAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onofflineAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onoffline(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnoffline(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onofflineAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onofflineAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ononlineAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::ononline(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ononlineAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ononlineAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ononlineAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::ononline(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnonline(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ononlineAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ononlineAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpagehideAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onpagehide(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onpagehideAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onpagehideAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpagehideAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onpagehide(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnpagehide(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onpagehideAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onpagehideAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpageshowAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onpageshow(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onpageshowAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onpageshowAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpageshowAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onpageshow(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnpageshow(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onpageshowAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onpageshowAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpopstateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onpopstate(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onpopstateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onpopstateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onpopstateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onpopstate(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnpopstate(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onpopstateAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onpopstateAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onstorageAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onstorage(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onstorageAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onstorageAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onstorageAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onstorage(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnstorage(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onstorageAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onstorageAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onunloadAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowEventHandlers::onunload(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onunloadAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::onunloadAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onunloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowEventHandlers::onunload(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowEventHandlers::setOnunload(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void onunloadAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::onunloadAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pagePopupControllerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RefPtrWillBeRawPtr<PagePopupController> result(DOMWindowPagePopup::pagePopupController(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8PagePopupController>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "pagePopupController"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void pagePopupControllerAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::pagePopupControllerAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cryptoAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RawPtr<Crypto> result(DOMWindowCrypto::crypto(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Crypto>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "crypto"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void cryptoAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::cryptoAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondevicelightAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowDeviceLight::ondevicelight(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondevicelightAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondevicelightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondevicelightAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowDeviceLight::ondevicelight(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowDeviceLight::setOndevicelight(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondevicelightAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ondevicelightAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondevicemotionAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowDeviceMotion::ondevicemotion(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondevicemotionAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondevicemotionAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondevicemotionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowDeviceMotion::ondevicemotion(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowDeviceMotion::setOndevicemotion(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondevicemotionAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ondevicemotionAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondeviceorientationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    EventListener* v8Value = DOMWindowDeviceOrientation::ondeviceorientation(*impl);
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void ondeviceorientationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::ondeviceorientationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ondeviceorientationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!impl->document())
        return;
    moveEventListenerToNewWrapper(holder, DOMWindowDeviceOrientation::ondeviceorientation(*impl), v8Value, V8Window::eventListenerCacheIndex, info.GetIsolate());
    DOMWindowDeviceOrientation::setOndeviceorientation(*impl, V8EventListenerList::getEventListener(ScriptState::current(info.GetIsolate()), v8Value, true, ListenerFindOrCreate));
}

static void ondeviceorientationAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::ondeviceorientationAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIndexedDBAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RawPtr<IDBFactory> result(DOMWindowIndexedDatabase::indexedDB(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8IDBFactory>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "webkitIndexedDB"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void webkitIndexedDBAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIndexedDB);
    LocalDOMWindowV8Internal::webkitIndexedDBAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void indexedDBAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RawPtr<IDBFactory> result(DOMWindowIndexedDatabase::indexedDB(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8IDBFactory>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "indexedDB"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void indexedDBAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedIndexedDB);
    LocalDOMWindowV8Internal::indexedDBAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitStorageInfoAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RawPtr<DeprecatedStorageInfo> result(DOMWindowQuota::webkitStorageInfo(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8DeprecatedStorageInfo>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "webkitStorageInfo"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void webkitStorageInfoAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedStorageInfo);
    LocalDOMWindowV8Internal::webkitStorageInfoAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void speechSynthesisAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    LocalDOMWindow* impl = V8Window::toNative(holder);
    RawPtr<SpeechSynthesis> result(DOMWindowSpeechSynthesis::speechSynthesis(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8SpeechSynthesis>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "speechSynthesis"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void speechSynthesisAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::speechSynthesisAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void LocalDOMWindowConstructorGetter(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsExternal());
    V8PerContextData* perContextData = V8PerContextData::from(info.Holder()->CreationContext());
    if (!perContextData)
        return;
    v8SetReturnValue(info, perContextData->constructorForType(WrapperTypeInfo::unwrap(data)));
}

static void WebKitTransitionEventConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedTransitionEventConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitURLConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedWindowURL);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void WebKitMutationObserverConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedMutationObserverConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBCursorConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBCursorConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBDatabaseConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBDatabaseConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBFactoryConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBFactoryConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBIndexConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBIndexConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBKeyRangeConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBKeyRangeConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBObjectStoreConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBObjectStoreConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBRequestConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBRequestConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIDBTransactionConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBTransactionConstructor);
    LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void LocalDOMWindowReplaceableAttributeSetter(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    v8::Isolate* isolate = info.GetIsolate();
    v8::String::Utf8Value attributeName(name);
    ExceptionState exceptionState(ExceptionState::SetterContext, *attributeName, "Window", info.Holder(), isolate);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    if (info.This()->IsObject())
        v8::Handle<v8::Object>::Cast(info.This())->ForceSet(name, v8Value);
}

static void LocalDOMWindowReplaceableAttributeSetterCallback(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetter(name, v8Value, info);
}

static void getSelectionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getSelection", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, impl->getSelection());
}

static void getSelectionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::getSelectionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void focusMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->focus(executionContext);
}

static void focusMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::focusMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void focusOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    static int domTemplateKey; // This address is used for a key to look up the dom template.
    V8PerIsolateData* data = V8PerIsolateData::from(isolate);
    v8::Handle<v8::FunctionTemplate> privateTemplate = data->domTemplate(&domTemplateKey, LocalDOMWindowV8Internal::focusMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 0);

    v8::Handle<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.This(), isolate);
    if (holder.IsEmpty()) {
        // This is only reachable via |object.__proto__.func|, in which case it
        // has already passed the same origin security check
        v8SetReturnValue(info, privateTemplate->GetFunction());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), DoNotReportSecurityError)) {
        static int sharedTemplateKey; // This address is used for a key to look up the dom template.
        v8::Handle<v8::FunctionTemplate> sharedTemplate = data->domTemplate(&sharedTemplateKey, LocalDOMWindowV8Internal::focusMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 0);
        v8SetReturnValue(info, sharedTemplate->GetFunction());
        return;
    }

    v8::Local<v8::Value> hiddenValue = v8::Handle<v8::Object>::Cast(info.This())->GetHiddenValue(v8AtomicString(isolate, "focus"));
    if (!hiddenValue.IsEmpty()) {
        v8SetReturnValue(info, hiddenValue);
        return;
    }

    v8SetReturnValue(info, privateTemplate->GetFunction());
}

static void focusOriginSafeMethodGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::focusOriginSafeMethodGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void blurMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    impl->blur();
}

static void blurMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::blurMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void blurOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    static int domTemplateKey; // This address is used for a key to look up the dom template.
    V8PerIsolateData* data = V8PerIsolateData::from(isolate);
    v8::Handle<v8::FunctionTemplate> privateTemplate = data->domTemplate(&domTemplateKey, LocalDOMWindowV8Internal::blurMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 0);

    v8::Handle<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.This(), isolate);
    if (holder.IsEmpty()) {
        // This is only reachable via |object.__proto__.func|, in which case it
        // has already passed the same origin security check
        v8SetReturnValue(info, privateTemplate->GetFunction());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), DoNotReportSecurityError)) {
        static int sharedTemplateKey; // This address is used for a key to look up the dom template.
        v8::Handle<v8::FunctionTemplate> sharedTemplate = data->domTemplate(&sharedTemplateKey, LocalDOMWindowV8Internal::blurMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 0);
        v8SetReturnValue(info, sharedTemplate->GetFunction());
        return;
    }

    v8::Local<v8::Value> hiddenValue = v8::Handle<v8::Object>::Cast(info.This())->GetHiddenValue(v8AtomicString(isolate, "blur"));
    if (!hiddenValue.IsEmpty()) {
        v8SetReturnValue(info, hiddenValue);
        return;
    }

    v8SetReturnValue(info, privateTemplate->GetFunction());
}

static void blurOriginSafeMethodGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::blurOriginSafeMethodGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void closeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    impl->close(executionContext);
}

static void closeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::closeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void closeOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    static int domTemplateKey; // This address is used for a key to look up the dom template.
    V8PerIsolateData* data = V8PerIsolateData::from(isolate);
    v8::Handle<v8::FunctionTemplate> privateTemplate = data->domTemplate(&domTemplateKey, LocalDOMWindowV8Internal::closeMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 0);

    v8::Handle<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.This(), isolate);
    if (holder.IsEmpty()) {
        // This is only reachable via |object.__proto__.func|, in which case it
        // has already passed the same origin security check
        v8SetReturnValue(info, privateTemplate->GetFunction());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), DoNotReportSecurityError)) {
        static int sharedTemplateKey; // This address is used for a key to look up the dom template.
        v8::Handle<v8::FunctionTemplate> sharedTemplate = data->domTemplate(&sharedTemplateKey, LocalDOMWindowV8Internal::closeMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 0);
        v8SetReturnValue(info, sharedTemplate->GetFunction());
        return;
    }

    v8::Local<v8::Value> hiddenValue = v8::Handle<v8::Object>::Cast(info.This())->GetHiddenValue(v8AtomicString(isolate, "close"));
    if (!hiddenValue.IsEmpty()) {
        v8SetReturnValue(info, hiddenValue);
        return;
    }

    v8SetReturnValue(info, privateTemplate->GetFunction());
}

static void closeOriginSafeMethodGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::closeOriginSafeMethodGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void printMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "print", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    impl->print();
}

static void printMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::printMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void stopMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "stop", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    impl->stop();
}

static void stopMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::stopMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8Window::openMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void showModalDialogMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8Window::showModalDialogMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void alert1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "alert", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    impl->alert();
}

static void alert2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "alert", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> message;
    {
        TOSTRING_VOID_INTERNAL(message, info[0]);
    }
    impl->alert(message);
}

static void alertMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "alert", "Window", info.Holder(), isolate);
    switch (std::min(1, info.Length())) {
    case 0:
        if (true) {
            alert1Method(info);
            return;
        }
        break;
    case 1:
        if (true) {
            alert2Method(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(0, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void alertMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::alertMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void confirmMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "confirm", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> message;
    {
        TOSTRING_VOID_INTERNAL(message, argumentOrNull(info, 0));
    }
    v8SetReturnValueBool(info, impl->confirm(message));
}

static void confirmMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::confirmMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void promptMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "prompt", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> message;
    V8StringResource<> defaultValue;
    {
        TOSTRING_VOID_INTERNAL(message, argumentOrNull(info, 0));
        TOSTRING_VOID_INTERNAL(defaultValue, argumentOrNull(info, 1));
    }
    v8SetReturnValueStringOrNull(info, impl->prompt(message, defaultValue), info.GetIsolate());
}

static void promptMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::promptMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void findMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "find", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> string;
    bool caseSensitive;
    bool backwards;
    bool wrap;
    bool wholeWord;
    bool searchInFrames;
    bool showDialog;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(string, info[0]);
        TONATIVE_VOID_INTERNAL(caseSensitive, info[1]->BooleanValue());
        TONATIVE_VOID_INTERNAL(backwards, info[2]->BooleanValue());
        TONATIVE_VOID_INTERNAL(wrap, info[3]->BooleanValue());
        TONATIVE_VOID_INTERNAL(wholeWord, info[4]->BooleanValue());
        TONATIVE_VOID_INTERNAL(searchInFrames, info[5]->BooleanValue());
        TONATIVE_VOID_INTERNAL(showDialog, info[6]->BooleanValue());
    }
    v8SetReturnValueBool(info, impl->find(string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog));
}

static void findMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::findMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scrollBy1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollBy", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int x;
    int y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(x, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(y, toInt32(info[1], exceptionState), exceptionState);
    }
    impl->scrollBy(x, y);
}

static void scrollBy2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollBy", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int x;
    int y;
    Dictionary scrollOptions;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(x, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(y, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(scrollOptions, Dictionary(info[2], info.GetIsolate()));
        if (!scrollOptions.isUndefinedOrNull() && !scrollOptions.isObject()) {
            exceptionState.throwTypeError("parameter 3 ('scrollOptions') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->scrollBy(x, y, scrollOptions, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void scrollByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollBy", "Window", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 2:
        if (true) {
            scrollBy1Method(info);
            return;
        }
        break;
    case 3:
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            if (true) {
                scrollBy2Method(info);
                return;
            }
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void scrollByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::scrollByMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scrollTo1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollTo", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int x;
    int y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(x, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(y, toInt32(info[1], exceptionState), exceptionState);
    }
    impl->scrollTo(x, y);
}

static void scrollTo2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollTo", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int x;
    int y;
    Dictionary scrollOptions;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(x, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(y, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(scrollOptions, Dictionary(info[2], info.GetIsolate()));
        if (!scrollOptions.isUndefinedOrNull() && !scrollOptions.isObject()) {
            exceptionState.throwTypeError("parameter 3 ('scrollOptions') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->scrollTo(x, y, scrollOptions, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void scrollToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scrollTo", "Window", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 2:
        if (true) {
            scrollTo1Method(info);
            return;
        }
        break;
    case 3:
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            if (true) {
                scrollTo2Method(info);
                return;
            }
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void scrollToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::scrollToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scroll1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scroll", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int x;
    int y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(x, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(y, toInt32(info[1], exceptionState), exceptionState);
    }
    impl->scroll(x, y);
}

static void scroll2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scroll", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int x;
    int y;
    Dictionary scrollOptions;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(x, toInt32(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(y, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_INTERNAL(scrollOptions, Dictionary(info[2], info.GetIsolate()));
        if (!scrollOptions.isUndefinedOrNull() && !scrollOptions.isObject()) {
            exceptionState.throwTypeError("parameter 3 ('scrollOptions') is not an object.");
            exceptionState.throwIfNeeded();
            return;
        }
    }
    impl->scroll(x, y, scrollOptions, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void scrollMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "scroll", "Window", info.Holder(), isolate);
    switch (std::min(3, info.Length())) {
    case 2:
        if (true) {
            scroll1Method(info);
            return;
        }
        break;
    case 3:
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            if (true) {
                scroll2Method(info);
                return;
            }
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void scrollMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::scrollMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void moveByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "moveBy", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    impl->moveBy(x, y);
}

static void moveByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::moveByMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void moveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "moveTo", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    impl->moveTo(x, y);
}

static void moveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::moveToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void resizeByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "resizeBy", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    impl->resizeBy(x, y);
}

static void resizeByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::resizeByMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void resizeToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "resizeTo", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    float width;
    float height;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(width, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(height, static_cast<float>(info[1]->NumberValue()));
    }
    impl->resizeTo(width, height);
}

static void resizeToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::resizeToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void matchMediaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "matchMedia", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> query;
    {
        TOSTRING_VOID_INTERNAL(query, info[0]);
    }
    v8SetReturnValue(info, impl->matchMedia(query));
}

static void matchMediaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::matchMediaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getComputedStyleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getComputedStyle", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    Element* element;
    V8StringResource<WithUndefinedOrNullCheck> pseudoElement;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(element, V8Element::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TOSTRING_VOID_INTERNAL(pseudoElement, info[1]);
    }
    v8SetReturnValue(info, impl->getComputedStyle(element, pseudoElement));
}

static void getComputedStyleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::getComputedStyleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getMatchedCSSRulesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "getMatchedCSSRules", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    Element* element;
    V8StringResource<WithUndefinedOrNullCheck> pseudoElement;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(element, V8Element::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TOSTRING_VOID_INTERNAL(pseudoElement, info[1]);
    }
    v8SetReturnValue(info, impl->getMatchedCSSRules(element, pseudoElement));
}

static void getMatchedCSSRulesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::GetMatchedCSSRules);
    LocalDOMWindowV8Internal::getMatchedCSSRulesMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitConvertPointFromPageToNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitConvertPointFromPageToNode", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    Node* node;
    DOMPoint* p;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(node, V8Node::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_INTERNAL(p, V8WebKitPoint::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    v8SetReturnValue(info, impl->webkitConvertPointFromPageToNode(node, p));
}

static void webkitConvertPointFromPageToNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedConvertPointFromPageToNode);
    LocalDOMWindowV8Internal::webkitConvertPointFromPageToNodeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitConvertPointFromNodeToPageMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitConvertPointFromNodeToPage", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    Node* node;
    DOMPoint* p;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(node, V8Node::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_INTERNAL(p, V8WebKitPoint::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    v8SetReturnValue(info, impl->webkitConvertPointFromNodeToPage(node, p));
}

static void webkitConvertPointFromNodeToPageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedConvertPointFromNodeToPage);
    LocalDOMWindowV8Internal::webkitConvertPointFromNodeToPageMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void postMessageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8Window::postMessageMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void postMessageOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    static int domTemplateKey; // This address is used for a key to look up the dom template.
    V8PerIsolateData* data = V8PerIsolateData::from(isolate);
    v8::Handle<v8::FunctionTemplate> privateTemplate = data->domTemplate(&domTemplateKey, LocalDOMWindowV8Internal::postMessageMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 2);

    v8::Handle<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.This(), isolate);
    if (holder.IsEmpty()) {
        // This is only reachable via |object.__proto__.func|, in which case it
        // has already passed the same origin security check
        v8SetReturnValue(info, privateTemplate->GetFunction());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), DoNotReportSecurityError)) {
        static int sharedTemplateKey; // This address is used for a key to look up the dom template.
        v8::Handle<v8::FunctionTemplate> sharedTemplate = data->domTemplate(&sharedTemplateKey, LocalDOMWindowV8Internal::postMessageMethodCallback, v8Undefined(), v8::Signature::New(isolate, V8Window::domTemplate(isolate)), 2);
        v8SetReturnValue(info, sharedTemplate->GetFunction());
        return;
    }

    v8::Local<v8::Value> hiddenValue = v8::Handle<v8::Object>::Cast(info.This())->GetHiddenValue(v8AtomicString(isolate, "postMessage"));
    if (!hiddenValue.IsEmpty()) {
        v8SetReturnValue(info, hiddenValue);
        return;
    }

    v8SetReturnValue(info, privateTemplate->GetFunction());
}

static void postMessageOriginSafeMethodGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::postMessageOriginSafeMethodGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void requestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "requestAnimationFrame", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    OwnPtr<RequestAnimationFrameCallback> callback;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        callback = V8RequestAnimationFrameCallback::create(v8::Handle<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
    }
    v8SetReturnValueInt(info, impl->requestAnimationFrame(callback.release()));
}

static void requestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::UnprefixedRequestAnimationFrame);
    LocalDOMWindowV8Internal::requestAnimationFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cancelAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "cancelAnimationFrame", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int id;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(id, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->cancelAnimationFrame(id);
}

static void cancelAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::cancelAnimationFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitRequestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitRequestAnimationFrame", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    OwnPtr<RequestAnimationFrameCallback> callback;
    {
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        callback = V8RequestAnimationFrameCallback::create(v8::Handle<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));
    }
    v8SetReturnValueInt(info, impl->webkitRequestAnimationFrame(callback.release()));
}

static void webkitRequestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedRequestAnimationFrame);
    LocalDOMWindowV8Internal::webkitRequestAnimationFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitCancelAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitCancelAnimationFrame", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int id;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(id, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->cancelAnimationFrame(id);
}

static void webkitCancelAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedCancelAnimationFrame);
    LocalDOMWindowV8Internal::webkitCancelAnimationFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitCancelRequestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitCancelRequestAnimationFrame", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int id;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(id, toInt32(info[0], exceptionState), exceptionState);
    }
    impl->cancelAnimationFrame(id);
}

static void webkitCancelRequestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::countDeprecation(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedCancelRequestAnimationFrame);
    LocalDOMWindowV8Internal::webkitCancelRequestAnimationFrameMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void captureEventsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "captureEvents", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    impl->captureEvents();
}

static void captureEventsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowCaptureEvents);
    LocalDOMWindowV8Internal::captureEventsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void releaseEventsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "releaseEvents", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    impl->releaseEvents();
}

static void releaseEventsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::WindowReleaseEvents);
    LocalDOMWindowV8Internal::releaseEventsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void toStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8Window::toStringMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void toStringOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    static int domTemplateKey; // This address is used for a key to look up the dom template.
    V8PerIsolateData* data = V8PerIsolateData::from(isolate);
    v8::Handle<v8::FunctionTemplate> privateTemplate = data->domTemplate(&domTemplateKey, LocalDOMWindowV8Internal::toStringMethodCallback, v8Undefined(), v8::Local<v8::Signature>(), 0);

    v8::Handle<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.This(), isolate);
    if (holder.IsEmpty()) {
        // This is only reachable via |object.__proto__.func|, in which case it
        // has already passed the same origin security check
        v8SetReturnValue(info, privateTemplate->GetFunction());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(holder);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), DoNotReportSecurityError)) {
        static int sharedTemplateKey; // This address is used for a key to look up the dom template.
        v8::Handle<v8::FunctionTemplate> sharedTemplate = data->domTemplate(&sharedTemplateKey, LocalDOMWindowV8Internal::toStringMethodCallback, v8Undefined(), v8::Local<v8::Signature>(), 0);
        v8SetReturnValue(info, sharedTemplate->GetFunction());
        return;
    }

    v8::Local<v8::Value> hiddenValue = v8::Handle<v8::Object>::Cast(info.This())->GetHiddenValue(v8AtomicString(isolate, "toString"));
    if (!hiddenValue.IsEmpty()) {
        v8SetReturnValue(info, hiddenValue);
        return;
    }

    v8SetReturnValue(info, privateTemplate->GetFunction());
}

static void toStringOriginSafeMethodGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    LocalDOMWindowV8Internal::toStringOriginSafeMethodGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void btoaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "btoa", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> string;
    {
        TOSTRING_VOID_INTERNAL(string, info[0]);
    }
    String result = impl->btoa(string, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void btoaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::btoaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void atobMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "atob", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> string;
    {
        TOSTRING_VOID_INTERNAL(string, info[0]);
    }
    String result = impl->atob(string, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void atobMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::atobMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8Window::setTimeoutMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearTimeoutMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearTimeout", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int handle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(handle, toInt32(info[0], exceptionState), exceptionState);
    }
    DOMWindowTimers::clearTimeout(*impl, handle);
}

static void clearTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::clearTimeoutMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8Window::setIntervalMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearIntervalMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearInterval", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    int handle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(handle, toInt32(info[0], exceptionState), exceptionState);
    }
    DOMWindowTimers::clearInterval(*impl, handle);
}

static void clearIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::clearIntervalMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitRequestFileSystemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitRequestFileSystem", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        throwMinimumArityTypeError(exceptionState, 3, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    unsigned type;
    long long size;
    OwnPtr<FileSystemCallback> successCallback;
    OwnPtr<ErrorCallback> errorCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(type, toUInt16(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(size, toInt64(info[1], exceptionState), exceptionState);
        if (info.Length() <= 2 || !info[2]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8FileSystemCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        if (info.Length() > 3 && !isUndefinedOrNull(info[3])) {
            if (!info[3]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 4 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8ErrorCallback::create(v8::Handle<v8::Function>::Cast(info[3]), ScriptState::current(info.GetIsolate()));
        }
    }
    DOMWindowFileSystem::webkitRequestFileSystem(*impl, type, size, successCallback.release(), errorCallback.release());
}

static void webkitRequestFileSystemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::webkitRequestFileSystemMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitResolveLocalFileSystemURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitResolveLocalFileSystemURL", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> url;
    OwnPtr<EntryCallback> successCallback;
    OwnPtr<ErrorCallback> errorCallback;
    {
        TOSTRING_VOID_INTERNAL(url, info[0]);
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");
            exceptionState.throwIfNeeded();
            return;
        }
        successCallback = V8EntryCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8ErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
    }
    DOMWindowFileSystem::webkitResolveLocalFileSystemURL(*impl, url, successCallback.release(), errorCallback.release());
}

static void webkitResolveLocalFileSystemURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::webkitResolveLocalFileSystemURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createImageBitmap1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    Blob* blob;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(blob, V8Blob::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, blob, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    Blob* blob;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(blob, V8Blob::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, blob, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    ImageData* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(data, V8ImageData::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, data, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    ImageData* data;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(data, V8ImageData::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, data, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap5Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    ImageBitmap* bitmap;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(bitmap, V8ImageBitmap::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, bitmap, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap6Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    ImageBitmap* bitmap;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(bitmap, V8ImageBitmap::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, bitmap, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap7Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLImageElement* image;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(image, V8HTMLImageElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, image, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap8Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLImageElement* image;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(image, V8HTMLImageElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, image, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap9Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLVideoElement* video;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(video, V8HTMLVideoElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, video, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap10Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLVideoElement* video;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(video, V8HTMLVideoElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, video, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap11Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    CanvasRenderingContext2D* context;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(context, V8CanvasRenderingContext2D::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, context, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap12Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    CanvasRenderingContext2D* context;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(context, V8CanvasRenderingContext2D::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, context, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap13Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLCanvasElement* canvas;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(canvas, V8HTMLCanvasElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, canvas, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap14Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), info.GetIsolate());
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    HTMLCanvasElement* canvas;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(canvas, V8HTMLCanvasElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, canvas, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "Window", info.Holder(), isolate);
    switch (std::min(5, info.Length())) {
    case 1:
        if (V8Blob::hasInstance(info[0], isolate)) {
            createImageBitmap1Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[0], isolate)) {
            createImageBitmap3Method(info);
            return;
        }
        if (V8ImageBitmap::hasInstance(info[0], isolate)) {
            createImageBitmap5Method(info);
            return;
        }
        if (V8HTMLImageElement::hasInstance(info[0], isolate)) {
            createImageBitmap7Method(info);
            return;
        }
        if (V8HTMLVideoElement::hasInstance(info[0], isolate)) {
            createImageBitmap9Method(info);
            return;
        }
        if (V8CanvasRenderingContext2D::hasInstance(info[0], isolate)) {
            createImageBitmap11Method(info);
            return;
        }
        if (V8HTMLCanvasElement::hasInstance(info[0], isolate)) {
            createImageBitmap13Method(info);
            return;
        }
        break;
    case 5:
        if (V8Blob::hasInstance(info[0], isolate)) {
            createImageBitmap2Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[0], isolate)) {
            createImageBitmap4Method(info);
            return;
        }
        if (V8ImageBitmap::hasInstance(info[0], isolate)) {
            createImageBitmap6Method(info);
            return;
        }
        if (V8HTMLImageElement::hasInstance(info[0], isolate)) {
            createImageBitmap8Method(info);
            return;
        }
        if (V8HTMLVideoElement::hasInstance(info[0], isolate)) {
            createImageBitmap10Method(info);
            return;
        }
        if (V8CanvasRenderingContext2D::hasInstance(info[0], isolate)) {
            createImageBitmap12Method(info);
            return;
        }
        if (V8HTMLCanvasElement::hasInstance(info[0], isolate)) {
            createImageBitmap14Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            throwArityTypeError(exceptionState, "[1, 5]", info.Length());
            return;
        }
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void createImageBitmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    LocalDOMWindowV8Internal::createImageBitmapMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openDatabaseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "openDatabase", "Window", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        throwMinimumArityTypeError(exceptionState, 4, info.Length());
        return;
    }
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    if (!BindingSecurity::shouldAllowAccessToFrame(info.GetIsolate(), impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }
    V8StringResource<> name;
    V8StringResource<> version;
    V8StringResource<> displayName;
    unsigned estimatedSize;
    OwnPtr<DatabaseCallback> creationCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(name, info[0]);
        TOSTRING_VOID_INTERNAL(version, info[1]);
        TOSTRING_VOID_INTERNAL(displayName, info[2]);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(estimatedSize, toUInt32(info[3], exceptionState), exceptionState);
        if (info.Length() > 4 && !isUndefinedOrNull(info[4])) {
            if (!info[4]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 5 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            creationCallback = V8DatabaseCallback::create(v8::Handle<v8::Function>::Cast(info[4]), ScriptState::current(info.GetIsolate()));
        }
    }
    RefPtrWillBeRawPtr<Database> result = DOMWindowWebDatabase::openDatabase(*impl, name, version, displayName, estimatedSize, creationCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void openDatabaseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::OpenWebDatabase);
    ScriptState* scriptState = ScriptState::from(info.GetIsolate()->GetCurrentContext());
    V8PerContextData* contextData = scriptState->perContextData();
    if (contextData && contextData->activityLogger()) {
        Vector<v8::Handle<v8::Value> > loggerArgs = toNativeArguments<v8::Handle<v8::Value> >(info, 0);
        contextData->activityLogger()->logMethod("Window.openDatabase", info.Length(), loggerArgs.data());
    }
    LocalDOMWindowV8Internal::openDatabaseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void LocalDOMWindowOriginSafeMethodSetter(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    v8::Handle<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.This(), isolate);
    if (holder.IsEmpty())
        return;
    LocalDOMWindow* impl = V8Window::toNative(holder);
    v8::String::Utf8Value attributeName(name);
    ExceptionState exceptionState(ExceptionState::SetterContext, *attributeName, "Window", info.Holder(), isolate);
    if (!BindingSecurity::shouldAllowAccessToFrame(isolate, impl->frame(), exceptionState)) {
        exceptionState.throwIfNeeded();
        return;
    }

    V8HiddenValue::setHiddenValue(isolate, v8::Handle<v8::Object>::Cast(info.This()), name, v8Value);
}

static void LocalDOMWindowOriginSafeMethodSetterCallback(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    LocalDOMWindowV8Internal::LocalDOMWindowOriginSafeMethodSetter(name, v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void indexedPropertyGetter(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    LocalDOMWindow* impl = V8Window::toNative(info.Holder());
    RefPtrWillBeRawPtr<LocalDOMWindow> result = impl->anonymousIndexedGetter(index);
    if (!result)
        return;
    v8SetReturnValueFast(info, WTF::getPtr(result.release()), impl);
}

static void indexedPropertyGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMIndexedProperty");
    LocalDOMWindowV8Internal::indexedPropertyGetter(index, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void namedPropertyGetterCallback(v8::Local<v8::String> name, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMNamedProperty");
    V8Window::namedPropertyGetterCustom(name, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace LocalDOMWindowV8Internal

static const V8DOMConfiguration::AttributeConfiguration shadowAttributes[] = {
    {"location", LocalDOMWindowV8Internal::locationAttributeGetterCallback, LocalDOMWindowV8Internal::locationAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete), 0 /* on instance */},
    {"window", LocalDOMWindowV8Internal::windowAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete), 0 /* on instance */},
    {"top", LocalDOMWindowV8Internal::topAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete), 0 /* on instance */},
};

static const V8DOMConfiguration::AttributeConfiguration V8WindowAttributes[] = {
    {"screen", LocalDOMWindowV8Internal::screenAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"history", LocalDOMWindowV8Internal::historyAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"locationbar", LocalDOMWindowV8Internal::locationbarAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"menubar", LocalDOMWindowV8Internal::menubarAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"personalbar", LocalDOMWindowV8Internal::personalbarAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"scrollbars", LocalDOMWindowV8Internal::scrollbarsAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"statusbar", LocalDOMWindowV8Internal::statusbarAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"toolbar", LocalDOMWindowV8Internal::toolbarAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"navigator", LocalDOMWindowV8Internal::navigatorAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"clientInformation", LocalDOMWindowV8Internal::clientInformationAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"event", LocalDOMWindowV8Internal::eventAttributeGetterCallback, LocalDOMWindowV8Internal::eventAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"frameElement", LocalDOMWindowV8Internal::frameElementAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"offscreenBuffering", LocalDOMWindowV8Internal::offscreenBufferingAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"outerHeight", LocalDOMWindowV8Internal::outerHeightAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"outerWidth", LocalDOMWindowV8Internal::outerWidthAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"innerHeight", LocalDOMWindowV8Internal::innerHeightAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"innerWidth", LocalDOMWindowV8Internal::innerWidthAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenX", LocalDOMWindowV8Internal::screenXAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenY", LocalDOMWindowV8Internal::screenYAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenLeft", LocalDOMWindowV8Internal::screenLeftAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenTop", LocalDOMWindowV8Internal::screenTopAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"scrollX", LocalDOMWindowV8Internal::scrollXAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"scrollY", LocalDOMWindowV8Internal::scrollYAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pageXOffset", LocalDOMWindowV8Internal::pageXOffsetAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pageYOffset", LocalDOMWindowV8Internal::pageYOffsetAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"closed", LocalDOMWindowV8Internal::closedAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"length", LocalDOMWindowV8Internal::lengthAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"name", LocalDOMWindowV8Internal::nameAttributeGetterCallback, LocalDOMWindowV8Internal::nameAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"status", LocalDOMWindowV8Internal::statusAttributeGetterCallback, LocalDOMWindowV8Internal::statusAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"defaultStatus", LocalDOMWindowV8Internal::defaultStatusAttributeGetterCallback, LocalDOMWindowV8Internal::defaultStatusAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"defaultstatus", LocalDOMWindowV8Internal::defaultstatusAttributeGetterCallback, LocalDOMWindowV8Internal::defaultstatusAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"self", LocalDOMWindowV8Internal::selfAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"frames", LocalDOMWindowV8Internal::framesAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"opener", LocalDOMWindowV8Internal::openerAttributeGetterCallback, LocalDOMWindowV8Internal::openerAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"parent", LocalDOMWindowV8Internal::parentAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::ALL_CAN_READ | v8::ALL_CAN_WRITE), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"document", LocalDOMWindowV8Internal::documentAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"styleMedia", LocalDOMWindowV8Internal::styleMediaAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"devicePixelRatio", LocalDOMWindowV8Internal::devicePixelRatioAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"console", LocalDOMWindowV8Internal::consoleAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"performance", LocalDOMWindowV8Internal::performanceAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"CSS", LocalDOMWindowV8Internal::CSSAttributeGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onsearch", LocalDOMWindowV8Internal::onsearchAttributeGetterCallback, LocalDOMWindowV8Internal::onsearchAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ontransitionend", LocalDOMWindowV8Internal::ontransitionendAttributeGetterCallback, LocalDOMWindowV8Internal::ontransitionendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onwebkitanimationend", LocalDOMWindowV8Internal::onwebkitanimationendAttributeGetterCallback, LocalDOMWindowV8Internal::onwebkitanimationendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onwebkitanimationiteration", LocalDOMWindowV8Internal::onwebkitanimationiterationAttributeGetterCallback, LocalDOMWindowV8Internal::onwebkitanimationiterationAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onwebkitanimationstart", LocalDOMWindowV8Internal::onwebkitanimationstartAttributeGetterCallback, LocalDOMWindowV8Internal::onwebkitanimationstartAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onwebkittransitionend", LocalDOMWindowV8Internal::onwebkittransitionendAttributeGetterCallback, LocalDOMWindowV8Internal::onwebkittransitionendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onwheel", LocalDOMWindowV8Internal::onwheelAttributeGetterCallback, LocalDOMWindowV8Internal::onwheelAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"WebKitTransitionEvent", LocalDOMWindowV8Internal::WebKitTransitionEventConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TransitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitURL", LocalDOMWindowV8Internal::webkitURLConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8URL::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitMutationObserver", LocalDOMWindowV8Internal::WebKitMutationObserverConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MutationObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"onabort", LocalDOMWindowV8Internal::onabortAttributeGetterCallback, LocalDOMWindowV8Internal::onabortAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onblur", LocalDOMWindowV8Internal::onblurAttributeGetterCallback, LocalDOMWindowV8Internal::onblurAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oncancel", LocalDOMWindowV8Internal::oncancelAttributeGetterCallback, LocalDOMWindowV8Internal::oncancelAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oncanplay", LocalDOMWindowV8Internal::oncanplayAttributeGetterCallback, LocalDOMWindowV8Internal::oncanplayAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oncanplaythrough", LocalDOMWindowV8Internal::oncanplaythroughAttributeGetterCallback, LocalDOMWindowV8Internal::oncanplaythroughAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onchange", LocalDOMWindowV8Internal::onchangeAttributeGetterCallback, LocalDOMWindowV8Internal::onchangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onclick", LocalDOMWindowV8Internal::onclickAttributeGetterCallback, LocalDOMWindowV8Internal::onclickAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onclose", LocalDOMWindowV8Internal::oncloseAttributeGetterCallback, LocalDOMWindowV8Internal::oncloseAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oncontextmenu", LocalDOMWindowV8Internal::oncontextmenuAttributeGetterCallback, LocalDOMWindowV8Internal::oncontextmenuAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oncuechange", LocalDOMWindowV8Internal::oncuechangeAttributeGetterCallback, LocalDOMWindowV8Internal::oncuechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondblclick", LocalDOMWindowV8Internal::ondblclickAttributeGetterCallback, LocalDOMWindowV8Internal::ondblclickAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondrag", LocalDOMWindowV8Internal::ondragAttributeGetterCallback, LocalDOMWindowV8Internal::ondragAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondragend", LocalDOMWindowV8Internal::ondragendAttributeGetterCallback, LocalDOMWindowV8Internal::ondragendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondragenter", LocalDOMWindowV8Internal::ondragenterAttributeGetterCallback, LocalDOMWindowV8Internal::ondragenterAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondragleave", LocalDOMWindowV8Internal::ondragleaveAttributeGetterCallback, LocalDOMWindowV8Internal::ondragleaveAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondragover", LocalDOMWindowV8Internal::ondragoverAttributeGetterCallback, LocalDOMWindowV8Internal::ondragoverAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondragstart", LocalDOMWindowV8Internal::ondragstartAttributeGetterCallback, LocalDOMWindowV8Internal::ondragstartAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondrop", LocalDOMWindowV8Internal::ondropAttributeGetterCallback, LocalDOMWindowV8Internal::ondropAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondurationchange", LocalDOMWindowV8Internal::ondurationchangeAttributeGetterCallback, LocalDOMWindowV8Internal::ondurationchangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onemptied", LocalDOMWindowV8Internal::onemptiedAttributeGetterCallback, LocalDOMWindowV8Internal::onemptiedAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onended", LocalDOMWindowV8Internal::onendedAttributeGetterCallback, LocalDOMWindowV8Internal::onendedAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onerror", LocalDOMWindowV8Internal::onerrorAttributeGetterCallback, LocalDOMWindowV8Internal::onerrorAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onfocus", LocalDOMWindowV8Internal::onfocusAttributeGetterCallback, LocalDOMWindowV8Internal::onfocusAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oninput", LocalDOMWindowV8Internal::oninputAttributeGetterCallback, LocalDOMWindowV8Internal::oninputAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"oninvalid", LocalDOMWindowV8Internal::oninvalidAttributeGetterCallback, LocalDOMWindowV8Internal::oninvalidAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onkeydown", LocalDOMWindowV8Internal::onkeydownAttributeGetterCallback, LocalDOMWindowV8Internal::onkeydownAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onkeypress", LocalDOMWindowV8Internal::onkeypressAttributeGetterCallback, LocalDOMWindowV8Internal::onkeypressAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onkeyup", LocalDOMWindowV8Internal::onkeyupAttributeGetterCallback, LocalDOMWindowV8Internal::onkeyupAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onload", LocalDOMWindowV8Internal::onloadAttributeGetterCallback, LocalDOMWindowV8Internal::onloadAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onloadeddata", LocalDOMWindowV8Internal::onloadeddataAttributeGetterCallback, LocalDOMWindowV8Internal::onloadeddataAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onloadedmetadata", LocalDOMWindowV8Internal::onloadedmetadataAttributeGetterCallback, LocalDOMWindowV8Internal::onloadedmetadataAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onloadstart", LocalDOMWindowV8Internal::onloadstartAttributeGetterCallback, LocalDOMWindowV8Internal::onloadstartAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmousedown", LocalDOMWindowV8Internal::onmousedownAttributeGetterCallback, LocalDOMWindowV8Internal::onmousedownAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmouseenter", LocalDOMWindowV8Internal::onmouseenterAttributeGetterCallback, LocalDOMWindowV8Internal::onmouseenterAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmouseleave", LocalDOMWindowV8Internal::onmouseleaveAttributeGetterCallback, LocalDOMWindowV8Internal::onmouseleaveAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmousemove", LocalDOMWindowV8Internal::onmousemoveAttributeGetterCallback, LocalDOMWindowV8Internal::onmousemoveAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmouseout", LocalDOMWindowV8Internal::onmouseoutAttributeGetterCallback, LocalDOMWindowV8Internal::onmouseoutAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmouseover", LocalDOMWindowV8Internal::onmouseoverAttributeGetterCallback, LocalDOMWindowV8Internal::onmouseoverAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmouseup", LocalDOMWindowV8Internal::onmouseupAttributeGetterCallback, LocalDOMWindowV8Internal::onmouseupAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmousewheel", LocalDOMWindowV8Internal::onmousewheelAttributeGetterCallback, LocalDOMWindowV8Internal::onmousewheelAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onpause", LocalDOMWindowV8Internal::onpauseAttributeGetterCallback, LocalDOMWindowV8Internal::onpauseAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onplay", LocalDOMWindowV8Internal::onplayAttributeGetterCallback, LocalDOMWindowV8Internal::onplayAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onplaying", LocalDOMWindowV8Internal::onplayingAttributeGetterCallback, LocalDOMWindowV8Internal::onplayingAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onprogress", LocalDOMWindowV8Internal::onprogressAttributeGetterCallback, LocalDOMWindowV8Internal::onprogressAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onratechange", LocalDOMWindowV8Internal::onratechangeAttributeGetterCallback, LocalDOMWindowV8Internal::onratechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onreset", LocalDOMWindowV8Internal::onresetAttributeGetterCallback, LocalDOMWindowV8Internal::onresetAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onresize", LocalDOMWindowV8Internal::onresizeAttributeGetterCallback, LocalDOMWindowV8Internal::onresizeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onscroll", LocalDOMWindowV8Internal::onscrollAttributeGetterCallback, LocalDOMWindowV8Internal::onscrollAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onseeked", LocalDOMWindowV8Internal::onseekedAttributeGetterCallback, LocalDOMWindowV8Internal::onseekedAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onseeking", LocalDOMWindowV8Internal::onseekingAttributeGetterCallback, LocalDOMWindowV8Internal::onseekingAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onselect", LocalDOMWindowV8Internal::onselectAttributeGetterCallback, LocalDOMWindowV8Internal::onselectAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onshow", LocalDOMWindowV8Internal::onshowAttributeGetterCallback, LocalDOMWindowV8Internal::onshowAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onstalled", LocalDOMWindowV8Internal::onstalledAttributeGetterCallback, LocalDOMWindowV8Internal::onstalledAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onsubmit", LocalDOMWindowV8Internal::onsubmitAttributeGetterCallback, LocalDOMWindowV8Internal::onsubmitAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onsuspend", LocalDOMWindowV8Internal::onsuspendAttributeGetterCallback, LocalDOMWindowV8Internal::onsuspendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ontimeupdate", LocalDOMWindowV8Internal::ontimeupdateAttributeGetterCallback, LocalDOMWindowV8Internal::ontimeupdateAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ontoggle", LocalDOMWindowV8Internal::ontoggleAttributeGetterCallback, LocalDOMWindowV8Internal::ontoggleAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onvolumechange", LocalDOMWindowV8Internal::onvolumechangeAttributeGetterCallback, LocalDOMWindowV8Internal::onvolumechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onwaiting", LocalDOMWindowV8Internal::onwaitingAttributeGetterCallback, LocalDOMWindowV8Internal::onwaitingAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onbeforeunload", LocalDOMWindowV8Internal::onbeforeunloadAttributeGetterCallback, LocalDOMWindowV8Internal::onbeforeunloadAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onhashchange", LocalDOMWindowV8Internal::onhashchangeAttributeGetterCallback, LocalDOMWindowV8Internal::onhashchangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onlanguagechange", LocalDOMWindowV8Internal::onlanguagechangeAttributeGetterCallback, LocalDOMWindowV8Internal::onlanguagechangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onmessage", LocalDOMWindowV8Internal::onmessageAttributeGetterCallback, LocalDOMWindowV8Internal::onmessageAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onoffline", LocalDOMWindowV8Internal::onofflineAttributeGetterCallback, LocalDOMWindowV8Internal::onofflineAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ononline", LocalDOMWindowV8Internal::ononlineAttributeGetterCallback, LocalDOMWindowV8Internal::ononlineAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onpagehide", LocalDOMWindowV8Internal::onpagehideAttributeGetterCallback, LocalDOMWindowV8Internal::onpagehideAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onpageshow", LocalDOMWindowV8Internal::onpageshowAttributeGetterCallback, LocalDOMWindowV8Internal::onpageshowAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onpopstate", LocalDOMWindowV8Internal::onpopstateAttributeGetterCallback, LocalDOMWindowV8Internal::onpopstateAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onstorage", LocalDOMWindowV8Internal::onstorageAttributeGetterCallback, LocalDOMWindowV8Internal::onstorageAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"onunload", LocalDOMWindowV8Internal::onunloadAttributeGetterCallback, LocalDOMWindowV8Internal::onunloadAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"crypto", LocalDOMWindowV8Internal::cryptoAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"ondevicemotion", LocalDOMWindowV8Internal::ondevicemotionAttributeGetterCallback, LocalDOMWindowV8Internal::ondevicemotionAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"ondeviceorientation", LocalDOMWindowV8Internal::ondeviceorientationAttributeGetterCallback, LocalDOMWindowV8Internal::ondeviceorientationAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */},
    {"webkitIndexedDB", LocalDOMWindowV8Internal::webkitIndexedDBAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"indexedDB", LocalDOMWindowV8Internal::indexedDBAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webkitIDBCursor", LocalDOMWindowV8Internal::webkitIDBCursorConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBDatabase", LocalDOMWindowV8Internal::webkitIDBDatabaseConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBDatabase::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBFactory", LocalDOMWindowV8Internal::webkitIDBFactoryConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBFactory::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBIndex", LocalDOMWindowV8Internal::webkitIDBIndexConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBIndex::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBKeyRange", LocalDOMWindowV8Internal::webkitIDBKeyRangeConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBKeyRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBObjectStore", LocalDOMWindowV8Internal::webkitIDBObjectStoreConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBObjectStore::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBRequest", LocalDOMWindowV8Internal::webkitIDBRequestConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBTransaction", LocalDOMWindowV8Internal::webkitIDBTransactionConstructorGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBTransaction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitStorageInfo", LocalDOMWindowV8Internal::webkitStorageInfoAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(SVG_FONTS)
    {"SVGAltGlyphDefElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAltGlyphDefElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGAltGlyphElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAltGlyphElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGAltGlyphItemElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAltGlyphItemElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGFontElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFontElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGFontFaceElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFontFaceElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGFontFaceFormatElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFontFaceFormatElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGFontFaceNameElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFontFaceNameElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGFontFaceSrcElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFontFaceSrcElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGFontFaceUriElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFontFaceUriElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGGlyphElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGGlyphElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGGlyphRefElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGGlyphRefElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGHKernElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGHKernElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGMissingGlyphElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGMissingGlyphElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
#if ENABLE(SVG_FONTS)
    {"SVGVKernElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGVKernElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(SVG_FONTS)
    {"ApplicationCache", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ApplicationCache::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ApplicationCacheErrorEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ApplicationCacheErrorEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Attr", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Attr::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"AutocompleteErrorEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AutocompleteErrorEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"BarProp", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8BarProp::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"BeforeUnloadEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8BeforeUnloadEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Blob", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Blob::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CDATASection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CDATASection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSCharsetRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSCharsetRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSFontFaceRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSFontFaceRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSImportRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSImportRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSKeyframeRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSKeyframeRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSKeyframesRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSKeyframesRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSMediaRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSMediaRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSPageRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSPageRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSPrimitiveValue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSPrimitiveValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSRuleList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSRuleList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSStyleDeclaration", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSStyleDeclaration::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSStyleRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSStyleRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSStyleSheet", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSStyleSheet::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSUnknownRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSUnknownRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSValue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSValueList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSValueList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CSSViewportRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CSSViewportRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CanvasGradient", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CanvasGradient::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CanvasPattern", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CanvasPattern::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CanvasRenderingContext2D", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CanvasRenderingContext2D::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CharacterData", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CharacterData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ClientRect", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ClientRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ClientRectList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ClientRectList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Comment", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Comment::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CompositionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CompositionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Counter", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Counter::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"CustomEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CustomEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMError", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMException", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMException::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMImplementation", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMImplementation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMParser", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMParser::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMSettableTokenList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMSettableTokenList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMStringList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMStringList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMStringMap", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMStringMap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DOMTokenList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DOMTokenList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DataTransfer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DataTransfer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DataTransferItemList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DataTransferItemList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Document", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Document::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DocumentFragment", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DocumentFragment::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DocumentType", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DocumentType::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Element", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Element::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ErrorEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ErrorEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Event", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Event::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"EventSource", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8EventSource::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"EventTarget", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8EventTarget::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"File", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8File::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"FileError", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FileError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"FileList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FileList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"FileReader", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FileReader::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"FocusEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FocusEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"FormData", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FormData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLAllCollection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLAllCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLAnchorElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLAnchorElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLAppletElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLAppletElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLAreaElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLAreaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLBRElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLBRElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLBaseElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLBaseElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLBodyElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLBodyElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLButtonElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLButtonElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLCanvasElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLCanvasElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLCollection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLContentElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLContentElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLDListElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLDListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLDataListElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLDataListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLDirectoryElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLDirectoryElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLDivElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLDivElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLDocument", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLDocument::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLEmbedElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLEmbedElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLFieldSetElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLFieldSetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLFontElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLFontElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLFormControlsCollection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLFormControlsCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLFormElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLFormElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLFrameElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLFrameElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLFrameSetElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLFrameSetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLHRElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLHRElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLHeadElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLHeadElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLHeadingElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLHeadingElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLHtmlElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLHtmlElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLIFrameElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLIFrameElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLImageElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLImageElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Image", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLImageElementConstructor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLInputElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLInputElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLKeygenElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLKeygenElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLLIElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLLIElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLLabelElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLLabelElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLLegendElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLLegendElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLLinkElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLLinkElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLMapElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLMapElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLMarqueeElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLMarqueeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLMenuElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLMenuElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLMetaElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLMetaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLMeterElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLMeterElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLModElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLModElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLOListElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLOListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLObjectElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLObjectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLOptGroupElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLOptGroupElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLOptionElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLOptionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Option", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLOptionElementConstructor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLOptionsCollection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLOptionsCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLOutputElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLOutputElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLParagraphElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLParagraphElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLParamElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLParamElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLPreElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLPreElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLProgressElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLProgressElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLQuoteElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLQuoteElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLScriptElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLScriptElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLSelectElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLSelectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLShadowElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLShadowElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLSpanElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLSpanElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLStyleElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLStyleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTableCaptionElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTableCaptionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTableCellElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTableCellElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTableColElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTableColElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTableElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTableElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTableRowElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTableRowElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTableSectionElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTableSectionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTemplateElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTemplateElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTextAreaElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTextAreaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTitleElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTitleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLTrackElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLTrackElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLUListElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLUListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HTMLUnknownElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLUnknownElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"HashChangeEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HashChangeEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"History", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8History::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ImageBitmap", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ImageBitmap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ImageData", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ImageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"InputMethodContext", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8InputMethodContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"KeyboardEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8KeyboardEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Location", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Location::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MediaList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MessageChannel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MessageChannel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MessageEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MessageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MessagePort", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MessagePort::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MimeTypeArray", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MimeTypeArray::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MimeType", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MimeType::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MouseEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MouseEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MutationEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MutationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MutationObserver", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MutationObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MutationRecord", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MutationRecord::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"NamedNodeMap", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8NamedNodeMap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Navigator", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Navigator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Node", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Node::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"NodeFilter", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8NodeFilter::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"NodeIterator", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8NodeIterator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"NodeList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8NodeList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Notation", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Notation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"OverflowEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8OverflowEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PageTransitionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PageTransitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Performance", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Performance::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PerformanceEntry", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PerformanceEntry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PerformanceMark", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PerformanceMark::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PerformanceMeasure", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PerformanceMeasure::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PerformanceNavigation", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PerformanceNavigation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PerformanceResourceTiming", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PerformanceResourceTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PerformanceTiming", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PerformanceTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PluginArray", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PluginArray::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Plugin", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Plugin::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"PopStateEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PopStateEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ProcessingInstruction", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ProcessingInstruction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ProgressEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ProgressEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"RGBColor", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8RGBColor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Range", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Range::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Rect", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Rect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAngle", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAngle::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimateElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimateElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimateMotionElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimateMotionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimateTransformElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimateTransformElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedAngle", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedAngle::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedBoolean", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedBoolean::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedEnumeration", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedEnumeration::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedInteger", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedInteger::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedLength", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedLengthList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedLengthList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedNumber", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedNumber::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedNumberList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedNumberList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedPreserveAspectRatio", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedPreserveAspectRatio::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedRect", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedString", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedString::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimatedTransformList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedTransformList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGAnimationElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGAnimationElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGCircleElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGCircleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGClipPathElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGClipPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGComponentTransferFunctionElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGComponentTransferFunctionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGCursorElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGCursorElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGDefsElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGDefsElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGDescElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGDescElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGDiscardElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGDiscardElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGEllipseElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGEllipseElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEBlendElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEBlendElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEColorMatrixElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEColorMatrixElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEComponentTransferElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEComponentTransferElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFECompositeElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFECompositeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEConvolveMatrixElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEConvolveMatrixElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEDiffuseLightingElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEDiffuseLightingElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEDisplacementMapElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEDisplacementMapElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEDistantLightElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEDistantLightElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEDropShadowElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEDropShadowElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEFloodElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEFloodElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEFuncAElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncAElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEFuncBElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncBElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEFuncGElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEFuncRElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncRElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEGaussianBlurElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEGaussianBlurElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEImageElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEImageElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEMergeElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEMergeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEMergeNodeElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEMergeNodeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEMorphologyElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEMorphologyElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEOffsetElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEOffsetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFEPointLightElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFEPointLightElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFESpecularLightingElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFESpecularLightingElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFESpotLightElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFESpotLightElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFETileElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFETileElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFETurbulenceElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFETurbulenceElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGFilterElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGFilterElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGForeignObjectElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGForeignObjectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGGElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGGeometryElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGGeometryElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGGradientElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGGradientElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGGraphicsElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGGraphicsElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGImageElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGImageElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGLength", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGLengthList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGLengthList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGLineElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGLineElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGLinearGradientElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGLinearGradientElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGMPathElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGMPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGMarkerElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGMarkerElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGMaskElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGMaskElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGMatrix", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGMetadataElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGMetadataElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGNumber", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGNumber::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGNumberList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGNumberList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegArcAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegArcAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegArcRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegArcRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegClosePath", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegClosePath::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSeg", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSeg::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoCubicAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoCubicAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoCubicRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoCubicRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoCubicSmoothAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoCubicSmoothAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoCubicSmoothRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoCubicSmoothRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoQuadraticAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoQuadraticAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoQuadraticRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoQuadraticRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoQuadraticSmoothAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoQuadraticSmoothAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegCurvetoQuadraticSmoothRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegCurvetoQuadraticSmoothRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegLinetoAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegLinetoAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegLinetoHorizontalAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegLinetoHorizontalAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegLinetoHorizontalRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegLinetoHorizontalRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegLinetoRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegLinetoRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegLinetoVerticalAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegLinetoVerticalAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegLinetoVerticalRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegLinetoVerticalRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegMovetoAbs", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegMovetoAbs::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPathSegMovetoRel", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPathSegMovetoRel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPatternElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPatternElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPoint", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPoint::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPointList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPointList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPolygonElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPolygonElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPolylineElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPolylineElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGPreserveAspectRatio", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGPreserveAspectRatio::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGRadialGradientElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGRadialGradientElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGRect", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGRectElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGRectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGRenderingIntent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGRenderingIntent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGSVGElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGSVGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGScriptElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGScriptElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGSetElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGSetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGStopElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGStopElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGStringList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGStringList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGStyleElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGStyleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGSwitchElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGSwitchElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGSymbolElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGSymbolElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTSpanElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTSpanElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTextContentElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTextContentElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTextElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTextElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTextPathElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTextPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTextPositioningElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTextPositioningElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTitleElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTitleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTransform", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTransform::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGTransformList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGTransformList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGUnitTypes", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGUnitTypes::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGUseElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGUseElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGViewElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGViewElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGViewSpec", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGViewSpec::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"SVGZoomEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SVGZoomEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Screen", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Screen::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Selection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Selection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ShadowRoot", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ShadowRoot::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Storage", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Storage::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"StorageEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8StorageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"StyleSheet", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8StyleSheet::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"StyleSheetList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8StyleSheetList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Text", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Text::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TextEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TextMetrics", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextMetrics::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TextTrack", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TextTrackCue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextTrackCue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TextTrackCueList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextTrackCueList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TextTrackList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Touch", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Touch::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TouchEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TouchEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TouchList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TouchList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TrackEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TrackEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TransitionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TransitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"TreeWalker", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TreeWalker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"UIEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8UIEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"URL", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8URL::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"VTTCue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8VTTCue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"ValidityState", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ValidityState::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLActiveInfo", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLActiveInfo::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLBuffer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLBuffer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLContextEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLContextEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLFramebuffer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLFramebuffer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLProgram", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLProgram::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLRenderbuffer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLRenderbuffer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLRenderingContext", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLRenderingContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLShader", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLShader::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLShaderPrecisionFormat", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLShaderPrecisionFormat::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLTexture", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLTexture::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebGLUniformLocation", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebGLUniformLocation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitAnimationEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitAnimationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitCSSFilterRule", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitCSSFilterRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitCSSFilterValue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitCSSFilterValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitCSSMatrix", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitCSSMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitCSSTransformValue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitCSSTransformValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitPoint", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitPoint::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WheelEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WheelEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Window", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Window::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Worker", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Worker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XMLDocument", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XMLDocument::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XMLHttpRequest", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XMLHttpRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XMLHttpRequestProgressEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XMLHttpRequestProgressEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XMLHttpRequestUpload", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XMLHttpRequestUpload::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XMLSerializer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XMLSerializer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XPathEvaluator", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XPathEvaluator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XPathExpression", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XPathExpression::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"XPathResult", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XPathResult::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#if ENABLE(WEB_AUDIO)
    {"AnalyserNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AnalyserNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioBuffer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioBuffer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioBufferSourceNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioBufferSourceNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioDestinationNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioDestinationNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioListener", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioListener::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioParam", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioParam::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"AudioProcessingEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioProcessingEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"BiquadFilterNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8BiquadFilterNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"ChannelMergerNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ChannelMergerNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"ChannelSplitterNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ChannelSplitterNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"ConvolverNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ConvolverNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"DelayNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DelayNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"DynamicsCompressorNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DynamicsCompressorNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"GainNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8GainNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"MediaElementAudioSourceNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaElementAudioSourceNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"MediaStreamAudioDestinationNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaStreamAudioDestinationNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"MediaStreamAudioSourceNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaStreamAudioSourceNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"OfflineAudioCompletionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8OfflineAudioCompletionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"OscillatorNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8OscillatorNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"PeriodicWave", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PeriodicWave::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"ScriptProcessorNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ScriptProcessorNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    {"WaveShaperNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WaveShaperNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(WEB_AUDIO)
    {"CloseEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8CloseEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DeviceMotionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DeviceMotionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"DeviceOrientationEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DeviceOrientationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"Gamepad", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Gamepad::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"GamepadEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8GamepadEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBCursor", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBCursorWithValue", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursorWithValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBDatabase", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBDatabase::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBFactory", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBFactory::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBIndex", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBIndex::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBKeyRange", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBKeyRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBObjectStore", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBObjectStore::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBOpenDBRequest", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBOpenDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBRequest", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBTransaction", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBTransaction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBVersionChangeEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBVersionChangeEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MediaStreamEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaStreamEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"MediaStreamTrack", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaStreamTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"RTCIceCandidate", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8RTCIceCandidate::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"RTCSessionDescription", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8RTCSessionDescription::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebKitGamepad", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitGamepad::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"WebSocket", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebSocket::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8WindowMethods[] = {
    {"getSelection", LocalDOMWindowV8Internal::getSelectionMethodCallback, 0, 0},
    {"print", LocalDOMWindowV8Internal::printMethodCallback, 0, 0},
    {"stop", LocalDOMWindowV8Internal::stopMethodCallback, 0, 0},
    {"open", LocalDOMWindowV8Internal::openMethodCallback, 0, 2},
    {"alert", LocalDOMWindowV8Internal::alertMethodCallback, 0, 0},
    {"confirm", LocalDOMWindowV8Internal::confirmMethodCallback, 0, 0},
    {"prompt", LocalDOMWindowV8Internal::promptMethodCallback, 0, 0},
    {"find", LocalDOMWindowV8Internal::findMethodCallback, 0, 0},
    {"scrollBy", LocalDOMWindowV8Internal::scrollByMethodCallback, 0, 2},
    {"scrollTo", LocalDOMWindowV8Internal::scrollToMethodCallback, 0, 2},
    {"scroll", LocalDOMWindowV8Internal::scrollMethodCallback, 0, 2},
    {"moveBy", LocalDOMWindowV8Internal::moveByMethodCallback, 0, 0},
    {"moveTo", LocalDOMWindowV8Internal::moveToMethodCallback, 0, 0},
    {"resizeBy", LocalDOMWindowV8Internal::resizeByMethodCallback, 0, 0},
    {"resizeTo", LocalDOMWindowV8Internal::resizeToMethodCallback, 0, 0},
    {"matchMedia", LocalDOMWindowV8Internal::matchMediaMethodCallback, 0, 1},
    {"getComputedStyle", LocalDOMWindowV8Internal::getComputedStyleMethodCallback, 0, 0},
    {"getMatchedCSSRules", LocalDOMWindowV8Internal::getMatchedCSSRulesMethodCallback, 0, 0},
    {"webkitConvertPointFromPageToNode", LocalDOMWindowV8Internal::webkitConvertPointFromPageToNodeMethodCallback, 0, 0},
    {"webkitConvertPointFromNodeToPage", LocalDOMWindowV8Internal::webkitConvertPointFromNodeToPageMethodCallback, 0, 0},
    {"requestAnimationFrame", LocalDOMWindowV8Internal::requestAnimationFrameMethodCallback, 0, 1},
    {"cancelAnimationFrame", LocalDOMWindowV8Internal::cancelAnimationFrameMethodCallback, 0, 1},
    {"webkitRequestAnimationFrame", LocalDOMWindowV8Internal::webkitRequestAnimationFrameMethodCallback, 0, 1},
    {"webkitCancelAnimationFrame", LocalDOMWindowV8Internal::webkitCancelAnimationFrameMethodCallback, 0, 1},
    {"webkitCancelRequestAnimationFrame", LocalDOMWindowV8Internal::webkitCancelRequestAnimationFrameMethodCallback, 0, 1},
    {"captureEvents", LocalDOMWindowV8Internal::captureEventsMethodCallback, 0, 0},
    {"releaseEvents", LocalDOMWindowV8Internal::releaseEventsMethodCallback, 0, 0},
    {"btoa", LocalDOMWindowV8Internal::btoaMethodCallback, 0, 1},
    {"atob", LocalDOMWindowV8Internal::atobMethodCallback, 0, 1},
    {"setTimeout", LocalDOMWindowV8Internal::setTimeoutMethodCallback, 0, 1},
    {"clearTimeout", LocalDOMWindowV8Internal::clearTimeoutMethodCallback, 0, 0},
    {"setInterval", LocalDOMWindowV8Internal::setIntervalMethodCallback, 0, 1},
    {"clearInterval", LocalDOMWindowV8Internal::clearIntervalMethodCallback, 0, 0},
};

static void configureShadowObjectTemplate(v8::Handle<v8::ObjectTemplate> templ, v8::Isolate* isolate)
{
    V8DOMConfiguration::installAttributes(templ, v8::Handle<v8::ObjectTemplate>(), shadowAttributes, WTF_ARRAY_LENGTH(shadowAttributes), isolate);

    // Install a security handler with V8.
    templ->SetAccessCheckCallbacks(V8Window::namedSecurityCheckCustom, V8Window::indexedSecurityCheckCustom, v8::External::New(isolate, const_cast<WrapperTypeInfo*>(&V8Window::wrapperTypeInfo)));
    templ->SetInternalFieldCount(V8Window::internalFieldCount);
}

static void configureV8WindowTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "Window", V8EventTarget::domTemplate(isolate), V8Window::internalFieldCount,
        V8WindowAttributes, WTF_ARRAY_LENGTH(V8WindowAttributes),
        0, 0,
        V8WindowMethods, WTF_ARRAY_LENGTH(V8WindowMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    if (RuntimeEnabledFeatures::applicationCacheEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"applicationCache", LocalDOMWindowV8Internal::applicationCacheAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::sessionStorageEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"sessionStorage", LocalDOMWindowV8Internal::sessionStorageAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::localStorageEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"localStorage", LocalDOMWindowV8Internal::localStorageAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::orientationEventEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"orientation", LocalDOMWindowV8Internal::orientationAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::cssAnimationUnprefixedEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"onanimationend", LocalDOMWindowV8Internal::onanimationendAttributeGetterCallback, LocalDOMWindowV8Internal::onanimationendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::cssAnimationUnprefixedEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"onanimationiteration", LocalDOMWindowV8Internal::onanimationiterationAttributeGetterCallback, LocalDOMWindowV8Internal::onanimationiterationAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::cssAnimationUnprefixedEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"onanimationstart", LocalDOMWindowV8Internal::onanimationstartAttributeGetterCallback, LocalDOMWindowV8Internal::onanimationstartAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::orientationEventEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"onorientationchange", LocalDOMWindowV8Internal::onorientationchangeAttributeGetterCallback, LocalDOMWindowV8Internal::onorientationchangeAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ontouchcancel", LocalDOMWindowV8Internal::ontouchcancelAttributeGetterCallback, LocalDOMWindowV8Internal::ontouchcancelAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ontouchend", LocalDOMWindowV8Internal::ontouchendAttributeGetterCallback, LocalDOMWindowV8Internal::ontouchendAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ontouchmove", LocalDOMWindowV8Internal::ontouchmoveAttributeGetterCallback, LocalDOMWindowV8Internal::ontouchmoveAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ontouchstart", LocalDOMWindowV8Internal::ontouchstartAttributeGetterCallback, LocalDOMWindowV8Internal::ontouchstartAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::cssAnimationUnprefixedEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AnimationEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8WebKitAnimationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::requestAutocompleteEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"onautocomplete", LocalDOMWindowV8Internal::onautocompleteAttributeGetterCallback, LocalDOMWindowV8Internal::onautocompleteAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::requestAutocompleteEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"onautocompleteerror", LocalDOMWindowV8Internal::onautocompleteerrorAttributeGetterCallback, LocalDOMWindowV8Internal::onautocompleteerrorAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::deviceLightEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ondevicelight", LocalDOMWindowV8Internal::ondevicelightAttributeGetterCallback, LocalDOMWindowV8Internal::ondevicelightAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 1 /* on prototype */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaStreamEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitMediaStream", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaStream::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::peerConnectionEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitRTCPeerConnection", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8RTCPeerConnection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::scriptedSpeechEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitSpeechGrammar", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechGrammar::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::scriptedSpeechEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitSpeechGrammarList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechGrammarList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::scriptedSpeechEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitSpeechRecognition", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechRecognition::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::scriptedSpeechEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitSpeechRecognitionError", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechRecognitionError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::scriptedSpeechEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitSpeechRecognitionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechRecognitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::speechSynthesisEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"speechSynthesis", LocalDOMWindowV8Internal::speechSynthesisAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
#if ENABLE(WEB_AUDIO)
    if (RuntimeEnabledFeatures::webAudioEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AudioContext", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    if (RuntimeEnabledFeatures::webAudioEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"OfflineAudioContext", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8OfflineAudioContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    if (RuntimeEnabledFeatures::webAudioEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitAudioContext", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
#endif // ENABLE(WEB_AUDIO)
#if ENABLE(WEB_AUDIO)
    if (RuntimeEnabledFeatures::webAudioEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"webkitOfflineAudioContext", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8OfflineAudioContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
#endif // ENABLE(WEB_AUDIO)
    if (RuntimeEnabledFeatures::audioVideoTracksEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AudioTrack", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::audioVideoTracksEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AudioTrackList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AudioTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::audioVideoTracksEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"VideoTrack", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8VideoTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::audioVideoTracksEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"VideoTrackList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8VideoTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::dialogElementEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"HTMLDialogElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLDialogElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encryptedMediaAnyVersionEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaKeyError", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaKeyError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::experimentalContentSecurityPolicyFeaturesEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"SecurityPolicyViolationEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SecurityPolicyViolationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::fontLoadEventsEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"FontFace", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FontFace::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaControllerEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaController", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaController::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"HTMLAudioElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLAudioElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"Audio", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLAudioElementConstructor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"HTMLMediaElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLMediaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"HTMLSourceElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLSourceElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"HTMLVideoElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLVideoElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaError", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"TimeRanges", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TimeRanges::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::path2DEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"Path2D", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Path2D::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::pictureEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"HTMLPictureElement", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8HTMLPictureElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaKeyEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaKeyEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::sharedWorkerEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"SharedWorker", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SharedWorker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::streamEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"Stream", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Stream::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"Animation", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Animation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AnimationNode", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AnimationNode::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AnimationPlayerEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AnimationPlayerEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"AnimationTimeline", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8AnimationTimeline::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"Timing", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Timing::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webVTTRegionsEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"VTTRegion", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8VTTRegion::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webVTTRegionsEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"VTTRegionList", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8VTTRegionList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::xsltEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"XSLTProcessor", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8XSLTProcessor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::batteryStatusEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"BatteryManager", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8BatteryManager::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::deviceLightEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"DeviceLightEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8DeviceLightEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encodingAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"TextDecoder", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextDecoder::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encodingAPIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"TextEncoder", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8TextEncoder::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaKeyMessageEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaKeyMessageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaKeyNeededEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaKeyNeededEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaKeySession", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaKeySession::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaKeys", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaKeys::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaSourceExperimentalEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"VideoPlaybackQuality", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8VideoPlaybackQuality::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::mediaSourceEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MediaSource", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MediaSource::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::networkInformationEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"NetworkInformation", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8NetworkInformation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::notificationsEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"Notification", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8Notification::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::pushMessagingEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"PushEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8PushEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::serviceWorkerEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ServiceWorker", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ServiceWorker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::serviceWorkerEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"ServiceWorkerContainer", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8ServiceWorkerContainer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::speechSynthesisEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"SpeechSynthesisEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechSynthesisEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::speechSynthesisEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"SpeechSynthesisUtterance", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8SpeechSynthesisUtterance::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webMIDIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MIDIConnectionEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MIDIConnectionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::webMIDIEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"MIDIMessageEvent", LocalDOMWindowV8Internal::LocalDOMWindowConstructorGetter, LocalDOMWindowV8Internal::LocalDOMWindowReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8MIDIMessageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    static const V8DOMConfiguration::ConstantConfiguration V8WindowConstants[] = {
        {"TEMPORARY", 0},
        {"PERSISTENT", 1},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8WindowConstants, WTF_ARRAY_LENGTH(V8WindowConstants), isolate);
    COMPILE_ASSERT(0 == DOMWindowFileSystem::TEMPORARY, TheValueOfLocalDOMWindow_TEMPORARYDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == DOMWindowFileSystem::PERSISTENT, TheValueOfLocalDOMWindow_PERSISTENTDoesntMatchWithImplementation);
    functionTemplate->PrototypeTemplate()->SetIndexedPropertyHandler(LocalDOMWindowV8Internal::indexedPropertyGetterCallback, 0, 0, 0, 0);
    functionTemplate->PrototypeTemplate()->SetNamedPropertyHandler(LocalDOMWindowV8Internal::namedPropertyGetterCallback, 0, 0, 0, 0);
    prototypeTemplate->SetAccessor(v8AtomicString(isolate, "focus"), LocalDOMWindowV8Internal::focusOriginSafeMethodGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowOriginSafeMethodSetterCallback, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete));
    prototypeTemplate->SetAccessor(v8AtomicString(isolate, "blur"), LocalDOMWindowV8Internal::blurOriginSafeMethodGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowOriginSafeMethodSetterCallback, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete));
    prototypeTemplate->SetAccessor(v8AtomicString(isolate, "close"), LocalDOMWindowV8Internal::closeOriginSafeMethodGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowOriginSafeMethodSetterCallback, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete));
    if (RuntimeEnabledFeatures::showModalDialogEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "showModalDialog"), v8::FunctionTemplate::New(isolate, LocalDOMWindowV8Internal::showModalDialogMethodCallback, v8Undefined(), defaultSignature, 1));
    }
    prototypeTemplate->SetAccessor(v8AtomicString(isolate, "postMessage"), LocalDOMWindowV8Internal::postMessageOriginSafeMethodGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowOriginSafeMethodSetterCallback, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete));
    prototypeTemplate->SetAccessor(v8AtomicString(isolate, "toString"), LocalDOMWindowV8Internal::toStringOriginSafeMethodGetterCallback, LocalDOMWindowV8Internal::LocalDOMWindowOriginSafeMethodSetterCallback, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum));
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitRequestFileSystem"), v8::FunctionTemplate::New(isolate, LocalDOMWindowV8Internal::webkitRequestFileSystemMethodCallback, v8Undefined(), defaultSignature, 3));
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitResolveLocalFileSystemURL"), v8::FunctionTemplate::New(isolate, LocalDOMWindowV8Internal::webkitResolveLocalFileSystemURLMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "createImageBitmap"), v8::FunctionTemplate::New(isolate, LocalDOMWindowV8Internal::createImageBitmapMethodCallback, v8Undefined(), defaultSignature, 1));
    }
    if (RuntimeEnabledFeatures::databaseEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "openDatabase"), v8::FunctionTemplate::New(isolate, LocalDOMWindowV8Internal::openDatabaseMethodCallback, v8Undefined(), defaultSignature, 4));
    }

    prototypeTemplate->SetInternalFieldCount(V8Window::internalFieldCount);
    functionTemplate->SetHiddenPrototype(true);
    instanceTemplate->SetInternalFieldCount(V8Window::internalFieldCount);
    // Set access check callbacks, but turned off initially.
    // When a context is detached from a frame, turn on the access check.
    // Turning on checks also invalidates inline caches of the object.
    instanceTemplate->SetAccessCheckCallbacks(V8Window::namedSecurityCheckCustom, V8Window::indexedSecurityCheckCustom, v8::External::New(isolate, const_cast<WrapperTypeInfo*>(&V8Window::wrapperTypeInfo)), false);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8Window::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8WindowTemplate);
}

bool V8Window::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8Window::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

LocalDOMWindow* V8Window::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

void V8Window::installPerContextEnabledProperties(v8::Handle<v8::Object> instanceTemplate, LocalDOMWindow* impl, v8::Isolate* isolate)
{
    v8::Local<v8::Object> prototypeTemplate = v8::Local<v8::Object>::Cast(instanceTemplate->GetPrototype());
    if (ContextFeatures::pagePopupEnabled(impl->document())) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"pagePopupController", LocalDOMWindowV8Internal::pagePopupControllerAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
}

EventTarget* V8Window::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::ObjectTemplate> V8Window::getShadowObjectTemplate(v8::Isolate* isolate)
{
    if (DOMWrapperWorld::current(isolate).isMainWorld()) {
        DEFINE_STATIC_LOCAL(v8::Persistent<v8::ObjectTemplate>, V8WindowShadowObjectCacheForMainWorld, ());
        if (V8WindowShadowObjectCacheForMainWorld.IsEmpty()) {
            TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "BuildDOMTemplate");
            v8::Handle<v8::ObjectTemplate> templ = v8::ObjectTemplate::New(isolate);
            configureShadowObjectTemplate(templ, isolate);
            V8WindowShadowObjectCacheForMainWorld.Reset(isolate, templ);
            return templ;
        }
        return v8::Local<v8::ObjectTemplate>::New(isolate, V8WindowShadowObjectCacheForMainWorld);
    } else {
        DEFINE_STATIC_LOCAL(v8::Persistent<v8::ObjectTemplate>, V8WindowShadowObjectCacheForNonMainWorld, ());
        if (V8WindowShadowObjectCacheForNonMainWorld.IsEmpty()) {
            TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "BuildDOMTemplate");
            v8::Handle<v8::ObjectTemplate> templ = v8::ObjectTemplate::New(isolate);
            configureShadowObjectTemplate(templ, isolate);
            V8WindowShadowObjectCacheForNonMainWorld.Reset(isolate, templ);
            return templ;
        }
        return v8::Local<v8::ObjectTemplate>::New(isolate, V8WindowShadowObjectCacheForNonMainWorld);
    }
}

void V8Window::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(LocalDOMWindow* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
