// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8DOMImplementation.h"

#include "bindings/core/v8/V8DocumentType.h"
#include "bindings/core/v8/V8HTMLDocument.h"
#include "bindings/core/v8/V8XMLDocument.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8GCController.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(DOMImplementation* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8DOMImplementation::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::DOMImplementation* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8DOMImplementation::wrapperTypeInfo = { gin::kEmbedderBlink, V8DOMImplementation::domTemplate, V8DOMImplementation::derefObject, 0, 0, V8DOMImplementation::visitDOMWrapper, V8DOMImplementation::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace DOMImplementationV8Internal {

template <typename T> void V8_USE(T) { }

static void hasFeatureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("hasFeature", "DOMImplementation", 2, info.Length(), info.GetIsolate());
        return;
    }
    DOMImplementation* impl = V8DOMImplementation::toNative(info.Holder());
    V8StringResource<> feature;
    V8StringResource<WithNullCheck> version;
    {
        TOSTRING_VOID_INTERNAL(feature, info[0]);
        TOSTRING_VOID_INTERNAL(version, info[1]);
    }
    v8SetReturnValueBool(info, impl->hasFeatureForBindings(feature, version));
}

static void hasFeatureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::DOMImplementationHasFeature);
    DOMImplementationV8Internal::hasFeatureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createDocumentTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDocumentType", "DOMImplementation", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        throwMinimumArityTypeError(exceptionState, 3, info.Length());
        return;
    }
    DOMImplementation* impl = V8DOMImplementation::toNative(info.Holder());
    V8StringResource<> qualifiedName;
    V8StringResource<> publicId;
    V8StringResource<> systemId;
    {
        TOSTRING_VOID_INTERNAL(qualifiedName, info[0]);
        TOSTRING_VOID_INTERNAL(publicId, info[1]);
        TOSTRING_VOID_INTERNAL(systemId, info[2]);
    }
    RefPtrWillBeRawPtr<DocumentType> result = impl->createDocumentType(qualifiedName, publicId, systemId, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDocumentTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    DOMImplementationV8Internal::createDocumentTypeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createDocument", "DOMImplementation", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    DOMImplementation* impl = V8DOMImplementation::toNative(info.Holder());
    V8StringResource<WithNullCheck> namespaceURI;
    V8StringResource<WithNullCheck> qualifiedName;
    DocumentType* doctype;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(namespaceURI, info[0]);
        TOSTRING_VOID_INTERNAL(qualifiedName, info[1]);
        TONATIVE_VOID_INTERNAL(doctype, V8DocumentType::toNativeWithTypeCheck(info.GetIsolate(), info[2]));
    }
    RefPtrWillBeRawPtr<XMLDocument> result = impl->createDocument(namespaceURI, qualifiedName, doctype, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void createDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    DOMImplementationV8Internal::createDocumentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createHTMLDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    DOMImplementation* impl = V8DOMImplementation::toNative(info.Holder());
    V8StringResource<> title;
    {
        TOSTRING_VOID_INTERNAL(title, argumentOrNull(info, 0));
    }
    v8SetReturnValue(info, impl->createHTMLDocument(title));
}

static void createHTMLDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    DOMImplementationV8Internal::createHTMLDocumentMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace DOMImplementationV8Internal

void V8DOMImplementation::visitDOMWrapper(void* object, const v8::Persistent<v8::Object>& wrapper, v8::Isolate* isolate)
{
    DOMImplementation* impl = fromInternalPointer(object);
    // The document() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->document())) {
        Node* root = V8GCController::opaqueRootForGC(owner, isolate);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
    setObjectGroup(object, wrapper, isolate);
}

static const V8DOMConfiguration::MethodConfiguration V8DOMImplementationMethods[] = {
    {"hasFeature", DOMImplementationV8Internal::hasFeatureMethodCallback, 0, 2},
    {"createDocumentType", DOMImplementationV8Internal::createDocumentTypeMethodCallback, 0, 3},
    {"createDocument", DOMImplementationV8Internal::createDocumentMethodCallback, 0, 2},
    {"createHTMLDocument", DOMImplementationV8Internal::createHTMLDocumentMethodCallback, 0, 0},
};

static void configureV8DOMImplementationTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "DOMImplementation", v8::Local<v8::FunctionTemplate>(), V8DOMImplementation::internalFieldCount,
        0, 0,
        0, 0,
        V8DOMImplementationMethods, WTF_ARRAY_LENGTH(V8DOMImplementationMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8DOMImplementation::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8DOMImplementationTemplate);
}

bool V8DOMImplementation::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8DOMImplementation::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DOMImplementation* V8DOMImplementation::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(DOMImplementation* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8DOMImplementation>(impl, isolate));
    return V8DOMImplementation::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8DOMImplementation::createWrapper(PassRefPtrWillBeRawPtr<DOMImplementation> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8DOMImplementation>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8DOMImplementation>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8DOMImplementation::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(DOMImplementation* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
