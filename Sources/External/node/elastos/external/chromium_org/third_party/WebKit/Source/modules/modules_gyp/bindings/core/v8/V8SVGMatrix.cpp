// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGMatrix.h"

#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/core/v8/V8SVGTransform.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGMatrixTearOff* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGMatrix::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGMatrixTearOff* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGMatrix::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGMatrix::domTemplate, V8SVGMatrix::derefObject, 0, 0, V8SVGMatrix::visitDOMWrapper, V8SVGMatrix::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace SVGMatrixTearOffV8Internal {

template <typename T> void V8_USE(T) { }

static void aAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    v8SetReturnValue(info, impl->a());
}

static void aAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMatrixTearOffV8Internal::aAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void aAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "a", "SVGMatrix", holder, info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    TONATIVE_VOID(double, cppValue, static_cast<double>(v8Value->NumberValue()));
    impl->setA(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void aAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGMatrixTearOffV8Internal::aAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void bAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    v8SetReturnValue(info, impl->b());
}

static void bAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMatrixTearOffV8Internal::bAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void bAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "b", "SVGMatrix", holder, info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    TONATIVE_VOID(double, cppValue, static_cast<double>(v8Value->NumberValue()));
    impl->setB(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void bAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGMatrixTearOffV8Internal::bAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    v8SetReturnValue(info, impl->c());
}

static void cAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMatrixTearOffV8Internal::cAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "c", "SVGMatrix", holder, info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    TONATIVE_VOID(double, cppValue, static_cast<double>(v8Value->NumberValue()));
    impl->setC(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void cAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGMatrixTearOffV8Internal::cAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void dAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    v8SetReturnValue(info, impl->d());
}

static void dAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMatrixTearOffV8Internal::dAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void dAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "d", "SVGMatrix", holder, info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    TONATIVE_VOID(double, cppValue, static_cast<double>(v8Value->NumberValue()));
    impl->setD(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void dAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGMatrixTearOffV8Internal::dAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void eAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    v8SetReturnValue(info, impl->e());
}

static void eAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMatrixTearOffV8Internal::eAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void eAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "e", "SVGMatrix", holder, info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    TONATIVE_VOID(double, cppValue, static_cast<double>(v8Value->NumberValue()));
    impl->setE(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void eAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGMatrixTearOffV8Internal::eAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    v8SetReturnValue(info, impl->f());
}

static void fAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGMatrixTearOffV8Internal::fAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void fAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "f", "SVGMatrix", holder, info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(holder);
    TONATIVE_VOID(double, cppValue, static_cast<double>(v8Value->NumberValue()));
    impl->setF(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void fAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGMatrixTearOffV8Internal::fAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void multiplyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("multiply", "SVGMatrix", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    SVGMatrixTearOff* secondMatrix;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGMatrix::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("multiply", "SVGMatrix", "parameter 1 is not of type 'SVGMatrix'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(secondMatrix, V8SVGMatrix::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    v8SetReturnValue(info, impl->multiply(secondMatrix));
}

static void multiplyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::multiplyMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void inverseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "inverse", "SVGMatrix", info.Holder(), info.GetIsolate());
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    RefPtr<SVGMatrixTearOff> result = impl->inverse(exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void inverseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::inverseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void translateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("translate", "SVGMatrix", 2, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    v8SetReturnValue(info, impl->translate(x, y));
}

static void translateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::translateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scaleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("scale", "SVGMatrix", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float scaleFactor;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(scaleFactor, static_cast<float>(info[0]->NumberValue()));
    }
    v8SetReturnValue(info, impl->scale(scaleFactor));
}

static void scaleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::scaleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void scaleNonUniformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("scaleNonUniform", "SVGMatrix", 2, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float scaleFactorX;
    float scaleFactorY;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(scaleFactorX, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(scaleFactorY, static_cast<float>(info[1]->NumberValue()));
    }
    v8SetReturnValue(info, impl->scaleNonUniform(scaleFactorX, scaleFactorY));
}

static void scaleNonUniformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::scaleNonUniformMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void rotateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("rotate", "SVGMatrix", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float angle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(angle, static_cast<float>(info[0]->NumberValue()));
    }
    v8SetReturnValue(info, impl->rotate(angle));
}

static void rotateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::rotateMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void rotateFromVectorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "rotateFromVector", "SVGMatrix", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    RefPtr<SVGMatrixTearOff> result = impl->rotateFromVector(x, y, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void rotateFromVectorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::rotateFromVectorMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void flipXMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    v8SetReturnValue(info, impl->flipX());
}

static void flipXMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::flipXMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void flipYMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    v8SetReturnValue(info, impl->flipY());
}

static void flipYMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::flipYMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void skewXMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("skewX", "SVGMatrix", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float angle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(angle, static_cast<float>(info[0]->NumberValue()));
    }
    v8SetReturnValue(info, impl->skewX(angle));
}

static void skewXMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::skewXMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void skewYMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("skewY", "SVGMatrix", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGMatrixTearOff* impl = V8SVGMatrix::toNative(info.Holder());
    float angle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(angle, static_cast<float>(info[0]->NumberValue()));
    }
    v8SetReturnValue(info, impl->skewY(angle));
}

static void skewYMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGMatrixTearOffV8Internal::skewYMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SVGMatrixTearOffV8Internal

void V8SVGMatrix::visitDOMWrapper(void* object, const v8::Persistent<v8::Object>& wrapper, v8::Isolate* isolate)
{
    SVGMatrixTearOff* impl = fromInternalPointer(object);
    v8::Local<v8::Object> creationContext = v8::Local<v8::Object>::New(isolate, wrapper);
    V8WrapperInstantiationScope scope(creationContext, isolate);
    SVGTransformTearOff* contextTransform = impl->contextTransform();
    if (contextTransform) {
        if (!DOMDataStore::containsWrapper<V8SVGTransform>(contextTransform, isolate))
            wrap(contextTransform, creationContext, isolate);
        DOMDataStore::setWrapperReference<V8SVGTransform>(wrapper, contextTransform, isolate);
    }
    setObjectGroup(object, wrapper, isolate);
}

static const V8DOMConfiguration::AttributeConfiguration V8SVGMatrixAttributes[] = {
    {"a", SVGMatrixTearOffV8Internal::aAttributeGetterCallback, SVGMatrixTearOffV8Internal::aAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"b", SVGMatrixTearOffV8Internal::bAttributeGetterCallback, SVGMatrixTearOffV8Internal::bAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"c", SVGMatrixTearOffV8Internal::cAttributeGetterCallback, SVGMatrixTearOffV8Internal::cAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"d", SVGMatrixTearOffV8Internal::dAttributeGetterCallback, SVGMatrixTearOffV8Internal::dAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"e", SVGMatrixTearOffV8Internal::eAttributeGetterCallback, SVGMatrixTearOffV8Internal::eAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"f", SVGMatrixTearOffV8Internal::fAttributeGetterCallback, SVGMatrixTearOffV8Internal::fAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8SVGMatrixMethods[] = {
    {"multiply", SVGMatrixTearOffV8Internal::multiplyMethodCallback, 0, 1},
    {"inverse", SVGMatrixTearOffV8Internal::inverseMethodCallback, 0, 0},
    {"translate", SVGMatrixTearOffV8Internal::translateMethodCallback, 0, 2},
    {"scale", SVGMatrixTearOffV8Internal::scaleMethodCallback, 0, 1},
    {"scaleNonUniform", SVGMatrixTearOffV8Internal::scaleNonUniformMethodCallback, 0, 2},
    {"rotate", SVGMatrixTearOffV8Internal::rotateMethodCallback, 0, 1},
    {"rotateFromVector", SVGMatrixTearOffV8Internal::rotateFromVectorMethodCallback, 0, 2},
    {"flipX", SVGMatrixTearOffV8Internal::flipXMethodCallback, 0, 0},
    {"flipY", SVGMatrixTearOffV8Internal::flipYMethodCallback, 0, 0},
    {"skewX", SVGMatrixTearOffV8Internal::skewXMethodCallback, 0, 1},
    {"skewY", SVGMatrixTearOffV8Internal::skewYMethodCallback, 0, 1},
};

static void configureV8SVGMatrixTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGMatrix", v8::Local<v8::FunctionTemplate>(), V8SVGMatrix::internalFieldCount,
        V8SVGMatrixAttributes, WTF_ARRAY_LENGTH(V8SVGMatrixAttributes),
        0, 0,
        V8SVGMatrixMethods, WTF_ARRAY_LENGTH(V8SVGMatrixMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGMatrix::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGMatrixTemplate);
}

bool V8SVGMatrix::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGMatrix::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGMatrixTearOff* V8SVGMatrix::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(SVGMatrixTearOff* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGMatrix>(impl, isolate));
    return V8SVGMatrix::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SVGMatrix::createWrapper(PassRefPtr<SVGMatrixTearOff> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGMatrix>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGMatrix>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGMatrix::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGMatrixTearOff* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
