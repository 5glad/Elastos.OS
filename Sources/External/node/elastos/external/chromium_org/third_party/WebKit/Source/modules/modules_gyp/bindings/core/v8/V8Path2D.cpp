// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8Path2D.h"

#include "bindings/core/v8/V8Path2D.h"
#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(Path2D* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8Path2D::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::Path2D* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8Path2D::wrapperTypeInfo = { gin::kEmbedderBlink, V8Path2D::domTemplate, V8Path2D::derefObject, 0, 0, 0, V8Path2D::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace Path2DV8Internal {

template <typename T> void V8_USE(T) { }

static void addPathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("addPath", "Path2D", 1, info.Length(), info.GetIsolate());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    Path2D* path;
    SVGMatrixTearOff* transform;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8Path2D::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("addPath", "Path2D", "parameter 1 is not of type 'Path2D'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(path, V8Path2D::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (UNLIKELY(info.Length() <= 1)) {
            impl->addPath(path);
            return;
        }
        if (info.Length() > 1 && !isUndefinedOrNull(info[1]) && !V8SVGMatrix::hasInstance(info[1], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("addPath", "Path2D", "parameter 2 is not of type 'SVGMatrix'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(transform, V8SVGMatrix::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    impl->addPath(path, transform);
}

static void addPathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::addPathMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void closePathMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    Path2D* impl = V8Path2D::toNative(info.Holder());
    impl->closePath();
}

static void closePathMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::closePathMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void moveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("moveTo", "Path2D", 2, info.Length(), info.GetIsolate());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    impl->moveTo(x, y);
}

static void moveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::moveToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void lineToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("lineTo", "Path2D", 2, info.Length(), info.GetIsolate());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
    }
    impl->lineTo(x, y);
}

static void lineToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::lineToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void quadraticCurveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 4)) {
        throwMinimumArityTypeErrorForMethod("quadraticCurveTo", "Path2D", 4, info.Length(), info.GetIsolate());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float cpx;
    float cpy;
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(cpx, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(cpy, static_cast<float>(info[1]->NumberValue()));
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[2]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[3]->NumberValue()));
    }
    impl->quadraticCurveTo(cpx, cpy, x, y);
}

static void quadraticCurveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::quadraticCurveToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void bezierCurveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 6)) {
        throwMinimumArityTypeErrorForMethod("bezierCurveTo", "Path2D", 6, info.Length(), info.GetIsolate());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float cp1x;
    float cp1y;
    float cp2x;
    float cp2y;
    float x;
    float y;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(cp1x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(cp1y, static_cast<float>(info[1]->NumberValue()));
        TONATIVE_VOID_INTERNAL(cp2x, static_cast<float>(info[2]->NumberValue()));
        TONATIVE_VOID_INTERNAL(cp2y, static_cast<float>(info[3]->NumberValue()));
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[4]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[5]->NumberValue()));
    }
    impl->bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
}

static void bezierCurveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::bezierCurveToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void arcToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "arcTo", "Path2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        throwMinimumArityTypeError(exceptionState, 5, info.Length());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float x1;
    float y1;
    float x2;
    float y2;
    float radius;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x1, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y1, static_cast<float>(info[1]->NumberValue()));
        TONATIVE_VOID_INTERNAL(x2, static_cast<float>(info[2]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y2, static_cast<float>(info[3]->NumberValue()));
        TONATIVE_VOID_INTERNAL(radius, static_cast<float>(info[4]->NumberValue()));
    }
    impl->arcTo(x1, y1, x2, y2, radius, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void arcToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::arcToMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void rectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 4)) {
        throwMinimumArityTypeErrorForMethod("rect", "Path2D", 4, info.Length(), info.GetIsolate());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float x;
    float y;
    float width;
    float height;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
        TONATIVE_VOID_INTERNAL(width, static_cast<float>(info[2]->NumberValue()));
        TONATIVE_VOID_INTERNAL(height, static_cast<float>(info[3]->NumberValue()));
    }
    impl->rect(x, y, width, height);
}

static void rectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::rectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void arcMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "arc", "Path2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 5)) {
        throwMinimumArityTypeError(exceptionState, 5, info.Length());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float x;
    float y;
    float radius;
    float startAngle;
    float endAngle;
    bool anticlockwise;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
        TONATIVE_VOID_INTERNAL(radius, static_cast<float>(info[2]->NumberValue()));
        TONATIVE_VOID_INTERNAL(startAngle, static_cast<float>(info[3]->NumberValue()));
        TONATIVE_VOID_INTERNAL(endAngle, static_cast<float>(info[4]->NumberValue()));
        TONATIVE_VOID_INTERNAL(anticlockwise, info[5]->BooleanValue());
    }
    impl->arc(x, y, radius, startAngle, endAngle, anticlockwise, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void arcMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::arcMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void ellipseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "ellipse", "Path2D", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 7)) {
        throwMinimumArityTypeError(exceptionState, 7, info.Length());
        return;
    }
    Path2D* impl = V8Path2D::toNative(info.Holder());
    float x;
    float y;
    float radiusX;
    float radiusY;
    float rotation;
    float startAngle;
    float endAngle;
    bool anticlockwise;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(x, static_cast<float>(info[0]->NumberValue()));
        TONATIVE_VOID_INTERNAL(y, static_cast<float>(info[1]->NumberValue()));
        TONATIVE_VOID_INTERNAL(radiusX, static_cast<float>(info[2]->NumberValue()));
        TONATIVE_VOID_INTERNAL(radiusY, static_cast<float>(info[3]->NumberValue()));
        TONATIVE_VOID_INTERNAL(rotation, static_cast<float>(info[4]->NumberValue()));
        TONATIVE_VOID_INTERNAL(startAngle, static_cast<float>(info[5]->NumberValue()));
        TONATIVE_VOID_INTERNAL(endAngle, static_cast<float>(info[6]->NumberValue()));
        TONATIVE_VOID_INTERNAL(anticlockwise, info[7]->BooleanValue());
    }
    impl->ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void ellipseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    Path2DV8Internal::ellipseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void constructor1(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    RefPtr<Path2D> impl = Path2D::create();

    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8Path2D>(impl.release(), &V8Path2D::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

static void constructor2(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    Path2D* path;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(path, V8Path2D::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    RefPtr<Path2D> impl = Path2D::create(path);

    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8Path2D>(impl.release(), &V8Path2D::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

static void constructor3(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    V8StringResource<> text;
    {
        TOSTRING_VOID_INTERNAL(text, info[0]);
    }
    RefPtr<Path2D> impl = Path2D::create(text);

    v8::Handle<v8::Object> wrapper = info.Holder();
    V8DOMWrapper::associateObjectWithWrapper<V8Path2D>(impl.release(), &V8Path2D::wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    v8SetReturnValue(info, wrapper);
}

static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ConstructionContext, "Path2D", info.Holder(), isolate);
    switch (std::min(1, info.Length())) {
    case 0:
        if (true) {
            Path2DV8Internal::constructor1(info);
            return;
        }
        break;
    case 1:
        if (V8Path2D::hasInstance(info[0], isolate)) {
            Path2DV8Internal::constructor2(info);
            return;
        }
        if (true) {
            Path2DV8Internal::constructor3(info);
            return;
        }
        break;
    default:
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(0, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No matching constructor signature.");
    exceptionState.throwIfNeeded();
}

} // namespace Path2DV8Internal

static const V8DOMConfiguration::MethodConfiguration V8Path2DMethods[] = {
    {"closePath", Path2DV8Internal::closePathMethodCallback, 0, 0},
    {"moveTo", Path2DV8Internal::moveToMethodCallback, 0, 2},
    {"lineTo", Path2DV8Internal::lineToMethodCallback, 0, 2},
    {"quadraticCurveTo", Path2DV8Internal::quadraticCurveToMethodCallback, 0, 4},
    {"bezierCurveTo", Path2DV8Internal::bezierCurveToMethodCallback, 0, 6},
    {"arcTo", Path2DV8Internal::arcToMethodCallback, 0, 5},
    {"rect", Path2DV8Internal::rectMethodCallback, 0, 4},
    {"arc", Path2DV8Internal::arcMethodCallback, 0, 5},
    {"ellipse", Path2DV8Internal::ellipseMethodCallback, 0, 7},
};

void V8Path2D::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SCOPED_SAMPLING_STATE("Blink", "DOMConstructor");
    if (!info.IsConstructCall()) {
        throwTypeError(ExceptionMessages::constructorNotCallableAsFunction("Path2D"), info.GetIsolate());
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    Path2DV8Internal::constructor(info);
}

static void configureV8Path2DTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::path2DEnabled())
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "", v8::Local<v8::FunctionTemplate>(), V8Path2D::internalFieldCount, 0, 0, 0, 0, 0, 0, isolate);
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "Path2D", v8::Local<v8::FunctionTemplate>(), V8Path2D::internalFieldCount,
            0, 0,
            0, 0,
            V8Path2DMethods, WTF_ARRAY_LENGTH(V8Path2DMethods),
            isolate);
    functionTemplate->SetCallHandler(V8Path2D::constructorCallback);
    functionTemplate->SetLength(0);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "addPath"), v8::FunctionTemplate::New(isolate, Path2DV8Internal::addPathMethodCallback, v8Undefined(), defaultSignature, 1));
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8Path2D::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8Path2DTemplate);
}

bool V8Path2D::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8Path2D::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Path2D* V8Path2D::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(Path2D* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Path2D>(impl, isolate));
    return V8Path2D::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8Path2D::createWrapper(PassRefPtr<Path2D> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8Path2D>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8Path2D>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8Path2D::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(Path2D* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
