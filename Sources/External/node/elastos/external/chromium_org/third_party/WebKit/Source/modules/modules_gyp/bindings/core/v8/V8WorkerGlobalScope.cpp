// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WorkerGlobalScope.h"

#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8FileError.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8URL.h"
#include "bindings/core/v8/V8WorkerConsole.h"
#include "bindings/core/v8/V8WorkerGlobalScope.h"
#include "bindings/core/v8/V8WorkerLocation.h"
#include "bindings/core/v8/V8WorkerNavigator.h"
#include "bindings/modules/v8/V8Crypto.h"
#include "bindings/modules/v8/V8DOMFileSystemSync.h"
#include "bindings/modules/v8/V8Database.h"
#include "bindings/modules/v8/V8DatabaseCallback.h"
#include "bindings/modules/v8/V8DatabaseSync.h"
#include "bindings/modules/v8/V8EntryCallback.h"
#include "bindings/modules/v8/V8EntrySync.h"
#include "bindings/modules/v8/V8ErrorCallback.h"
#include "bindings/modules/v8/V8FileSystemCallback.h"
#include "bindings/modules/v8/V8IDBCursor.h"
#include "bindings/modules/v8/V8IDBCursorWithValue.h"
#include "bindings/modules/v8/V8IDBDatabase.h"
#include "bindings/modules/v8/V8IDBFactory.h"
#include "bindings/modules/v8/V8IDBIndex.h"
#include "bindings/modules/v8/V8IDBKeyRange.h"
#include "bindings/modules/v8/V8IDBObjectStore.h"
#include "bindings/modules/v8/V8IDBOpenDBRequest.h"
#include "bindings/modules/v8/V8IDBRequest.h"
#include "bindings/modules/v8/V8IDBTransaction.h"
#include "bindings/modules/v8/V8IDBVersionChangeEvent.h"
#include "bindings/modules/v8/V8WorkerPerformance.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/ScriptPromise.h"
#include "bindings/v8/ScriptState.h"
#include "bindings/v8/ScriptValue.h"
#include "bindings/v8/V8AbstractEventListener.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8ErrorHandler.h"
#include "bindings/v8/V8EventListenerList.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/DOMWindowTimers.h"
#include "core/frame/UseCounter.h"
#include "modules/crypto/WorkerGlobalScopeCrypto.h"
#include "modules/filesystem/WorkerGlobalScopeFileSystem.h"
#include "modules/imagebitmap/ImageBitmapFactories.h"
#include "modules/indexeddb/WorkerGlobalScopeIndexedDatabase.h"
#include "modules/performance/WorkerGlobalScopePerformance.h"
#include "modules/webdatabase/WorkerGlobalScopeWebDatabase.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(WorkerGlobalScope* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8WorkerGlobalScope::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::WorkerGlobalScope* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8WorkerGlobalScope::wrapperTypeInfo = { gin::kEmbedderBlink, V8WorkerGlobalScope::domTemplate, V8WorkerGlobalScope::derefObject, 0, V8WorkerGlobalScope::toEventTarget, 0, V8WorkerGlobalScope::installPerContextEnabledMethods, &V8EventTarget::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace WorkerGlobalScopeV8Internal {

template <typename T> void V8_USE(T) { }

static void selfAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->self()), impl);
}

static void selfAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::selfAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void locationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RefPtrWillBeRawPtr<WorkerLocation> result(impl->location());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8WorkerLocation>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "location"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void locationAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::locationAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onerrorAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    EventListener* v8Value = impl->onerror();
    v8SetReturnValue(info, v8Value ? v8::Handle<v8::Value>(V8AbstractEventListener::cast(v8Value)->getListenerObject(impl->executionContext())) : v8::Handle<v8::Value>(v8::Null(info.GetIsolate())));
}

static void onerrorAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::onerrorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    moveEventListenerToNewWrapper(holder, impl->onerror(), v8Value, V8WorkerGlobalScope::eventListenerCacheIndex, info.GetIsolate());
    impl->setOnerror(V8EventListenerList::findOrCreateWrapper<V8ErrorHandler>(v8Value, true, ScriptState::current(info.GetIsolate())));
}

static void onerrorAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    WorkerGlobalScopeV8Internal::onerrorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void consoleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RefPtrWillBeRawPtr<WorkerConsole> result(impl->console());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8WorkerConsole>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "console"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void consoleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::consoleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void navigatorAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RefPtrWillBeRawPtr<WorkerNavigator> result(impl->navigator());
    if (result && DOMDataStore::setReturnValueFromWrapper<V8WorkerNavigator>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "navigator"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void navigatorAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::navigatorAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void cryptoAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RawPtr<Crypto> result(WorkerGlobalScopeCrypto::crypto(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8Crypto>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "crypto"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void cryptoAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::cryptoAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitIndexedDBAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RawPtr<IDBFactory> result(WorkerGlobalScopeIndexedDatabase::indexedDB(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8IDBFactory>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "webkitIndexedDB"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void webkitIndexedDBAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::webkitIndexedDBAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void indexedDBAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RawPtr<IDBFactory> result(WorkerGlobalScopeIndexedDatabase::indexedDB(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8IDBFactory>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "indexedDB"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void indexedDBAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::indexedDBAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void performanceAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(holder);
    RawPtr<WorkerPerformance> result(WorkerGlobalScopePerformance::performance(*impl));
    if (result && DOMDataStore::setReturnValueFromWrapper<V8WorkerPerformance>(info.GetReturnValue(), result.get()))
        return;
    v8::Handle<v8::Value> wrapper = toV8(result.get(), holder, info.GetIsolate());
    if (!wrapper.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "performance"), wrapper);
        v8SetReturnValue(info, wrapper);
    }
}

static void performanceAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    WorkerGlobalScopeV8Internal::performanceAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void WorkerGlobalScopeConstructorGetter(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsExternal());
    V8PerContextData* perContextData = V8PerContextData::from(info.Holder()->CreationContext());
    if (!perContextData)
        return;
    v8SetReturnValue(info, perContextData->constructorForType(WrapperTypeInfo::unwrap(data)));
}

static void webkitURLConstructorGetterCallback(v8::Local<v8::String> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedWorkerURL);
    WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void WorkerGlobalScopeReplaceableAttributeSetter(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    if (info.This()->IsObject())
        v8::Handle<v8::Object>::Cast(info.This())->ForceSet(name, v8Value);
}

static void WorkerGlobalScopeReplaceableAttributeSetterCallback(v8::Local<v8::String> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetter(name, v8Value, info);
}

static void closeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    impl->close();
}

static void closeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::closeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void importScriptsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "importScripts", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    Vector<String> urls;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(urls, toNativeArguments<String>(info, 0));
    }
    impl->importScripts(urls, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
}

static void importScriptsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::importScriptsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void btoaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "btoa", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    V8StringResource<> string;
    {
        TOSTRING_VOID_INTERNAL(string, info[0]);
    }
    String result = impl->btoa(string, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void btoaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::btoaMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void atobMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "atob", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    V8StringResource<> string;
    {
        TOSTRING_VOID_INTERNAL(string, info[0]);
    }
    String result = impl->atob(string, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValueString(info, result, info.GetIsolate());
}

static void atobMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::atobMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8WorkerGlobalScope::setTimeoutMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearTimeoutMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearTimeout", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    int handle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(handle, toInt32(info[0], exceptionState), exceptionState);
    }
    DOMWindowTimers::clearTimeout(*impl, handle);
}

static void clearTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::clearTimeoutMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    V8WorkerGlobalScope::setIntervalMethodCustom(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void clearIntervalMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "clearInterval", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    int handle;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(handle, toInt32(info[0], exceptionState), exceptionState);
    }
    DOMWindowTimers::clearInterval(*impl, handle);
}

static void clearIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::clearIntervalMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitRequestFileSystemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitRequestFileSystem", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    unsigned type;
    long long size;
    OwnPtr<FileSystemCallback> successCallback;
    OwnPtr<ErrorCallback> errorCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(type, toUInt16(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(size, toInt64(info[1], exceptionState), exceptionState);
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            successCallback = V8FileSystemCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
        if (info.Length() > 3 && !isUndefinedOrNull(info[3])) {
            if (!info[3]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 4 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8ErrorCallback::create(v8::Handle<v8::Function>::Cast(info[3]), ScriptState::current(info.GetIsolate()));
        }
    }
    WorkerGlobalScopeFileSystem::webkitRequestFileSystem(*impl, type, size, successCallback.release(), errorCallback.release());
}

static void webkitRequestFileSystemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::webkitRequestFileSystemMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitRequestFileSystemSyncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitRequestFileSystemSync", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeError(exceptionState, 2, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    unsigned type;
    long long size;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(type, toUInt16(info[0], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(size, toInt64(info[1], exceptionState), exceptionState);
    }
    RawPtr<DOMFileSystemSync> result = WorkerGlobalScopeFileSystem::webkitRequestFileSystemSync(*impl, type, size, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void webkitRequestFileSystemSyncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::webkitRequestFileSystemSyncMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitResolveLocalFileSystemURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("webkitResolveLocalFileSystemURL", "WorkerGlobalScope", 2, info.Length(), info.GetIsolate());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    V8StringResource<> url;
    OwnPtr<EntryCallback> successCallback;
    OwnPtr<ErrorCallback> errorCallback;
    {
        TOSTRING_VOID_INTERNAL(url, info[0]);
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            throwTypeError(ExceptionMessages::failedToExecute("webkitResolveLocalFileSystemURL", "WorkerGlobalScope", "The callback provided as parameter 2 is not a function."), info.GetIsolate());
            return;
        }
        successCallback = V8EntryCallback::create(v8::Handle<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (info.Length() > 2 && !isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                throwTypeError(ExceptionMessages::failedToExecute("webkitResolveLocalFileSystemURL", "WorkerGlobalScope", "The callback provided as parameter 3 is not a function."), info.GetIsolate());
                return;
            }
            errorCallback = V8ErrorCallback::create(v8::Handle<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        }
    }
    WorkerGlobalScopeFileSystem::webkitResolveLocalFileSystemURL(*impl, url, successCallback.release(), errorCallback.release());
}

static void webkitResolveLocalFileSystemURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::webkitResolveLocalFileSystemURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void webkitResolveLocalFileSystemSyncURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitResolveLocalFileSystemSyncURL", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    V8StringResource<> url;
    {
        TOSTRING_VOID_INTERNAL(url, info[0]);
    }
    RawPtr<EntrySync> result = WorkerGlobalScopeFileSystem::webkitResolveLocalFileSystemSyncURL(*impl, url, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void webkitResolveLocalFileSystemSyncURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::webkitResolveLocalFileSystemSyncURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createImageBitmap1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    Blob* blob;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(blob, V8Blob::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, blob, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    Blob* blob;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(blob, V8Blob::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, blob, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap3Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    ImageData* data;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(data, V8ImageData::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, data, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap4Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    ImageData* data;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(data, V8ImageData::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, data, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap5Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    ImageBitmap* bitmap;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(bitmap, V8ImageBitmap::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, bitmap, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmap6Method(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    ImageBitmap* bitmap;
    int sx;
    int sy;
    int sw;
    int sh;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(bitmap, V8ImageBitmap::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sx, toInt32(info[1], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sy, toInt32(info[2], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sw, toInt32(info[3], exceptionState), exceptionState);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(sh, toInt32(info[4], exceptionState), exceptionState);
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, bitmap, sx, sy, sw, sh, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.v8Value());
}

static void createImageBitmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Isolate* isolate = info.GetIsolate();
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "createImageBitmap", "WorkerGlobalScope", info.Holder(), isolate);
    switch (std::min(5, info.Length())) {
    case 1:
        if (V8Blob::hasInstance(info[0], isolate)) {
            createImageBitmap1Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[0], isolate)) {
            createImageBitmap3Method(info);
            return;
        }
        if (V8ImageBitmap::hasInstance(info[0], isolate)) {
            createImageBitmap5Method(info);
            return;
        }
        break;
    case 5:
        if (V8Blob::hasInstance(info[0], isolate)) {
            createImageBitmap2Method(info);
            return;
        }
        if (V8ImageData::hasInstance(info[0], isolate)) {
            createImageBitmap4Method(info);
            return;
        }
        if (V8ImageBitmap::hasInstance(info[0], isolate)) {
            createImageBitmap6Method(info);
            return;
        }
        break;
    default:
        if (info.Length() >= 1) {
            throwArityTypeError(exceptionState, "[1, 5]", info.Length());
            return;
        }
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    exceptionState.throwTypeError("No function was found that matched the signature provided.");
    exceptionState.throwIfNeeded();
}

static void createImageBitmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WorkerGlobalScopeV8Internal::createImageBitmapMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openDatabaseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "openDatabase", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        throwMinimumArityTypeError(exceptionState, 4, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    V8StringResource<> name;
    V8StringResource<> version;
    V8StringResource<> displayName;
    unsigned estimatedSize;
    OwnPtr<DatabaseCallback> creationCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(name, info[0]);
        TOSTRING_VOID_INTERNAL(version, info[1]);
        TOSTRING_VOID_INTERNAL(displayName, info[2]);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(estimatedSize, toUInt32(info[3], exceptionState), exceptionState);
        if (info.Length() > 4 && !isUndefinedOrNull(info[4])) {
            if (!info[4]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 5 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            creationCallback = V8DatabaseCallback::create(v8::Handle<v8::Function>::Cast(info[4]), ScriptState::current(info.GetIsolate()));
        }
    }
    RefPtrWillBeRawPtr<Database> result = WorkerGlobalScopeWebDatabase::openDatabase(*impl, name, version, displayName, estimatedSize, creationCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void openDatabaseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::OpenWebDatabaseInWorker);
    WorkerGlobalScopeV8Internal::openDatabaseMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void openDatabaseSyncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "openDatabaseSync", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 4)) {
        throwMinimumArityTypeError(exceptionState, 4, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toNative(info.Holder());
    V8StringResource<> name;
    V8StringResource<> version;
    V8StringResource<> displayName;
    unsigned estimatedSize;
    OwnPtr<DatabaseCallback> creationCallback;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TOSTRING_VOID_INTERNAL(name, info[0]);
        TOSTRING_VOID_INTERNAL(version, info[1]);
        TOSTRING_VOID_INTERNAL(displayName, info[2]);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(estimatedSize, toUInt32(info[3], exceptionState), exceptionState);
        if (info.Length() > 4 && !isUndefinedOrNull(info[4])) {
            if (!info[4]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 5 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            creationCallback = V8DatabaseCallback::create(v8::Handle<v8::Function>::Cast(info[4]), ScriptState::current(info.GetIsolate()));
        }
    }
    RefPtrWillBeRawPtr<DatabaseSync> result = WorkerGlobalScopeWebDatabase::openDatabaseSync(*impl, name, version, displayName, estimatedSize, creationCallback.release(), exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
}

static void openDatabaseSyncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    UseCounter::count(callingExecutionContext(info.GetIsolate()), UseCounter::OpenWebDatabaseSyncInWorker);
    WorkerGlobalScopeV8Internal::openDatabaseSyncMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace WorkerGlobalScopeV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8WorkerGlobalScopeAttributes[] = {
    {"self", WorkerGlobalScopeV8Internal::selfAttributeGetterCallback, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"location", WorkerGlobalScopeV8Internal::locationAttributeGetterCallback, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"onerror", WorkerGlobalScopeV8Internal::onerrorAttributeGetterCallback, WorkerGlobalScopeV8Internal::onerrorAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"console", WorkerGlobalScopeV8Internal::consoleAttributeGetterCallback, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"navigator", WorkerGlobalScopeV8Internal::navigatorAttributeGetterCallback, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webkitURL", WorkerGlobalScopeV8Internal::webkitURLConstructorGetterCallback, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8URL::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIndexedDB", WorkerGlobalScopeV8Internal::webkitIndexedDBAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"webkitIDBCursor", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBDatabase", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBDatabase::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBFactory", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBFactory::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBIndex", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBIndex::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBKeyRange", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBKeyRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBObjectStore", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBObjectStore::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBRequest", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"webkitIDBTransaction", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBTransaction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"indexedDB", WorkerGlobalScopeV8Internal::indexedDBAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"IDBCursor", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBCursorWithValue", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursorWithValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBDatabase", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBDatabase::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBFactory", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBFactory::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBIndex", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBIndex::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBKeyRange", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBKeyRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBObjectStore", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBObjectStore::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBOpenDBRequest", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBOpenDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBRequest", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBTransaction", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBTransaction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
    {"IDBVersionChangeEvent", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBVersionChangeEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8WorkerGlobalScopeMethods[] = {
    {"close", WorkerGlobalScopeV8Internal::closeMethodCallback, 0, 0},
    {"importScripts", WorkerGlobalScopeV8Internal::importScriptsMethodCallback, 0, 0},
    {"btoa", WorkerGlobalScopeV8Internal::btoaMethodCallback, 0, 1},
    {"atob", WorkerGlobalScopeV8Internal::atobMethodCallback, 0, 1},
    {"setTimeout", WorkerGlobalScopeV8Internal::setTimeoutMethodCallback, 0, 1},
    {"clearTimeout", WorkerGlobalScopeV8Internal::clearTimeoutMethodCallback, 0, 0},
    {"setInterval", WorkerGlobalScopeV8Internal::setIntervalMethodCallback, 0, 1},
    {"clearInterval", WorkerGlobalScopeV8Internal::clearIntervalMethodCallback, 0, 0},
};

static void configureV8WorkerGlobalScopeTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "WorkerGlobalScope", V8EventTarget::domTemplate(isolate), V8WorkerGlobalScope::internalFieldCount,
        V8WorkerGlobalScopeAttributes, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeAttributes),
        0, 0,
        V8WorkerGlobalScopeMethods, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    if (RuntimeEnabledFeatures::cryptoEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"crypto", WorkerGlobalScopeV8Internal::cryptoAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"FileError", WorkerGlobalScopeV8Internal::WorkerGlobalScopeConstructorGetter, WorkerGlobalScopeV8Internal::WorkerGlobalScopeReplaceableAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FileError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    if (RuntimeEnabledFeatures::highResolutionTimeInWorkersEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"performance", WorkerGlobalScopeV8Internal::performanceAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::installAttribute(instanceTemplate, prototypeTemplate, attributeConfiguration, isolate);
    }
    static const V8DOMConfiguration::ConstantConfiguration V8WorkerGlobalScopeConstants[] = {
        {"TEMPORARY", 0},
        {"PERSISTENT", 1},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8WorkerGlobalScopeConstants, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeConstants), isolate);
    COMPILE_ASSERT(0 == WorkerGlobalScopeFileSystem::TEMPORARY, TheValueOfWorkerGlobalScope_TEMPORARYDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == WorkerGlobalScopeFileSystem::PERSISTENT, TheValueOfWorkerGlobalScope_PERSISTENTDoesntMatchWithImplementation);
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitRequestFileSystem"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::webkitRequestFileSystemMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitRequestFileSystemSync"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::webkitRequestFileSystemSyncMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitResolveLocalFileSystemURL"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::webkitResolveLocalFileSystemURLMethodCallback, v8Undefined(), defaultSignature, 2));
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "webkitResolveLocalFileSystemSyncURL"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::webkitResolveLocalFileSystemSyncURLMethodCallback, v8Undefined(), defaultSignature, 1));
    }
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "createImageBitmap"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::createImageBitmapMethodCallback, v8Undefined(), defaultSignature, 1));
    }
    if (RuntimeEnabledFeatures::databaseEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "openDatabase"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::openDatabaseMethodCallback, v8Undefined(), defaultSignature, 4));
    }
    if (RuntimeEnabledFeatures::databaseEnabled()) {
        prototypeTemplate->Set(v8AtomicString(isolate, "openDatabaseSync"), v8::FunctionTemplate::New(isolate, WorkerGlobalScopeV8Internal::openDatabaseSyncMethodCallback, v8Undefined(), defaultSignature, 4));
    }

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8WorkerGlobalScope::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8WorkerGlobalScopeTemplate);
}

bool V8WorkerGlobalScope::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8WorkerGlobalScope::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WorkerGlobalScope* V8WorkerGlobalScope::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

EventTarget* V8WorkerGlobalScope::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

void V8WorkerGlobalScope::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(WorkerGlobalScope* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
