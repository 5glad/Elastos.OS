// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WebGLDrawBuffers.h"

#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(WebGLDrawBuffers* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8WebGLDrawBuffers::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::WebGLDrawBuffers* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8WebGLDrawBuffers::wrapperTypeInfo = { gin::kEmbedderBlink, V8WebGLDrawBuffers::domTemplate, V8WebGLDrawBuffers::derefObject, 0, 0, 0, V8WebGLDrawBuffers::installPerContextEnabledMethods, 0, WrapperTypeObjectPrototype, RefCountedObject };

namespace WebGLDrawBuffersV8Internal {

template <typename T> void V8_USE(T) { }

static void drawBuffersWEBGLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("drawBuffersWEBGL", "WebGLDrawBuffers", 1, info.Length(), info.GetIsolate());
        return;
    }
    WebGLDrawBuffers* impl = V8WebGLDrawBuffers::toNative(info.Holder());
    Vector<unsigned> buffers;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(buffers, toNativeArray<unsigned>(info[0], 1, info.GetIsolate()));
    }
    impl->drawBuffersWEBGL(buffers);
}

static void drawBuffersWEBGLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    WebGLDrawBuffersV8Internal::drawBuffersWEBGLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace WebGLDrawBuffersV8Internal

static const V8DOMConfiguration::MethodConfiguration V8WebGLDrawBuffersMethods[] = {
    {"drawBuffersWEBGL", WebGLDrawBuffersV8Internal::drawBuffersWEBGLMethodCallback, 0, 1},
};

static void configureV8WebGLDrawBuffersTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "WebGLDrawBuffers", v8::Local<v8::FunctionTemplate>(), V8WebGLDrawBuffers::internalFieldCount,
        0, 0,
        0, 0,
        V8WebGLDrawBuffersMethods, WTF_ARRAY_LENGTH(V8WebGLDrawBuffersMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8WebGLDrawBuffersConstants[] = {
        {"COLOR_ATTACHMENT0_WEBGL", 0x8CE0},
        {"COLOR_ATTACHMENT1_WEBGL", 0x8CE1},
        {"COLOR_ATTACHMENT2_WEBGL", 0x8CE2},
        {"COLOR_ATTACHMENT3_WEBGL", 0x8CE3},
        {"COLOR_ATTACHMENT4_WEBGL", 0x8CE4},
        {"COLOR_ATTACHMENT5_WEBGL", 0x8CE5},
        {"COLOR_ATTACHMENT6_WEBGL", 0x8CE6},
        {"COLOR_ATTACHMENT7_WEBGL", 0x8CE7},
        {"COLOR_ATTACHMENT8_WEBGL", 0x8CE8},
        {"COLOR_ATTACHMENT9_WEBGL", 0x8CE9},
        {"COLOR_ATTACHMENT10_WEBGL", 0x8CEA},
        {"COLOR_ATTACHMENT11_WEBGL", 0x8CEB},
        {"COLOR_ATTACHMENT12_WEBGL", 0x8CEC},
        {"COLOR_ATTACHMENT13_WEBGL", 0x8CED},
        {"COLOR_ATTACHMENT14_WEBGL", 0x8CEE},
        {"COLOR_ATTACHMENT15_WEBGL", 0x8CEF},
        {"DRAW_BUFFER0_WEBGL", 0x8825},
        {"DRAW_BUFFER1_WEBGL", 0x8826},
        {"DRAW_BUFFER2_WEBGL", 0x8827},
        {"DRAW_BUFFER3_WEBGL", 0x8828},
        {"DRAW_BUFFER4_WEBGL", 0x8829},
        {"DRAW_BUFFER5_WEBGL", 0x882A},
        {"DRAW_BUFFER6_WEBGL", 0x882B},
        {"DRAW_BUFFER7_WEBGL", 0x882C},
        {"DRAW_BUFFER8_WEBGL", 0x882D},
        {"DRAW_BUFFER9_WEBGL", 0x882E},
        {"DRAW_BUFFER10_WEBGL", 0x882F},
        {"DRAW_BUFFER11_WEBGL", 0x8830},
        {"DRAW_BUFFER12_WEBGL", 0x8831},
        {"DRAW_BUFFER13_WEBGL", 0x8832},
        {"DRAW_BUFFER14_WEBGL", 0x8833},
        {"DRAW_BUFFER15_WEBGL", 0x8834},
        {"MAX_COLOR_ATTACHMENTS_WEBGL", 0x8CDF},
        {"MAX_DRAW_BUFFERS_WEBGL", 0x8824},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8WebGLDrawBuffersConstants, WTF_ARRAY_LENGTH(V8WebGLDrawBuffersConstants), isolate);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8WebGLDrawBuffers::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8WebGLDrawBuffersTemplate);
}

bool V8WebGLDrawBuffers::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8WebGLDrawBuffers::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WebGLDrawBuffers* V8WebGLDrawBuffers::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

v8::Handle<v8::Object> wrap(WebGLDrawBuffers* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8WebGLDrawBuffers>(impl, isolate));
    return V8WebGLDrawBuffers::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8WebGLDrawBuffers::createWrapper(PassRefPtr<WebGLDrawBuffers> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8WebGLDrawBuffers>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8WebGLDrawBuffers>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Independent);
    return wrapper;
}

void V8WebGLDrawBuffers::derefObject(void* object)
{
    fromInternalPointer(object)->deref();
}

template<>
v8::Handle<v8::Value> toV8NoInline(WebGLDrawBuffers* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
