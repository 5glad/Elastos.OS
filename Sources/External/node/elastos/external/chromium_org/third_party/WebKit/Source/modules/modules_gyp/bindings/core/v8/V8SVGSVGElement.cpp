// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8SVGSVGElement.h"

#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8SVGAngle.h"
#include "bindings/core/v8/V8SVGAnimatedLength.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/core/v8/V8SVGLength.h"
#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/core/v8/V8SVGNumber.h"
#include "bindings/core/v8/V8SVGPoint.h"
#include "bindings/core/v8/V8SVGRect.h"
#include "bindings/core/v8/V8SVGTransform.h"
#include "bindings/core/v8/V8SVGViewSpec.h"
#include "bindings/v8/ExceptionState.h"
#include "bindings/v8/V8DOMConfiguration.h"
#include "bindings/v8/V8HiddenValue.h"
#include "bindings/v8/V8ObjectConstructor.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/dom/NameNodeList.h"
#include "core/dom/NodeList.h"
#include "core/dom/StaticNodeList.h"
#include "core/html/LabelsNodeList.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace WebCore {

static void initializeScriptWrappableForInterface(SVGSVGElement* object)
{
    if (ScriptWrappable::wrapperCanBeStoredInObject(object))
        ScriptWrappable::fromObject(object)->setTypeInfo(&V8SVGSVGElement::wrapperTypeInfo);
    else
        ASSERT_NOT_REACHED();
}

} // namespace WebCore

void webCoreInitializeScriptWrappableForInterface(WebCore::SVGSVGElement* object)
{
    WebCore::initializeScriptWrappableForInterface(object);
}

namespace WebCore {
const WrapperTypeInfo V8SVGSVGElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8SVGSVGElement::domTemplate, V8SVGSVGElement::derefObject, 0, V8SVGSVGElement::toEventTarget, 0, V8SVGSVGElement::installPerContextEnabledMethods, &V8SVGGraphicsElement::wrapperTypeInfo, WrapperTypeObjectPrototype, WillBeGarbageCollectedObject };

namespace SVGSVGElementV8Internal {

template <typename T> void V8_USE(T) { }

static void xAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->x()), impl);
}

static void xAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::xAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void yAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->y()), impl);
}

static void yAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::yAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void widthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->width()), impl);
}

static void widthAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::widthAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void heightAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->height()), impl);
}

static void heightAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::heightAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void viewportAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewport()), impl);
}

static void viewportAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::viewportAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pixelUnitToMillimeterXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValue(info, impl->pixelUnitToMillimeterX());
}

static void pixelUnitToMillimeterXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::pixelUnitToMillimeterXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pixelUnitToMillimeterYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValue(info, impl->pixelUnitToMillimeterY());
}

static void pixelUnitToMillimeterYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::pixelUnitToMillimeterYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenPixelToMillimeterXAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValue(info, impl->screenPixelToMillimeterX());
}

static void screenPixelToMillimeterXAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::screenPixelToMillimeterXAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void screenPixelToMillimeterYAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValue(info, impl->screenPixelToMillimeterY());
}

static void screenPixelToMillimeterYAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::screenPixelToMillimeterYAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void useCurrentViewAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueBool(info, impl->useCurrentView());
}

static void useCurrentViewAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::useCurrentViewAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void currentViewAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentView()), impl);
}

static void currentViewAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::currentViewAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void currentScaleAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValue(info, impl->currentScale());
}

static void currentScaleAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::currentScaleAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void currentScaleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    TONATIVE_VOID(float, cppValue, static_cast<float>(v8Value->NumberValue()));
    impl->setCurrentScale(cppValue);
}

static void currentScaleAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGSVGElementV8Internal::currentScaleAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void currentTranslateAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->currentTranslateFromJavascript()), impl);
}

static void currentTranslateAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::currentTranslateAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void viewBoxAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->viewBox()), impl);
}

static void viewBoxAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::viewBoxAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void preserveAspectRatioAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueFast(info, WTF::getPtr(impl->preserveAspectRatio()), impl);
}

static void preserveAspectRatioAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::preserveAspectRatioAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void zoomAndPanAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    v8SetReturnValueUnsigned(info, impl->zoomAndPan());
}

static void zoomAndPanAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMGetter");
    SVGSVGElementV8Internal::zoomAndPanAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void zoomAndPanAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Handle<v8::Object> holder = info.Holder();
    ExceptionState exceptionState(ExceptionState::SetterContext, "zoomAndPan", "SVGSVGElement", holder, info.GetIsolate());
    SVGSVGElement* impl = V8SVGSVGElement::toNative(holder);
    TONATIVE_VOID_EXCEPTIONSTATE(unsigned, cppValue, toUInt16(v8Value, exceptionState), exceptionState);
    impl->setZoomAndPan(cppValue, exceptionState);
    exceptionState.throwIfNeeded();
}

static void zoomAndPanAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMSetter");
    SVGSVGElementV8Internal::zoomAndPanAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void suspendRedrawMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "suspendRedraw", "SVGSVGElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    unsigned maxWaitMilliseconds;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(maxWaitMilliseconds, toUInt32(info[0], exceptionState), exceptionState);
    }
    v8SetReturnValueUnsigned(info, impl->suspendRedraw(maxWaitMilliseconds));
}

static void suspendRedrawMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::suspendRedrawMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void unsuspendRedrawMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "unsuspendRedraw", "SVGSVGElement", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    unsigned suspendHandleId;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_EXCEPTIONSTATE_INTERNAL(suspendHandleId, toUInt32(info[0], exceptionState), exceptionState);
    }
    impl->unsuspendRedraw(suspendHandleId);
}

static void unsuspendRedrawMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::unsuspendRedrawMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void unsuspendRedrawAllMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    impl->unsuspendRedrawAll();
}

static void unsuspendRedrawAllMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::unsuspendRedrawAllMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void forceRedrawMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    impl->forceRedraw();
}

static void forceRedrawMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::forceRedrawMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void pauseAnimationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    impl->pauseAnimations();
}

static void pauseAnimationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::pauseAnimationsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void unpauseAnimationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    impl->unpauseAnimations();
}

static void unpauseAnimationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::unpauseAnimationsMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void animationsPausedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueBool(info, impl->animationsPaused());
}

static void animationsPausedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::animationsPausedMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getCurrentTimeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValue(info, impl->getCurrentTime());
}

static void getCurrentTimeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::getCurrentTimeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void setCurrentTimeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("setCurrentTime", "SVGSVGElement", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    float seconds;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        TONATIVE_VOID_INTERNAL(seconds, static_cast<float>(info[0]->NumberValue()));
    }
    impl->setCurrentTime(seconds);
}

static void setCurrentTimeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::setCurrentTimeMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getIntersectionListMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("getIntersectionList", "SVGSVGElement", 2, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    SVGRectTearOff* rect;
    SVGElement* referenceElement;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGRect::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("getIntersectionList", "SVGSVGElement", "parameter 1 is not of type 'SVGRect'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(rect, V8SVGRect::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() > 1 && !isUndefinedOrNull(info[1]) && !V8SVGElement::hasInstance(info[1], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("getIntersectionList", "SVGSVGElement", "parameter 2 is not of type 'SVGElement'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(referenceElement, V8SVGElement::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->getIntersectionList(rect, referenceElement)), impl);
}

static void getIntersectionListMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::getIntersectionListMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getEnclosureListMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("getEnclosureList", "SVGSVGElement", 2, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    SVGRectTearOff* rect;
    SVGElement* referenceElement;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGRect::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("getEnclosureList", "SVGSVGElement", "parameter 1 is not of type 'SVGRect'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(rect, V8SVGRect::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() > 1 && !isUndefinedOrNull(info[1]) && !V8SVGElement::hasInstance(info[1], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("getEnclosureList", "SVGSVGElement", "parameter 2 is not of type 'SVGElement'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(referenceElement, V8SVGElement::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->getEnclosureList(rect, referenceElement)), impl);
}

static void getEnclosureListMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::getEnclosureListMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void checkIntersectionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("checkIntersection", "SVGSVGElement", 2, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    SVGElement* element;
    SVGRectTearOff* rect;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGElement::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("checkIntersection", "SVGSVGElement", "parameter 1 is not of type 'SVGElement'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(element, V8SVGElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() > 1 && !V8SVGRect::hasInstance(info[1], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("checkIntersection", "SVGSVGElement", "parameter 2 is not of type 'SVGRect'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(rect, V8SVGRect::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    v8SetReturnValueBool(info, impl->checkIntersection(element, rect));
}

static void checkIntersectionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::checkIntersectionMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void checkEnclosureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        throwMinimumArityTypeErrorForMethod("checkEnclosure", "SVGSVGElement", 2, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    SVGElement* element;
    SVGRectTearOff* rect;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGElement::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("checkEnclosure", "SVGSVGElement", "parameter 1 is not of type 'SVGElement'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(element, V8SVGElement::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
        if (info.Length() > 1 && !V8SVGRect::hasInstance(info[1], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("checkEnclosure", "SVGSVGElement", "parameter 2 is not of type 'SVGRect'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(rect, V8SVGRect::toNativeWithTypeCheck(info.GetIsolate(), info[1]));
    }
    v8SetReturnValueBool(info, impl->checkEnclosure(element, rect));
}

static void checkEnclosureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::checkEnclosureMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void deselectAllMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    impl->deselectAll();
}

static void deselectAllMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::deselectAllMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGNumberMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGNumber()), impl);
}

static void createSVGNumberMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGNumberMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGLengthMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGLength()), impl);
}

static void createSVGLengthMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGLengthMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGAngleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGAngle()), impl);
}

static void createSVGAngleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGAngleMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGPointMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGPoint()), impl);
}

static void createSVGPointMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGPointMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGMatrixMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGMatrix()), impl);
}

static void createSVGMatrixMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGMatrixMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGRectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGRect()), impl);
}

static void createSVGRectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGRectMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGTransformMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGTransform()), impl);
}

static void createSVGTransformMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGTransformMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void createSVGTransformFromMatrixMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("createSVGTransformFromMatrix", "SVGSVGElement", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    SVGMatrixTearOff* matrix;
    {
        v8::TryCatch block;
        V8RethrowTryCatchScope rethrow(block);
        if (info.Length() > 0 && !V8SVGMatrix::hasInstance(info[0], info.GetIsolate())) {
            throwTypeError(ExceptionMessages::failedToExecute("createSVGTransformFromMatrix", "SVGSVGElement", "parameter 1 is not of type 'SVGMatrix'."), info.GetIsolate());
            return;
        }
        TONATIVE_VOID_INTERNAL(matrix, V8SVGMatrix::toNativeWithTypeCheck(info.GetIsolate(), info[0]));
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->createSVGTransformFromMatrix(matrix)), impl);
}

static void createSVGTransformFromMatrixMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::createSVGTransformFromMatrixMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

static void getElementByIdMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        throwMinimumArityTypeErrorForMethod("getElementById", "SVGSVGElement", 1, info.Length(), info.GetIsolate());
        return;
    }
    SVGSVGElement* impl = V8SVGSVGElement::toNative(info.Holder());
    V8StringResource<> elementId;
    {
        TOSTRING_VOID_INTERNAL(elementId, info[0]);
    }
    v8SetReturnValueFast(info, WTF::getPtr(impl->getElementById(elementId)), impl);
}

static void getElementByIdMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("Blink", "DOMMethod");
    SVGSVGElementV8Internal::getElementByIdMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("V8", "V8Execution");
}

} // namespace SVGSVGElementV8Internal

static const V8DOMConfiguration::AttributeConfiguration V8SVGSVGElementAttributes[] = {
    {"x", SVGSVGElementV8Internal::xAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"y", SVGSVGElementV8Internal::yAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"width", SVGSVGElementV8Internal::widthAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"height", SVGSVGElementV8Internal::heightAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"viewport", SVGSVGElementV8Internal::viewportAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pixelUnitToMillimeterX", SVGSVGElementV8Internal::pixelUnitToMillimeterXAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"pixelUnitToMillimeterY", SVGSVGElementV8Internal::pixelUnitToMillimeterYAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenPixelToMillimeterX", SVGSVGElementV8Internal::screenPixelToMillimeterXAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"screenPixelToMillimeterY", SVGSVGElementV8Internal::screenPixelToMillimeterYAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"useCurrentView", SVGSVGElementV8Internal::useCurrentViewAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"currentView", SVGSVGElementV8Internal::currentViewAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"currentScale", SVGSVGElementV8Internal::currentScaleAttributeGetterCallback, SVGSVGElementV8Internal::currentScaleAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"currentTranslate", SVGSVGElementV8Internal::currentTranslateAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"viewBox", SVGSVGElementV8Internal::viewBoxAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"preserveAspectRatio", SVGSVGElementV8Internal::preserveAspectRatioAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    {"zoomAndPan", SVGSVGElementV8Internal::zoomAndPanAttributeGetterCallback, SVGSVGElementV8Internal::zoomAndPanAttributeSetterCallback, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::MethodConfiguration V8SVGSVGElementMethods[] = {
    {"suspendRedraw", SVGSVGElementV8Internal::suspendRedrawMethodCallback, 0, 1},
    {"unsuspendRedraw", SVGSVGElementV8Internal::unsuspendRedrawMethodCallback, 0, 1},
    {"unsuspendRedrawAll", SVGSVGElementV8Internal::unsuspendRedrawAllMethodCallback, 0, 0},
    {"forceRedraw", SVGSVGElementV8Internal::forceRedrawMethodCallback, 0, 0},
    {"pauseAnimations", SVGSVGElementV8Internal::pauseAnimationsMethodCallback, 0, 0},
    {"unpauseAnimations", SVGSVGElementV8Internal::unpauseAnimationsMethodCallback, 0, 0},
    {"animationsPaused", SVGSVGElementV8Internal::animationsPausedMethodCallback, 0, 0},
    {"getCurrentTime", SVGSVGElementV8Internal::getCurrentTimeMethodCallback, 0, 0},
    {"setCurrentTime", SVGSVGElementV8Internal::setCurrentTimeMethodCallback, 0, 1},
    {"getIntersectionList", SVGSVGElementV8Internal::getIntersectionListMethodCallback, 0, 2},
    {"getEnclosureList", SVGSVGElementV8Internal::getEnclosureListMethodCallback, 0, 2},
    {"checkIntersection", SVGSVGElementV8Internal::checkIntersectionMethodCallback, 0, 2},
    {"checkEnclosure", SVGSVGElementV8Internal::checkEnclosureMethodCallback, 0, 2},
    {"deselectAll", SVGSVGElementV8Internal::deselectAllMethodCallback, 0, 0},
    {"createSVGNumber", SVGSVGElementV8Internal::createSVGNumberMethodCallback, 0, 0},
    {"createSVGLength", SVGSVGElementV8Internal::createSVGLengthMethodCallback, 0, 0},
    {"createSVGAngle", SVGSVGElementV8Internal::createSVGAngleMethodCallback, 0, 0},
    {"createSVGPoint", SVGSVGElementV8Internal::createSVGPointMethodCallback, 0, 0},
    {"createSVGMatrix", SVGSVGElementV8Internal::createSVGMatrixMethodCallback, 0, 0},
    {"createSVGRect", SVGSVGElementV8Internal::createSVGRectMethodCallback, 0, 0},
    {"createSVGTransform", SVGSVGElementV8Internal::createSVGTransformMethodCallback, 0, 0},
    {"createSVGTransformFromMatrix", SVGSVGElementV8Internal::createSVGTransformFromMatrixMethodCallback, 0, 1},
    {"getElementById", SVGSVGElementV8Internal::getElementByIdMethodCallback, 0, 1},
};

static void configureV8SVGSVGElementTemplate(v8::Handle<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    functionTemplate->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::installDOMClassTemplate(functionTemplate, "SVGSVGElement", V8SVGGraphicsElement::domTemplate(isolate), V8SVGSVGElement::internalFieldCount,
        V8SVGSVGElementAttributes, WTF_ARRAY_LENGTH(V8SVGSVGElementAttributes),
        0, 0,
        V8SVGSVGElementMethods, WTF_ARRAY_LENGTH(V8SVGSVGElementMethods),
        isolate);
    v8::Local<v8::ObjectTemplate> instanceTemplate ALLOW_UNUSED = functionTemplate->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> prototypeTemplate ALLOW_UNUSED = functionTemplate->PrototypeTemplate();
    static const V8DOMConfiguration::ConstantConfiguration V8SVGSVGElementConstants[] = {
        {"SVG_ZOOMANDPAN_UNKNOWN", 0},
        {"SVG_ZOOMANDPAN_DISABLE", 1},
        {"SVG_ZOOMANDPAN_MAGNIFY", 2},
    };
    V8DOMConfiguration::installConstants(functionTemplate, prototypeTemplate, V8SVGSVGElementConstants, WTF_ARRAY_LENGTH(V8SVGSVGElementConstants), isolate);
    COMPILE_ASSERT(0 == SVGSVGElement::SVG_ZOOMANDPAN_UNKNOWN, TheValueOfSVGSVGElement_SVG_ZOOMANDPAN_UNKNOWNDoesntMatchWithImplementation);
    COMPILE_ASSERT(1 == SVGSVGElement::SVG_ZOOMANDPAN_DISABLE, TheValueOfSVGSVGElement_SVG_ZOOMANDPAN_DISABLEDoesntMatchWithImplementation);
    COMPILE_ASSERT(2 == SVGSVGElement::SVG_ZOOMANDPAN_MAGNIFY, TheValueOfSVGSVGElement_SVG_ZOOMANDPAN_MAGNIFYDoesntMatchWithImplementation);

    // Custom toString template
    functionTemplate->Set(v8AtomicString(isolate, "toString"), V8PerIsolateData::from(isolate)->toStringTemplate());
}

v8::Handle<v8::FunctionTemplate> V8SVGSVGElement::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), configureV8SVGSVGElementTemplate);
}

bool V8SVGSVGElement::hasInstance(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Handle<v8::Object> V8SVGSVGElement::findInstanceInPrototypeChain(v8::Handle<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SVGSVGElement* V8SVGSVGElement::toNativeWithTypeCheck(v8::Isolate* isolate, v8::Handle<v8::Value> value)
{
    return hasInstance(value, isolate) ? fromInternalPointer(v8::Handle<v8::Object>::Cast(value)->GetAlignedPointerFromInternalField(v8DOMWrapperObjectIndex)) : 0;
}

EventTarget* V8SVGSVGElement::toEventTarget(v8::Handle<v8::Object> object)
{
    return toNative(object);
}

v8::Handle<v8::Object> wrap(SVGSVGElement* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGSVGElement>(impl, isolate));
    return V8SVGSVGElement::createWrapper(impl, creationContext, isolate);
}

v8::Handle<v8::Object> V8SVGSVGElement::createWrapper(PassRefPtrWillBeRawPtr<SVGSVGElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl);
    ASSERT(!DOMDataStore::containsWrapper<V8SVGSVGElement>(impl.get(), isolate));
    if (ScriptWrappable::wrapperCanBeStoredInObject(impl.get())) {
        const WrapperTypeInfo* actualInfo = ScriptWrappable::fromObject(impl.get())->typeInfo();
        // Might be a XXXConstructor::wrapperTypeInfo instead of an XXX::wrapperTypeInfo. These will both have
        // the same object de-ref functions, though, so use that as the basis of the check.
        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(actualInfo->derefObjectFunction == wrapperTypeInfo.derefObjectFunction);
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &wrapperTypeInfo, toInternalPointer(impl.get()), isolate);
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextEnabledProperties(wrapper, impl.get(), isolate);
    V8DOMWrapper::associateObjectWithWrapper<V8SVGSVGElement>(impl, &wrapperTypeInfo, wrapper, isolate, WrapperConfiguration::Dependent);
    return wrapper;
}

void V8SVGSVGElement::derefObject(void* object)
{
#if !ENABLE(OILPAN)
    fromInternalPointer(object)->deref();
#endif // !ENABLE(OILPAN)
}

template<>
v8::Handle<v8::Value> toV8NoInline(SVGSVGElement* impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return toV8(impl, creationContext, isolate);
}

} // namespace WebCore
